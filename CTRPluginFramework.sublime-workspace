{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"T",
				"TARGET"
			],
			[
				"Up",
				"UpSampleUntilItsEnough"
			],
			[
				"lo",
				"locateSwapBuffer"
			],
			[
				"BMP",
				"BMPImage"
			],
			[
				"b",
				"bottomBackgroundImage"
			],
			[
				"Key",
				"KeyPressed"
			],
			[
				"UpS",
				"UpSampleThenCrop"
			],
			[
				"bit",
				"bitmapFileSize"
			],
			[
				"des",
				"destImage"
			],
			[
				"righ",
				"rightUnits"
			],
			[
				"rig",
				"right"
			],
			[
				"left",
				"leftUnits"
			],
			[
				"lef",
				"leftUnits"
			],
			[
				"spa",
				"spaceUnits"
			],
			[
				"sort",
				"sortByName"
			],
			[
				"text",
				"textColor"
			],
			[
				"sa",
				"spaceWidth"
			],
			[
				"_is",
				"_isReady"
			],
			[
				"_u",
				"_guideTB"
			],
			[
				"_Tri",
				"_TriggerGuide"
			],
			[
				"Plugin",
				"PluginMenu"
			],
			[
				"_",
				"_guideTB"
			],
			[
				"Menu",
				"MenuEntry"
			],
			[
				"li",
				"ListFolders"
			],
			[
				"Touch",
				"TouchCursor"
			],
			[
				"NO",
				"Notify"
			],
			[
				"ite",
				"iterTemp"
			],
			[
				"iter",
				"iterEnd"
			],
			[
				"er",
				"erase"
			],
			[
				"re",
				"removeQueue"
			],
			[
				"OSD",
				"OSDIter"
			],
			[
				"for",
				"CTRPluginFramework"
			],
			[
				"fra",
				"framebuf1"
			],
			[
				"framebu",
				"framebuf0"
			],
			[
				"fr",
				"framebuf0"
			],
			[
				"hid",
				"hidSharedMem"
			],
			[
				"Ha",
				"HandCursor15"
			],
			[
				"frameu",
				"framebuf2"
			],
			[
				"ZR",
				"ZRSecondButton"
			],
			[
				"ZL",
				"ZLFirstButton"
			],
			[
				"en",
				"entry"
			],
			[
				"entr",
				"entriesNb"
			],
			[
				"CS",
				"CStickToDPAD"
			],
			[
				"Inje",
				"Inject"
			],
			[
				"CSt",
				"CStickRight"
			],
			[
				"_keys",
				"_keysDown"
			],
			[
				"FS",
				"FSFILE_Close"
			],
			[
				"R",
				"R_FAILED"
			],
			[
				"keep",
				"keepRunning"
			],
			[
				"mainTH",
				"mainThreadHandle"
			],
			[
				"svc",
				"svcCreateThread"
			],
			[
				"th",
				"threadGetCurrent"
			],
			[
				"main",
				"mainThread"
			],
			[
				"ke",
				"keepRunning"
			],
			[
				"FSP",
				"FS_Path"
			],
			[
				"patt",
				"patternCheck"
			],
			[
				"file",
				"filename"
			],
			[
				"MAX",
				"PATH_MAX"
			],
			[
				"Init",
				"Initialize"
			],
			[
				"curr",
				"currentPID"
			],
			[
				"arm",
				"arm11kSetKProcessId"
			],
			[
				"cur",
				"currentKProcess"
			],
			[
				"kee",
				"keepThreadHandle"
			],
			[
				"h",
				"handle"
			],
			[
				"size",
				"sizeof"
			],
			[
				"no",
				"no_encounter_hold_start_instant_encounte"
			],
			[
				"che",
				"checkAddress"
			],
			[
				"fs",
				"fsPath"
			],
			[
				"uint",
				"uint16_t"
			],
			[
				"_sel",
				"_selector"
			],
			[
				"I",
				"ItemsCount"
			],
			[
				"Set",
				"SetState"
			],
			[
				"max",
				"maxWidth"
			],
			[
				"space",
				"spaceWidth"
			],
			[
				"Dra",
				"DrawRect2"
			],
			[
				"_t",
				"_noteTB"
			],
			[
				"_Render",
				"_Render_Menu"
			],
			[
				"note",
				"_noteTB"
			],
			[
				"_c",
				"_currentLine"
			],
			[
				"_star",
				"_starMode"
			],
			[
				"Icon",
				"IconCallback"
			],
			[
				"_uiPro",
				"_uiProperties"
			],
			[
				"add",
				"_AddFavoriteBtn"
			],
			[
				"fa",
				"fastScroll"
			],
			[
				"touch",
				"touchPos"
			],
			[
				"_sh",
				"_showStarredBtn"
			],
			[
				"IN",
				"IntVector"
			],
			[
				"Un",
				"UnlockExcaliburSword"
			],
			[
				"Info",
				"InfoFilled25"
			],
			[
				"Ad",
				"AddFavorite25"
			],
			[
				"Add",
				"AddFavoriteFilled25"
			],
			[
				"_left",
				"_leftFramebuffersV"
			],
			[
				"_Write",
				"_WriteRGBA4"
			],
			[
				"W",
				"_WriteBGR8"
			],
			[
				"row",
				"rowstride"
			],
			[
				"_Read",
				"_ReadRGBA8"
			],
			[
				"_Re",
				"_ReadRGBA8"
			],
			[
				"From",
				"FromFramebuffer"
			],
			[
				"gSP",
				"GSPGPU_FramebufferFormats"
			],
			[
				"GP",
				"GSPGPU_FramebufferFormats"
			],
			[
				"GSP",
				"GSPGPU_FramebufferFormats"
			],
			[
				"close",
				"closeIsTouch"
			],
			[
				"F",
				"FolderFilled"
			],
			[
				"Check",
				"CheckedCheckBox"
			],
			[
				"D",
				"DrawImg"
			],
			[
				"Chec",
				"CheckedCheckBox"
			],
			[
				"char",
				"charWidthInfo_s"
			],
			[
				"C",
				"CTRPluginFramework"
			],
			[
				"Draw",
				"DrawPixelP"
			],
			[
				"is",
				"isTouchDown"
			],
			[
				"push",
				"push_back"
			],
			[
				"bo",
				"borderColor"
			],
			[
				"pu",
				"push_back"
			],
			[
				"back",
				"background"
			],
			[
				"call",
				"callback"
			],
			[
				"pre",
				"pressedColor"
			],
			[
				"_cl",
				"_callback"
			],
			[
				"content",
				"contentColor"
			],
			[
				"Dpa",
				"DPadDown"
			],
			[
				"Dpad",
				"DPadLeft"
			],
			[
				"si",
				"_size"
			],
			[
				"fp",
				"fpQueue"
			],
			[
				"Get",
				"GetLeftFramebuffer"
			],
			[
				"Che",
				"CheckColor"
			],
			[
				"fill",
				"fillColor"
			],
			[
				"_le",
				"_leftTopCorner"
			],
			[
				"r",
				"rWidth"
			],
			[
				"fil",
				"fillColor"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Includes/CTRPluginFramework/GuideReader.hpp",
			"settings":
			{
				"buffer_size": 892,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#ifndef CTRPLUGINFRAMEWORK_PLUGINMENU_HPP\n#define CTRPLUGINFRAMEWORK_PLUGINMENU_HPP\n\n#include \"Vector.hpp\"\n#include \"Button.hpp\"\n#include \"ToggleButton.hpp\"\n#include \"CheckedButton.hpp\"\n#include \"Clock.hpp\"\n#include \"CTRPluginFramework/Graphics/TextBox.hpp\"\n#include \"CTRPluginFramework/GuideReader.hpp\"\n\n#include <queue>\n\nnamespace CTRPluginFramework\n{\n    class MenuEntry;\n    class MenuItem;\n    class MenuFolder;\n    class Event;\n    class Time;\n    class Clock;\n    class PluginMenu\n    {   \n\n    public:\n\n        PluginMenu(std::string name = \"Cheats\", std::string note = \"\");\n        ~PluginMenu(void);\n\n        void    Append(MenuItem *item);\n        int     Run(void);\n        void    Null(void);\n    private:\n\n        void    _Render_Menu(void);\n        void    _RenderTop(void);\n        void    _RenderBottom(void);\n        void    _ProcessEvent(Event &event);\n        void    _Update(Time delta);    \n\n        void    _TriggerEntry(void);\n        void    _StarItem(void);\n        void    _StarMode(void);\n        void    _DisplayNote(void);\n\n        std::vector<MenuEntry *>    _executeLoop;\n        std::queue<int>             _freeIndex;\n        MenuFolder                  *_folder;\n        MenuFolder                  *_starred;\n        bool                        _isOpen;\n        bool                        _starMode;\n\n        int                         _selector;\n        int                         _selectedTextSize;\n        float                       _maxScrollOffset;\n        float                       _scrollOffset;\n        Clock                       _scrollClock;\n        bool                        _reverseFlow;\n        bool                        _pluginRun;\n        IntVector                   _startLine;\n        IntVector                   _endLine;\n\n        Button<PluginMenu, void>          _gameGuideBtn;\n        CheckedButton<PluginMenu, void>   _showStarredBtn;\n        Button<PluginMenu, void>          _toolsBtn;\n        Button<PluginMenu, void>          _hidMapperBtn;\n        Button<PluginMenu, void>          _searchBtn;\n\n        ToggleButton<PluginMenu, void>      _AddFavoriteBtn;\n        ToggleButton<PluginMenu, void>      _InfoBtn;\n\n        TextBox                     *_noteTB;\n        GuideReader                 _guide;\n        void                        _TriggerGuide(void);\n        int                         _mode;\n    };\n}\n\n#endif",
			"file": "Includes/CTRPluginFramework/PluginMenu.hpp",
			"file_size": 2466,
			"file_write_time": 131310368100714224,
			"settings":
			{
				"buffer_size": 2391,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/Button.hpp",
			"settings":
			{
				"buffer_size": 4990,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/ToggleButton.hpp",
			"settings":
			{
				"buffer_size": 3006,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Directory.hpp",
			"settings":
			{
				"buffer_size": 3571,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Menu.hpp",
			"settings":
			{
				"buffer_size": 1297,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/TextBox.hpp",
			"settings":
			{
				"buffer_size": 1595,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/ctrulib/system/allocateHeaps.c",
			"settings":
			{
				"buffer_size": 1030,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/File.hpp",
			"settings":
			{
				"buffer_size": 5437,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\n #\n #  File            : CImg.h\n #                    ( C++ header file )\n #\n #  Description     : The C++ Template Image Processing Toolkit.\n #                    This file is the main component of the CImg Library project.\n #                    ( http://cimg.eu )\n #\n #  Project manager : David Tschumperle.\n #                    ( http://tschumperle.users.greyc.fr/ )\n #\n #                    A complete list of contributors is available in file 'README.txt'\n #                    distributed within the CImg package.\n #\n #  Licenses        : This file is 'dual-licensed', you have to choose one\n #                    of the two licenses below to apply.\n #\n #                    CeCILL-C\n #                    The CeCILL-C license is close to the GNU LGPL.\n #                    ( http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html )\n #\n #                or  CeCILL v2.0\n #                    The CeCILL license is compatible with the GNU GPL.\n #                    ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )\n #\n #  This software is governed either by the CeCILL or the CeCILL-C license\n #  under French law and abiding by the rules of distribution of free software.\n #  You can  use, modify and or redistribute the software under the terms of\n #  the CeCILL or CeCILL-C licenses as circulated by CEA, CNRS and INRIA\n #  at the following URL: \"http://www.cecill.info\".\n #\n #  As a counterpart to the access to the source code and  rights to copy,\n #  modify and redistribute granted by the license, users are provided only\n #  with a limited warranty  and the software's author,  the holder of the\n #  economic rights,  and the successive licensors  have only  limited\n #  liability.\n #\n #  In this respect, the user's attention is drawn to the risks associated\n #  with loading,  using,  modifying and/or developing or reproducing the\n #  software by the user in light of its specific status of free software,\n #  that may mean  that it is complicated to manipulate,  and  that  also\n #  therefore means  that it is reserved for developers  and  experienced\n #  professionals having in-depth computer knowledge. Users are therefore\n #  encouraged to load and test the software's suitability as regards their\n #  requirements in conditions enabling the security of their systems and/or\n #  data to be ensured and,  more generally, to use and operate it in the\n #  same conditions as regards security.\n #\n #  The fact that you are presently reading this means that you have had\n #  knowledge of the CeCILL and CeCILL-C licenses and that you accept its terms.\n #\n*/\n\n// Set version number of the library.\n#ifndef cimg_version\n#define cimg_version 200\n\n/*-----------------------------------------------------------\n #\n # Test and possibly auto-set CImg configuration variables\n # and include required headers.\n #\n # If you find that the default configuration variables are\n # not adapted to your system, you can override their values\n # before including the header file \"CImg.h\"\n # (use the #define directive).\n #\n ------------------------------------------------------------*/\n\n// Include standard C++ headers.\n// This is the minimal set of required headers to make CImg-based codes compile.\n#include <cstdio>\n#include <cstdlib>\n#include <cstdarg>\n#include <cstring>\n#include <cmath>\n#include <cfloat>\n#include <climits>\n#include <ctime>\n#include <exception>\n#include <algorithm>\n\n// Detect/configure OS variables.\n//\n// Define 'cimg_OS' to: '0' for an unknown OS (will try to minize library dependencies).\n//                      '1' for a Unix-like OS (Linux, Solaris, BSD, MacOSX, Irix, ...).\n//                      '2' for Microsoft Windows.\n//                      (auto-detection is performed if 'cimg_OS' is not set by the user).\n#ifndef cimg_OS\n#if defined(unix)        || defined(__unix)      || defined(__unix__) \\\n || defined(linux)       || defined(__linux)     || defined(__linux__) \\\n || defined(sun)         || defined(__sun) \\\n || defined(BSD)         || defined(__OpenBSD__) || defined(__NetBSD__) \\\n || defined(__FreeBSD__) || defined (__DragonFly__) \\\n || defined(sgi)         || defined(__sgi) \\\n || defined(__MACOSX__)  || defined(__APPLE__) \\\n || defined(__CYGWIN__)\n#define cimg_OS 1\n#elif defined(_MSC_VER) || defined(WIN32)  || defined(_WIN32) || defined(__WIN32__) \\\n   || defined(WIN64)    || defined(_WIN64) || defined(__WIN64__)\n#define cimg_OS 2\n#else\n#define cimg_OS 0\n#endif\n#elif !(cimg_OS==0 || cimg_OS==1 || cimg_OS==2)\n#error CImg Library: Invalid configuration variable 'cimg_OS'.\n#error (correct values are '0 = unknown OS', '1 = Unix-like OS', '2 = Microsoft Windows').\n#endif\n#ifndef cimg_date\n#define cimg_date __DATE__\n#endif\n#ifndef cimg_time\n#define cimg_time __TIME__\n#endif\n\n// Disable silly warnings on some Microsoft VC++ compilers.\n#ifdef _MSC_VER\n#pragma warning(push)\n#pragma warning(disable:4127)\n#pragma warning(disable:4244)\n#pragma warning(disable:4311)\n#pragma warning(disable:4312)\n#pragma warning(disable:4512)\n#pragma warning(disable:4571)\n#pragma warning(disable:4640)\n#pragma warning(disable:4706)\n#pragma warning(disable:4710)\n#pragma warning(disable:4800)\n#pragma warning(disable:4804)\n#pragma warning(disable:4820)\n#pragma warning(disable:4996)\n#define _CRT_SECURE_NO_DEPRECATE 1\n#define _CRT_SECURE_NO_WARNINGS 1\n#define _CRT_NONSTDC_NO_DEPRECATE 1\n#endif\n\n// Define correct string functions for each compiler and OS.\n#if cimg_OS==2 && defined(_MSC_VER)\n#define cimg_sscanf std::sscanf\n#define cimg_sprintf std::sprintf\n#define cimg_snprintf cimg::_snprintf\n#define cimg_vsnprintf cimg::_vsnprintf\n#else\n#include <stdio.h>\n#if defined(__MACOSX__) || defined(__APPLE__)\n#define cimg_sscanf cimg::_sscanf\n#define cimg_sprintf cimg::_sprintf\n#define cimg_snprintf cimg::_snprintf\n#define cimg_vsnprintf cimg::_vsnprintf\n#else\n#define cimg_sscanf std::sscanf\n#define cimg_sprintf std::sprintf\n#define cimg_snprintf snprintf\n#define cimg_vsnprintf vsnprintf\n#endif\n#endif\n\n// Include OS-specific headers.\n#if cimg_OS==1\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <fnmatch.h>\n#elif cimg_OS==2\n#ifndef std_fopen\n#define std_fopen cimg::win_fopen\n#endif\n#ifndef NOMINMAX\n#define NOMINMAX\n#endif\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n#include <windows.h>\n#ifndef _WIN32_IE\n#define _WIN32_IE 0x0400\n#endif\n#include <shlobj.h>\n#include <process.h>\n#include <io.h>\n#endif\n\n// Look for C++11 features.\n#ifndef cimg_use_cpp11\n#if __cplusplus>201100\n#define cimg_use_cpp11 1\n#else\n#define cimg_use_cpp11 0\n#endif\n#endif\n#if cimg_use_cpp11==1\n#include <initializer_list>\n#include <utility>\n#endif\n\n// Convenient macro to define pragma\n#ifdef _MSC_VER\n#define cimg_pragma(x) __pragma(x)\n#else\n#define cimg_pragma(x) _Pragma(#x)\n#endif\n\n// Define own types 'cimg_long/ulong' and 'cimg_int64/uint64' to ensure portability.\n// ( constrained to 'sizeof(cimg_ulong/cimg_long) = sizeof(void*)' and 'sizeof(cimg_int64/cimg_uint64)=8' ).\n#if cimg_OS==2\n#define cimg_uint64 unsigned __int64\n#define cimg_int64 __int64\n#define cimg_ulong UINT_PTR\n#define cimg_long INT_PTR\n#else\n#if UINTPTR_MAX==0xffffffff || defined(__arm__) || defined(_M_ARM)\n#define cimg_uint64 unsigned long long\n#define cimg_int64 long long\n#else\n#define cimg_uint64 unsigned long\n#define cimg_int64 long\n#endif\n#if defined(__arm__) || defined(_M_ARM)\n#define cimg_ulong unsigned long long\n#define cimg_long long long\n#else\n#define cimg_ulong unsigned long\n#define cimg_long long\n#endif\n#endif\n\n// Configure filename separator.\n//\n// Filename separator is set by default to '/', except for Windows where it is '\\'.\n#ifndef cimg_file_separator\n#if cimg_OS==2\n#define cimg_file_separator '\\\\'\n#else\n#define cimg_file_separator '/'\n#endif\n#endif\n\n// Configure verbosity of output messages.\n//\n// Define 'cimg_verbosity' to: '0' to hide library messages (quiet mode).\n//                             '1' to output library messages on the console.\n//                             '2' to output library messages on a basic dialog window (default behavior).\n//                             '3' to do as '1' + add extra warnings (may slow down the code!).\n//                             '4' to do as '2' + add extra warnings (may slow down the code!).\n//\n// Define 'cimg_strict_warnings' to replace warning messages by exception throwns.\n//\n// Define 'cimg_use_vt100' to allow output of color messages on VT100-compatible terminals.\n#ifndef cimg_verbosity\n#if cimg_OS==2\n#define cimg_verbosity 2\n#else\n#define cimg_verbosity 1\n#endif\n#elif !(cimg_verbosity==0 || cimg_verbosity==1 || cimg_verbosity==2 || cimg_verbosity==3 || cimg_verbosity==4)\n#error CImg Library: Configuration variable 'cimg_verbosity' is badly defined.\n#error (should be { 0=quiet | 1=console | 2=dialog | 3=console+warnings | 4=dialog+warnings }).\n#endif\n\n// Configure display framework.\n//\n// Define 'cimg_display' to: '0' to disable display capabilities.\n//                           '1' to use the X-Window framework (X11).\n//                           '2' to use the Microsoft GDI32 framework.\n#ifndef cimg_display\n#if cimg_OS==0\n#define cimg_display 0\n#elif cimg_OS==1\n#define cimg_display 1\n#elif cimg_OS==2\n#define cimg_display 2\n#endif\n#elif !(cimg_display==0 || cimg_display==1 || cimg_display==2)\n#error CImg Library: Configuration variable 'cimg_display' is badly defined.\n#error (should be { 0=none | 1=X-Window (X11) | 2=Microsoft GDI32 }).\n#endif\n\n// Configure the 'abort' signal handler (does nothing by default).\n// A typical signal handler can be defined in your own source like this:\n// #define cimg_abort_test() if (is_abort) throw CImgAbortException(\"\")\n//\n// where 'is_abort' is a boolean variable defined somewhere in your code and reachable in the method.\n// 'cimg_abort_test2()' does the same but is called more often (in inner loops).\n#if defined(cimg_abort_test) && defined(cimg_use_openmp)\n\n// Define abort macros to be used with OpenMP.\n#ifndef cimg_abort_init\n#define cimg_abort_init bool cimg_abort_go = true; cimg::unused(cimg_abort_go)\n#endif\n#ifndef cimg_abort_try\n#define cimg_abort_try if (cimg_abort_go) try\n#endif\n#ifndef cimg_abort_catch\n#define cimg_abort_catch() catch (CImgAbortException&) { cimg_pragma(omp atomic) cimg_abort_go&=false; }\n#endif\n#ifdef cimg_abort_test2\n#ifndef cimg_abort_try2\n#define cimg_abort_try2 cimg_abort_try\n#endif\n#ifndef cimg_abort_catch2\n#define cimg_abort_catch2() cimg_abort_catch()\n#endif\n#ifndef cimg_abort_catch_fill\n#define cimg_abort_catch_fill() \\\n  catch (CImgException& e) { cimg_pragma(omp critical) CImg<charT>::string(e._message).move_to(is_error); \\\n                             cimg_pragma(omp atomic) cimg_abort_go&=false; }\n#endif\n#endif\n\n#endif\n\n#ifndef cimg_abort_test\n#define cimg_abort_test()\n#endif\n#ifndef cimg_abort_test2\n#define cimg_abort_test2()\n#endif\n#ifndef cimg_abort_init\n#define cimg_abort_init\n#endif\n#ifndef cimg_abort_try\n#define cimg_abort_try\n#endif\n#ifndef cimg_abort_catch\n#define cimg_abort_catch()\n#endif\n#ifndef cimg_abort_try2\n#define cimg_abort_try2\n#endif\n#ifndef cimg_abort_catch2\n#define cimg_abort_catch2()\n#endif\n#ifndef cimg_abort_catch_fill\n#define cimg_abort_catch_fill()\n#endif\n#ifndef std_fopen\n#define std_fopen std::fopen\n#endif\n\n// Include display-specific headers.\n#if cimg_display==1\n#include <X11/Xlib.h>\n#include <X11/Xutil.h>\n#include <X11/keysym.h>\n#include <pthread.h>\n#ifdef cimg_use_xshm\n#include <sys/ipc.h>\n#include <sys/shm.h>\n#include <X11/extensions/XShm.h>\n#endif\n#ifdef cimg_use_xrandr\n#include <X11/extensions/Xrandr.h>\n#endif\n#endif\n#ifndef cimg_appname\n#define cimg_appname \"CImg\"\n#endif\n\n// Configure OpenMP support.\n// (http://www.openmp.org)\n//\n// Define 'cimg_use_openmp' to enable OpenMP support.\n//\n// OpenMP directives may be used in a (very) few CImg functions to get\n// advantages of multi-core CPUs.\n#ifdef cimg_use_openmp\n#include <omp.h>\n#define cimg_pragma_openmp(p) cimg_pragma(omp p)\n#else\n#define cimg_pragma_openmp(p)\n#endif\n\n// Configure OpenCV support.\n// (http://opencv.willowgarage.com/wiki/)\n//\n// Define 'cimg_use_opencv' to enable OpenCV support.\n//\n// OpenCV library may be used to access images from cameras\n// (see method 'CImg<T>::load_camera()').\n#ifdef cimg_use_opencv\n#ifdef True\n#undef True\n#define _cimg_redefine_True\n#endif\n#ifdef False\n#undef False\n#define _cimg_redefine_False\n#endif\n#include <cstddef>\n#include \"cv.h\"\n#include \"highgui.h\"\n#endif\n\n// Configure LibPNG support.\n// (http://www.libpng.org)\n//\n// Define 'cimg_use_png' to enable LibPNG support.\n//\n// PNG library may be used to get a native support of '.png' files.\n// (see methods 'CImg<T>::{load,save}_png()'.\n#ifdef cimg_use_png\nextern \"C\" {\n#include \"png.h\"\n}\n#endif\n\n// Configure LibJPEG support.\n// (http://en.wikipedia.org/wiki/Libjpeg)\n//\n// Define 'cimg_use_jpeg' to enable LibJPEG support.\n//\n// JPEG library may be used to get a native support of '.jpg' files.\n// (see methods 'CImg<T>::{load,save}_jpeg()').\n#ifdef cimg_use_jpeg\nextern \"C\" {\n#include \"jpeglib.h\"\n#include \"setjmp.h\"\n}\n#endif\n\n// Configure LibTIFF support.\n// (http://www.libtiff.org)\n//\n// Define 'cimg_use_tiff' to enable LibTIFF support.\n//\n// TIFF library may be used to get a native support of '.tif' files.\n// (see methods 'CImg[List]<T>::{load,save}_tiff()').\n#ifdef cimg_use_tiff\nextern \"C\" {\n#define uint64 uint64_hack_\n#define int64 int64_hack_\n#include \"tiffio.h\"\n#undef uint64\n#undef int64\n}\n#endif\n\n// Configure LibMINC2 support.\n// (http://en.wikibooks.org/wiki/MINC/Reference/MINC2.0_File_Format_Reference)\n//\n// Define 'cimg_use_minc2' to enable LibMINC2 support.\n//\n// MINC2 library may be used to get a native support of '.mnc' files.\n// (see methods 'CImg<T>::{load,save}_minc2()').\n#ifdef cimg_use_minc2\n#include \"minc_io_simple_volume.h\"\n#include \"minc_1_simple.h\"\n#include \"minc_1_simple_rw.h\"\n#endif\n\n// Configure Zlib support.\n// (http://www.zlib.net)\n//\n// Define 'cimg_use_zlib' to enable Zlib support.\n//\n// Zlib library may be used to allow compressed data in '.cimgz' files\n// (see methods 'CImg[List]<T>::{load,save}_cimg()').\n#ifdef cimg_use_zlib\nextern \"C\" {\n#include \"zlib.h\"\n}\n#endif\n\n// Configure libcurl support.\n// (http://curl.haxx.se/libcurl/)\n//\n// Define 'cimg_use_curl' to enable libcurl support.\n//\n// Libcurl may be used to get a native support of file downloading from the network.\n// (see method 'cimg::load_network()'.)\n#ifdef cimg_use_curl\n#include \"curl/curl.h\"\n#endif\n\n// Configure Magick++ support.\n// (http://www.imagemagick.org/Magick++)\n//\n// Define 'cimg_use_magick' to enable Magick++ support.\n//\n// Magick++ library may be used to get a native support of various image file formats.\n// (see methods 'CImg<T>::{load,save}()').\n#ifdef cimg_use_magick\n#include \"Magick++.h\"\n#endif\n\n// Configure FFTW3 support.\n// (http://www.fftw.org)\n//\n// Define 'cimg_use_fftw3' to enable libFFTW3 support.\n//\n// FFTW3 library may be used to efficiently compute the Fast Fourier Transform\n// of image data, without restriction on the image size.\n// (see method 'CImg[List]<T>::FFT()').\n#ifdef cimg_use_fftw3\nextern \"C\" {\n#include \"fftw3.h\"\n}\n#endif\n\n// Configure LibBoard support.\n// (http://libboard.sourceforge.net/)\n//\n// Define 'cimg_use_board' to enable Board support.\n//\n// Board library may be used to draw 3d objects in vector-graphics canvas\n// that can be saved as '.ps' or '.svg' files afterwards.\n// (see method 'CImg<T>::draw_object3d()').\n#ifdef cimg_use_board\n#ifdef None\n#undef None\n#define _cimg_redefine_None\n#endif\n#include \"Board.h\"\n#endif\n\n// Configure OpenEXR support.\n// (http://www.openexr.com/)\n//\n// Define 'cimg_use_openexr' to enable OpenEXR support.\n//\n// OpenEXR library may be used to get a native support of '.exr' files.\n// (see methods 'CImg<T>::{load,save}_exr()').\n#ifdef cimg_use_openexr\n#include \"ImfRgbaFile.h\"\n#include \"ImfInputFile.h\"\n#include \"ImfChannelList.h\"\n#include \"ImfMatrixAttribute.h\"\n#include \"ImfArray.h\"\n#endif\n\n// Configure TinyEXR support.\n// (https://github.com/syoyo/tinyexr)\n//\n// Define 'cimg_use_tinyexr' to enable TinyEXR support.\n//\n// TinyEXR is a small, single header-only library to load and save OpenEXR(.exr) images.\n#ifdef cimg_use_tinyexr\n#ifndef TINYEXR_IMPLEMENTATION\n#define TINYEXR_IMPLEMENTATION\n#endif\n#include \"tinyexr.h\"\n#endif\n\n// Lapack configuration.\n// (http://www.netlib.org/lapack)\n//\n// Define 'cimg_use_lapack' to enable LAPACK support.\n//\n// Lapack library may be used in several CImg methods to speed up\n// matrix computations (eigenvalues, inverse, ...).\n#ifdef cimg_use_lapack\nextern \"C\" {\n  extern void sgetrf_(int*, int*, float*, int*, int*, int*);\n  extern void sgetri_(int*, float*, int*, int*, float*, int*, int*);\n  extern void sgetrs_(char*, int*, int*, float*, int*, int*, float*, int*, int*);\n  extern void sgesvd_(char*, char*, int*, int*, float*, int*, float*, float*, int*, float*, int*, float*, int*, int*);\n  extern void ssyev_(char*, char*, int*, float*, int*, float*, float*, int*, int*);\n  extern void dgetrf_(int*, int*, double*, int*, int*, int*);\n  extern void dgetri_(int*, double*, int*, int*, double*, int*, int*);\n  extern void dgetrs_(char*, int*, int*, double*, int*, int*, double*, int*, int*);\n  extern void dgesvd_(char*, char*, int*, int*, double*, int*, double*, double*,\n                      int*, double*, int*, double*, int*, int*);\n  extern void dsyev_(char*, char*, int*, double*, int*, double*, double*, int*, int*);\n  extern void dgels_(char*, int*,int*,int*,double*,int*,double*,int*,double*,int*,int*);\n  extern void sgels_(char*, int*,int*,int*,float*,int*,float*,int*,float*,int*,int*);\n}\n#endif\n\n// Check if min/max/PI macros are defined.\n//\n// CImg does not compile if macros 'min', 'max' or 'PI' are defined,\n// because it redefines functions min(), max() and const variable PI in the cimg:: namespace.\n// so it '#undef' these macros if necessary, and restore them to reasonable\n// values at the end of this file.\n#ifdef min\n#undef min\n#define _cimg_redefine_min\n#endif\n#ifdef max\n#undef max\n#define _cimg_redefine_max\n#endif\n#ifdef PI\n#undef PI\n#define _cimg_redefine_PI\n#endif\n\n// Define 'cimg_library' namespace suffix.\n//\n// You may want to add a suffix to the 'cimg_library' namespace, for instance if you need to work\n// with several versions of the library at the same time.\n#ifdef cimg_namespace_suffix\n#define __cimg_library_suffixed(s) cimg_library_##s\n#define _cimg_library_suffixed(s) __cimg_library_suffixed(s)\n#define cimg_library_suffixed _cimg_library_suffixed(cimg_namespace_suffix)\n#else\n#define cimg_library_suffixed cimg_library\n#endif\n\n/*------------------------------------------------------------------------------\n  #\n  # Define user-friendly macros.\n  #\n  # These CImg macros are prefixed by 'cimg_' and can be used safely in your own\n  # code. They are useful to parse command line options, or to write image loops.\n  #\n  ------------------------------------------------------------------------------*/\n\n// Macros to define program usage, and retrieve command line arguments.\n#define cimg_usage(usage) cimg_library_suffixed::cimg::option((char*)0,argc,argv,(char*)0,usage,false)\n#define cimg_help(str) cimg_library_suffixed::cimg::option((char*)0,argc,argv,str,(char*)0)\n#define cimg_option(name,defaut,usage) cimg_library_suffixed::cimg::option(name,argc,argv,defaut,usage)\n\n// Macros to define and manipulate local neighborhoods.\n#define CImg_2x2(I,T) T I[4]; \\\n                      T& I##cc = I[0]; T& I##nc = I[1]; \\\n                      T& I##cn = I[2]; T& I##nn = I[3]; \\\n                      I##cc = I##nc = \\\n                      I##cn = I##nn = 0\n\n#define CImg_3x3(I,T) T I[9]; \\\n                      T& I##pp = I[0]; T& I##cp = I[1]; T& I##np = I[2]; \\\n                      T& I##pc = I[3]; T& I##cc = I[4]; T& I##nc = I[5]; \\\n                      T& I##pn = I[6]; T& I##cn = I[7]; T& I##nn = I[8]; \\\n                      I##pp = I##cp = I##np = \\\n                      I##pc = I##cc = I##nc = \\\n                      I##pn = I##cn = I##nn = 0\n\n#define CImg_4x4(I,T) T I[16]; \\\n                      T& I##pp = I[0]; T& I##cp = I[1]; T& I##np = I[2]; T& I##ap = I[3]; \\\n                      T& I##pc = I[4]; T& I##cc = I[5]; T& I##nc = I[6]; T& I##ac = I[7]; \\\n                      T& I##pn = I[8]; T& I##cn = I[9]; T& I##nn = I[10]; T& I##an = I[11]; \\\n                      T& I##pa = I[12]; T& I##ca = I[13]; T& I##na = I[14]; T& I##aa = I[15]; \\\n                      I##pp = I##cp = I##np = I##ap = \\\n                      I##pc = I##cc = I##nc = I##ac = \\\n                      I##pn = I##cn = I##nn = I##an = \\\n                      I##pa = I##ca = I##na = I##aa = 0\n\n#define CImg_5x5(I,T) T I[25]; \\\n                      T& I##bb = I[0]; T& I##pb = I[1]; T& I##cb = I[2]; T& I##nb = I[3]; T& I##ab = I[4]; \\\n                      T& I##bp = I[5]; T& I##pp = I[6]; T& I##cp = I[7]; T& I##np = I[8]; T& I##ap = I[9]; \\\n                      T& I##bc = I[10]; T& I##pc = I[11]; T& I##cc = I[12]; T& I##nc = I[13]; T& I##ac = I[14]; \\\n                      T& I##bn = I[15]; T& I##pn = I[16]; T& I##cn = I[17]; T& I##nn = I[18]; T& I##an = I[19]; \\\n                      T& I##ba = I[20]; T& I##pa = I[21]; T& I##ca = I[22]; T& I##na = I[23]; T& I##aa = I[24]; \\\n                      I##bb = I##pb = I##cb = I##nb = I##ab = \\\n                      I##bp = I##pp = I##cp = I##np = I##ap = \\\n                      I##bc = I##pc = I##cc = I##nc = I##ac = \\\n                      I##bn = I##pn = I##cn = I##nn = I##an = \\\n                      I##ba = I##pa = I##ca = I##na = I##aa = 0\n\n#define CImg_2x2x2(I,T) T I[8]; \\\n                      T& I##ccc = I[0]; T& I##ncc = I[1]; \\\n                      T& I##cnc = I[2]; T& I##nnc = I[3]; \\\n                      T& I##ccn = I[4]; T& I##ncn = I[5]; \\\n                      T& I##cnn = I[6]; T& I##nnn = I[7]; \\\n                      I##ccc = I##ncc = \\\n                      I##cnc = I##nnc = \\\n                      I##ccn = I##ncn = \\\n                      I##cnn = I##nnn = 0\n\n#define CImg_3x3x3(I,T) T I[27]; \\\n                      T& I##ppp = I[0]; T& I##cpp = I[1]; T& I##npp = I[2]; \\\n                      T& I##pcp = I[3]; T& I##ccp = I[4]; T& I##ncp = I[5]; \\\n                      T& I##pnp = I[6]; T& I##cnp = I[7]; T& I##nnp = I[8]; \\\n                      T& I##ppc = I[9]; T& I##cpc = I[10]; T& I##npc = I[11]; \\\n                      T& I##pcc = I[12]; T& I##ccc = I[13]; T& I##ncc = I[14]; \\\n                      T& I##pnc = I[15]; T& I##cnc = I[16]; T& I##nnc = I[17]; \\\n                      T& I##ppn = I[18]; T& I##cpn = I[19]; T& I##npn = I[20]; \\\n                      T& I##pcn = I[21]; T& I##ccn = I[22]; T& I##ncn = I[23]; \\\n                      T& I##pnn = I[24]; T& I##cnn = I[25]; T& I##nnn = I[26]; \\\n                      I##ppp = I##cpp = I##npp = \\\n                      I##pcp = I##ccp = I##ncp = \\\n                      I##pnp = I##cnp = I##nnp = \\\n                      I##ppc = I##cpc = I##npc = \\\n                      I##pcc = I##ccc = I##ncc = \\\n                      I##pnc = I##cnc = I##nnc = \\\n                      I##ppn = I##cpn = I##npn = \\\n                      I##pcn = I##ccn = I##ncn = \\\n                      I##pnn = I##cnn = I##nnn = 0\n\n#define cimg_get2x2(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(x,y,z,c), I[1] = (T)(img)(_n1##x,y,z,c), I[2] = (T)(img)(x,_n1##y,z,c), \\\n  I[3] = (T)(img)(_n1##x,_n1##y,z,c)\n\n#define cimg_get3x3(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p1##x,_p1##y,z,c), I[1] = (T)(img)(x,_p1##y,z,c), I[2] = (T)(img)(_n1##x,_p1##y,z,c), \\\n  I[3] = (T)(img)(_p1##x,y,z,c), I[4] = (T)(img)(x,y,z,c), I[5] = (T)(img)(_n1##x,y,z,c), \\\n  I[6] = (T)(img)(_p1##x,_n1##y,z,c), I[7] = (T)(img)(x,_n1##y,z,c), I[8] = (T)(img)(_n1##x,_n1##y,z,c)\n\n#define cimg_get4x4(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p1##x,_p1##y,z,c), I[1] = (T)(img)(x,_p1##y,z,c), I[2] = (T)(img)(_n1##x,_p1##y,z,c), \\\n  I[3] = (T)(img)(_n2##x,_p1##y,z,c), I[4] = (T)(img)(_p1##x,y,z,c), I[5] = (T)(img)(x,y,z,c), \\\n  I[6] = (T)(img)(_n1##x,y,z,c), I[7] = (T)(img)(_n2##x,y,z,c), I[8] = (T)(img)(_p1##x,_n1##y,z,c), \\\n  I[9] = (T)(img)(x,_n1##y,z,c), I[10] = (T)(img)(_n1##x,_n1##y,z,c), I[11] = (T)(img)(_n2##x,_n1##y,z,c), \\\n  I[12] = (T)(img)(_p1##x,_n2##y,z,c), I[13] = (T)(img)(x,_n2##y,z,c), I[14] = (T)(img)(_n1##x,_n2##y,z,c), \\\n  I[15] = (T)(img)(_n2##x,_n2##y,z,c)\n\n#define cimg_get5x5(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p2##x,_p2##y,z,c), I[1] = (T)(img)(_p1##x,_p2##y,z,c), I[2] = (T)(img)(x,_p2##y,z,c), \\\n  I[3] = (T)(img)(_n1##x,_p2##y,z,c), I[4] = (T)(img)(_n2##x,_p2##y,z,c), I[5] = (T)(img)(_p2##x,_p1##y,z,c), \\\n  I[6] = (T)(img)(_p1##x,_p1##y,z,c), I[7] = (T)(img)(x,_p1##y,z,c), I[8] = (T)(img)(_n1##x,_p1##y,z,c), \\\n  I[9] = (T)(img)(_n2##x,_p1##y,z,c), I[10] = (T)(img)(_p2##x,y,z,c), I[11] = (T)(img)(_p1##x,y,z,c), \\\n  I[12] = (T)(img)(x,y,z,c), I[13] = (T)(img)(_n1##x,y,z,c), I[14] = (T)(img)(_n2##x,y,z,c), \\\n  I[15] = (T)(img)(_p2##x,_n1##y,z,c), I[16] = (T)(img)(_p1##x,_n1##y,z,c), I[17] = (T)(img)(x,_n1##y,z,c), \\\n  I[18] = (T)(img)(_n1##x,_n1##y,z,c), I[19] = (T)(img)(_n2##x,_n1##y,z,c), I[20] = (T)(img)(_p2##x,_n2##y,z,c), \\\n  I[21] = (T)(img)(_p1##x,_n2##y,z,c), I[22] = (T)(img)(x,_n2##y,z,c), I[23] = (T)(img)(_n1##x,_n2##y,z,c), \\\n  I[24] = (T)(img)(_n2##x,_n2##y,z,c)\n\n#define cimg_get6x6(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p2##x,_p2##y,z,c), I[1] = (T)(img)(_p1##x,_p2##y,z,c), I[2] = (T)(img)(x,_p2##y,z,c), \\\n  I[3] = (T)(img)(_n1##x,_p2##y,z,c), I[4] = (T)(img)(_n2##x,_p2##y,z,c), I[5] = (T)(img)(_n3##x,_p2##y,z,c), \\\n  I[6] = (T)(img)(_p2##x,_p1##y,z,c), I[7] = (T)(img)(_p1##x,_p1##y,z,c), I[8] = (T)(img)(x,_p1##y,z,c), \\\n  I[9] = (T)(img)(_n1##x,_p1##y,z,c), I[10] = (T)(img)(_n2##x,_p1##y,z,c), I[11] = (T)(img)(_n3##x,_p1##y,z,c), \\\n  I[12] = (T)(img)(_p2##x,y,z,c), I[13] = (T)(img)(_p1##x,y,z,c), I[14] = (T)(img)(x,y,z,c), \\\n  I[15] = (T)(img)(_n1##x,y,z,c), I[16] = (T)(img)(_n2##x,y,z,c), I[17] = (T)(img)(_n3##x,y,z,c), \\\n  I[18] = (T)(img)(_p2##x,_n1##y,z,c), I[19] = (T)(img)(_p1##x,_n1##y,z,c), I[20] = (T)(img)(x,_n1##y,z,c), \\\n  I[21] = (T)(img)(_n1##x,_n1##y,z,c), I[22] = (T)(img)(_n2##x,_n1##y,z,c), I[23] = (T)(img)(_n3##x,_n1##y,z,c), \\\n  I[24] = (T)(img)(_p2##x,_n2##y,z,c), I[25] = (T)(img)(_p1##x,_n2##y,z,c), I[26] = (T)(img)(x,_n2##y,z,c), \\\n  I[27] = (T)(img)(_n1##x,_n2##y,z,c), I[28] = (T)(img)(_n2##x,_n2##y,z,c), I[29] = (T)(img)(_n3##x,_n2##y,z,c), \\\n  I[30] = (T)(img)(_p2##x,_n3##y,z,c), I[31] = (T)(img)(_p1##x,_n3##y,z,c), I[32] = (T)(img)(x,_n3##y,z,c), \\\n  I[33] = (T)(img)(_n1##x,_n3##y,z,c), I[34] = (T)(img)(_n2##x,_n3##y,z,c), I[35] = (T)(img)(_n3##x,_n3##y,z,c)\n\n#define cimg_get7x7(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p3##x,_p3##y,z,c), I[1] = (T)(img)(_p2##x,_p3##y,z,c), I[2] = (T)(img)(_p1##x,_p3##y,z,c), \\\n  I[3] = (T)(img)(x,_p3##y,z,c), I[4] = (T)(img)(_n1##x,_p3##y,z,c), I[5] = (T)(img)(_n2##x,_p3##y,z,c), \\\n  I[6] = (T)(img)(_n3##x,_p3##y,z,c), I[7] = (T)(img)(_p3##x,_p2##y,z,c), I[8] = (T)(img)(_p2##x,_p2##y,z,c), \\\n  I[9] = (T)(img)(_p1##x,_p2##y,z,c), I[10] = (T)(img)(x,_p2##y,z,c), I[11] = (T)(img)(_n1##x,_p2##y,z,c), \\\n  I[12] = (T)(img)(_n2##x,_p2##y,z,c), I[13] = (T)(img)(_n3##x,_p2##y,z,c), I[14] = (T)(img)(_p3##x,_p1##y,z,c), \\\n  I[15] = (T)(img)(_p2##x,_p1##y,z,c), I[16] = (T)(img)(_p1##x,_p1##y,z,c), I[17] = (T)(img)(x,_p1##y,z,c), \\\n  I[18] = (T)(img)(_n1##x,_p1##y,z,c), I[19] = (T)(img)(_n2##x,_p1##y,z,c), I[20] = (T)(img)(_n3##x,_p1##y,z,c), \\\n  I[21] = (T)(img)(_p3##x,y,z,c), I[22] = (T)(img)(_p2##x,y,z,c), I[23] = (T)(img)(_p1##x,y,z,c), \\\n  I[24] = (T)(img)(x,y,z,c), I[25] = (T)(img)(_n1##x,y,z,c), I[26] = (T)(img)(_n2##x,y,z,c), \\\n  I[27] = (T)(img)(_n3##x,y,z,c), I[28] = (T)(img)(_p3##x,_n1##y,z,c), I[29] = (T)(img)(_p2##x,_n1##y,z,c), \\\n  I[30] = (T)(img)(_p1##x,_n1##y,z,c), I[31] = (T)(img)(x,_n1##y,z,c), I[32] = (T)(img)(_n1##x,_n1##y,z,c), \\\n  I[33] = (T)(img)(_n2##x,_n1##y,z,c), I[34] = (T)(img)(_n3##x,_n1##y,z,c), I[35] = (T)(img)(_p3##x,_n2##y,z,c), \\\n  I[36] = (T)(img)(_p2##x,_n2##y,z,c), I[37] = (T)(img)(_p1##x,_n2##y,z,c), I[38] = (T)(img)(x,_n2##y,z,c), \\\n  I[39] = (T)(img)(_n1##x,_n2##y,z,c), I[40] = (T)(img)(_n2##x,_n2##y,z,c), I[41] = (T)(img)(_n3##x,_n2##y,z,c), \\\n  I[42] = (T)(img)(_p3##x,_n3##y,z,c), I[43] = (T)(img)(_p2##x,_n3##y,z,c), I[44] = (T)(img)(_p1##x,_n3##y,z,c), \\\n  I[45] = (T)(img)(x,_n3##y,z,c), I[46] = (T)(img)(_n1##x,_n3##y,z,c), I[47] = (T)(img)(_n2##x,_n3##y,z,c), \\\n  I[48] = (T)(img)(_n3##x,_n3##y,z,c)\n\n#define cimg_get8x8(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p3##x,_p3##y,z,c), I[1] = (T)(img)(_p2##x,_p3##y,z,c), I[2] = (T)(img)(_p1##x,_p3##y,z,c), \\\n  I[3] = (T)(img)(x,_p3##y,z,c), I[4] = (T)(img)(_n1##x,_p3##y,z,c), I[5] = (T)(img)(_n2##x,_p3##y,z,c), \\\n  I[6] = (T)(img)(_n3##x,_p3##y,z,c), I[7] = (T)(img)(_n4##x,_p3##y,z,c), I[8] = (T)(img)(_p3##x,_p2##y,z,c), \\\n  I[9] = (T)(img)(_p2##x,_p2##y,z,c), I[10] = (T)(img)(_p1##x,_p2##y,z,c), I[11] = (T)(img)(x,_p2##y,z,c), \\\n  I[12] = (T)(img)(_n1##x,_p2##y,z,c), I[13] = (T)(img)(_n2##x,_p2##y,z,c), I[14] = (T)(img)(_n3##x,_p2##y,z,c), \\\n  I[15] = (T)(img)(_n4##x,_p2##y,z,c), I[16] = (T)(img)(_p3##x,_p1##y,z,c), I[17] = (T)(img)(_p2##x,_p1##y,z,c), \\\n  I[18] = (T)(img)(_p1##x,_p1##y,z,c), I[19] = (T)(img)(x,_p1##y,z,c), I[20] = (T)(img)(_n1##x,_p1##y,z,c), \\\n  I[21] = (T)(img)(_n2##x,_p1##y,z,c), I[22] = (T)(img)(_n3##x,_p1##y,z,c), I[23] = (T)(img)(_n4##x,_p1##y,z,c), \\\n  I[24] = (T)(img)(_p3##x,y,z,c), I[25] = (T)(img)(_p2##x,y,z,c), I[26] = (T)(img)(_p1##x,y,z,c), \\\n  I[27] = (T)(img)(x,y,z,c), I[28] = (T)(img)(_n1##x,y,z,c), I[29] = (T)(img)(_n2##x,y,z,c), \\\n  I[30] = (T)(img)(_n3##x,y,z,c), I[31] = (T)(img)(_n4##x,y,z,c), I[32] = (T)(img)(_p3##x,_n1##y,z,c), \\\n  I[33] = (T)(img)(_p2##x,_n1##y,z,c), I[34] = (T)(img)(_p1##x,_n1##y,z,c), I[35] = (T)(img)(x,_n1##y,z,c), \\\n  I[36] = (T)(img)(_n1##x,_n1##y,z,c), I[37] = (T)(img)(_n2##x,_n1##y,z,c), I[38] = (T)(img)(_n3##x,_n1##y,z,c), \\\n  I[39] = (T)(img)(_n4##x,_n1##y,z,c), I[40] = (T)(img)(_p3##x,_n2##y,z,c), I[41] = (T)(img)(_p2##x,_n2##y,z,c), \\\n  I[42] = (T)(img)(_p1##x,_n2##y,z,c), I[43] = (T)(img)(x,_n2##y,z,c), I[44] = (T)(img)(_n1##x,_n2##y,z,c), \\\n  I[45] = (T)(img)(_n2##x,_n2##y,z,c), I[46] = (T)(img)(_n3##x,_n2##y,z,c), I[47] = (T)(img)(_n4##x,_n2##y,z,c), \\\n  I[48] = (T)(img)(_p3##x,_n3##y,z,c), I[49] = (T)(img)(_p2##x,_n3##y,z,c), I[50] = (T)(img)(_p1##x,_n3##y,z,c), \\\n  I[51] = (T)(img)(x,_n3##y,z,c), I[52] = (T)(img)(_n1##x,_n3##y,z,c), I[53] = (T)(img)(_n2##x,_n3##y,z,c), \\\n  I[54] = (T)(img)(_n3##x,_n3##y,z,c), I[55] = (T)(img)(_n4##x,_n3##y,z,c), I[56] = (T)(img)(_p3##x,_n4##y,z,c), \\\n  I[57] = (T)(img)(_p2##x,_n4##y,z,c), I[58] = (T)(img)(_p1##x,_n4##y,z,c), I[59] = (T)(img)(x,_n4##y,z,c), \\\n  I[60] = (T)(img)(_n1##x,_n4##y,z,c), I[61] = (T)(img)(_n2##x,_n4##y,z,c), I[62] = (T)(img)(_n3##x,_n4##y,z,c), \\\n  I[63] = (T)(img)(_n4##x,_n4##y,z,c);\n\n#define cimg_get9x9(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p4##x,_p4##y,z,c), I[1] = (T)(img)(_p3##x,_p4##y,z,c), I[2] = (T)(img)(_p2##x,_p4##y,z,c), \\\n  I[3] = (T)(img)(_p1##x,_p4##y,z,c), I[4] = (T)(img)(x,_p4##y,z,c), I[5] = (T)(img)(_n1##x,_p4##y,z,c), \\\n  I[6] = (T)(img)(_n2##x,_p4##y,z,c), I[7] = (T)(img)(_n3##x,_p4##y,z,c), I[8] = (T)(img)(_n4##x,_p4##y,z,c), \\\n  I[9] = (T)(img)(_p4##x,_p3##y,z,c), I[10] = (T)(img)(_p3##x,_p3##y,z,c), I[11] = (T)(img)(_p2##x,_p3##y,z,c), \\\n  I[12] = (T)(img)(_p1##x,_p3##y,z,c), I[13] = (T)(img)(x,_p3##y,z,c), I[14] = (T)(img)(_n1##x,_p3##y,z,c), \\\n  I[15] = (T)(img)(_n2##x,_p3##y,z,c), I[16] = (T)(img)(_n3##x,_p3##y,z,c), I[17] = (T)(img)(_n4##x,_p3##y,z,c), \\\n  I[18] = (T)(img)(_p4##x,_p2##y,z,c), I[19] = (T)(img)(_p3##x,_p2##y,z,c), I[20] = (T)(img)(_p2##x,_p2##y,z,c), \\\n  I[21] = (T)(img)(_p1##x,_p2##y,z,c), I[22] = (T)(img)(x,_p2##y,z,c), I[23] = (T)(img)(_n1##x,_p2##y,z,c), \\\n  I[24] = (T)(img)(_n2##x,_p2##y,z,c), I[25] = (T)(img)(_n3##x,_p2##y,z,c), I[26] = (T)(img)(_n4##x,_p2##y,z,c), \\\n  I[27] = (T)(img)(_p4##x,_p1##y,z,c), I[28] = (T)(img)(_p3##x,_p1##y,z,c), I[29] = (T)(img)(_p2##x,_p1##y,z,c), \\\n  I[30] = (T)(img)(_p1##x,_p1##y,z,c), I[31] = (T)(img)(x,_p1##y,z,c), I[32] = (T)(img)(_n1##x,_p1##y,z,c), \\\n  I[33] = (T)(img)(_n2##x,_p1##y,z,c), I[34] = (T)(img)(_n3##x,_p1##y,z,c), I[35] = (T)(img)(_n4##x,_p1##y,z,c), \\\n  I[36] = (T)(img)(_p4##x,y,z,c), I[37] = (T)(img)(_p3##x,y,z,c), I[38] = (T)(img)(_p2##x,y,z,c), \\\n  I[39] = (T)(img)(_p1##x,y,z,c), I[40] = (T)(img)(x,y,z,c), I[41] = (T)(img)(_n1##x,y,z,c), \\\n  I[42] = (T)(img)(_n2##x,y,z,c), I[43] = (T)(img)(_n3##x,y,z,c), I[44] = (T)(img)(_n4##x,y,z,c), \\\n  I[45] = (T)(img)(_p4##x,_n1##y,z,c), I[46] = (T)(img)(_p3##x,_n1##y,z,c), I[47] = (T)(img)(_p2##x,_n1##y,z,c), \\\n  I[48] = (T)(img)(_p1##x,_n1##y,z,c), I[49] = (T)(img)(x,_n1##y,z,c), I[50] = (T)(img)(_n1##x,_n1##y,z,c), \\\n  I[51] = (T)(img)(_n2##x,_n1##y,z,c), I[52] = (T)(img)(_n3##x,_n1##y,z,c), I[53] = (T)(img)(_n4##x,_n1##y,z,c), \\\n  I[54] = (T)(img)(_p4##x,_n2##y,z,c), I[55] = (T)(img)(_p3##x,_n2##y,z,c), I[56] = (T)(img)(_p2##x,_n2##y,z,c), \\\n  I[57] = (T)(img)(_p1##x,_n2##y,z,c), I[58] = (T)(img)(x,_n2##y,z,c), I[59] = (T)(img)(_n1##x,_n2##y,z,c), \\\n  I[60] = (T)(img)(_n2##x,_n2##y,z,c), I[61] = (T)(img)(_n3##x,_n2##y,z,c), I[62] = (T)(img)(_n4##x,_n2##y,z,c), \\\n  I[63] = (T)(img)(_p4##x,_n3##y,z,c), I[64] = (T)(img)(_p3##x,_n3##y,z,c), I[65] = (T)(img)(_p2##x,_n3##y,z,c), \\\n  I[66] = (T)(img)(_p1##x,_n3##y,z,c), I[67] = (T)(img)(x,_n3##y,z,c), I[68] = (T)(img)(_n1##x,_n3##y,z,c), \\\n  I[69] = (T)(img)(_n2##x,_n3##y,z,c), I[70] = (T)(img)(_n3##x,_n3##y,z,c), I[71] = (T)(img)(_n4##x,_n3##y,z,c), \\\n  I[72] = (T)(img)(_p4##x,_n4##y,z,c), I[73] = (T)(img)(_p3##x,_n4##y,z,c), I[74] = (T)(img)(_p2##x,_n4##y,z,c), \\\n  I[75] = (T)(img)(_p1##x,_n4##y,z,c), I[76] = (T)(img)(x,_n4##y,z,c), I[77] = (T)(img)(_n1##x,_n4##y,z,c), \\\n  I[78] = (T)(img)(_n2##x,_n4##y,z,c), I[79] = (T)(img)(_n3##x,_n4##y,z,c), I[80] = (T)(img)(_n4##x,_n4##y,z,c)\n\n#define cimg_get2x2x2(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(x,y,z,c), I[1] = (T)(img)(_n1##x,y,z,c), I[2] = (T)(img)(x,_n1##y,z,c), \\\n  I[3] = (T)(img)(_n1##x,_n1##y,z,c), I[4] = (T)(img)(x,y,_n1##z,c), I[5] = (T)(img)(_n1##x,y,_n1##z,c), \\\n  I[6] = (T)(img)(x,_n1##y,_n1##z,c), I[7] = (T)(img)(_n1##x,_n1##y,_n1##z,c)\n\n#define cimg_get3x3x3(img,x,y,z,c,I,T) \\\n  I[0] = (T)(img)(_p1##x,_p1##y,_p1##z,c), I[1] = (T)(img)(x,_p1##y,_p1##z,c), \\\n  I[2] = (T)(img)(_n1##x,_p1##y,_p1##z,c), I[3] = (T)(img)(_p1##x,y,_p1##z,c), I[4] = (T)(img)(x,y,_p1##z,c), \\\n  I[5] = (T)(img)(_n1##x,y,_p1##z,c), I[6] = (T)(img)(_p1##x,_n1##y,_p1##z,c), I[7] = (T)(img)(x,_n1##y,_p1##z,c), \\\n  I[8] = (T)(img)(_n1##x,_n1##y,_p1##z,c), I[9] = (T)(img)(_p1##x,_p1##y,z,c), I[10] = (T)(img)(x,_p1##y,z,c), \\\n  I[11] = (T)(img)(_n1##x,_p1##y,z,c), I[12] = (T)(img)(_p1##x,y,z,c), I[13] = (T)(img)(x,y,z,c), \\\n  I[14] = (T)(img)(_n1##x,y,z,c), I[15] = (T)(img)(_p1##x,_n1##y,z,c), I[16] = (T)(img)(x,_n1##y,z,c), \\\n  I[17] = (T)(img)(_n1##x,_n1##y,z,c), I[18] = (T)(img)(_p1##x,_p1##y,_n1##z,c), I[19] = (T)(img)(x,_p1##y,_n1##z,c), \\\n  I[20] = (T)(img)(_n1##x,_p1##y,_n1##z,c), I[21] = (T)(img)(_p1##x,y,_n1##z,c), I[22] = (T)(img)(x,y,_n1##z,c), \\\n  I[23] = (T)(img)(_n1##x,y,_n1##z,c), I[24] = (T)(img)(_p1##x,_n1##y,_n1##z,c), I[25] = (T)(img)(x,_n1##y,_n1##z,c), \\\n  I[26] = (T)(img)(_n1##x,_n1##y,_n1##z,c)\n\n// Macros to perform various image loops.\n//\n// These macros are simpler to use than loops with C++ iterators.\n#define cimg_for(img,ptrs,T_ptrs) \\\n  for (T_ptrs *ptrs = (img)._data, *_max##ptrs = (img)._data + (img).size(); ptrs<_max##ptrs; ++ptrs)\n#define cimg_rof(img,ptrs,T_ptrs) for (T_ptrs *ptrs = (img)._data + (img).size() - 1; ptrs>=(img)._data; --ptrs)\n#define cimg_foroff(img,off) for (cimg_ulong off = 0, _max##off = (img).size(); off<_max##off; ++off)\n\n#define cimg_for1(bound,i) for (int i = 0; i<(int)(bound); ++i)\n#define cimg_forX(img,x) cimg_for1((img)._width,x)\n#define cimg_forY(img,y) cimg_for1((img)._height,y)\n#define cimg_forZ(img,z) cimg_for1((img)._depth,z)\n#define cimg_forC(img,c) cimg_for1((img)._spectrum,c)\n#define cimg_forXY(img,x,y) cimg_forY(img,y) cimg_forX(img,x)\n#define cimg_forXZ(img,x,z) cimg_forZ(img,z) cimg_forX(img,x)\n#define cimg_forYZ(img,y,z) cimg_forZ(img,z) cimg_forY(img,y)\n#define cimg_forXC(img,x,c) cimg_forC(img,c) cimg_forX(img,x)\n#define cimg_forYC(img,y,c) cimg_forC(img,c) cimg_forY(img,y)\n#define cimg_forZC(img,z,c) cimg_forC(img,c) cimg_forZ(img,z)\n#define cimg_forXYZ(img,x,y,z) cimg_forZ(img,z) cimg_forXY(img,x,y)\n#define cimg_forXYC(img,x,y,c) cimg_forC(img,c) cimg_forXY(img,x,y)\n#define cimg_forXZC(img,x,z,c) cimg_forC(img,c) cimg_forXZ(img,x,z)\n#define cimg_forYZC(img,y,z,c) cimg_forC(img,c) cimg_forYZ(img,y,z)\n#define cimg_forXYZC(img,x,y,z,c) cimg_forC(img,c) cimg_forXYZ(img,x,y,z)\n\n#define cimg_rof1(bound,i) for (int i = (int)(bound) - 1; i>=0; --i)\n#define cimg_rofX(img,x) cimg_rof1((img)._width,x)\n#define cimg_rofY(img,y) cimg_rof1((img)._height,y)\n#define cimg_rofZ(img,z) cimg_rof1((img)._depth,z)\n#define cimg_rofC(img,c) cimg_rof1((img)._spectrum,c)\n#define cimg_rofXY(img,x,y) cimg_rofY(img,y) cimg_rofX(img,x)\n#define cimg_rofXZ(img,x,z) cimg_rofZ(img,z) cimg_rofX(img,x)\n#define cimg_rofYZ(img,y,z) cimg_rofZ(img,z) cimg_rofY(img,y)\n#define cimg_rofXC(img,x,c) cimg_rofC(img,c) cimg_rofX(img,x)\n#define cimg_rofYC(img,y,c) cimg_rofC(img,c) cimg_rofY(img,y)\n#define cimg_rofZC(img,z,c) cimg_rofC(img,c) cimg_rofZ(img,z)\n#define cimg_rofXYZ(img,x,y,z) cimg_rofZ(img,z) cimg_rofXY(img,x,y)\n#define cimg_rofXYC(img,x,y,c) cimg_rofC(img,c) cimg_rofXY(img,x,y)\n#define cimg_rofXZC(img,x,z,c) cimg_rofC(img,c) cimg_rofXZ(img,x,z)\n#define cimg_rofYZC(img,y,z,c) cimg_rofC(img,c) cimg_rofYZ(img,y,z)\n#define cimg_rofXYZC(img,x,y,z,c) cimg_rofC(img,c) cimg_rofXYZ(img,x,y,z)\n\n#define cimg_for_in1(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), _max##i = (int)(i1)<(int)(bound)?(int)(i1):(int)(bound) - 1; i<=_max##i; ++i)\n#define cimg_for_inX(img,x0,x1,x) cimg_for_in1((img)._width,x0,x1,x)\n#define cimg_for_inY(img,y0,y1,y) cimg_for_in1((img)._height,y0,y1,y)\n#define cimg_for_inZ(img,z0,z1,z) cimg_for_in1((img)._depth,z0,z1,z)\n#define cimg_for_inC(img,c0,c1,c) cimg_for_in1((img)._spectrum,c0,c1,c)\n#define cimg_for_inXY(img,x0,y0,x1,y1,x,y) cimg_for_inY(img,y0,y1,y) cimg_for_inX(img,x0,x1,x)\n#define cimg_for_inXZ(img,x0,z0,x1,z1,x,z) cimg_for_inZ(img,z0,z1,z) cimg_for_inX(img,x0,x1,x)\n#define cimg_for_inXC(img,x0,c0,x1,c1,x,c) cimg_for_inC(img,c0,c1,c) cimg_for_inX(img,x0,x1,x)\n#define cimg_for_inYZ(img,y0,z0,y1,z1,y,z) cimg_for_inZ(img,x0,z1,z) cimg_for_inY(img,y0,y1,y)\n#define cimg_for_inYC(img,y0,c0,y1,c1,y,c) cimg_for_inC(img,c0,c1,c) cimg_for_inY(img,y0,y1,y)\n#define cimg_for_inZC(img,z0,c0,z1,c1,z,c) cimg_for_inC(img,c0,c1,c) cimg_for_inZ(img,z0,z1,z)\n#define cimg_for_inXYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_inZ(img,z0,z1,z) cimg_for_inXY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_inXYC(img,x0,y0,c0,x1,y1,c1,x,y,c) cimg_for_inC(img,c0,c1,c) cimg_for_inXY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_inXZC(img,x0,z0,c0,x1,z1,c1,x,z,c) cimg_for_inC(img,c0,c1,c) cimg_for_inXZ(img,x0,z0,x1,z1,x,z)\n#define cimg_for_inYZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_inC(img,c0,c1,c) cimg_for_inYZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_inXYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_inC(img,c0,c1,c) cimg_for_inXYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n#define cimg_for_insideX(img,x,n) cimg_for_inX(img,n,(img)._width - 1 - (n),x)\n#define cimg_for_insideY(img,y,n) cimg_for_inY(img,n,(img)._height - 1 - (n),y)\n#define cimg_for_insideZ(img,z,n) cimg_for_inZ(img,n,(img)._depth  - 1 - (n),z)\n#define cimg_for_insideC(img,c,n) cimg_for_inC(img,n,(img)._spectrum - 1 - (n),c)\n#define cimg_for_insideXY(img,x,y,n) cimg_for_inXY(img,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n),x,y)\n#define cimg_for_insideXYZ(img,x,y,z,n) \\\n  cimg_for_inXYZ(img,n,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n),(img)._depth - 1 - (n),x,y,z)\n#define cimg_for_insideXYZC(img,x,y,z,c,n) \\\n  cimg_for_inXYZ(img,n,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n),(img)._depth - 1 - (n),x,y,z)\n\n#define cimg_for_out1(boundi,i0,i1,i) \\\n for (int i = (int)(i0)>0?0:(int)(i1) + 1; i<(int)(boundi); ++i, i = i==(int)(i0)?(int)(i1) + 1:i)\n#define cimg_for_out2(boundi,boundj,i0,j0,i1,j1,i,j) \\\n for (int j = 0; j<(int)(boundj); ++j) \\\n for (int _n1j = (int)(j<(int)(j0) || j>(int)(j1)), i = _n1j?0:(int)(i0)>0?0:(int)(i1) + 1; i<(int)(boundi); \\\n  ++i, i = _n1j?i:(i==(int)(i0)?(int)(i1) + 1:i))\n#define cimg_for_out3(boundi,boundj,boundk,i0,j0,k0,i1,j1,k1,i,j,k) \\\n for (int k = 0; k<(int)(boundk); ++k) \\\n for (int _n1k = (int)(k<(int)(k0) || k>(int)(k1)), j = 0; j<(int)(boundj); ++j) \\\n for (int _n1j = (int)(j<(int)(j0) || j>(int)(j1)), i = _n1j || _n1k?0:(int)(i0)>0?0:(int)(i1) + 1; i<(int)(boundi); \\\n  ++i, i = _n1j || _n1k?i:(i==(int)(i0)?(int)(i1) + 1:i))\n#define cimg_for_out4(boundi,boundj,boundk,boundl,i0,j0,k0,l0,i1,j1,k1,l1,i,j,k,l) \\\n for (int l = 0; l<(int)(boundl); ++l) \\\n for (int _n1l = (int)(l<(int)(l0) || l>(int)(l1)), k = 0; k<(int)(boundk); ++k) \\\n for (int _n1k = (int)(k<(int)(k0) || k>(int)(k1)), j = 0; j<(int)(boundj); ++j) \\\n for (int _n1j = (int)(j<(int)(j0) || j>(int)(j1)), i = _n1j || _n1k || _n1l?0:(int)(i0)>0?0:(int)(i1) + 1; \\\n  i<(int)(boundi); ++i, i = _n1j || _n1k || _n1l?i:(i==(int)(i0)?(int)(i1) + 1:i))\n#define cimg_for_outX(img,x0,x1,x) cimg_for_out1((img)._width,x0,x1,x)\n#define cimg_for_outY(img,y0,y1,y) cimg_for_out1((img)._height,y0,y1,y)\n#define cimg_for_outZ(img,z0,z1,z) cimg_for_out1((img)._depth,z0,z1,z)\n#define cimg_for_outC(img,c0,c1,c) cimg_for_out1((img)._spectrum,c0,c1,c)\n#define cimg_for_outXY(img,x0,y0,x1,y1,x,y) cimg_for_out2((img)._width,(img)._height,x0,y0,x1,y1,x,y)\n#define cimg_for_outXZ(img,x0,z0,x1,z1,x,z) cimg_for_out2((img)._width,(img)._depth,x0,z0,x1,z1,x,z)\n#define cimg_for_outXC(img,x0,c0,x1,c1,x,c) cimg_for_out2((img)._width,(img)._spectrum,x0,c0,x1,c1,x,c)\n#define cimg_for_outYZ(img,y0,z0,y1,z1,y,z) cimg_for_out2((img)._height,(img)._depth,y0,z0,y1,z1,y,z)\n#define cimg_for_outYC(img,y0,c0,y1,c1,y,c) cimg_for_out2((img)._height,(img)._spectrum,y0,c0,y1,c1,y,c)\n#define cimg_for_outZC(img,z0,c0,z1,c1,z,c) cimg_for_out2((img)._depth,(img)._spectrum,z0,c0,z1,c1,z,c)\n#define cimg_for_outXYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) \\\n  cimg_for_out3((img)._width,(img)._height,(img)._depth,x0,y0,z0,x1,y1,z1,x,y,z)\n#define cimg_for_outXYC(img,x0,y0,c0,x1,y1,c1,x,y,c) \\\n  cimg_for_out3((img)._width,(img)._height,(img)._spectrum,x0,y0,c0,x1,y1,c1,x,y,c)\n#define cimg_for_outXZC(img,x0,z0,c0,x1,z1,c1,x,z,c) \\\n  cimg_for_out3((img)._width,(img)._depth,(img)._spectrum,x0,z0,c0,x1,z1,c1,x,z,c)\n#define cimg_for_outYZC(img,y0,z0,c0,y1,z1,c1,y,z,c) \\\n  cimg_for_out3((img)._height,(img)._depth,(img)._spectrum,y0,z0,c0,y1,z1,c1,y,z,c)\n#define cimg_for_outXYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n cimg_for_out4((img)._width,(img)._height,(img)._depth,(img)._spectrum,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c)\n#define cimg_for_borderX(img,x,n) cimg_for_outX(img,n,(img)._width - 1 - (n),x)\n#define cimg_for_borderY(img,y,n) cimg_for_outY(img,n,(img)._height - 1 - (n),y)\n#define cimg_for_borderZ(img,z,n) cimg_for_outZ(img,n,(img)._depth - 1 - (n),z)\n#define cimg_for_borderC(img,c,n) cimg_for_outC(img,n,(img)._spectrum - 1 - (n),c)\n#define cimg_for_borderXY(img,x,y,n) cimg_for_outXY(img,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n),x,y)\n#define cimg_for_borderXYZ(img,x,y,z,n) \\\n  cimg_for_outXYZ(img,n,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n),(img)._depth - 1 - (n),x,y,z)\n#define cimg_for_borderXYZC(img,x,y,z,c,n) \\\n cimg_for_outXYZC(img,n,n,n,n,(img)._width - 1 - (n),(img)._height - 1 - (n), \\\n                  (img)._depth - 1 - (n),(img)._spectrum - 1 - (n),x,y,z,c)\n\n#define cimg_for_spiralXY(img,x,y) \\\n for (int x = 0, y = 0, _n1##x = 1, _n1##y = (img).width()*(img).height(); _n1##y; \\\n      --_n1##y, _n1##x+=(_n1##x>>2) - ((!(_n1##x&3)?--y:((_n1##x&3)==1?(img)._width - 1 - ++x:\\\n      ((_n1##x&3)==2?(img)._height - 1 - ++y:--x))))?0:1)\n\n#define cimg_for_lineXY(x,y,x0,y0,x1,y1) \\\n for (int x = (int)(x0), y = (int)(y0), _sx = 1, _sy = 1, _steep = 0, \\\n      _dx=(x1)>(x0)?(int)(x1) - (int)(x0):(_sx=-1,(int)(x0) - (int)(x1)), \\\n      _dy=(y1)>(y0)?(int)(y1) - (int)(y0):(_sy=-1,(int)(y0) - (int)(y1)), \\\n      _counter = _dx, \\\n      _err = _dx>_dy?(_dy>>1):((_steep=1),(_counter=_dy),(_dx>>1)); \\\n      _counter>=0; \\\n      --_counter, x+=_steep? \\\n      (y+=_sy,(_err-=_dx)<0?_err+=_dy,_sx:0): \\\n      (y+=(_err-=_dy)<0?_err+=_dx,_sy:0,_sx))\n\n#define cimg_for2(bound,i) \\\n for (int i = 0, _n1##i = 1>=(bound)?(int)(bound) - 1:1; \\\n      _n1##i<(int)(bound) || i==--_n1##i; \\\n      ++i, ++_n1##i)\n#define cimg_for2X(img,x) cimg_for2((img)._width,x)\n#define cimg_for2Y(img,y) cimg_for2((img)._height,y)\n#define cimg_for2Z(img,z) cimg_for2((img)._depth,z)\n#define cimg_for2C(img,c) cimg_for2((img)._spectrum,c)\n#define cimg_for2XY(img,x,y) cimg_for2Y(img,y) cimg_for2X(img,x)\n#define cimg_for2XZ(img,x,z) cimg_for2Z(img,z) cimg_for2X(img,x)\n#define cimg_for2XC(img,x,c) cimg_for2C(img,c) cimg_for2X(img,x)\n#define cimg_for2YZ(img,y,z) cimg_for2Z(img,z) cimg_for2Y(img,y)\n#define cimg_for2YC(img,y,c) cimg_for2C(img,c) cimg_for2Y(img,y)\n#define cimg_for2ZC(img,z,c) cimg_for2C(img,c) cimg_for2Z(img,z)\n#define cimg_for2XYZ(img,x,y,z) cimg_for2Z(img,z) cimg_for2XY(img,x,y)\n#define cimg_for2XZC(img,x,z,c) cimg_for2C(img,c) cimg_for2XZ(img,x,z)\n#define cimg_for2YZC(img,y,z,c) cimg_for2C(img,c) cimg_for2YZ(img,y,z)\n#define cimg_for2XYZC(img,x,y,z,c) cimg_for2C(img,c) cimg_for2XYZ(img,x,y,z)\n\n#define cimg_for_in2(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1; \\\n      i<=(int)(i1) && (_n1##i<(int)(bound) || i==--_n1##i); \\\n      ++i, ++_n1##i)\n#define cimg_for_in2X(img,x0,x1,x) cimg_for_in2((img)._width,x0,x1,x)\n#define cimg_for_in2Y(img,y0,y1,y) cimg_for_in2((img)._height,y0,y1,y)\n#define cimg_for_in2Z(img,z0,z1,z) cimg_for_in2((img)._depth,z0,z1,z)\n#define cimg_for_in2C(img,c0,c1,c) cimg_for_in2((img)._spectrum,c0,c1,c)\n#define cimg_for_in2XY(img,x0,y0,x1,y1,x,y) cimg_for_in2Y(img,y0,y1,y) cimg_for_in2X(img,x0,x1,x)\n#define cimg_for_in2XZ(img,x0,z0,x1,z1,x,z) cimg_for_in2Z(img,z0,z1,z) cimg_for_in2X(img,x0,x1,x)\n#define cimg_for_in2XC(img,x0,c0,x1,c1,x,c) cimg_for_in2C(img,c0,c1,c) cimg_for_in2X(img,x0,x1,x)\n#define cimg_for_in2YZ(img,y0,z0,y1,z1,y,z) cimg_for_in2Z(img,z0,z1,z) cimg_for_in2Y(img,y0,y1,y)\n#define cimg_for_in2YC(img,y0,c0,y1,c1,y,c) cimg_for_in2C(img,c0,c1,c) cimg_for_in2Y(img,y0,y1,y)\n#define cimg_for_in2ZC(img,z0,c0,z1,c1,z,c) cimg_for_in2C(img,c0,c1,c) cimg_for_in2Z(img,z0,z1,z)\n#define cimg_for_in2XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in2Z(img,z0,z1,z) cimg_for_in2XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in2XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in2C(img,c0,c1,c) cimg_for_in2XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in2YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in2C(img,c0,c1,c) cimg_for_in2YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in2XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in2C(img,c0,c1,c) cimg_for_in2XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for3(bound,i) \\\n for (int i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1; \\\n      _n1##i<(int)(bound) || i==--_n1##i; \\\n      _p1##i = i++, ++_n1##i)\n#define cimg_for3X(img,x) cimg_for3((img)._width,x)\n#define cimg_for3Y(img,y) cimg_for3((img)._height,y)\n#define cimg_for3Z(img,z) cimg_for3((img)._depth,z)\n#define cimg_for3C(img,c) cimg_for3((img)._spectrum,c)\n#define cimg_for3XY(img,x,y) cimg_for3Y(img,y) cimg_for3X(img,x)\n#define cimg_for3XZ(img,x,z) cimg_for3Z(img,z) cimg_for3X(img,x)\n#define cimg_for3XC(img,x,c) cimg_for3C(img,c) cimg_for3X(img,x)\n#define cimg_for3YZ(img,y,z) cimg_for3Z(img,z) cimg_for3Y(img,y)\n#define cimg_for3YC(img,y,c) cimg_for3C(img,c) cimg_for3Y(img,y)\n#define cimg_for3ZC(img,z,c) cimg_for3C(img,c) cimg_for3Z(img,z)\n#define cimg_for3XYZ(img,x,y,z) cimg_for3Z(img,z) cimg_for3XY(img,x,y)\n#define cimg_for3XZC(img,x,z,c) cimg_for3C(img,c) cimg_for3XZ(img,x,z)\n#define cimg_for3YZC(img,y,z,c) cimg_for3C(img,c) cimg_for3YZ(img,y,z)\n#define cimg_for3XYZC(img,x,y,z,c) cimg_for3C(img,c) cimg_for3XYZ(img,x,y,z)\n\n#define cimg_for_in3(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1; \\\n      i<=(int)(i1) && (_n1##i<(int)(bound) || i==--_n1##i); \\\n      _p1##i = i++, ++_n1##i)\n#define cimg_for_in3X(img,x0,x1,x) cimg_for_in3((img)._width,x0,x1,x)\n#define cimg_for_in3Y(img,y0,y1,y) cimg_for_in3((img)._height,y0,y1,y)\n#define cimg_for_in3Z(img,z0,z1,z) cimg_for_in3((img)._depth,z0,z1,z)\n#define cimg_for_in3C(img,c0,c1,c) cimg_for_in3((img)._spectrum,c0,c1,c)\n#define cimg_for_in3XY(img,x0,y0,x1,y1,x,y) cimg_for_in3Y(img,y0,y1,y) cimg_for_in3X(img,x0,x1,x)\n#define cimg_for_in3XZ(img,x0,z0,x1,z1,x,z) cimg_for_in3Z(img,z0,z1,z) cimg_for_in3X(img,x0,x1,x)\n#define cimg_for_in3XC(img,x0,c0,x1,c1,x,c) cimg_for_in3C(img,c0,c1,c) cimg_for_in3X(img,x0,x1,x)\n#define cimg_for_in3YZ(img,y0,z0,y1,z1,y,z) cimg_for_in3Z(img,z0,z1,z) cimg_for_in3Y(img,y0,y1,y)\n#define cimg_for_in3YC(img,y0,c0,y1,c1,y,c) cimg_for_in3C(img,c0,c1,c) cimg_for_in3Y(img,y0,y1,y)\n#define cimg_for_in3ZC(img,z0,c0,z1,c1,z,c) cimg_for_in3C(img,c0,c1,c) cimg_for_in3Z(img,z0,z1,z)\n#define cimg_for_in3XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in3Z(img,z0,z1,z) cimg_for_in3XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in3XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in3C(img,c0,c1,c) cimg_for_in3XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in3YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in3C(img,c0,c1,c) cimg_for_in3YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in3XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in3C(img,c0,c1,c) cimg_for_in3XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for4(bound,i) \\\n for (int i = 0, _p1##i = 0, _n1##i = 1>=(bound)?(int)(bound) - 1:1, \\\n      _n2##i = 2>=(bound)?(int)(bound) - 1:2; \\\n      _n2##i<(int)(bound) || _n1##i==--_n2##i || i==(_n2##i = --_n1##i); \\\n      _p1##i = i++, ++_n1##i, ++_n2##i)\n#define cimg_for4X(img,x) cimg_for4((img)._width,x)\n#define cimg_for4Y(img,y) cimg_for4((img)._height,y)\n#define cimg_for4Z(img,z) cimg_for4((img)._depth,z)\n#define cimg_for4C(img,c) cimg_for4((img)._spectrum,c)\n#define cimg_for4XY(img,x,y) cimg_for4Y(img,y) cimg_for4X(img,x)\n#define cimg_for4XZ(img,x,z) cimg_for4Z(img,z) cimg_for4X(img,x)\n#define cimg_for4XC(img,x,c) cimg_for4C(img,c) cimg_for4X(img,x)\n#define cimg_for4YZ(img,y,z) cimg_for4Z(img,z) cimg_for4Y(img,y)\n#define cimg_for4YC(img,y,c) cimg_for4C(img,c) cimg_for4Y(img,y)\n#define cimg_for4ZC(img,z,c) cimg_for4C(img,c) cimg_for4Z(img,z)\n#define cimg_for4XYZ(img,x,y,z) cimg_for4Z(img,z) cimg_for4XY(img,x,y)\n#define cimg_for4XZC(img,x,z,c) cimg_for4C(img,c) cimg_for4XZ(img,x,z)\n#define cimg_for4YZC(img,y,z,c) cimg_for4C(img,c) cimg_for4YZ(img,y,z)\n#define cimg_for4XYZC(img,x,y,z,c) cimg_for4C(img,c) cimg_for4XYZ(img,x,y,z)\n\n#define cimg_for_in4(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n      _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2; \\\n      i<=(int)(i1) && (_n2##i<(int)(bound) || _n1##i==--_n2##i || i==(_n2##i = --_n1##i)); \\\n      _p1##i = i++, ++_n1##i, ++_n2##i)\n#define cimg_for_in4X(img,x0,x1,x) cimg_for_in4((img)._width,x0,x1,x)\n#define cimg_for_in4Y(img,y0,y1,y) cimg_for_in4((img)._height,y0,y1,y)\n#define cimg_for_in4Z(img,z0,z1,z) cimg_for_in4((img)._depth,z0,z1,z)\n#define cimg_for_in4C(img,c0,c1,c) cimg_for_in4((img)._spectrum,c0,c1,c)\n#define cimg_for_in4XY(img,x0,y0,x1,y1,x,y) cimg_for_in4Y(img,y0,y1,y) cimg_for_in4X(img,x0,x1,x)\n#define cimg_for_in4XZ(img,x0,z0,x1,z1,x,z) cimg_for_in4Z(img,z0,z1,z) cimg_for_in4X(img,x0,x1,x)\n#define cimg_for_in4XC(img,x0,c0,x1,c1,x,c) cimg_for_in4C(img,c0,c1,c) cimg_for_in4X(img,x0,x1,x)\n#define cimg_for_in4YZ(img,y0,z0,y1,z1,y,z) cimg_for_in4Z(img,z0,z1,z) cimg_for_in4Y(img,y0,y1,y)\n#define cimg_for_in4YC(img,y0,c0,y1,c1,y,c) cimg_for_in4C(img,c0,c1,c) cimg_for_in4Y(img,y0,y1,y)\n#define cimg_for_in4ZC(img,z0,c0,z1,c1,z,c) cimg_for_in4C(img,c0,c1,c) cimg_for_in4Z(img,z0,z1,z)\n#define cimg_for_in4XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in4Z(img,z0,z1,z) cimg_for_in4XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in4XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in4C(img,c0,c1,c) cimg_for_in4XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in4YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in4C(img,c0,c1,c) cimg_for_in4YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in4XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in4C(img,c0,c1,c) cimg_for_in4XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for5(bound,i) \\\n for (int i = 0, _p2##i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1, \\\n      _n2##i = 2>=(bound)?(int)(bound) - 1:2; \\\n      _n2##i<(int)(bound) || _n1##i==--_n2##i || i==(_n2##i = --_n1##i); \\\n      _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i)\n#define cimg_for5X(img,x) cimg_for5((img)._width,x)\n#define cimg_for5Y(img,y) cimg_for5((img)._height,y)\n#define cimg_for5Z(img,z) cimg_for5((img)._depth,z)\n#define cimg_for5C(img,c) cimg_for5((img)._spectrum,c)\n#define cimg_for5XY(img,x,y) cimg_for5Y(img,y) cimg_for5X(img,x)\n#define cimg_for5XZ(img,x,z) cimg_for5Z(img,z) cimg_for5X(img,x)\n#define cimg_for5XC(img,x,c) cimg_for5C(img,c) cimg_for5X(img,x)\n#define cimg_for5YZ(img,y,z) cimg_for5Z(img,z) cimg_for5Y(img,y)\n#define cimg_for5YC(img,y,c) cimg_for5C(img,c) cimg_for5Y(img,y)\n#define cimg_for5ZC(img,z,c) cimg_for5C(img,c) cimg_for5Z(img,z)\n#define cimg_for5XYZ(img,x,y,z) cimg_for5Z(img,z) cimg_for5XY(img,x,y)\n#define cimg_for5XZC(img,x,z,c) cimg_for5C(img,c) cimg_for5XZ(img,x,z)\n#define cimg_for5YZC(img,y,z,c) cimg_for5C(img,c) cimg_for5YZ(img,y,z)\n#define cimg_for5XYZC(img,x,y,z,c) cimg_for5C(img,c) cimg_for5XYZ(img,x,y,z)\n\n#define cimg_for_in5(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p2##i = i - 2<0?0:i - 2, \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n      _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2; \\\n      i<=(int)(i1) && (_n2##i<(int)(bound) || _n1##i==--_n2##i || i==(_n2##i = --_n1##i)); \\\n      _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i)\n#define cimg_for_in5X(img,x0,x1,x) cimg_for_in5((img)._width,x0,x1,x)\n#define cimg_for_in5Y(img,y0,y1,y) cimg_for_in5((img)._height,y0,y1,y)\n#define cimg_for_in5Z(img,z0,z1,z) cimg_for_in5((img)._depth,z0,z1,z)\n#define cimg_for_in5C(img,c0,c1,c) cimg_for_in5((img)._spectrum,c0,c1,c)\n#define cimg_for_in5XY(img,x0,y0,x1,y1,x,y) cimg_for_in5Y(img,y0,y1,y) cimg_for_in5X(img,x0,x1,x)\n#define cimg_for_in5XZ(img,x0,z0,x1,z1,x,z) cimg_for_in5Z(img,z0,z1,z) cimg_for_in5X(img,x0,x1,x)\n#define cimg_for_in5XC(img,x0,c0,x1,c1,x,c) cimg_for_in5C(img,c0,c1,c) cimg_for_in5X(img,x0,x1,x)\n#define cimg_for_in5YZ(img,y0,z0,y1,z1,y,z) cimg_for_in5Z(img,z0,z1,z) cimg_for_in5Y(img,y0,y1,y)\n#define cimg_for_in5YC(img,y0,c0,y1,c1,y,c) cimg_for_in5C(img,c0,c1,c) cimg_for_in5Y(img,y0,y1,y)\n#define cimg_for_in5ZC(img,z0,c0,z1,c1,z,c) cimg_for_in5C(img,c0,c1,c) cimg_for_in5Z(img,z0,z1,z)\n#define cimg_for_in5XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in5Z(img,z0,z1,z) cimg_for_in5XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in5XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in5C(img,c0,c1,c) cimg_for_in5XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in5YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in5C(img,c0,c1,c) cimg_for_in5YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in5XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in5C(img,c0,c1,c) cimg_for_in5XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for6(bound,i) \\\n for (int i = 0, _p2##i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1, \\\n      _n2##i = 2>=(bound)?(int)(bound) - 1:2, \\\n      _n3##i = 3>=(bound)?(int)(bound) - 1:3; \\\n      _n3##i<(int)(bound) || _n2##i==--_n3##i || _n1##i==--_n2##i || i==(_n3##i = _n2##i = --_n1##i); \\\n      _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i)\n#define cimg_for6X(img,x) cimg_for6((img)._width,x)\n#define cimg_for6Y(img,y) cimg_for6((img)._height,y)\n#define cimg_for6Z(img,z) cimg_for6((img)._depth,z)\n#define cimg_for6C(img,c) cimg_for6((img)._spectrum,c)\n#define cimg_for6XY(img,x,y) cimg_for6Y(img,y) cimg_for6X(img,x)\n#define cimg_for6XZ(img,x,z) cimg_for6Z(img,z) cimg_for6X(img,x)\n#define cimg_for6XC(img,x,c) cimg_for6C(img,c) cimg_for6X(img,x)\n#define cimg_for6YZ(img,y,z) cimg_for6Z(img,z) cimg_for6Y(img,y)\n#define cimg_for6YC(img,y,c) cimg_for6C(img,c) cimg_for6Y(img,y)\n#define cimg_for6ZC(img,z,c) cimg_for6C(img,c) cimg_for6Z(img,z)\n#define cimg_for6XYZ(img,x,y,z) cimg_for6Z(img,z) cimg_for6XY(img,x,y)\n#define cimg_for6XZC(img,x,z,c) cimg_for6C(img,c) cimg_for6XZ(img,x,z)\n#define cimg_for6YZC(img,y,z,c) cimg_for6C(img,c) cimg_for6YZ(img,y,z)\n#define cimg_for6XYZC(img,x,y,z,c) cimg_for6C(img,c) cimg_for6XYZ(img,x,y,z)\n\n#define cimg_for_in6(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p2##i = i - 2<0?0:i - 2, \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n      _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2, \\\n      _n3##i = i + 3>=(int)(bound)?(int)(bound) - 1:i + 3; \\\n      i<=(int)(i1) && \\\n      (_n3##i<(int)(bound) || _n2##i==--_n3##i || _n1##i==--_n2##i || i==(_n3##i = _n2##i = --_n1##i)); \\\n      _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i)\n#define cimg_for_in6X(img,x0,x1,x) cimg_for_in6((img)._width,x0,x1,x)\n#define cimg_for_in6Y(img,y0,y1,y) cimg_for_in6((img)._height,y0,y1,y)\n#define cimg_for_in6Z(img,z0,z1,z) cimg_for_in6((img)._depth,z0,z1,z)\n#define cimg_for_in6C(img,c0,c1,c) cimg_for_in6((img)._spectrum,c0,c1,c)\n#define cimg_for_in6XY(img,x0,y0,x1,y1,x,y) cimg_for_in6Y(img,y0,y1,y) cimg_for_in6X(img,x0,x1,x)\n#define cimg_for_in6XZ(img,x0,z0,x1,z1,x,z) cimg_for_in6Z(img,z0,z1,z) cimg_for_in6X(img,x0,x1,x)\n#define cimg_for_in6XC(img,x0,c0,x1,c1,x,c) cimg_for_in6C(img,c0,c1,c) cimg_for_in6X(img,x0,x1,x)\n#define cimg_for_in6YZ(img,y0,z0,y1,z1,y,z) cimg_for_in6Z(img,z0,z1,z) cimg_for_in6Y(img,y0,y1,y)\n#define cimg_for_in6YC(img,y0,c0,y1,c1,y,c) cimg_for_in6C(img,c0,c1,c) cimg_for_in6Y(img,y0,y1,y)\n#define cimg_for_in6ZC(img,z0,c0,z1,c1,z,c) cimg_for_in6C(img,c0,c1,c) cimg_for_in6Z(img,z0,z1,z)\n#define cimg_for_in6XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in6Z(img,z0,z1,z) cimg_for_in6XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in6XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in6C(img,c0,c1,c) cimg_for_in6XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in6YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in6C(img,c0,c1,c) cimg_for_in6YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in6XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in6C(img,c0,c1,c) cimg_for_in6XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for7(bound,i) \\\n for (int i = 0, _p3##i = 0, _p2##i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1, \\\n      _n2##i = 2>=(bound)?(int)(bound) - 1:2, \\\n      _n3##i = 3>=(bound)?(int)(bound) - 1:3; \\\n      _n3##i<(int)(bound) || _n2##i==--_n3##i || _n1##i==--_n2##i || i==(_n3##i = _n2##i = --_n1##i); \\\n      _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i)\n#define cimg_for7X(img,x) cimg_for7((img)._width,x)\n#define cimg_for7Y(img,y) cimg_for7((img)._height,y)\n#define cimg_for7Z(img,z) cimg_for7((img)._depth,z)\n#define cimg_for7C(img,c) cimg_for7((img)._spectrum,c)\n#define cimg_for7XY(img,x,y) cimg_for7Y(img,y) cimg_for7X(img,x)\n#define cimg_for7XZ(img,x,z) cimg_for7Z(img,z) cimg_for7X(img,x)\n#define cimg_for7XC(img,x,c) cimg_for7C(img,c) cimg_for7X(img,x)\n#define cimg_for7YZ(img,y,z) cimg_for7Z(img,z) cimg_for7Y(img,y)\n#define cimg_for7YC(img,y,c) cimg_for7C(img,c) cimg_for7Y(img,y)\n#define cimg_for7ZC(img,z,c) cimg_for7C(img,c) cimg_for7Z(img,z)\n#define cimg_for7XYZ(img,x,y,z) cimg_for7Z(img,z) cimg_for7XY(img,x,y)\n#define cimg_for7XZC(img,x,z,c) cimg_for7C(img,c) cimg_for7XZ(img,x,z)\n#define cimg_for7YZC(img,y,z,c) cimg_for7C(img,c) cimg_for7YZ(img,y,z)\n#define cimg_for7XYZC(img,x,y,z,c) cimg_for7C(img,c) cimg_for7XYZ(img,x,y,z)\n\n#define cimg_for_in7(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p3##i = i - 3<0?0:i - 3, \\\n      _p2##i = i - 2<0?0:i - 2, \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n      _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2, \\\n      _n3##i = i + 3>=(int)(bound)?(int)(bound) - 1:i + 3; \\\n      i<=(int)(i1) && \\\n      (_n3##i<(int)(bound) || _n2##i==--_n3##i || _n1##i==--_n2##i || i==(_n3##i = _n2##i = --_n1##i)); \\\n      _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i)\n#define cimg_for_in7X(img,x0,x1,x) cimg_for_in7((img)._width,x0,x1,x)\n#define cimg_for_in7Y(img,y0,y1,y) cimg_for_in7((img)._height,y0,y1,y)\n#define cimg_for_in7Z(img,z0,z1,z) cimg_for_in7((img)._depth,z0,z1,z)\n#define cimg_for_in7C(img,c0,c1,c) cimg_for_in7((img)._spectrum,c0,c1,c)\n#define cimg_for_in7XY(img,x0,y0,x1,y1,x,y) cimg_for_in7Y(img,y0,y1,y) cimg_for_in7X(img,x0,x1,x)\n#define cimg_for_in7XZ(img,x0,z0,x1,z1,x,z) cimg_for_in7Z(img,z0,z1,z) cimg_for_in7X(img,x0,x1,x)\n#define cimg_for_in7XC(img,x0,c0,x1,c1,x,c) cimg_for_in7C(img,c0,c1,c) cimg_for_in7X(img,x0,x1,x)\n#define cimg_for_in7YZ(img,y0,z0,y1,z1,y,z) cimg_for_in7Z(img,z0,z1,z) cimg_for_in7Y(img,y0,y1,y)\n#define cimg_for_in7YC(img,y0,c0,y1,c1,y,c) cimg_for_in7C(img,c0,c1,c) cimg_for_in7Y(img,y0,y1,y)\n#define cimg_for_in7ZC(img,z0,c0,z1,c1,z,c) cimg_for_in7C(img,c0,c1,c) cimg_for_in7Z(img,z0,z1,z)\n#define cimg_for_in7XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in7Z(img,z0,z1,z) cimg_for_in7XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in7XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in7C(img,c0,c1,c) cimg_for_in7XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in7YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in7C(img,c0,c1,c) cimg_for_in7YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in7XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in7C(img,c0,c1,c) cimg_for_in7XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for8(bound,i) \\\n for (int i = 0, _p3##i = 0, _p2##i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1, \\\n      _n2##i = 2>=(bound)?(int)(bound) - 1:2, \\\n      _n3##i = 3>=(bound)?(int)(bound) - 1:3, \\\n      _n4##i = 4>=(bound)?(int)(bound) - 1:4; \\\n      _n4##i<(int)(bound) || _n3##i==--_n4##i || _n2##i==--_n3##i || _n1##i==--_n2##i || \\\n      i==(_n4##i = _n3##i = _n2##i = --_n1##i); \\\n      _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i, ++_n4##i)\n#define cimg_for8X(img,x) cimg_for8((img)._width,x)\n#define cimg_for8Y(img,y) cimg_for8((img)._height,y)\n#define cimg_for8Z(img,z) cimg_for8((img)._depth,z)\n#define cimg_for8C(img,c) cimg_for8((img)._spectrum,c)\n#define cimg_for8XY(img,x,y) cimg_for8Y(img,y) cimg_for8X(img,x)\n#define cimg_for8XZ(img,x,z) cimg_for8Z(img,z) cimg_for8X(img,x)\n#define cimg_for8XC(img,x,c) cimg_for8C(img,c) cimg_for8X(img,x)\n#define cimg_for8YZ(img,y,z) cimg_for8Z(img,z) cimg_for8Y(img,y)\n#define cimg_for8YC(img,y,c) cimg_for8C(img,c) cimg_for8Y(img,y)\n#define cimg_for8ZC(img,z,c) cimg_for8C(img,c) cimg_for8Z(img,z)\n#define cimg_for8XYZ(img,x,y,z) cimg_for8Z(img,z) cimg_for8XY(img,x,y)\n#define cimg_for8XZC(img,x,z,c) cimg_for8C(img,c) cimg_for8XZ(img,x,z)\n#define cimg_for8YZC(img,y,z,c) cimg_for8C(img,c) cimg_for8YZ(img,y,z)\n#define cimg_for8XYZC(img,x,y,z,c) cimg_for8C(img,c) cimg_for8XYZ(img,x,y,z)\n\n#define cimg_for_in8(bound,i0,i1,i) \\\n for (int i = (int)(i0)<0?0:(int)(i0), \\\n      _p3##i = i - 3<0?0:i - 3, \\\n      _p2##i = i - 2<0?0:i - 2, \\\n      _p1##i = i - 1<0?0:i - 1, \\\n      _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n      _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2, \\\n      _n3##i = i + 3>=(int)(bound)?(int)(bound) - 1:i + 3, \\\n      _n4##i = i + 4>=(int)(bound)?(int)(bound) - 1:i + 4; \\\n      i<=(int)(i1) && (_n4##i<(int)(bound) || _n3##i==--_n4##i || _n2##i==--_n3##i || _n1##i==--_n2##i || \\\n      i==(_n4##i = _n3##i = _n2##i = --_n1##i)); \\\n      _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i, ++_n4##i)\n#define cimg_for_in8X(img,x0,x1,x) cimg_for_in8((img)._width,x0,x1,x)\n#define cimg_for_in8Y(img,y0,y1,y) cimg_for_in8((img)._height,y0,y1,y)\n#define cimg_for_in8Z(img,z0,z1,z) cimg_for_in8((img)._depth,z0,z1,z)\n#define cimg_for_in8C(img,c0,c1,c) cimg_for_in8((img)._spectrum,c0,c1,c)\n#define cimg_for_in8XY(img,x0,y0,x1,y1,x,y) cimg_for_in8Y(img,y0,y1,y) cimg_for_in8X(img,x0,x1,x)\n#define cimg_for_in8XZ(img,x0,z0,x1,z1,x,z) cimg_for_in8Z(img,z0,z1,z) cimg_for_in8X(img,x0,x1,x)\n#define cimg_for_in8XC(img,x0,c0,x1,c1,x,c) cimg_for_in8C(img,c0,c1,c) cimg_for_in8X(img,x0,x1,x)\n#define cimg_for_in8YZ(img,y0,z0,y1,z1,y,z) cimg_for_in8Z(img,z0,z1,z) cimg_for_in8Y(img,y0,y1,y)\n#define cimg_for_in8YC(img,y0,c0,y1,c1,y,c) cimg_for_in8C(img,c0,c1,c) cimg_for_in8Y(img,y0,y1,y)\n#define cimg_for_in8ZC(img,z0,c0,z1,c1,z,c) cimg_for_in8C(img,c0,c1,c) cimg_for_in8Z(img,z0,z1,z)\n#define cimg_for_in8XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in8Z(img,z0,z1,z) cimg_for_in8XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in8XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in8C(img,c0,c1,c) cimg_for_in8XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in8YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in8C(img,c0,c1,c) cimg_for_in8YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in8XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in8C(img,c0,c1,c) cimg_for_in8XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for9(bound,i) \\\n  for (int i = 0, _p4##i = 0, _p3##i = 0, _p2##i = 0, _p1##i = 0, \\\n       _n1##i = 1>=(int)(bound)?(int)(bound) - 1:1, \\\n       _n2##i = 2>=(int)(bound)?(int)(bound) - 1:2, \\\n       _n3##i = 3>=(int)(bound)?(int)(bound) - 1:3, \\\n       _n4##i = 4>=(int)(bound)?(int)(bound) - 1:4; \\\n       _n4##i<(int)(bound) || _n3##i==--_n4##i || _n2##i==--_n3##i || _n1##i==--_n2##i || \\\n       i==(_n4##i = _n3##i = _n2##i = --_n1##i); \\\n       _p4##i = _p3##i, _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i, ++_n4##i)\n#define cimg_for9X(img,x) cimg_for9((img)._width,x)\n#define cimg_for9Y(img,y) cimg_for9((img)._height,y)\n#define cimg_for9Z(img,z) cimg_for9((img)._depth,z)\n#define cimg_for9C(img,c) cimg_for9((img)._spectrum,c)\n#define cimg_for9XY(img,x,y) cimg_for9Y(img,y) cimg_for9X(img,x)\n#define cimg_for9XZ(img,x,z) cimg_for9Z(img,z) cimg_for9X(img,x)\n#define cimg_for9XC(img,x,c) cimg_for9C(img,c) cimg_for9X(img,x)\n#define cimg_for9YZ(img,y,z) cimg_for9Z(img,z) cimg_for9Y(img,y)\n#define cimg_for9YC(img,y,c) cimg_for9C(img,c) cimg_for9Y(img,y)\n#define cimg_for9ZC(img,z,c) cimg_for9C(img,c) cimg_for9Z(img,z)\n#define cimg_for9XYZ(img,x,y,z) cimg_for9Z(img,z) cimg_for9XY(img,x,y)\n#define cimg_for9XZC(img,x,z,c) cimg_for9C(img,c) cimg_for9XZ(img,x,z)\n#define cimg_for9YZC(img,y,z,c) cimg_for9C(img,c) cimg_for9YZ(img,y,z)\n#define cimg_for9XYZC(img,x,y,z,c) cimg_for9C(img,c) cimg_for9XYZ(img,x,y,z)\n\n#define cimg_for_in9(bound,i0,i1,i) \\\n  for (int i = (int)(i0)<0?0:(int)(i0), \\\n       _p4##i = i - 4<0?0:i - 4, \\\n       _p3##i = i - 3<0?0:i - 3, \\\n       _p2##i = i - 2<0?0:i - 2, \\\n       _p1##i = i - 1<0?0:i - 1, \\\n       _n1##i = i + 1>=(int)(bound)?(int)(bound) - 1:i + 1, \\\n       _n2##i = i + 2>=(int)(bound)?(int)(bound) - 1:i + 2, \\\n       _n3##i = i + 3>=(int)(bound)?(int)(bound) - 1:i + 3, \\\n       _n4##i = i + 4>=(int)(bound)?(int)(bound) - 1:i + 4; \\\n       i<=(int)(i1) && (_n4##i<(int)(bound) || _n3##i==--_n4##i || _n2##i==--_n3##i || _n1##i==--_n2##i || \\\n       i==(_n4##i = _n3##i = _n2##i = --_n1##i)); \\\n       _p4##i = _p3##i, _p3##i = _p2##i, _p2##i = _p1##i, _p1##i = i++, ++_n1##i, ++_n2##i, ++_n3##i, ++_n4##i)\n#define cimg_for_in9X(img,x0,x1,x) cimg_for_in9((img)._width,x0,x1,x)\n#define cimg_for_in9Y(img,y0,y1,y) cimg_for_in9((img)._height,y0,y1,y)\n#define cimg_for_in9Z(img,z0,z1,z) cimg_for_in9((img)._depth,z0,z1,z)\n#define cimg_for_in9C(img,c0,c1,c) cimg_for_in9((img)._spectrum,c0,c1,c)\n#define cimg_for_in9XY(img,x0,y0,x1,y1,x,y) cimg_for_in9Y(img,y0,y1,y) cimg_for_in9X(img,x0,x1,x)\n#define cimg_for_in9XZ(img,x0,z0,x1,z1,x,z) cimg_for_in9Z(img,z0,z1,z) cimg_for_in9X(img,x0,x1,x)\n#define cimg_for_in9XC(img,x0,c0,x1,c1,x,c) cimg_for_in9C(img,c0,c1,c) cimg_for_in9X(img,x0,x1,x)\n#define cimg_for_in9YZ(img,y0,z0,y1,z1,y,z) cimg_for_in9Z(img,z0,z1,z) cimg_for_in9Y(img,y0,y1,y)\n#define cimg_for_in9YC(img,y0,c0,y1,c1,y,c) cimg_for_in9C(img,c0,c1,c) cimg_for_in9Y(img,y0,y1,y)\n#define cimg_for_in9ZC(img,z0,c0,z1,c1,z,c) cimg_for_in9C(img,c0,c1,c) cimg_for_in9Z(img,z0,z1,z)\n#define cimg_for_in9XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z) cimg_for_in9Z(img,z0,z1,z) cimg_for_in9XY(img,x0,y0,x1,y1,x,y)\n#define cimg_for_in9XZC(img,x0,z0,c0,x1,y1,c1,x,z,c) cimg_for_in9C(img,c0,c1,c) cimg_for_in9XZ(img,x0,y0,x1,y1,x,z)\n#define cimg_for_in9YZC(img,y0,z0,c0,y1,z1,c1,y,z,c) cimg_for_in9C(img,c0,c1,c) cimg_for_in9YZ(img,y0,z0,y1,z1,y,z)\n#define cimg_for_in9XYZC(img,x0,y0,z0,c0,x1,y1,z1,c1,x,y,z,c) \\\n  cimg_for_in9C(img,c0,c1,c) cimg_for_in9XYZ(img,x0,y0,z0,x1,y1,z1,x,y,z)\n\n#define cimg_for2x2(img,x,y,z,c,I,T) \\\n  cimg_for2((img)._height,y) for (int x = 0, \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(0,y,z,c)), \\\n   (I[2] = (T)(img)(0,_n1##y,z,c)), \\\n   1>=(img)._width?(img).width() - 1:1);  \\\n   (_n1##x<(img).width() && ( \\\n   (I[1] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[0] = I[1], \\\n   I[2] = I[3], \\\n   ++x, ++_n1##x)\n\n#define cimg_for_in2x2(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in2((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(x,y,z,c)), \\\n   (I[2] = (T)(img)(x,_n1##y,z,c)), \\\n   x + 1>=(int)(img)._width?(img).width() - 1:x + 1); \\\n   x<=(int)(x1) && ((_n1##x<(img).width() && (  \\\n   (I[1] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x); \\\n   I[0] = I[1], \\\n   I[2] = I[3], \\\n   ++x, ++_n1##x)\n\n#define cimg_for3x3(img,x,y,z,c,I,T) \\\n  cimg_for3((img)._height,y) for (int x = 0, \\\n   _p1##x = 0, \\\n   _n1##x = (int)( \\\n   (I[0] = I[1] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[3] = I[4] = (T)(img)(0,y,z,c)), \\\n   (I[6] = I[7] = (T)(img)(0,_n1##y,z,c)), \\\n   1>=(img)._width?(img).width() - 1:1); \\\n   (_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[0] = I[1], I[1] = I[2], \\\n   I[3] = I[4], I[4] = I[5], \\\n   I[6] = I[7], I[7] = I[8], \\\n   _p1##x = x++, ++_n1##x)\n\n#define cimg_for_in3x3(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in3((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[3] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[6] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[1] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[4] = (T)(img)(x,y,z,c)), \\\n   (I[7] = (T)(img)(x,_n1##y,z,c)), \\\n   x + 1>=(int)(img)._width?(img).width() - 1:x + 1); \\\n   x<=(int)(x1) && ((_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x);            \\\n   I[0] = I[1], I[1] = I[2], \\\n   I[3] = I[4], I[4] = I[5], \\\n   I[6] = I[7], I[7] = I[8], \\\n   _p1##x = x++, ++_n1##x)\n\n#define cimg_for4x4(img,x,y,z,c,I,T) \\\n  cimg_for4((img)._height,y) for (int x = 0, \\\n   _p1##x = 0, \\\n   _n1##x = 1>=(img)._width?(img).width() - 1:1, \\\n   _n2##x = (int)( \\\n   (I[0] = I[1] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[4] = I[5] = (T)(img)(0,y,z,c)), \\\n   (I[8] = I[9] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[12] = I[13] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[6] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[10] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   2>=(img)._width?(img).width() - 1:2); \\\n   (_n2##x<(img).width() && ( \\\n   (I[3] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[7] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[11] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[15] = (T)(img)(_n2##x,_n2##y,z,c)),1)) || \\\n   _n1##x==--_n2##x || x==(_n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], \\\n   I[4] = I[5], I[5] = I[6], I[6] = I[7], \\\n   I[8] = I[9], I[9] = I[10], I[10] = I[11], \\\n   I[12] = I[13], I[13] = I[14], I[14] = I[15], \\\n   _p1##x = x++, ++_n1##x, ++_n2##x)\n\n#define cimg_for_in4x4(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in4((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(int)(img)._width?(img).width() - 1:x + 1, \\\n   _n2##x = (int)( \\\n   (I[0] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[4] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[8] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[12] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[1] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[5] = (T)(img)(x,y,z,c)), \\\n   (I[9] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[13] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[6] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[10] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   x + 2>=(int)(img)._width?(img).width() - 1:x + 2); \\\n   x<=(int)(x1) && ((_n2##x<(img).width() && ( \\\n   (I[3] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[7] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[11] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[15] = (T)(img)(_n2##x,_n2##y,z,c)),1)) || \\\n   _n1##x==--_n2##x || x==(_n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], \\\n   I[4] = I[5], I[5] = I[6], I[6] = I[7], \\\n   I[8] = I[9], I[9] = I[10], I[10] = I[11], \\\n   I[12] = I[13], I[13] = I[14], I[14] = I[15], \\\n   _p1##x = x++, ++_n1##x, ++_n2##x)\n\n#define cimg_for5x5(img,x,y,z,c,I,T) \\\n cimg_for5((img)._height,y) for (int x = 0, \\\n   _p2##x = 0, _p1##x = 0, \\\n   _n1##x = 1>=(img)._width?(img).width() - 1:1, \\\n   _n2##x = (int)( \\\n   (I[0] = I[1] = I[2] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[5] = I[6] = I[7] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[10] = I[11] = I[12] = (T)(img)(0,y,z,c)), \\\n   (I[15] = I[16] = I[17] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[20] = I[21] = I[22] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[13] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[18] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[23] = (T)(img)(_n1##x,_n2##y,z,c)),  \\\n   2>=(img)._width?(img).width() - 1:2); \\\n   (_n2##x<(img).width() && ( \\\n   (I[4] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[9] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[14] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[19] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[24] = (T)(img)(_n2##x,_n2##y,z,c)),1)) || \\\n   _n1##x==--_n2##x || x==(_n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], \\\n   I[5] = I[6], I[6] = I[7], I[7] = I[8], I[8] = I[9], \\\n   I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], \\\n   I[15] = I[16], I[16] = I[17], I[17] = I[18], I[18] = I[19], \\\n   I[20] = I[21], I[21] = I[22], I[22] = I[23], I[23] = I[24], \\\n   _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x)\n\n#define cimg_for_in5x5(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n cimg_for_in5((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p2##x = x - 2<0?0:x - 2, \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(int)(img)._width?(img).width() - 1:x + 1, \\\n   _n2##x = (int)( \\\n   (I[0] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[5] = (T)(img)(_p2##x,_p1##y,z,c)), \\\n   (I[10] = (T)(img)(_p2##x,y,z,c)), \\\n   (I[15] = (T)(img)(_p2##x,_n1##y,z,c)), \\\n   (I[20] = (T)(img)(_p2##x,_n2##y,z,c)), \\\n   (I[1] = (T)(img)(_p1##x,_p2##y,z,c)), \\\n   (I[6] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[11] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[16] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[21] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[2] = (T)(img)(x,_p2##y,z,c)), \\\n   (I[7] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[12] = (T)(img)(x,y,z,c)), \\\n   (I[17] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[22] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[13] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[18] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[23] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   x + 2>=(int)(img)._width?(img).width() - 1:x + 2); \\\n   x<=(int)(x1) && ((_n2##x<(img).width() && ( \\\n   (I[4] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[9] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[14] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[19] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[24] = (T)(img)(_n2##x,_n2##y,z,c)),1)) || \\\n   _n1##x==--_n2##x || x==(_n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], \\\n   I[5] = I[6], I[6] = I[7], I[7] = I[8], I[8] = I[9], \\\n   I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], \\\n   I[15] = I[16], I[16] = I[17], I[17] = I[18], I[18] = I[19], \\\n   I[20] = I[21], I[21] = I[22], I[22] = I[23], I[23] = I[24], \\\n   _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x)\n\n#define cimg_for6x6(img,x,y,z,c,I,T) \\\n cimg_for6((img)._height,y) for (int x = 0, \\\n   _p2##x = 0, _p1##x = 0, \\\n   _n1##x = 1>=(img)._width?(img).width() - 1:1, \\\n   _n2##x = 2>=(img)._width?(img).width() - 1:2, \\\n   _n3##x = (int)( \\\n   (I[0] = I[1] = I[2] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[6] = I[7] = I[8] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[12] = I[13] = I[14] = (T)(img)(0,y,z,c)), \\\n   (I[18] = I[19] = I[20] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[24] = I[25] = I[26] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[30] = I[31] = I[32] = (T)(img)(0,_n3##y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[9] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[15] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[21] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[27] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[33] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[4] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[10] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[16] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[22] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[28] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[34] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   3>=(img)._width?(img).width() - 1:3); \\\n   (_n3##x<(img).width() && ( \\\n   (I[5] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[11] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[17] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[23] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[29] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[35] = (T)(img)(_n3##x,_n3##y,z,c)),1)) || \\\n   _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n3## x = _n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], \\\n   I[6] = I[7], I[7] = I[8], I[8] = I[9], I[9] = I[10], I[10] = I[11], \\\n   I[12] = I[13], I[13] = I[14], I[14] = I[15], I[15] = I[16], I[16] = I[17], \\\n   I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], \\\n   I[24] = I[25], I[25] = I[26], I[26] = I[27], I[27] = I[28], I[28] = I[29], \\\n   I[30] = I[31], I[31] = I[32], I[32] = I[33], I[33] = I[34], I[34] = I[35], \\\n   _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x)\n\n#define cimg_for_in6x6(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in6((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)x0, \\\n   _p2##x = x - 2<0?0:x - 2, \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(int)(img)._width?(img).width() - 1:x + 1, \\\n   _n2##x = x + 2>=(int)(img)._width?(img).width() - 1:x + 2, \\\n   _n3##x = (int)( \\\n   (I[0] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[6] = (T)(img)(_p2##x,_p1##y,z,c)), \\\n   (I[12] = (T)(img)(_p2##x,y,z,c)), \\\n   (I[18] = (T)(img)(_p2##x,_n1##y,z,c)), \\\n   (I[24] = (T)(img)(_p2##x,_n2##y,z,c)), \\\n   (I[30] = (T)(img)(_p2##x,_n3##y,z,c)), \\\n   (I[1] = (T)(img)(_p1##x,_p2##y,z,c)), \\\n   (I[7] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[13] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[19] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[25] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[31] = (T)(img)(_p1##x,_n3##y,z,c)), \\\n   (I[2] = (T)(img)(x,_p2##y,z,c)), \\\n   (I[8] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[14] = (T)(img)(x,y,z,c)), \\\n   (I[20] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[26] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[32] = (T)(img)(x,_n3##y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[9] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[15] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[21] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[27] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[33] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[4] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[10] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[16] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[22] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[28] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[34] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   x + 3>=(int)(img)._width?(img).width() - 1:x + 3); \\\n   x<=(int)(x1) && ((_n3##x<(img).width() && ( \\\n   (I[5] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[11] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[17] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[23] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[29] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[35] = (T)(img)(_n3##x,_n3##y,z,c)),1)) || \\\n   _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n3## x = _n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], \\\n   I[6] = I[7], I[7] = I[8], I[8] = I[9], I[9] = I[10], I[10] = I[11], \\\n   I[12] = I[13], I[13] = I[14], I[14] = I[15], I[15] = I[16], I[16] = I[17], \\\n   I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], \\\n   I[24] = I[25], I[25] = I[26], I[26] = I[27], I[27] = I[28], I[28] = I[29], \\\n   I[30] = I[31], I[31] = I[32], I[32] = I[33], I[33] = I[34], I[34] = I[35], \\\n   _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x)\n\n#define cimg_for7x7(img,x,y,z,c,I,T) \\\n  cimg_for7((img)._height,y) for (int x = 0, \\\n   _p3##x = 0, _p2##x = 0, _p1##x = 0, \\\n   _n1##x = 1>=(img)._width?(img).width() - 1:1, \\\n   _n2##x = 2>=(img)._width?(img).width() - 1:2, \\\n   _n3##x = (int)( \\\n   (I[0] = I[1] = I[2] = I[3] = (T)(img)(_p3##x,_p3##y,z,c)), \\\n   (I[7] = I[8] = I[9] = I[10] = (T)(img)(0,_p2##y,z,c)), \\\n   (I[14] = I[15] = I[16] = I[17] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[21] = I[22] = I[23] = I[24] = (T)(img)(0,y,z,c)), \\\n   (I[28] = I[29] = I[30] = I[31] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[35] = I[36] = I[37] = I[38] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[42] = I[43] = I[44] = I[45] = (T)(img)(0,_n3##y,z,c)), \\\n   (I[4] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[11] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[18] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[25] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[32] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[39] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[46] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[5] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[12] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[19] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[26] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[33] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[40] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[47] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   3>=(img)._width?(img).width() - 1:3); \\\n   (_n3##x<(img).width() && ( \\\n   (I[6] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[13] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[20] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[27] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[34] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[41] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[48] = (T)(img)(_n3##x,_n3##y,z,c)),1)) || \\\n   _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n3##x = _n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], \\\n   I[7] = I[8], I[8] = I[9], I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], \\\n   I[14] = I[15], I[15] = I[16], I[16] = I[17], I[17] = I[18], I[18] = I[19], I[19] = I[20], \\\n   I[21] = I[22], I[22] = I[23], I[23] = I[24], I[24] = I[25], I[25] = I[26], I[26] = I[27], \\\n   I[28] = I[29], I[29] = I[30], I[30] = I[31], I[31] = I[32], I[32] = I[33], I[33] = I[34], \\\n   I[35] = I[36], I[36] = I[37], I[37] = I[38], I[38] = I[39], I[39] = I[40], I[40] = I[41], \\\n   I[42] = I[43], I[43] = I[44], I[44] = I[45], I[45] = I[46], I[46] = I[47], I[47] = I[48], \\\n   _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x)\n\n#define cimg_for_in7x7(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in7((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p3##x = x - 3<0?0:x - 3, \\\n   _p2##x = x - 2<0?0:x - 2, \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(int)(img)._width?(img).width() - 1:x + 1, \\\n   _n2##x = x + 2>=(int)(img)._width?(img).width() - 1:x + 2, \\\n   _n3##x = (int)( \\\n   (I[0] = (T)(img)(_p3##x,_p3##y,z,c)), \\\n   (I[7] = (T)(img)(_p3##x,_p2##y,z,c)), \\\n   (I[14] = (T)(img)(_p3##x,_p1##y,z,c)), \\\n   (I[21] = (T)(img)(_p3##x,y,z,c)), \\\n   (I[28] = (T)(img)(_p3##x,_n1##y,z,c)), \\\n   (I[35] = (T)(img)(_p3##x,_n2##y,z,c)), \\\n   (I[42] = (T)(img)(_p3##x,_n3##y,z,c)), \\\n   (I[1] = (T)(img)(_p2##x,_p3##y,z,c)), \\\n   (I[8] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[15] = (T)(img)(_p2##x,_p1##y,z,c)), \\\n   (I[22] = (T)(img)(_p2##x,y,z,c)), \\\n   (I[29] = (T)(img)(_p2##x,_n1##y,z,c)), \\\n   (I[36] = (T)(img)(_p2##x,_n2##y,z,c)), \\\n   (I[43] = (T)(img)(_p2##x,_n3##y,z,c)), \\\n   (I[2] = (T)(img)(_p1##x,_p3##y,z,c)), \\\n   (I[9] = (T)(img)(_p1##x,_p2##y,z,c)), \\\n   (I[16] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[23] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[30] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[37] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[44] = (T)(img)(_p1##x,_n3##y,z,c)), \\\n   (I[3] = (T)(img)(x,_p3##y,z,c)), \\\n   (I[10] = (T)(img)(x,_p2##y,z,c)), \\\n   (I[17] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[24] = (T)(img)(x,y,z,c)), \\\n   (I[31] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[38] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[45] = (T)(img)(x,_n3##y,z,c)), \\\n   (I[4] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[11] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[18] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[25] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[32] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[39] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[46] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[5] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[12] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[19] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[26] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[33] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[40] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[47] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   x + 3>=(int)(img)._width?(img).width() - 1:x + 3); \\\n   x<=(int)(x1) && ((_n3##x<(img).width() && ( \\\n   (I[6] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[13] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[20] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[27] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[34] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[41] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[48] = (T)(img)(_n3##x,_n3##y,z,c)),1)) || \\\n   _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n3##x = _n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], \\\n   I[7] = I[8], I[8] = I[9], I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], \\\n   I[14] = I[15], I[15] = I[16], I[16] = I[17], I[17] = I[18], I[18] = I[19], I[19] = I[20], \\\n   I[21] = I[22], I[22] = I[23], I[23] = I[24], I[24] = I[25], I[25] = I[26], I[26] = I[27], \\\n   I[28] = I[29], I[29] = I[30], I[30] = I[31], I[31] = I[32], I[32] = I[33], I[33] = I[34], \\\n   I[35] = I[36], I[36] = I[37], I[37] = I[38], I[38] = I[39], I[39] = I[40], I[40] = I[41], \\\n   I[42] = I[43], I[43] = I[44], I[44] = I[45], I[45] = I[46], I[46] = I[47], I[47] = I[48], \\\n   _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x)\n\n#define cimg_for8x8(img,x,y,z,c,I,T) \\\n  cimg_for8((img)._height,y) for (int x = 0, \\\n   _p3##x = 0, _p2##x = 0, _p1##x = 0, \\\n   _n1##x = 1>=((img)._width)?(img).width() - 1:1, \\\n   _n2##x = 2>=((img)._width)?(img).width() - 1:2, \\\n   _n3##x = 3>=((img)._width)?(img).width() - 1:3, \\\n   _n4##x = (int)( \\\n   (I[0] = I[1] = I[2] = I[3] = (T)(img)(_p3##x,_p3##y,z,c)), \\\n   (I[8] = I[9] = I[10] = I[11] = (T)(img)(0,_p2##y,z,c)), \\\n   (I[16] = I[17] = I[18] = I[19] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[24] = I[25] = I[26] = I[27] = (T)(img)(0,y,z,c)), \\\n   (I[32] = I[33] = I[34] = I[35] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[40] = I[41] = I[42] = I[43] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[48] = I[49] = I[50] = I[51] = (T)(img)(0,_n3##y,z,c)), \\\n   (I[56] = I[57] = I[58] = I[59] = (T)(img)(0,_n4##y,z,c)), \\\n   (I[4] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[12] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[20] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[28] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[36] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[44] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[52] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[60] = (T)(img)(_n1##x,_n4##y,z,c)), \\\n   (I[5] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[13] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[21] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[29] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[37] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[45] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[53] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   (I[61] = (T)(img)(_n2##x,_n4##y,z,c)), \\\n   (I[6] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[14] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[22] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[30] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[38] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[46] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[54] = (T)(img)(_n3##x,_n3##y,z,c)), \\\n   (I[62] = (T)(img)(_n3##x,_n4##y,z,c)), \\\n   4>=((img)._width)?(img).width() - 1:4); \\\n   (_n4##x<(img).width() && ( \\\n   (I[7] = (T)(img)(_n4##x,_p3##y,z,c)), \\\n   (I[15] = (T)(img)(_n4##x,_p2##y,z,c)), \\\n   (I[23] = (T)(img)(_n4##x,_p1##y,z,c)), \\\n   (I[31] = (T)(img)(_n4##x,y,z,c)), \\\n   (I[39] = (T)(img)(_n4##x,_n1##y,z,c)), \\\n   (I[47] = (T)(img)(_n4##x,_n2##y,z,c)), \\\n   (I[55] = (T)(img)(_n4##x,_n3##y,z,c)), \\\n   (I[63] = (T)(img)(_n4##x,_n4##y,z,c)),1)) || \\\n   _n3##x==--_n4##x || _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n4##x = _n3##x = _n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], I[6] = I[7], \\\n   I[8] = I[9], I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], I[14] = I[15], \\\n   I[16] = I[17], I[17] = I[18], I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], \\\n   I[24] = I[25], I[25] = I[26], I[26] = I[27], I[27] = I[28], I[28] = I[29], I[29] = I[30], I[30] = I[31], \\\n   I[32] = I[33], I[33] = I[34], I[34] = I[35], I[35] = I[36], I[36] = I[37], I[37] = I[38], I[38] = I[39], \\\n   I[40] = I[41], I[41] = I[42], I[42] = I[43], I[43] = I[44], I[44] = I[45], I[45] = I[46], I[46] = I[47], \\\n   I[48] = I[49], I[49] = I[50], I[50] = I[51], I[51] = I[52], I[52] = I[53], I[53] = I[54], I[54] = I[55], \\\n   I[56] = I[57], I[57] = I[58], I[58] = I[59], I[59] = I[60], I[60] = I[61], I[61] = I[62], I[62] = I[63], \\\n   _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x, ++_n4##x)\n\n#define cimg_for_in8x8(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in8((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p3##x = x - 3<0?0:x - 3, \\\n   _p2##x = x - 2<0?0:x - 2, \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(img).width()?(img).width() - 1:x + 1, \\\n   _n2##x = x + 2>=(img).width()?(img).width() - 1:x + 2, \\\n   _n3##x = x + 3>=(img).width()?(img).width() - 1:x + 3, \\\n   _n4##x = (int)( \\\n   (I[0] = (T)(img)(_p3##x,_p3##y,z,c)), \\\n   (I[8] = (T)(img)(_p3##x,_p2##y,z,c)), \\\n   (I[16] = (T)(img)(_p3##x,_p1##y,z,c)), \\\n   (I[24] = (T)(img)(_p3##x,y,z,c)), \\\n   (I[32] = (T)(img)(_p3##x,_n1##y,z,c)), \\\n   (I[40] = (T)(img)(_p3##x,_n2##y,z,c)), \\\n   (I[48] = (T)(img)(_p3##x,_n3##y,z,c)), \\\n   (I[56] = (T)(img)(_p3##x,_n4##y,z,c)), \\\n   (I[1] = (T)(img)(_p2##x,_p3##y,z,c)), \\\n   (I[9] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[17] = (T)(img)(_p2##x,_p1##y,z,c)), \\\n   (I[25] = (T)(img)(_p2##x,y,z,c)), \\\n   (I[33] = (T)(img)(_p2##x,_n1##y,z,c)), \\\n   (I[41] = (T)(img)(_p2##x,_n2##y,z,c)), \\\n   (I[49] = (T)(img)(_p2##x,_n3##y,z,c)), \\\n   (I[57] = (T)(img)(_p2##x,_n4##y,z,c)), \\\n   (I[2] = (T)(img)(_p1##x,_p3##y,z,c)), \\\n   (I[10] = (T)(img)(_p1##x,_p2##y,z,c)), \\\n   (I[18] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[26] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[34] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[42] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[50] = (T)(img)(_p1##x,_n3##y,z,c)), \\\n   (I[58] = (T)(img)(_p1##x,_n4##y,z,c)), \\\n   (I[3] = (T)(img)(x,_p3##y,z,c)), \\\n   (I[11] = (T)(img)(x,_p2##y,z,c)), \\\n   (I[19] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[27] = (T)(img)(x,y,z,c)), \\\n   (I[35] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[43] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[51] = (T)(img)(x,_n3##y,z,c)), \\\n   (I[59] = (T)(img)(x,_n4##y,z,c)), \\\n   (I[4] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[12] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[20] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[28] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[36] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[44] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[52] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[60] = (T)(img)(_n1##x,_n4##y,z,c)), \\\n   (I[5] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[13] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[21] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[29] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[37] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[45] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[53] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   (I[61] = (T)(img)(_n2##x,_n4##y,z,c)), \\\n   (I[6] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[14] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[22] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[30] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[38] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[46] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[54] = (T)(img)(_n3##x,_n3##y,z,c)), \\\n   (I[62] = (T)(img)(_n3##x,_n4##y,z,c)), \\\n   x + 4>=(img).width()?(img).width() - 1:x + 4); \\\n   x<=(int)(x1) && ((_n4##x<(img).width() && ( \\\n   (I[7] = (T)(img)(_n4##x,_p3##y,z,c)), \\\n   (I[15] = (T)(img)(_n4##x,_p2##y,z,c)), \\\n   (I[23] = (T)(img)(_n4##x,_p1##y,z,c)), \\\n   (I[31] = (T)(img)(_n4##x,y,z,c)), \\\n   (I[39] = (T)(img)(_n4##x,_n1##y,z,c)), \\\n   (I[47] = (T)(img)(_n4##x,_n2##y,z,c)), \\\n   (I[55] = (T)(img)(_n4##x,_n3##y,z,c)), \\\n   (I[63] = (T)(img)(_n4##x,_n4##y,z,c)),1)) || \\\n   _n3##x==--_n4##x || _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n4##x = _n3##x = _n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], I[6] = I[7], \\\n   I[8] = I[9], I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], I[14] = I[15], \\\n   I[16] = I[17], I[17] = I[18], I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], \\\n   I[24] = I[25], I[25] = I[26], I[26] = I[27], I[27] = I[28], I[28] = I[29], I[29] = I[30], I[30] = I[31], \\\n   I[32] = I[33], I[33] = I[34], I[34] = I[35], I[35] = I[36], I[36] = I[37], I[37] = I[38], I[38] = I[39], \\\n   I[40] = I[41], I[41] = I[42], I[42] = I[43], I[43] = I[44], I[44] = I[45], I[45] = I[46], I[46] = I[47], \\\n   I[48] = I[49], I[49] = I[50], I[50] = I[51], I[51] = I[52], I[52] = I[53], I[53] = I[54], I[54] = I[55], \\\n   I[56] = I[57], I[57] = I[58], I[58] = I[59], I[59] = I[60], I[60] = I[61], I[61] = I[62], I[62] = I[63], \\\n   _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x, ++_n4##x)\n\n#define cimg_for9x9(img,x,y,z,c,I,T) \\\n  cimg_for9((img)._height,y) for (int x = 0, \\\n   _p4##x = 0, _p3##x = 0, _p2##x = 0, _p1##x = 0, \\\n   _n1##x = 1>=((img)._width)?(img).width() - 1:1, \\\n   _n2##x = 2>=((img)._width)?(img).width() - 1:2, \\\n   _n3##x = 3>=((img)._width)?(img).width() - 1:3, \\\n   _n4##x = (int)( \\\n   (I[0] = I[1] = I[2] = I[3] = I[4] = (T)(img)(_p4##x,_p4##y,z,c)), \\\n   (I[9] = I[10] = I[11] = I[12] = I[13] = (T)(img)(0,_p3##y,z,c)), \\\n   (I[18] = I[19] = I[20] = I[21] = I[22] = (T)(img)(0,_p2##y,z,c)), \\\n   (I[27] = I[28] = I[29] = I[30] = I[31] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[36] = I[37] = I[38] = I[39] = I[40] = (T)(img)(0,y,z,c)), \\\n   (I[45] = I[46] = I[47] = I[48] = I[49] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[54] = I[55] = I[56] = I[57] = I[58] = (T)(img)(0,_n2##y,z,c)), \\\n   (I[63] = I[64] = I[65] = I[66] = I[67] = (T)(img)(0,_n3##y,z,c)), \\\n   (I[72] = I[73] = I[74] = I[75] = I[76] = (T)(img)(0,_n4##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,_p4##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[23] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[32] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[41] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[50] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[59] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[68] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[77] = (T)(img)(_n1##x,_n4##y,z,c)), \\\n   (I[6] = (T)(img)(_n2##x,_p4##y,z,c)), \\\n   (I[15] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[24] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[33] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[42] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[51] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[60] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[69] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   (I[78] = (T)(img)(_n2##x,_n4##y,z,c)), \\\n   (I[7] = (T)(img)(_n3##x,_p4##y,z,c)), \\\n   (I[16] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[25] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[34] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[43] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[52] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[61] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[70] = (T)(img)(_n3##x,_n3##y,z,c)), \\\n   (I[79] = (T)(img)(_n3##x,_n4##y,z,c)), \\\n   4>=((img)._width)?(img).width() - 1:4); \\\n   (_n4##x<(img).width() && ( \\\n   (I[8] = (T)(img)(_n4##x,_p4##y,z,c)), \\\n   (I[17] = (T)(img)(_n4##x,_p3##y,z,c)), \\\n   (I[26] = (T)(img)(_n4##x,_p2##y,z,c)), \\\n   (I[35] = (T)(img)(_n4##x,_p1##y,z,c)), \\\n   (I[44] = (T)(img)(_n4##x,y,z,c)), \\\n   (I[53] = (T)(img)(_n4##x,_n1##y,z,c)), \\\n   (I[62] = (T)(img)(_n4##x,_n2##y,z,c)), \\\n   (I[71] = (T)(img)(_n4##x,_n3##y,z,c)), \\\n   (I[80] = (T)(img)(_n4##x,_n4##y,z,c)),1)) || \\\n   _n3##x==--_n4##x || _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n4##x = _n3##x = _n2##x = --_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], I[6] = I[7], I[7] = I[8], \\\n   I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], I[14] = I[15], I[15] = I[16], \\\n   I[16] = I[17], I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], I[23] = I[24], \\\n   I[24] = I[25], I[25] = I[26], I[27] = I[28], I[28] = I[29], I[29] = I[30], I[30] = I[31], I[31] = I[32], \\\n   I[32] = I[33], I[33] = I[34], I[34] = I[35], I[36] = I[37], I[37] = I[38], I[38] = I[39], I[39] = I[40], \\\n   I[40] = I[41], I[41] = I[42], I[42] = I[43], I[43] = I[44], I[45] = I[46], I[46] = I[47], I[47] = I[48], \\\n   I[48] = I[49], I[49] = I[50], I[50] = I[51], I[51] = I[52], I[52] = I[53], I[54] = I[55], I[55] = I[56], \\\n   I[56] = I[57], I[57] = I[58], I[58] = I[59], I[59] = I[60], I[60] = I[61], I[61] = I[62], I[63] = I[64], \\\n   I[64] = I[65], I[65] = I[66], I[66] = I[67], I[67] = I[68], I[68] = I[69], I[69] = I[70], I[70] = I[71], \\\n   I[72] = I[73], I[73] = I[74], I[74] = I[75], I[75] = I[76], I[76] = I[77], I[77] = I[78], I[78] = I[79], \\\n   I[79] = I[80], \\\n   _p4##x = _p3##x, _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x, ++_n4##x)\n\n#define cimg_for_in9x9(img,x0,y0,x1,y1,x,y,z,c,I,T) \\\n  cimg_for_in9((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p4##x = x - 4<0?0:x - 4, \\\n   _p3##x = x - 3<0?0:x - 3, \\\n   _p2##x = x - 2<0?0:x - 2, \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = x + 1>=(img).width()?(img).width() - 1:x + 1, \\\n   _n2##x = x + 2>=(img).width()?(img).width() - 1:x + 2, \\\n   _n3##x = x + 3>=(img).width()?(img).width() - 1:x + 3, \\\n   _n4##x = (int)( \\\n   (I[0] = (T)(img)(_p4##x,_p4##y,z,c)), \\\n   (I[9] = (T)(img)(_p4##x,_p3##y,z,c)), \\\n   (I[18] = (T)(img)(_p4##x,_p2##y,z,c)), \\\n   (I[27] = (T)(img)(_p4##x,_p1##y,z,c)), \\\n   (I[36] = (T)(img)(_p4##x,y,z,c)), \\\n   (I[45] = (T)(img)(_p4##x,_n1##y,z,c)), \\\n   (I[54] = (T)(img)(_p4##x,_n2##y,z,c)), \\\n   (I[63] = (T)(img)(_p4##x,_n3##y,z,c)), \\\n   (I[72] = (T)(img)(_p4##x,_n4##y,z,c)), \\\n   (I[1] = (T)(img)(_p3##x,_p4##y,z,c)), \\\n   (I[10] = (T)(img)(_p3##x,_p3##y,z,c)), \\\n   (I[19] = (T)(img)(_p3##x,_p2##y,z,c)), \\\n   (I[28] = (T)(img)(_p3##x,_p1##y,z,c)), \\\n   (I[37] = (T)(img)(_p3##x,y,z,c)), \\\n   (I[46] = (T)(img)(_p3##x,_n1##y,z,c)), \\\n   (I[55] = (T)(img)(_p3##x,_n2##y,z,c)), \\\n   (I[64] = (T)(img)(_p3##x,_n3##y,z,c)), \\\n   (I[73] = (T)(img)(_p3##x,_n4##y,z,c)), \\\n   (I[2] = (T)(img)(_p2##x,_p4##y,z,c)), \\\n   (I[11] = (T)(img)(_p2##x,_p3##y,z,c)), \\\n   (I[20] = (T)(img)(_p2##x,_p2##y,z,c)), \\\n   (I[29] = (T)(img)(_p2##x,_p1##y,z,c)), \\\n   (I[38] = (T)(img)(_p2##x,y,z,c)), \\\n   (I[47] = (T)(img)(_p2##x,_n1##y,z,c)), \\\n   (I[56] = (T)(img)(_p2##x,_n2##y,z,c)), \\\n   (I[65] = (T)(img)(_p2##x,_n3##y,z,c)), \\\n   (I[74] = (T)(img)(_p2##x,_n4##y,z,c)), \\\n   (I[3] = (T)(img)(_p1##x,_p4##y,z,c)), \\\n   (I[12] = (T)(img)(_p1##x,_p3##y,z,c)), \\\n   (I[21] = (T)(img)(_p1##x,_p2##y,z,c)), \\\n   (I[30] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[39] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[48] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[57] = (T)(img)(_p1##x,_n2##y,z,c)), \\\n   (I[66] = (T)(img)(_p1##x,_n3##y,z,c)), \\\n   (I[75] = (T)(img)(_p1##x,_n4##y,z,c)), \\\n   (I[4] = (T)(img)(x,_p4##y,z,c)), \\\n   (I[13] = (T)(img)(x,_p3##y,z,c)), \\\n   (I[22] = (T)(img)(x,_p2##y,z,c)), \\\n   (I[31] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[40] = (T)(img)(x,y,z,c)), \\\n   (I[49] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[58] = (T)(img)(x,_n2##y,z,c)), \\\n   (I[67] = (T)(img)(x,_n3##y,z,c)), \\\n   (I[76] = (T)(img)(x,_n4##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,_p4##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,_p3##y,z,c)), \\\n   (I[23] = (T)(img)(_n1##x,_p2##y,z,c)), \\\n   (I[32] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[41] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[50] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[59] = (T)(img)(_n1##x,_n2##y,z,c)), \\\n   (I[68] = (T)(img)(_n1##x,_n3##y,z,c)), \\\n   (I[77] = (T)(img)(_n1##x,_n4##y,z,c)), \\\n   (I[6] = (T)(img)(_n2##x,_p4##y,z,c)), \\\n   (I[15] = (T)(img)(_n2##x,_p3##y,z,c)), \\\n   (I[24] = (T)(img)(_n2##x,_p2##y,z,c)), \\\n   (I[33] = (T)(img)(_n2##x,_p1##y,z,c)), \\\n   (I[42] = (T)(img)(_n2##x,y,z,c)), \\\n   (I[51] = (T)(img)(_n2##x,_n1##y,z,c)), \\\n   (I[60] = (T)(img)(_n2##x,_n2##y,z,c)), \\\n   (I[69] = (T)(img)(_n2##x,_n3##y,z,c)), \\\n   (I[78] = (T)(img)(_n2##x,_n4##y,z,c)), \\\n   (I[7] = (T)(img)(_n3##x,_p4##y,z,c)), \\\n   (I[16] = (T)(img)(_n3##x,_p3##y,z,c)), \\\n   (I[25] = (T)(img)(_n3##x,_p2##y,z,c)), \\\n   (I[34] = (T)(img)(_n3##x,_p1##y,z,c)), \\\n   (I[43] = (T)(img)(_n3##x,y,z,c)), \\\n   (I[52] = (T)(img)(_n3##x,_n1##y,z,c)), \\\n   (I[61] = (T)(img)(_n3##x,_n2##y,z,c)), \\\n   (I[70] = (T)(img)(_n3##x,_n3##y,z,c)), \\\n   (I[79] = (T)(img)(_n3##x,_n4##y,z,c)), \\\n   x + 4>=(img).width()?(img).width() - 1:x + 4); \\\n   x<=(int)(x1) && ((_n4##x<(img).width() && ( \\\n   (I[8] = (T)(img)(_n4##x,_p4##y,z,c)), \\\n   (I[17] = (T)(img)(_n4##x,_p3##y,z,c)), \\\n   (I[26] = (T)(img)(_n4##x,_p2##y,z,c)), \\\n   (I[35] = (T)(img)(_n4##x,_p1##y,z,c)), \\\n   (I[44] = (T)(img)(_n4##x,y,z,c)), \\\n   (I[53] = (T)(img)(_n4##x,_n1##y,z,c)), \\\n   (I[62] = (T)(img)(_n4##x,_n2##y,z,c)), \\\n   (I[71] = (T)(img)(_n4##x,_n3##y,z,c)), \\\n   (I[80] = (T)(img)(_n4##x,_n4##y,z,c)),1)) || \\\n   _n3##x==--_n4##x || _n2##x==--_n3##x || _n1##x==--_n2##x || x==(_n4##x = _n3##x = _n2##x = --_n1##x)); \\\n   I[0] = I[1], I[1] = I[2], I[2] = I[3], I[3] = I[4], I[4] = I[5], I[5] = I[6], I[6] = I[7], I[7] = I[8], \\\n   I[9] = I[10], I[10] = I[11], I[11] = I[12], I[12] = I[13], I[13] = I[14], I[14] = I[15], I[15] = I[16], \\\n   I[16] = I[17], I[18] = I[19], I[19] = I[20], I[20] = I[21], I[21] = I[22], I[22] = I[23], I[23] = I[24], \\\n   I[24] = I[25], I[25] = I[26], I[27] = I[28], I[28] = I[29], I[29] = I[30], I[30] = I[31], I[31] = I[32], \\\n   I[32] = I[33], I[33] = I[34], I[34] = I[35], I[36] = I[37], I[37] = I[38], I[38] = I[39], I[39] = I[40], \\\n   I[40] = I[41], I[41] = I[42], I[42] = I[43], I[43] = I[44], I[45] = I[46], I[46] = I[47], I[47] = I[48], \\\n   I[48] = I[49], I[49] = I[50], I[50] = I[51], I[51] = I[52], I[52] = I[53], I[54] = I[55], I[55] = I[56], \\\n   I[56] = I[57], I[57] = I[58], I[58] = I[59], I[59] = I[60], I[60] = I[61], I[61] = I[62], I[63] = I[64], \\\n   I[64] = I[65], I[65] = I[66], I[66] = I[67], I[67] = I[68], I[68] = I[69], I[69] = I[70], I[70] = I[71], \\\n   I[72] = I[73], I[73] = I[74], I[74] = I[75], I[75] = I[76], I[76] = I[77], I[77] = I[78], I[78] = I[79], \\\n   I[79] = I[80], \\\n   _p4##x = _p3##x, _p3##x = _p2##x, _p2##x = _p1##x, _p1##x = x++, ++_n1##x, ++_n2##x, ++_n3##x, ++_n4##x)\n\n#define cimg_for2x2x2(img,x,y,z,c,I,T) \\\n cimg_for2((img)._depth,z) cimg_for2((img)._height,y) for (int x = 0, \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(0,y,z,c)), \\\n   (I[2] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[4] = (T)(img)(0,y,_n1##z,c)), \\\n   (I[6] = (T)(img)(0,_n1##y,_n1##z,c)), \\\n   1>=(img)._width?(img).width() - 1:1); \\\n   (_n1##x<(img).width() && ( \\\n   (I[1] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,_n1##z,c)), \\\n   (I[7] = (T)(img)(_n1##x,_n1##y,_n1##z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[0] = I[1], I[2] = I[3], I[4] = I[5], I[6] = I[7], \\\n   ++x, ++_n1##x)\n\n#define cimg_for_in2x2x2(img,x0,y0,z0,x1,y1,z1,x,y,z,c,I,T) \\\n cimg_for_in2((img)._depth,z0,z1,z) cimg_for_in2((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(x,y,z,c)), \\\n   (I[2] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[4] = (T)(img)(x,y,_n1##z,c)), \\\n   (I[6] = (T)(img)(x,_n1##y,_n1##z,c)), \\\n   x + 1>=(int)(img)._width?(img).width() - 1:x + 1); \\\n   x<=(int)(x1) && ((_n1##x<(img).width() && ( \\\n   (I[1] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[3] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,_n1##z,c)), \\\n   (I[7] = (T)(img)(_n1##x,_n1##y,_n1##z,c)),1)) || \\\n   x==--_n1##x); \\\n   I[0] = I[1], I[2] = I[3], I[4] = I[5], I[6] = I[7], \\\n   ++x, ++_n1##x)\n\n#define cimg_for3x3x3(img,x,y,z,c,I,T) \\\n cimg_for3((img)._depth,z) cimg_for3((img)._height,y) for (int x = 0, \\\n   _p1##x = 0, \\\n   _n1##x = (int)( \\\n   (I[0] = I[1] = (T)(img)(_p1##x,_p1##y,_p1##z,c)), \\\n   (I[3] = I[4] = (T)(img)(0,y,_p1##z,c)),  \\\n   (I[6] = I[7] = (T)(img)(0,_n1##y,_p1##z,c)), \\\n   (I[9] = I[10] = (T)(img)(0,_p1##y,z,c)), \\\n   (I[12] = I[13] = (T)(img)(0,y,z,c)), \\\n   (I[15] = I[16] = (T)(img)(0,_n1##y,z,c)), \\\n   (I[18] = I[19] = (T)(img)(0,_p1##y,_n1##z,c)), \\\n   (I[21] = I[22] = (T)(img)(0,y,_n1##z,c)), \\\n   (I[24] = I[25] = (T)(img)(0,_n1##y,_n1##z,c)), \\\n   1>=(img)._width?(img).width() - 1:1); \\\n   (_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,_p1##z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,_p1##z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,_p1##z,c)), \\\n   (I[11] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[17] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[20] = (T)(img)(_n1##x,_p1##y,_n1##z,c)), \\\n   (I[23] = (T)(img)(_n1##x,y,_n1##z,c)), \\\n   (I[26] = (T)(img)(_n1##x,_n1##y,_n1##z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[0] = I[1], I[1] = I[2], I[3] = I[4], I[4] = I[5], I[6] = I[7], I[7] = I[8], \\\n   I[9] = I[10], I[10] = I[11], I[12] = I[13], I[13] = I[14], I[15] = I[16], I[16] = I[17], \\\n   I[18] = I[19], I[19] = I[20], I[21] = I[22], I[22] = I[23], I[24] = I[25], I[25] = I[26], \\\n   _p1##x = x++, ++_n1##x)\n\n#define cimg_for_in3x3x3(img,x0,y0,z0,x1,y1,z1,x,y,z,c,I,T) \\\n cimg_for_in3((img)._depth,z0,z1,z) cimg_for_in3((img)._height,y0,y1,y) for (int x = (int)(x0)<0?0:(int)(x0), \\\n   _p1##x = x - 1<0?0:x - 1, \\\n   _n1##x = (int)( \\\n   (I[0] = (T)(img)(_p1##x,_p1##y,_p1##z,c)), \\\n   (I[3] = (T)(img)(_p1##x,y,_p1##z,c)),  \\\n   (I[6] = (T)(img)(_p1##x,_n1##y,_p1##z,c)), \\\n   (I[9] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[12] = (T)(img)(_p1##x,y,z,c)), \\\n   (I[15] = (T)(img)(_p1##x,_n1##y,z,c)), \\\n   (I[18] = (T)(img)(_p1##x,_p1##y,_n1##z,c)), \\\n   (I[21] = (T)(img)(_p1##x,y,_n1##z,c)), \\\n   (I[24] = (T)(img)(_p1##x,_n1##y,_n1##z,c)), \\\n   (I[1] = (T)(img)(x,_p1##y,_p1##z,c)), \\\n   (I[4] = (T)(img)(x,y,_p1##z,c)),  \\\n   (I[7] = (T)(img)(x,_n1##y,_p1##z,c)), \\\n   (I[10] = (T)(img)(x,_p1##y,z,c)), \\\n   (I[13] = (T)(img)(x,y,z,c)), \\\n   (I[16] = (T)(img)(x,_n1##y,z,c)), \\\n   (I[19] = (T)(img)(x,_p1##y,_n1##z,c)), \\\n   (I[22] = (T)(img)(x,y,_n1##z,c)), \\\n   (I[25] = (T)(img)(x,_n1##y,_n1##z,c)), \\\n   x + 1>=(int)(img)._width?(img).width() - 1:x + 1); \\\n   x<=(int)(x1) && ((_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,_p1##z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,_p1##z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,_p1##z,c)), \\\n   (I[11] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[14] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[17] = (T)(img)(_n1##x,_n1##y,z,c)), \\\n   (I[20] = (T)(img)(_n1##x,_p1##y,_n1##z,c)), \\\n   (I[23] = (T)(img)(_n1##x,y,_n1##z,c)), \\\n   (I[26] = (T)(img)(_n1##x,_n1##y,_n1##z,c)),1)) || \\\n   x==--_n1##x); \\\n   I[0] = I[1], I[1] = I[2], I[3] = I[4], I[4] = I[5], I[6] = I[7], I[7] = I[8], \\\n   I[9] = I[10], I[10] = I[11], I[12] = I[13], I[13] = I[14], I[15] = I[16], I[16] = I[17], \\\n   I[18] = I[19], I[19] = I[20], I[21] = I[22], I[22] = I[23], I[24] = I[25], I[25] = I[26], \\\n   _p1##x = x++, ++_n1##x)\n\n#define cimglist_for(list,l) for (int l = 0; l<(int)(list)._width; ++l)\n#define cimglist_for_in(list,l0,l1,l) \\\n  for (int l = (int)(l0)<0?0:(int)(l0), _max##l = (unsigned int)l1<(list)._width?(int)(l1):(int)(list)._width - 1; \\\n  l<=_max##l; ++l)\n\n#define cimglist_apply(list,fn) cimglist_for(list,__##fn) (list)[__##fn].fn\n\n// Macros used to display error messages when exceptions are thrown.\n// You should not use these macros is your own code.\n#define _cimgdisplay_instance \"[instance(%u,%u,%u,%c%s%c)] CImgDisplay::\"\n#define cimgdisplay_instance _width,_height,_normalization,_title?'\\\"':'[',_title?_title:\"untitled\",_title?'\\\"':']'\n#define _cimg_instance \"[instance(%u,%u,%u,%u,%p,%sshared)] CImg<%s>::\"\n#define cimg_instance _width,_height,_depth,_spectrum,_data,_is_shared?\"\":\"non-\",pixel_type()\n#define _cimglist_instance \"[instance(%u,%u,%p)] CImgList<%s>::\"\n#define cimglist_instance _width,_allocated_width,_data,pixel_type()\n\n/*------------------------------------------------\n #\n #\n #  Define cimg_library:: namespace\n #\n #\n -------------------------------------------------*/\n//! Contains <i>all classes and functions</i> of the \\CImg library.\n/**\n   This namespace is defined to avoid functions and class names collisions\n   that could happen with the inclusion of other C++ header files.\n   Anyway, it should not happen often and you should reasonnably start most of your\n   \\CImg-based programs with\n   \\code\n   #include \"CImg.h\"\n   using namespace cimg_library;\n   \\endcode\n   to simplify the declaration of \\CImg Library objects afterwards.\n**/\nnamespace cimg_library_suffixed {\n\n  // Declare the four classes of the CImg Library.\n  template<typename T=float> struct CImg;\n  template<typename T=float> struct CImgList;\n  struct CImgDisplay;\n  struct CImgException;\n\n  // Declare cimg:: namespace.\n  // This is an uncomplete namespace definition here. It only contains some\n  // necessary stuff to ensure a correct declaration order of the classes and functions\n  // defined afterwards.\n  namespace cimg {\n\n    // Define ascii sequences for colored terminal output.\n#ifdef cimg_use_vt100\n    static const char t_normal[] = { 0x1b, '[', '0', ';', '0', ';', '0', 'm', 0 };\n    static const char t_black[] = { 0x1b, '[', '0', ';', '3', '0', ';', '5', '9', 'm', 0 };\n    static const char t_red[] = { 0x1b, '[', '0', ';', '3', '1', ';', '5', '9', 'm', 0 };\n    static const char t_green[] = { 0x1b, '[', '0', ';', '3', '2', ';', '5', '9', 'm', 0 };\n    static const char t_yellow[] = { 0x1b, '[', '0', ';', '3', '3', ';', '5', '9', 'm', 0 };\n    static const char t_blue[] = { 0x1b, '[', '0', ';', '3', '4', ';', '5', '9', 'm', 0 };\n    static const char t_magenta[] = { 0x1b, '[', '0', ';', '3', '5', ';', '5', '9', 'm', 0 };\n    static const char t_cyan[] = { 0x1b, '[', '0', ';', '3', '6', ';', '5', '9', 'm', 0 };\n    static const char t_white[] = { 0x1b, '[', '0', ';', '3', '7', ';', '5', '9', 'm', 0 };\n    static const char t_bold[] = { 0x1b, '[', '1', 'm', 0 };\n    static const char t_underscore[] = { 0x1b, '[', '4', 'm', 0 };\n#else\n    static const char t_normal[] = { 0 };\n    static const char *const t_black = cimg::t_normal,\n      *const t_red = cimg::t_normal,\n      *const t_green = cimg::t_normal,\n      *const t_yellow = cimg::t_normal,\n      *const t_blue = cimg::t_normal,\n      *const t_magenta = cimg::t_normal,\n      *const t_cyan = cimg::t_normal,\n      *const t_white = cimg::t_normal,\n      *const t_bold = cimg::t_normal,\n      *const t_underscore = cimg::t_normal;\n#endif\n\n    inline std::FILE* output(std::FILE *file=0);\n    inline void info();\n\n    //! Avoid warning messages due to unused parameters. Do nothing actually.\n    template<typename T>\n    inline void unused(const T&, ...) {}\n\n    // [internal] Lock/unlock a mutex for managing concurrent threads.\n    // 'lock_mode' can be { 0=unlock | 1=lock | 2=trylock }.\n    // 'n' can be in [0,31] but mutex range [0,15] is reserved by CImg.\n    inline int mutex(const unsigned int n, const int lock_mode=1);\n\n    inline unsigned int& _exception_mode(const unsigned int value, const bool is_set) {\n      static unsigned int mode = cimg_verbosity;\n      if (is_set) { cimg::mutex(0); mode = value<4?value:4; cimg::mutex(0,0); }\n      return mode;\n    }\n\n    // Functions to return standard streams 'stdin', 'stdout' and 'stderr'.\n    inline FILE* _stdin(const bool throw_exception=true);\n    inline FILE* _stdout(const bool throw_exception=true);\n    inline FILE* _stderr(const bool throw_exception=true);\n\n    // Mandatory because Microsoft's _snprintf() and _vsnprintf() do not add the '\\0' character\n    // at the end of the string.\n#if cimg_OS==2 && defined(_MSC_VER)\n    inline int _snprintf(char *const s, const size_t size, const char *const format, ...) {\n      va_list ap;\n      va_start(ap,format);\n      const int result = _vsnprintf(s,size,format,ap);\n      va_end(ap);\n      return result;\n    }\n\n    inline int _vsnprintf(char *const s, const size_t size, const char *const format, va_list ap) {\n      int result = -1;\n      cimg::mutex(6);\n      if (size) result = _vsnprintf_s(s,size,_TRUNCATE,format,ap);\n      if (result==-1) result = _vscprintf(format,ap);\n      cimg::mutex(6,0);\n      return result;\n    }\n\n    // Mutex-protected version of sscanf, sprintf and snprintf.\n    // Used only MacOSX, as it seems those functions are not re-entrant on MacOSX.\n#elif defined(__MACOSX__) || defined(__APPLE__)\n    inline int _sscanf(const char *const s, const char *const format, ...) {\n      cimg::mutex(6);\n      va_list args;\n      va_start(args,format);\n      const int result = std::vsscanf(s,format,args);\n      va_end(args);\n      cimg::mutex(6,0);\n      return result;\n    }\n\n    inline int _sprintf(char *const s, const char *const format, ...) {\n      cimg::mutex(6);\n      va_list args;\n      va_start(args,format);\n      const int result = std::vsprintf(s,format,args);\n      va_end(args);\n      cimg::mutex(6,0);\n      return result;\n    }\n\n    inline int _snprintf(char *const s, const size_t n, const char *const format, ...) {\n      cimg::mutex(6);\n      va_list args;\n      va_start(args,format);\n      const int result = std::vsnprintf(s,n,format,args);\n      va_end(args);\n      cimg::mutex(6,0);\n      return result;\n    }\n\n    inline int _vsnprintf(char *const s, const size_t size, const char* format, va_list ap) {\n      cimg::mutex(6);\n      const int result = std::vsnprintf(s,size,format,ap);\n      cimg::mutex(6,0);\n      return result;\n    }\n#endif\n\n    //! Set current \\CImg exception mode.\n    /**\n       The way error messages are handled by \\CImg can be changed dynamically, using this function.\n       \\param mode Desired exception mode. Possible values are:\n       - \\c 0: Hide library messages (quiet mode).\n       - \\c 1: Print library messages on the console.\n       - \\c 2: Display library messages on a dialog window.\n       - \\c 3: Do as \\c 1 + add extra debug warnings (slow down the code!).\n       - \\c 4: Do as \\c 2 + add extra debug warnings (slow down the code!).\n     **/\n    inline unsigned int& exception_mode(const unsigned int mode) {\n      return _exception_mode(mode,true);\n    }\n\n    //! Return current \\CImg exception mode.\n    /**\n       \\note By default, return the value of configuration macro \\c cimg_verbosity\n    **/\n    inline unsigned int& exception_mode() {\n      return _exception_mode(0,false);\n    }\n\n    //! Set current \\CImg openmp mode.\n    /**\n       The way openmp-based methods are handled by \\CImg can be changed dynamically, using this function.\n       \\param mode Desired openmp mode. Possible values are:\n       - \\c 0: Never parallelize.\n       - \\c 1: Always parallelize.\n       - \\c 2: Adaptive parallelization mode (default behavior).\n     **/\n    inline unsigned int& _openmp_mode(const unsigned int value, const bool is_set) {\n      static unsigned int mode = 2;\n      if (is_set)  { cimg::mutex(0); mode = value<2?value:2; cimg::mutex(0,0); }\n      return mode;\n    }\n\n    inline unsigned int& openmp_mode(const unsigned int mode) {\n      return _openmp_mode(mode,true);\n    }\n\n    //! Return current \\CImg openmp mode.\n    inline unsigned int& openmp_mode() {\n      return _openmp_mode(0,false);\n    }\n\n#define cimg_openmp_if(cond) if (cimg::openmp_mode()==1 || (cimg::openmp_mode()>1 && (cond)))\n\n    // Display a simple dialog box, and wait for the user's response.\n    inline int dialog(const char *const title, const char *const msg, const char *const button1_label=\"OK\",\n                      const char *const button2_label=0, const char *const button3_label=0,\n                      const char *const button4_label=0, const char *const button5_label=0,\n                      const char *const button6_label=0, const bool centering=false);\n\n    // Evaluate math expression.\n    inline double eval(const char *const expression,\n                       const double x=0, const double y=0, const double z=0, const double c=0);\n\n  }\n\n  /*---------------------------------------\n    #\n    # Define the CImgException structures\n    #\n    --------------------------------------*/\n  //! Instances of \\c CImgException are thrown when errors are encountered in a \\CImg function call.\n  /**\n     \\par Overview\n\n      CImgException is the base class of all exceptions thrown by \\CImg (except \\b CImgAbortException).\n      CImgException is never thrown itself. Derived classes that specify the type of errord are thrown instead.\n      These classes can be:\n\n      - \\b CImgAbortException: Thrown when a computationally-intensive function is aborted by an external signal.\n        This is the only \\c non-derived exception class.\n\n      - \\b CImgArgumentException: Thrown when one argument of a called \\CImg function is invalid.\n      This is probably one of the most thrown exception by \\CImg.\n      For instance, the following example throws a \\c CImgArgumentException:\n      \\code\n      CImg<float> img(100,100,1,3); // Define a 100x100 color image with float-valued pixels.\n      img.mirror('e');              // Try to mirror image along the (non-existing) 'e'-axis.\n      \\endcode\n\n      - \\b CImgDisplayException: Thrown when something went wrong during the display of images in CImgDisplay instances.\n\n      - \\b CImgInstanceException: Thrown when an instance associated to a called \\CImg method does not fit\n      the function requirements. For instance, the following example throws a \\c CImgInstanceException:\n      \\code\n      const CImg<float> img;           // Define an empty image.\n      const float value = img.at(0);   // Try to read first pixel value (does not exist).\n      \\endcode\n\n      - \\b CImgIOException: Thrown when an error occured when trying to load or save image files.\n      This happens when trying to read files that do not exist or with invalid formats.\n      For instance, the following example throws a \\c CImgIOException:\n      \\code\n      const CImg<float> img(\"missing_file.jpg\");  // Try to load a file that does not exist.\n      \\endcode\n\n      - \\b CImgWarningException: Thrown only if configuration macro \\c cimg_strict_warnings is set, and\n      when a \\CImg function has to display a warning message (see cimg::warn()).\n\n      It is not recommended to throw CImgException instances by yourself,\n      since they are expected to be thrown only by \\CImg.\n      When an error occurs in a library function call, \\CImg may display error messages on the screen or on the\n      standard output, depending on the current \\CImg exception mode.\n      The \\CImg exception mode can be get and set by functions cimg::exception_mode() and\n      cimg::exception_mode(unsigned int).\n\n      \\par Exceptions handling\n\n      In all cases, when an error occurs in \\CImg, an instance of the corresponding exception class is thrown.\n      This may lead the program to break (this is the default behavior), but you can bypass this behavior by\n      handling the exceptions by yourself,\n      using a usual <tt>try { ... } catch () { ... }</tt> bloc, as in the following example:\n      \\code\n      #define \"CImg.h\"\n      using namespace cimg_library;\n      int main() {\n        cimg::exception_mode(0);                                    // Enable quiet exception mode.\n        try {\n          ...                                                       // Here, do what you want to stress CImg.\n        } catch (CImgException& e) {                                // You succeeded: something went wrong!\n          std::fprintf(stderr,\"CImg Library Error: %s\",e.what());   // Display your custom error message.\n          ...                                                       // Do what you want now to save the ship!\n          }\n        }\n      \\endcode\n  **/\n  struct CImgException : public std::exception {\n#define _cimg_exception_err(etype,disp_flag) \\\n  std::va_list ap, ap2; \\\n  va_start(ap,format); va_start(ap2,format); \\\n  int size = cimg_vsnprintf(0,0,format,ap2); \\\n  if (size++>=0) { \\\n    delete[] _message; \\\n    _message = new char[size]; \\\n    cimg_vsnprintf(_message,size,format,ap); \\\n    if (cimg::exception_mode()) { \\\n      std::fprintf(cimg::output(),\"\\n%s[CImg] *** %s ***%s %s\\n\",cimg::t_red,etype,cimg::t_normal,_message); \\\n      if (cimg_display && disp_flag && !(cimg::exception_mode()%2)) try { cimg::dialog(etype,_message,\"Abort\"); } \\\n      catch (CImgException&) {} \\\n      if (cimg::exception_mode()>=3) cimg_library_suffixed::cimg::info(); \\\n    } \\\n  } \\\n  va_end(ap); va_end(ap2); \\\n\n    char *_message;\n    CImgException() { _message = new char[1]; *_message = 0; }\n    CImgException(const char *const format, ...):_message(0) { _cimg_exception_err(\"CImgException\",true); }\n    CImgException(const CImgException& e):std::exception(e) {\n      const size_t size = std::strlen(e._message);\n      _message = new char[size + 1];\n      std::strncpy(_message,e._message,size);\n      _message[size] = 0;\n    }\n    ~CImgException() throw() { delete[] _message; }\n    CImgException& operator=(const CImgException& e) {\n      const size_t size = std::strlen(e._message);\n      _message = new char[size + 1];\n      std::strncpy(_message,e._message,size);\n      _message[size] = 0;\n      return *this;\n    }\n    //! Return a C-string containing the error message associated to the thrown exception.\n    const char *what() const throw() { return _message; }\n  };\n\n  // The CImgAbortException class is used to throw an exception when\n  // a computationally-intensive function has been aborted by an external signal.\n  struct CImgAbortException : public std::exception {\n    char *_message;\n    CImgAbortException() { _message = new char[1]; *_message = 0; }\n    CImgAbortException(const char *const format, ...):_message(0) { _cimg_exception_err(\"CImgAbortException\",true); }\n    CImgAbortException(const CImgAbortException& e):std::exception(e) {\n      const size_t size = std::strlen(e._message);\n      _message = new char[size + 1];\n      std::strncpy(_message,e._message,size);\n      _message[size] = 0;\n    }\n    ~CImgAbortException() throw() { delete[] _message; }\n    CImgAbortException& operator=(const CImgAbortException& e) {\n      const size_t size = std::strlen(e._message);\n      _message = new char[size + 1];\n      std::strncpy(_message,e._message,size);\n      _message[size] = 0;\n      return *this;\n    }\n    //! Return a C-string containing the error message associated to the thrown exception.\n    const char *what() const throw() { return _message; }\n  };\n\n  // The CImgArgumentException class is used to throw an exception related\n  // to invalid arguments encountered in a library function call.\n  struct CImgArgumentException : public CImgException {\n    CImgArgumentException(const char *const format, ...) { _cimg_exception_err(\"CImgArgumentException\",true); }\n  };\n\n  // The CImgDisplayException class is used to throw an exception related\n  // to display problems encountered in a library function call.\n  struct CImgDisplayException : public CImgException {\n    CImgDisplayException(const char *const format, ...) { _cimg_exception_err(\"CImgDisplayException\",false); }\n  };\n\n  // The CImgInstanceException class is used to throw an exception related\n  // to an invalid instance encountered in a library function call.\n  struct CImgInstanceException : public CImgException {\n    CImgInstanceException(const char *const format, ...) { _cimg_exception_err(\"CImgInstanceException\",true); }\n  };\n\n  // The CImgIOException class is used to throw an exception related\n  // to input/output file problems encountered in a library function call.\n  struct CImgIOException : public CImgException {\n    CImgIOException(const char *const format, ...) { _cimg_exception_err(\"CImgIOException\",true); }\n  };\n\n  // The CImgWarningException class is used to throw an exception for warnings\n  // encountered in a library function call.\n  struct CImgWarningException : public CImgException {\n    CImgWarningException(const char *const format, ...) { _cimg_exception_err(\"CImgWarningException\",false); }\n  };\n\n  /*-------------------------------------\n    #\n    # Define cimg:: namespace\n    #\n    -----------------------------------*/\n  //! Contains \\a low-level functions and variables of the \\CImg Library.\n  /**\n     Most of the functions and variables within this namespace are used by the \\CImg library for low-level operations.\n     You may use them to access specific const values or environment variables internally used by \\CImg.\n     \\warning Never write <tt>using namespace cimg_library::cimg;</tt> in your source code. Lot of functions in the\n     <tt>cimg:: namespace</tt> have the same names as standard C functions that may be defined in the global\n     namespace <tt>::</tt>.\n  **/\n  namespace cimg {\n\n    // Define traits that will be used to determine the best data type to work in CImg functions.\n    //\n    template<typename T> struct type {\n      static const char* string() {\n        static const char* s[] = { \"unknown\",   \"unknown8\",   \"unknown16\",  \"unknown24\",\n                                   \"unknown32\", \"unknown40\",  \"unknown48\",  \"unknown56\",\n                                   \"unknown64\", \"unknown72\",  \"unknown80\",  \"unknown88\",\n                                   \"unknown96\", \"unknown104\", \"unknown112\", \"unknown120\",\n                                   \"unknown128\" };\n        return s[(sizeof(T)<17)?sizeof(T):0];\n      }\n      static bool is_float() { return false; }\n      static bool is_inf(const T) { return false; }\n      static bool is_nan(const T) { return false; }\n      static T min() { return ~max(); }\n      static T max() { return (T)1<<(8*sizeof(T) - 1); }\n      static T inf() { return max(); }\n      static T cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(T)val; }\n      static const char* format() { return \"%s\"; }\n      static const char* format_s() { return \"%s\"; }\n      static const char* format(const T& val) { static const char *const s = \"unknown\"; cimg::unused(val); return s; }\n    };\n\n    template<> struct type<bool> {\n      static const char* string() { static const char *const s = \"bool\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const bool) { return false; }\n      static bool is_nan(const bool) { return false; }\n      static bool min() { return false; }\n      static bool max() { return true; }\n      static bool inf() { return max(); }\n      static bool is_inf() { return false; }\n      static bool cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(bool)val; }\n      static const char* format() { return \"%s\"; }\n      static const char* format_s() { return \"%s\"; }\n      static const char* format(const bool val) { static const char* s[] = { \"false\", \"true\" }; return s[val?1:0]; }\n    };\n\n    template<> struct type<unsigned char> {\n      static const char* string() { static const char *const s = \"unsigned char\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const unsigned char) { return false; }\n      static bool is_nan(const unsigned char) { return false; }\n      static unsigned char min() { return 0; }\n      static unsigned char max() { return (unsigned char)-1; }\n      static unsigned char inf() { return max(); }\n      static unsigned char cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(unsigned char)val; }\n      static const char* format() { return \"%u\"; }\n      static const char* format_s() { return \"%u\"; }\n      static unsigned int format(const unsigned char val) { return (unsigned int)val; }\n    };\n\n#if defined(CHAR_MAX) && CHAR_MAX==255\n    template<> struct type<char> {\n      static const char* string() { static const char *const s = \"char\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const char) { return false; }\n      static bool is_nan(const char) { return false; }\n      static char min() { return 0; }\n      static char max() { return (char)-1; }\n      static char inf() { return max(); }\n      static char cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(unsigned char)val; }\n      static const char* format() { return \"%u\"; }\n      static const char* format_s() { return \"%u\"; }\n      static unsigned int format(const char val) { return (unsigned int)val; }\n    };\n#else\n    template<> struct type<char> {\n      static const char* string() { static const char *const s = \"char\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const char) { return false; }\n      static bool is_nan(const char) { return false; }\n      static char min() { return ~max(); }\n      static char max() { return (char)((unsigned char)-1>>1); }\n      static char inf() { return max(); }\n      static char cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(char)val; }\n      static const char* format() { return \"%d\"; }\n      static const char* format_s() { return \"%d\"; }\n      static int format(const char val) { return (int)val; }\n    };\n#endif\n\n    template<> struct type<signed char> {\n      static const char* string() { static const char *const s = \"signed char\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const signed char) { return false; }\n      static bool is_nan(const signed char) { return false; }\n      static signed char min() { return ~max(); }\n      static signed char max() { return (signed char)((unsigned char)-1>>1); }\n      static signed char inf() { return max(); }\n      static signed char cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(signed char)val; }\n      static const char* format() { return \"%d\"; }\n      static const char* format_s() { return \"%d\"; }\n      static int format(const signed char val) { return (int)val; }\n    };\n\n    template<> struct type<unsigned short> {\n      static const char* string() { static const char *const s = \"unsigned short\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const unsigned short) { return false; }\n      static bool is_nan(const unsigned short) { return false; }\n      static unsigned short min() { return 0; }\n      static unsigned short max() { return (unsigned short)-1; }\n      static unsigned short inf() { return max(); }\n      static unsigned short cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(unsigned short)val; }\n      static const char* format() { return \"%u\"; }\n      static const char* format_s() { return \"%u\"; }\n      static unsigned int format(const unsigned short val) { return (unsigned int)val; }\n    };\n\n    template<> struct type<short> {\n      static const char* string() { static const char *const s = \"short\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const short) { return false; }\n      static bool is_nan(const short) { return false; }\n      static short min() { return ~max(); }\n      static short max() { return (short)((unsigned short)-1>>1); }\n      static short inf() { return max(); }\n      static short cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(short)val; }\n      static const char* format() { return \"%d\"; }\n      static const char* format_s() { return \"%d\"; }\n      static int format(const short val) { return (int)val; }\n    };\n\n    template<> struct type<unsigned int> {\n      static const char* string() { static const char *const s = \"unsigned int\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const unsigned int) { return false; }\n      static bool is_nan(const unsigned int) { return false; }\n      static unsigned int min() { return 0; }\n      static unsigned int max() { return (unsigned int)-1; }\n      static unsigned int inf() { return max(); }\n      static unsigned int cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(unsigned int)val; }\n      static const char* format() { return \"%u\"; }\n      static const char* format_s() { return \"%u\"; }\n      static unsigned int format(const unsigned int val) { return val; }\n    };\n\n    template<> struct type<int> {\n      static const char* string() { static const char *const s = \"int\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const int) { return false; }\n      static bool is_nan(const int) { return false; }\n      static int min() { return ~max(); }\n      static int max() { return (int)((unsigned int)-1>>1); }\n      static int inf() { return max(); }\n      static int cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(int)val; }\n      static const char* format() { return \"%d\"; }\n      static const char* format_s() { return \"%d\"; }\n      static int format(const int val) { return val; }\n    };\n\n    template<> struct type<cimg_uint64> {\n      static const char* string() { static const char *const s = \"unsigned int64\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const cimg_uint64) { return false; }\n      static bool is_nan(const cimg_uint64) { return false; }\n      static cimg_uint64 min() { return 0; }\n      static cimg_uint64 max() { return (cimg_uint64)-1; }\n      static cimg_uint64 inf() { return max(); }\n      static cimg_uint64 cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(cimg_uint64)val; }\n      static const char* format() { return \"%lu\"; }\n      static const char* format_s() { return \"%lu\"; }\n      static unsigned long format(const cimg_uint64 val) { return (unsigned long)val; }\n    };\n\n    template<> struct type<cimg_int64> {\n      static const char* string() { static const char *const s = \"int64\"; return s; }\n      static bool is_float() { return false; }\n      static bool is_inf(const cimg_int64) { return false; }\n      static bool is_nan(const cimg_int64) { return false; }\n      static cimg_int64 min() { return ~max(); }\n      static cimg_int64 max() { return (cimg_int64)((cimg_uint64)-1>>1); }\n      static cimg_int64 inf() { return max(); }\n      static cimg_int64 cut(const double val) {\n        return val<(double)min()?min():val>(double)max()?max():(cimg_int64)val;\n      }\n      static const char* format() { return \"%ld\"; }\n      static const char* format_s() { return \"%ld\"; }\n      static long format(const long val) { return (long)val; }\n    };\n\n    template<> struct type<double> {\n      static const char* string() { static const char *const s = \"double\"; return s; }\n      static bool is_float() { return true; }\n      static bool is_inf(const double val) {\n#ifdef isinf\n        return (bool)isinf(val);\n#else\n        return !is_nan(val) && (val<cimg::type<double>::min() || val>cimg::type<double>::max());\n#endif\n      }\n      static bool is_nan(const double val) {\n#ifdef isnan\n        return (bool)isnan(val);\n#else\n        return !(val==val);\n#endif\n      }\n      static double min() { return -DBL_MAX; }\n      static double max() { return DBL_MAX; }\n      static double inf() {\n#ifdef INFINITY\n        return (double)INFINITY;\n#else\n        return max()*max();\n#endif\n      }\n      static double nan() {\n#ifdef NAN\n        return (double)NAN;\n#else\n        const double val_nan = -std::sqrt(-1.0); return val_nan;\n#endif\n      }\n      static double cut(const double val) { return val; }\n      static const char* format() { return \"%.17g\"; }\n      static const char* format_s() { return \"%g\"; }\n      static double format(const double val) { return val; }\n    };\n\n    template<> struct type<float> {\n      static const char* string() { static const char *const s = \"float\"; return s; }\n      static bool is_float() { return true; }\n      static bool is_inf(const float val) {\n#ifdef isinf\n        return (bool)isinf(val);\n#else\n        return !is_nan(val) && (val<cimg::type<float>::min() || val>cimg::type<float>::max());\n#endif\n      }\n      static bool is_nan(const float val) {\n#ifdef isnan\n        return (bool)isnan(val);\n#else\n        return !(val==val);\n#endif\n      }\n      static float min() { return -FLT_MAX; }\n      static float max() { return FLT_MAX; }\n      static float inf() { return (float)cimg::type<double>::inf(); }\n      static float nan() { return (float)cimg::type<double>::nan(); }\n      static float cut(const double val) { return (float)val; }\n      static float cut(const float val) { return (float)val; }\n      static const char* format() { return \"%.9g\"; }\n      static const char* format_s() { return \"%g\"; }\n      static double format(const float val) { return (double)val; }\n    };\n\n    template<> struct type<long double> {\n      static const char* string() { static const char *const s = \"long double\"; return s; }\n      static bool is_float() { return true; }\n      static bool is_inf(const long double val) {\n#ifdef isinf\n        return (bool)isinf(val);\n#else\n        return !is_nan(val) && (val<cimg::type<long double>::min() || val>cimg::type<long double>::max());\n#endif\n      }\n      static bool is_nan(const long double val) {\n#ifdef isnan\n        return (bool)isnan(val);\n#else\n        return !(val==val);\n#endif\n      }\n      static long double min() { return -LDBL_MAX; }\n      static long double max() { return LDBL_MAX; }\n      static long double inf() { return max()*max(); }\n      static long double nan() { const long double val_nan = -std::sqrt(-1.0L); return val_nan; }\n      static long double cut(const long double val) { return val; }\n      static const char* format() { return \"%.17g\"; }\n      static const char* format_s() { return \"%g\"; }\n      static double format(const long double val) { return (double)val; }\n    };\n\n#ifdef cimg_use_half\n    template<> struct type<half> {\n      static const char* string() { static const char *const s = \"half\"; return s; }\n      static bool is_float() { return true; }\n      static bool is_inf(const long double val) {\n#ifdef isinf\n        return (bool)isinf(val);\n#else\n        return !is_nan(val) && (val<cimg::type<half>::min() || val>cimg::type<half>::max());\n#endif\n      }\n      static bool is_nan(const long double val) {\n#ifdef isnan\n        return (bool)isnan(val);\n#else\n        return !(val==val);\n#endif\n      }\n      static half min() { return (half)-65504; }\n      static half max() { return (half)65504; }\n      static half inf() { return max()*max(); }\n      static half nan() { const half val_nan = (half)-std::sqrt(-1.0); return val_nan; }\n      static half cut(const double val) { return (half)val; }\n      static const char* format() { return \"%.9g\"; }\n      static const char* format_s() { return \"%g\"; }\n      static double format(const half val) { return (double)val; }\n    };\n#endif\n\n    template<typename T, typename t> struct superset { typedef T type; };\n    template<> struct superset<bool,unsigned char> { typedef unsigned char type; };\n    template<> struct superset<bool,char> { typedef char type; };\n    template<> struct superset<bool,signed char> { typedef signed char type; };\n    template<> struct superset<bool,unsigned short> { typedef unsigned short type; };\n    template<> struct superset<bool,short> { typedef short type; };\n    template<> struct superset<bool,unsigned int> { typedef unsigned int type; };\n    template<> struct superset<bool,int> { typedef int type; };\n    template<> struct superset<bool,cimg_uint64> { typedef cimg_uint64 type; };\n    template<> struct superset<bool,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<bool,float> { typedef float type; };\n    template<> struct superset<bool,double> { typedef double type; };\n    template<> struct superset<unsigned char,char> { typedef short type; };\n    template<> struct superset<unsigned char,signed char> { typedef short type; };\n    template<> struct superset<unsigned char,unsigned short> { typedef unsigned short type; };\n    template<> struct superset<unsigned char,short> { typedef short type; };\n    template<> struct superset<unsigned char,unsigned int> { typedef unsigned int type; };\n    template<> struct superset<unsigned char,int> { typedef int type; };\n    template<> struct superset<unsigned char,cimg_uint64> { typedef cimg_uint64 type; };\n    template<> struct superset<unsigned char,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned char,float> { typedef float type; };\n    template<> struct superset<unsigned char,double> { typedef double type; };\n    template<> struct superset<signed char,unsigned char> { typedef short type; };\n    template<> struct superset<signed char,char> { typedef short type; };\n    template<> struct superset<signed char,unsigned short> { typedef int type; };\n    template<> struct superset<signed char,short> { typedef short type; };\n    template<> struct superset<signed char,unsigned int> { typedef cimg_int64 type; };\n    template<> struct superset<signed char,int> { typedef int type; };\n    template<> struct superset<signed char,cimg_uint64> { typedef cimg_int64 type; };\n    template<> struct superset<signed char,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<signed char,float> { typedef float type; };\n    template<> struct superset<signed char,double> { typedef double type; };\n    template<> struct superset<char,unsigned char> { typedef short type; };\n    template<> struct superset<char,signed char> { typedef short type; };\n    template<> struct superset<char,unsigned short> { typedef int type; };\n    template<> struct superset<char,short> { typedef short type; };\n    template<> struct superset<char,unsigned int> { typedef cimg_int64 type; };\n    template<> struct superset<char,int> { typedef int type; };\n    template<> struct superset<char,cimg_uint64> { typedef cimg_int64 type; };\n    template<> struct superset<char,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<char,float> { typedef float type; };\n    template<> struct superset<char,double> { typedef double type; };\n    template<> struct superset<unsigned short,char> { typedef int type; };\n    template<> struct superset<unsigned short,signed char> { typedef int type; };\n    template<> struct superset<unsigned short,short> { typedef int type; };\n    template<> struct superset<unsigned short,unsigned int> { typedef unsigned int type; };\n    template<> struct superset<unsigned short,int> { typedef int type; };\n    template<> struct superset<unsigned short,cimg_uint64> { typedef cimg_uint64 type; };\n    template<> struct superset<unsigned short,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned short,float> { typedef float type; };\n    template<> struct superset<unsigned short,double> { typedef double type; };\n    template<> struct superset<short,unsigned short> { typedef int type; };\n    template<> struct superset<short,unsigned int> { typedef cimg_int64 type; };\n    template<> struct superset<short,int> { typedef int type; };\n    template<> struct superset<short,cimg_uint64> { typedef cimg_int64 type; };\n    template<> struct superset<short,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<short,float> { typedef float type; };\n    template<> struct superset<short,double> { typedef double type; };\n    template<> struct superset<unsigned int,char> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned int,signed char> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned int,short> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned int,int> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned int,cimg_uint64> { typedef cimg_uint64 type; };\n    template<> struct superset<unsigned int,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<unsigned int,float> { typedef float type; };\n    template<> struct superset<unsigned int,double> { typedef double type; };\n    template<> struct superset<int,unsigned int> { typedef cimg_int64 type; };\n    template<> struct superset<int,cimg_uint64> { typedef cimg_int64 type; };\n    template<> struct superset<int,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<int,float> { typedef float type; };\n    template<> struct superset<int,double> { typedef double type; };\n    template<> struct superset<cimg_uint64,char> { typedef cimg_int64 type; };\n    template<> struct superset<cimg_uint64,signed char> { typedef cimg_int64 type; };\n    template<> struct superset<cimg_uint64,short> { typedef cimg_int64 type; };\n    template<> struct superset<cimg_uint64,int> { typedef cimg_int64 type; };\n    template<> struct superset<cimg_uint64,cimg_int64> { typedef cimg_int64 type; };\n    template<> struct superset<cimg_uint64,float> { typedef double type; };\n    template<> struct superset<cimg_uint64,double> { typedef double type; };\n    template<> struct superset<cimg_int64,float> { typedef double type; };\n    template<> struct superset<cimg_int64,double> { typedef double type; };\n    template<> struct superset<float,double> { typedef double type; };\n#ifdef cimg_use_half\n    template<> struct superset<half,unsigned short> { typedef float type; };\n    template<> struct superset<half,short> { typedef float type; };\n    template<> struct superset<half,unsigned int> { typedef float type; };\n    template<> struct superset<half,int> { typedef float type; };\n    template<> struct superset<half,cimg_uint64> { typedef float type; };\n    template<> struct superset<half,cimg_int64> { typedef float type; };\n    template<> struct superset<half,float> { typedef float type; };\n    template<> struct superset<half,double> { typedef double type; };\n#endif\n\n    template<typename t1, typename t2, typename t3> struct superset2 {\n      typedef typename superset<t1, typename superset<t2,t3>::type>::type type;\n    };\n\n    template<typename t1, typename t2, typename t3, typename t4> struct superset3 {\n      typedef typename superset<t1, typename superset2<t2,t3,t4>::type>::type type;\n    };\n\n    template<typename t1, typename t2> struct last { typedef t2 type; };\n\n#define _cimg_Tt typename cimg::superset<T,t>::type\n#define _cimg_Tfloat typename cimg::superset<T,float>::type\n#define _cimg_Ttfloat typename cimg::superset2<T,t,float>::type\n#define _cimg_Ttdouble typename cimg::superset2<T,t,double>::type\n\n    // Define variables used internally by CImg.\n#if cimg_display==1\n    struct X11_info {\n      unsigned int nb_wins;\n      pthread_t *events_thread;\n      pthread_cond_t wait_event;\n      pthread_mutex_t wait_event_mutex;\n      CImgDisplay **wins;\n      Display *display;\n      unsigned int nb_bits;\n      bool is_blue_first;\n      bool is_shm_enabled;\n      bool byte_order;\n#ifdef cimg_use_xrandr\n      XRRScreenSize *resolutions;\n      Rotation curr_rotation;\n      unsigned int curr_resolution;\n      unsigned int nb_resolutions;\n#endif\n      X11_info():nb_wins(0),events_thread(0),display(0),\n                 nb_bits(0),is_blue_first(false),is_shm_enabled(false),byte_order(false) {\n#ifdef __FreeBSD__\n        XInitThreads();\n#endif\n        wins = new CImgDisplay*[1024];\n        pthread_mutex_init(&wait_event_mutex,0);\n        pthread_cond_init(&wait_event,0);\n#ifdef cimg_use_xrandr\n        resolutions = 0;\n        curr_rotation = 0;\n        curr_resolution = nb_resolutions = 0;\n#endif\n      }\n\n      ~X11_info() {\n        delete[] wins;\n        /*\n          if (events_thread) {\n          pthread_cancel(*events_thread);\n          delete events_thread;\n          }\n          if (display) { } // XCloseDisplay(display); }\n          pthread_cond_destroy(&wait_event);\n          pthread_mutex_unlock(&wait_event_mutex);\n          pthread_mutex_destroy(&wait_event_mutex);\n        */\n      }\n    };\n#if defined(cimg_module)\n    X11_info& X11_attr();\n#elif defined(cimg_main)\n    X11_info& X11_attr() { static X11_info val; return val; }\n#else\n    inline X11_info& X11_attr() { static X11_info val; return val; }\n#endif\n#define cimg_lock_display() cimg::mutex(15)\n#define cimg_unlock_display() cimg::mutex(15,0)\n\n#elif cimg_display==2\n    struct Win32_info {\n      HANDLE wait_event;\n      Win32_info() { wait_event = CreateEvent(0,FALSE,FALSE,0); }\n    };\n#if defined(cimg_module)\n    Win32_info& Win32_attr();\n#elif defined(cimg_main)\n    Win32_info& Win32_attr() { static Win32_info val; return val; }\n#else\n    inline Win32_info& Win32_attr() { static Win32_info val; return val; }\n#endif\n#endif\n\n    struct Mutex_info {\n#if cimg_OS==2\n      HANDLE mutex[32];\n      Mutex_info() { for (unsigned int i = 0; i<32; ++i) mutex[i] = CreateMutex(0,FALSE,0); }\n      void lock(const unsigned int n) { WaitForSingleObject(mutex[n],INFINITE); }\n      void unlock(const unsigned int n) { ReleaseMutex(mutex[n]); }\n      int trylock(const unsigned int) { return 0; }\n#elif defined(_PTHREAD_H)\n      pthread_mutex_t mutex[32];\n      Mutex_info() { for (unsigned int i = 0; i<32; ++i) pthread_mutex_init(&mutex[i],0); }\n      void lock(const unsigned int n) { pthread_mutex_lock(&mutex[n]); }\n      void unlock(const unsigned int n) { pthread_mutex_unlock(&mutex[n]); }\n      int trylock(const unsigned int n) { return pthread_mutex_trylock(&mutex[n]); }\n#else\n      Mutex_info() {}\n      void lock(const unsigned int) {}\n      void unlock(const unsigned int) {}\n      int trylock(const unsigned int) { return 0; }\n#endif\n    };\n#if defined(cimg_module)\n    Mutex_info& Mutex_attr();\n#elif defined(cimg_main)\n    Mutex_info& Mutex_attr() { static Mutex_info val; return val; }\n#else\n    inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }\n#endif\n\n#if defined(cimg_use_magick)\n    static struct Magick_info {\n      Magick_info() {\n        Magick::InitializeMagick(\"\");\n      }\n    } _Magick_info;\n#endif\n\n#if cimg_display==1\n    // Define keycodes for X11-based graphical systems.\n    const unsigned int keyESC        = XK_Escape;\n    const unsigned int keyF1         = XK_F1;\n    const unsigned int keyF2         = XK_F2;\n    const unsigned int keyF3         = XK_F3;\n    const unsigned int keyF4         = XK_F4;\n    const unsigned int keyF5         = XK_F5;\n    const unsigned int keyF6         = XK_F6;\n    const unsigned int keyF7         = XK_F7;\n    const unsigned int keyF8         = XK_F8;\n    const unsigned int keyF9         = XK_F9;\n    const unsigned int keyF10        = XK_F10;\n    const unsigned int keyF11        = XK_F11;\n    const unsigned int keyF12        = XK_F12;\n    const unsigned int keyPAUSE      = XK_Pause;\n    const unsigned int key1          = XK_1;\n    const unsigned int key2          = XK_2;\n    const unsigned int key3          = XK_3;\n    const unsigned int key4          = XK_4;\n    const unsigned int key5          = XK_5;\n    const unsigned int key6          = XK_6;\n    const unsigned int key7          = XK_7;\n    const unsigned int key8          = XK_8;\n    const unsigned int key9          = XK_9;\n    const unsigned int key0          = XK_0;\n    const unsigned int keyBACKSPACE  = XK_BackSpace;\n    const unsigned int keyINSERT     = XK_Insert;\n    const unsigned int keyHOME       = XK_Home;\n    const unsigned int keyPAGEUP     = XK_Page_Up;\n    const unsigned int keyTAB        = XK_Tab;\n    const unsigned int keyQ          = XK_q;\n    const unsigned int keyW          = XK_w;\n    const unsigned int keyE          = XK_e;\n    const unsigned int keyR          = XK_r;\n    const unsigned int keyT          = XK_t;\n    const unsigned int keyY          = XK_y;\n    const unsigned int keyU          = XK_u;\n    const unsigned int keyI          = XK_i;\n    const unsigned int keyO          = XK_o;\n    const unsigned int keyP          = XK_p;\n    const unsigned int keyDELETE     = XK_Delete;\n    const unsigned int keyEND        = XK_End;\n    const unsigned int keyPAGEDOWN   = XK_Page_Down;\n    const unsigned int keyCAPSLOCK   = XK_Caps_Lock;\n    const unsigned int keyA          = XK_a;\n    const unsigned int keyS          = XK_s;\n    const unsigned int keyD          = XK_d;\n    const unsigned int keyF          = XK_f;\n    const unsigned int keyG          = XK_g;\n    const unsigned int keyH          = XK_h;\n    const unsigned int keyJ          = XK_j;\n    const unsigned int keyK          = XK_k;\n    const unsigned int keyL          = XK_l;\n    const unsigned int keyENTER      = XK_Return;\n    const unsigned int keySHIFTLEFT  = XK_Shift_L;\n    const unsigned int keyZ          = XK_z;\n    const unsigned int keyX          = XK_x;\n    const unsigned int keyC          = XK_c;\n    const unsigned int keyV          = XK_v;\n    const unsigned int keyB          = XK_b;\n    const unsigned int keyN          = XK_n;\n    const unsigned int keyM          = XK_m;\n    const unsigned int keySHIFTRIGHT = XK_Shift_R;\n    const unsigned int keyARROWUP    = XK_Up;\n    const unsigned int keyCTRLLEFT   = XK_Control_L;\n    const unsigned int keyAPPLEFT    = XK_Super_L;\n    const unsigned int keyALT        = XK_Alt_L;\n    const unsigned int keySPACE      = XK_space;\n    const unsigned int keyALTGR      = XK_Alt_R;\n    const unsigned int keyAPPRIGHT   = XK_Super_R;\n    const unsigned int keyMENU       = XK_Menu;\n    const unsigned int keyCTRLRIGHT  = XK_Control_R;\n    const unsigned int keyARROWLEFT  = XK_Left;\n    const unsigned int keyARROWDOWN  = XK_Down;\n    const unsigned int keyARROWRIGHT = XK_Right;\n    const unsigned int keyPAD0       = XK_KP_0;\n    const unsigned int keyPAD1       = XK_KP_1;\n    const unsigned int keyPAD2       = XK_KP_2;\n    const unsigned int keyPAD3       = XK_KP_3;\n    const unsigned int keyPAD4       = XK_KP_4;\n    const unsigned int keyPAD5       = XK_KP_5;\n    const unsigned int keyPAD6       = XK_KP_6;\n    const unsigned int keyPAD7       = XK_KP_7;\n    const unsigned int keyPAD8       = XK_KP_8;\n    const unsigned int keyPAD9       = XK_KP_9;\n    const unsigned int keyPADADD     = XK_KP_Add;\n    const unsigned int keyPADSUB     = XK_KP_Subtract;\n    const unsigned int keyPADMUL     = XK_KP_Multiply;\n    const unsigned int keyPADDIV     = XK_KP_Divide;\n\n#elif cimg_display==2\n    // Define keycodes for Windows.\n    const unsigned int keyESC        = VK_ESCAPE;\n    const unsigned int keyF1         = VK_F1;\n    const unsigned int keyF2         = VK_F2;\n    const unsigned int keyF3         = VK_F3;\n    const unsigned int keyF4         = VK_F4;\n    const unsigned int keyF5         = VK_F5;\n    const unsigned int keyF6         = VK_F6;\n    const unsigned int keyF7         = VK_F7;\n    const unsigned int keyF8         = VK_F8;\n    const unsigned int keyF9         = VK_F9;\n    const unsigned int keyF10        = VK_F10;\n    const unsigned int keyF11        = VK_F11;\n    const unsigned int keyF12        = VK_F12;\n    const unsigned int keyPAUSE      = VK_PAUSE;\n    const unsigned int key1          = '1';\n    const unsigned int key2          = '2';\n    const unsigned int key3          = '3';\n    const unsigned int key4          = '4';\n    const unsigned int key5          = '5';\n    const unsigned int key6          = '6';\n    const unsigned int key7          = '7';\n    const unsigned int key8          = '8';\n    const unsigned int key9          = '9';\n    const unsigned int key0          = '0';\n    const unsigned int keyBACKSPACE  = VK_BACK;\n    const unsigned int keyINSERT     = VK_INSERT;\n    const unsigned int keyHOME       = VK_HOME;\n    const unsigned int keyPAGEUP     = VK_PRIOR;\n    const unsigned int keyTAB        = VK_TAB;\n    const unsigned int keyQ          = 'Q';\n    const unsigned int keyW          = 'W';\n    const unsigned int keyE          = 'E';\n    const unsigned int keyR          = 'R';\n    const unsigned int keyT          = 'T';\n    const unsigned int keyY          = 'Y';\n    const unsigned int keyU          = 'U';\n    const unsigned int keyI          = 'I';\n    const unsigned int keyO          = 'O';\n    const unsigned int keyP          = 'P';\n    const unsigned int keyDELETE     = VK_DELETE;\n    const unsigned int keyEND        = VK_END;\n    const unsigned int keyPAGEDOWN   = VK_NEXT;\n    const unsigned int keyCAPSLOCK   = VK_CAPITAL;\n    const unsigned int keyA          = 'A';\n    const unsigned int keyS          = 'S';\n    const unsigned int keyD          = 'D';\n    const unsigned int keyF          = 'F';\n    const unsigned int keyG          = 'G';\n    const unsigned int keyH          = 'H';\n    const unsigned int keyJ          = 'J';\n    const unsigned int keyK          = 'K';\n    const unsigned int keyL          = 'L';\n    const unsigned int keyENTER      = VK_RETURN;\n    const unsigned int keySHIFTLEFT  = VK_SHIFT;\n    const unsigned int keyZ          = 'Z';\n    const unsigned int keyX          = 'X';\n    const unsigned int keyC          = 'C';\n    const unsigned int keyV          = 'V';\n    const unsigned int keyB          = 'B';\n    const unsigned int keyN          = 'N';\n    const unsigned int keyM          = 'M';\n    const unsigned int keySHIFTRIGHT = VK_SHIFT;\n    const unsigned int keyARROWUP    = VK_UP;\n    const unsigned int keyCTRLLEFT   = VK_CONTROL;\n    const unsigned int keyAPPLEFT    = VK_LWIN;\n    const unsigned int keyALT        = VK_LMENU;\n    const unsigned int keySPACE      = VK_SPACE;\n    const unsigned int keyALTGR      = VK_CONTROL;\n    const unsigned int keyAPPRIGHT   = VK_RWIN;\n    const unsigned int keyMENU       = VK_APPS;\n    const unsigned int keyCTRLRIGHT  = VK_CONTROL;\n    const unsigned int keyARROWLEFT  = VK_LEFT;\n    const unsigned int keyARROWDOWN  = VK_DOWN;\n    const unsigned int keyARROWRIGHT = VK_RIGHT;\n    const unsigned int keyPAD0       = 0x60;\n    const unsigned int keyPAD1       = 0x61;\n    const unsigned int keyPAD2       = 0x62;\n    const unsigned int keyPAD3       = 0x63;\n    const unsigned int keyPAD4       = 0x64;\n    const unsigned int keyPAD5       = 0x65;\n    const unsigned int keyPAD6       = 0x66;\n    const unsigned int keyPAD7       = 0x67;\n    const unsigned int keyPAD8       = 0x68;\n    const unsigned int keyPAD9       = 0x69;\n    const unsigned int keyPADADD     = VK_ADD;\n    const unsigned int keyPADSUB     = VK_SUBTRACT;\n    const unsigned int keyPADMUL     = VK_MULTIPLY;\n    const unsigned int keyPADDIV     = VK_DIVIDE;\n\n#else\n    // Define random keycodes when no display is available.\n    // (should rarely be used then!).\n    const unsigned int keyESC        = 1U;   //!< Keycode for the \\c ESC key (architecture-dependent).\n    const unsigned int keyF1         = 2U;   //!< Keycode for the \\c F1 key (architecture-dependent).\n    const unsigned int keyF2         = 3U;   //!< Keycode for the \\c F2 key (architecture-dependent).\n    const unsigned int keyF3         = 4U;   //!< Keycode for the \\c F3 key (architecture-dependent).\n    const unsigned int keyF4         = 5U;   //!< Keycode for the \\c F4 key (architecture-dependent).\n    const unsigned int keyF5         = 6U;   //!< Keycode for the \\c F5 key (architecture-dependent).\n    const unsigned int keyF6         = 7U;   //!< Keycode for the \\c F6 key (architecture-dependent).\n    const unsigned int keyF7         = 8U;   //!< Keycode for the \\c F7 key (architecture-dependent).\n    const unsigned int keyF8         = 9U;   //!< Keycode for the \\c F8 key (architecture-dependent).\n    const unsigned int keyF9         = 10U;  //!< Keycode for the \\c F9 key (architecture-dependent).\n    const unsigned int keyF10        = 11U;  //!< Keycode for the \\c F10 key (architecture-dependent).\n    const unsigned int keyF11        = 12U;  //!< Keycode for the \\c F11 key (architecture-dependent).\n    const unsigned int keyF12        = 13U;  //!< Keycode for the \\c F12 key (architecture-dependent).\n    const unsigned int keyPAUSE      = 14U;  //!< Keycode for the \\c PAUSE key (architecture-dependent).\n    const unsigned int key1          = 15U;  //!< Keycode for the \\c 1 key (architecture-dependent).\n    const unsigned int key2          = 16U;  //!< Keycode for the \\c 2 key (architecture-dependent).\n    const unsigned int key3          = 17U;  //!< Keycode for the \\c 3 key (architecture-dependent).\n    const unsigned int key4          = 18U;  //!< Keycode for the \\c 4 key (architecture-dependent).\n    const unsigned int key5          = 19U;  //!< Keycode for the \\c 5 key (architecture-dependent).\n    const unsigned int key6          = 20U;  //!< Keycode for the \\c 6 key (architecture-dependent).\n    const unsigned int key7          = 21U;  //!< Keycode for the \\c 7 key (architecture-dependent).\n    const unsigned int key8          = 22U;  //!< Keycode for the \\c 8 key (architecture-dependent).\n    const unsigned int key9          = 23U;  //!< Keycode for the \\c 9 key (architecture-dependent).\n    const unsigned int key0          = 24U;  //!< Keycode for the \\c 0 key (architecture-dependent).\n    const unsigned int keyBACKSPACE  = 25U;  //!< Keycode for the \\c BACKSPACE key (architecture-dependent).\n    const unsigned int keyINSERT     = 26U;  //!< Keycode for the \\c INSERT key (architecture-dependent).\n    const unsigned int keyHOME       = 27U;  //!< Keycode for the \\c HOME key (architecture-dependent).\n    const unsigned int keyPAGEUP     = 28U;  //!< Keycode for the \\c PAGEUP key (architecture-dependent).\n    const unsigned int keyTAB        = 29U;  //!< Keycode for the \\c TAB key (architecture-dependent).\n    const unsigned int keyQ          = 30U;  //!< Keycode for the \\c Q key (architecture-dependent).\n    const unsigned int keyW          = 31U;  //!< Keycode for the \\c W key (architecture-dependent).\n    const unsigned int keyE          = 32U;  //!< Keycode for the \\c E key (architecture-dependent).\n    const unsigned int keyR          = 33U;  //!< Keycode for the \\c R key (architecture-dependent).\n    const unsigned int keyT          = 34U;  //!< Keycode for the \\c T key (architecture-dependent).\n    const unsigned int keyY          = 35U;  //!< Keycode for the \\c Y key (architecture-dependent).\n    const unsigned int keyU          = 36U;  //!< Keycode for the \\c U key (architecture-dependent).\n    const unsigned int keyI          = 37U;  //!< Keycode for the \\c I key (architecture-dependent).\n    const unsigned int keyO          = 38U;  //!< Keycode for the \\c O key (architecture-dependent).\n    const unsigned int keyP          = 39U;  //!< Keycode for the \\c P key (architecture-dependent).\n    const unsigned int keyDELETE     = 40U;  //!< Keycode for the \\c DELETE key (architecture-dependent).\n    const unsigned int keyEND        = 41U;  //!< Keycode for the \\c END key (architecture-dependent).\n    const unsigned int keyPAGEDOWN   = 42U;  //!< Keycode for the \\c PAGEDOWN key (architecture-dependent).\n    const unsigned int keyCAPSLOCK   = 43U;  //!< Keycode for the \\c CAPSLOCK key (architecture-dependent).\n    const unsigned int keyA          = 44U;  //!< Keycode for the \\c A key (architecture-dependent).\n    const unsigned int keyS          = 45U;  //!< Keycode for the \\c S key (architecture-dependent).\n    const unsigned int keyD          = 46U;  //!< Keycode for the \\c D key (architecture-dependent).\n    const unsigned int keyF          = 47U;  //!< Keycode for the \\c F key (architecture-dependent).\n    const unsigned int keyG          = 48U;  //!< Keycode for the \\c G key (architecture-dependent).\n    const unsigned int keyH          = 49U;  //!< Keycode for the \\c H key (architecture-dependent).\n    const unsigned int keyJ          = 50U;  //!< Keycode for the \\c J key (architecture-dependent).\n    const unsigned int keyK          = 51U;  //!< Keycode for the \\c K key (architecture-dependent).\n    const unsigned int keyL          = 52U;  //!< Keycode for the \\c L key (architecture-dependent).\n    const unsigned int keyENTER      = 53U;  //!< Keycode for the \\c ENTER key (architecture-dependent).\n    const unsigned int keySHIFTLEFT  = 54U;  //!< Keycode for the \\c SHIFTLEFT key (architecture-dependent).\n    const unsigned int keyZ          = 55U;  //!< Keycode for the \\c Z key (architecture-dependent).\n    const unsigned int keyX          = 56U;  //!< Keycode for the \\c X key (architecture-dependent).\n    const unsigned int keyC          = 57U;  //!< Keycode for the \\c C key (architecture-dependent).\n    const unsigned int keyV          = 58U;  //!< Keycode for the \\c V key (architecture-dependent).\n    const unsigned int keyB          = 59U;  //!< Keycode for the \\c B key (architecture-dependent).\n    const unsigned int keyN          = 60U;  //!< Keycode for the \\c N key (architecture-dependent).\n    const unsigned int keyM          = 61U;  //!< Keycode for the \\c M key (architecture-dependent).\n    const unsigned int keySHIFTRIGHT = 62U;  //!< Keycode for the \\c SHIFTRIGHT key (architecture-dependent).\n    const unsigned int keyARROWUP    = 63U;  //!< Keycode for the \\c ARROWUP key (architecture-dependent).\n    const unsigned int keyCTRLLEFT   = 64U;  //!< Keycode for the \\c CTRLLEFT key (architecture-dependent).\n    const unsigned int keyAPPLEFT    = 65U;  //!< Keycode for the \\c APPLEFT key (architecture-dependent).\n    const unsigned int keyALT        = 66U;  //!< Keycode for the \\c ALT key (architecture-dependent).\n    const unsigned int keySPACE      = 67U;  //!< Keycode for the \\c SPACE key (architecture-dependent).\n    const unsigned int keyALTGR      = 68U;  //!< Keycode for the \\c ALTGR key (architecture-dependent).\n    const unsigned int keyAPPRIGHT   = 69U;  //!< Keycode for the \\c APPRIGHT key (architecture-dependent).\n    const unsigned int keyMENU       = 70U;  //!< Keycode for the \\c MENU key (architecture-dependent).\n    const unsigned int keyCTRLRIGHT  = 71U;  //!< Keycode for the \\c CTRLRIGHT key (architecture-dependent).\n    const unsigned int keyARROWLEFT  = 72U;  //!< Keycode for the \\c ARROWLEFT key (architecture-dependent).\n    const unsigned int keyARROWDOWN  = 73U;  //!< Keycode for the \\c ARROWDOWN key (architecture-dependent).\n    const unsigned int keyARROWRIGHT = 74U;  //!< Keycode for the \\c ARROWRIGHT key (architecture-dependent).\n    const unsigned int keyPAD0       = 75U;  //!< Keycode for the \\c PAD0 key (architecture-dependent).\n    const unsigned int keyPAD1       = 76U;  //!< Keycode for the \\c PAD1 key (architecture-dependent).\n    const unsigned int keyPAD2       = 77U;  //!< Keycode for the \\c PAD2 key (architecture-dependent).\n    const unsigned int keyPAD3       = 78U;  //!< Keycode for the \\c PAD3 key (architecture-dependent).\n    const unsigned int keyPAD4       = 79U;  //!< Keycode for the \\c PAD4 key (architecture-dependent).\n    const unsigned int keyPAD5       = 80U;  //!< Keycode for the \\c PAD5 key (architecture-dependent).\n    const unsigned int keyPAD6       = 81U;  //!< Keycode for the \\c PAD6 key (architecture-dependent).\n    const unsigned int keyPAD7       = 82U;  //!< Keycode for the \\c PAD7 key (architecture-dependent).\n    const unsigned int keyPAD8       = 83U;  //!< Keycode for the \\c PAD8 key (architecture-dependent).\n    const unsigned int keyPAD9       = 84U;  //!< Keycode for the \\c PAD9 key (architecture-dependent).\n    const unsigned int keyPADADD     = 85U;  //!< Keycode for the \\c PADADD key (architecture-dependent).\n    const unsigned int keyPADSUB     = 86U;  //!< Keycode for the \\c PADSUB key (architecture-dependent).\n    const unsigned int keyPADMUL     = 87U;  //!< Keycode for the \\c PADMUL key (architecture-dependent).\n    const unsigned int keyPADDIV     = 88U;  //!< Keycode for the \\c PADDDIV key (architecture-dependent).\n#endif\n\n    const double PI = 3.14159265358979323846;   //!< Value of the mathematical constant PI\n\n    // Define a 12x13 font (small size).\n    static const char *const data_font12x13 =\n\"                          .wjwlwmyuw>wjwkwbwjwkwRxuwmwjwkwmyuwJwjwlx`w      Fw                         mwlwlwuwnwuynwuwmyTwlwkwuwmwuwnwlwkwuwmwuw_wuxl\"\n\"wlwkwuwnwuynwuwTwlwlwtwnwtwnw my     Qw   +wlw   b{ \\\\w  Wx`xTw_w[wbxawSwkw  nynwky<x1w `y    ,w  Xwuw   CxlwiwlwmyuwbwuwUwiwlwbwiwrwqw^wuwmxuwnwiwlwmy\"\n\"uwJwiwlw^wnwEymymymymy1w^wkxnxtxnw<| gybwkwuwjwtwowmxswnxnwkxlxkw:wlymxlymykwn{myo{nymy2ykwqwqwm{myozn{o{mzpwrwpwkwkwswowkwqwqxswnyozlyozmzp}pwrwqwqwq\"\n\"wswswsxsxqwqwp}qwlwiwjybw`w[wcw_wkwkwkwkw mw\\\"wlwiw=wtw`xIw awuwlwm{o{mylwn|pwtwtwoy`w_w_wbwiwkxcwqwpwkznwuwjzpyGzqymyaxlylw_zWxkxaxrwqxrwqyswowkwkwkwk\"\n\"wkwkwk}qyo{o{o{o{owkwkwkwkznxswnymymymymyayuwqwrwpwrwpwrwpwrwqwqwpwkwtwlwkwlwuwnwuynwuwmyTwkwlwuwmwuwnwkwlwuwmwuwkxlwuxmwkwlwuwnwuynwuwTwkwlwuwmwuwlwm\"\n\"wkwtwUwuwuwowswowswowswowsw;wqwtw_ymzp~py>w bwswcwkwuwjwuwozpwtwuwnwtwowkwjwmwuwuwkwIxmxuxowuwmwswowswmxnwjwhwowswowsw0wmwowswuwnwrwowswpwswowkwjwrwqw\"\n\"rwpwkwkwtwnwkxsxqxswowswpwswnwswpwswowrwnwmwrwqwqwqwswswrwswowswjwpwlxjwkxuxLw[wcw_wSwkw mw\\\"wlwiw=wtwmxlwFw cwswnwuwnwkwjwswo{pwrwpwtwtwpwswby`w`yUwlw\"\n\"twpwqwpwswowlw\\\\wrwrxuwHwrwfwuwjwlwlwTyuwVwlwtwawswowswowswcwuwmwuwmwuwmwuwmwuwlwkwuwnwswpwkwkwkwkwkwkwkwkwswoxswowswowswowswowswowswowrwpwswpwrwpwrwpw\"\n\"rwpwrwpwswoznwtw  Ww (wGwtwtwqwqwqwuwuwuwqwswuwqwqw=wqxtw`{nzp~q{ozowrwnxmwtwow bzawkwuwl}rwuwnwtwuwnwtwowkwjwlyjwIwlwswmwiwkwnwuwnwkwhwnwswowswowkwew\"\n\"ewixnwsytwswuwnwrwpwkwrwpwkwkwkwrwpwkwkwuwmwkxsxqwuwtwpwqwqwswowqwqwswowiwmwrwpwswowtwtwpwuwmwuwjwowkwjwlxsxXynzmymznyozlzoznwkwkwtwnwkzuyrzmynzmzowux\"\n\"myozmwswpwrwowtwtwrwrwpwrwp{mwlwiwHyuwpwtwkwmxlynzoxswmwmwswnwswowtxq|owtwtwpym{p{owswnwuwmwlwkwqwqxuwuxqwrwpwtwtwqwqwowlwuwuwkwmwlwtwowuwuwdwjznwl{nw\"\n\"uwnwkx_wtxtwswtwlwtwWwuytwgyjwmwjwawswoyuwVwlwtwnwtwmwtwnwtwmwuwmwlwuwmwuwmwuwmwuwmwuwmwuwmxuwowkwkwkwkwkwkwkwkwkwrwpwuwtwpwqwqwqwqwqwqwqwqwqwowtwpwsw\"\n\"uwqwrwpwrwpwrwpwrwowuwnwswowuwlymymymymymymyuyqymymymymynwkwkwkwjynzmymymymymykwmzowswowswowswowswpwrwozowrwW}q}qwtwtwqwtwtwqwtwtwA}rwuw_{p~r~r}pwtwow\"\n\"rwnxmwtwow aw_w]wtwpwuwmxuwmybwjwlyjwIwlwswmwiwnynwtwnznzkwmynwswTyp}pylwmwtwtwtwswuwn{owkwrwp{o{owk|pwkwkxlwkwuwuwuwqwuwtwpwqwqwswowqwqwswoykwmwrwpws\"\n\"wowuwuwuwowkwjwnwkwjwDwowswowkwswowswowkwswowswowkwkwuwmwkwswswswswowswowswowswoxlwswowkwswpwrwowtwtwqwtwowrwlwoxkwhxVxuxpwtypwuwjwnwtwnwkwswowtxnxmws\"\n\"wowqwqwtwuxqwtwnwtwtwqwswowswmwm{nwuwlxnwkwqwqwtwtwqwrwpwtwtwqwuyuwpwiwhwnwmwrwnwbwkwuwlwlwswoxuxowlwtw`wuwrwszmwtwo}dwuwtwuw[}qymx`wswoyuwow_ylxlwtwo\"\n\"yuwoyuwoyuwmwlwuwmwuwmwuwmwuwmwuwmwuwmwt{swk{o{o{o{owkwkwkwlztwpwuwtwpwqwqwqwqwqwqwqwqwqwnxowtwtwqwrwpwrwpwrwpwrwnwmwswowuwiwkwkwkwkwkwkwswswkwswowswo\"\n\"wswowswowkwkwkwkwswowswowswowswowswowswowswcwtxowswowswowswowswpwrwowswpwrwWwtwtwqwqwqwuwuwuwqwuwswqwqw>wowuw`}q~q|q}qwrwpwrwowtwnwtwo~ izaw]wtwoykwux\"\n\"qwtwswfwjwmwuwuwn}eyaxlwswmwjwjwpwswjwowswmwmwswnzWy]ypwlwtwtwuwswswowrwpwkwrwpwkwkwsyqwrwpwkwkwuwmwkwuwuwuwqwtwuwpwqwqznwqwqzkynwmwrwowuwnwuwuwuwowkw\"\n\"jwnwkxkwGzowswowkwswo{owkwswowswowkwkxlwkwswswswswowswowswowswowjxmwkwswowtwnwuwuwuwpxmwtwlwlwlwiwlytwewtwtwqwswowtxoznwswnxmwswnwuwmwuwnwswowtwtwqwtw\"\n\"twqwtwnwtwtwqwswowswmwmwswowswmwmwkwqwqwtwtwqwrwowuwuwpwuyuwq~own~own~owbwkwuwmznwswmwbwswawuwrwgwtwhwdwuytwXwJwswnxuw=wtwmwswowtxowswqxmwswowswowswow\"\n\"swowswowswnwtwowkwkwkwkwkwkwkwkwkwrwpwtwuwpwqwqwqwqwqwqwqwqwqwnxowtwtwqwrwpwrwpwrwpwrwnwmwswowtwmznznznznznzn~swk{o{o{o{owkwkwkwkwswowswowswowswowswow\"\n\"swowswo}qwuwuwowswowswowswowswowtwnwswowtwUwuwuwowswowswowswowsw@}qx`}q~pzo{pwrwpwrwowtwnwtwow aw_w_}owuwmwuwtwrwswuwewjwkwiwJwkwswmwkwiwp|kwowswmwmws\"\n\"wkwWym}mypwlwszr{owrwpwkwrwpwkwkwqwqwrwpwkwkwtwnwkwtwtwqwtwuwpwqwqwkwqwqwtwiwnwmwrwowuwnwuwuwuwpwuwlwkwmwjwkwHwswowswowkwswowkwkwswowswowkwkwuwmwkwsws\"\n\"wswswowswowswowswowhwnwkwswowtwnwuwuwuwpxmwtwmwkwlwiwmwtydwtwtwqwswowswowtwnwswowkwswnwuwnwtwnwswowtwtwqwtwtwqwtwnwtwtwqwswowswmwmwswowswnwlwkwqwqxuwu\"\n\"xqwrwnyowqwpwiwhwpwuwuwowrwpwuwuwdwkwuwlwlwswo{owkxuwawtxtwszmwtwiwdwuwtwuwXwJwswmwuwKzmwtwlwtxowrwpwtxrxl{o{o{o{o{o{o{owkwkwkwkwkwkwkwkwkwrwpwtwuwpwq\"\n\"wqwqwqwqwqwqwqwqwowtwpwuwswqwrwpwrwpwrwpwrwnwmznwswowswowswowswowswowswowswowswowkwkwkwkwkwkwkwkwkwswowswowswowswowswowswowswcwuwuwowswowswowswowswowt\"\n\"wnwswowtwTymymymymy=wmw^wuwuwmxlxmyowrwowtwnwtwmxmw bwswIwuwmwuwmwuwtwrxswdwjw]wJwkxuxmwlwlwswlwjwowswmwmwswlwSycyawlwswowrwowswpwswowkwjwrwqwrwpwkwkw\"\n\"swowkwqwqwsxowswpwjwswpwswowrwnwmxtxnwlwswpwswmwlwlwjwkwHwswowswowkwswowswowkwswowswowkwkwtwnwkwswswswswowswowswowswowkwswowkwswnxlwswpwtwmxmwjwlwiwTx\"\n\"uxpwtxowswowtwnwswowkwswnynwtwnwswowtwtwqxuwuxqwtwnwtwtwqwswowswmwlwuwnwswowkwjwswo{pwrwmwmwswnwjwiwnymwtwnycwkwuwlwl{mwmwiw_wrwdwtwVwrw*wswmwuw?wtwlw\"\n\"tzqwrwpwtzswkwswowswowswowswowswowswowswnwswpwkwkwkwkwkwkwkwkwswowsxowswowswowswowswowswowrwpwswpxtxpxtxpxtxpxtxnwmwkwswowswowswowswowswowswowswowtxow\"\n\"kwswowswowswowswowkwkwkwkwswowswowswowswowswowswowswlwnxtwowswowswowswowswnxmwswnx >wlw\\\\wkx`wnwrwoznwtwmxl| gybw^wtwozmwsxpzuxfxlx]wnw_wlxjyn{o{nykwnz\"\n\"mymwkynymwkwewewjwjwrwswqwp{myozn{owizpwrwpwkwkwrwp{owqwqwsxnyowiyowrwozmwlzmwlwswqxsxnwm}qwjxlwGzozmymznynwjzowswowkwkwswowkwswswswswnynzmzowjymxlznx\"\n\"lwswqwrwnwm{mwlwiwHxuxpzmxlymynwswmwnwrwozmxuxo{pwtxn{pzmykwmyo}p{owkyuynwnwrwmwly`w_w_wbwjzo{pwqwnwmwhw_z>zY}M|nwuw2wqwqwryrwqwqyowqwqwqwqwqwqwqwqwqw\"\n\"qwqwqwr{qyo{o{o{o{owkwkwkwkznwsxnymymymymycwuynznznznzmwmwkwuynznznznznznznyuzrymymymymynwkwkwkwjynwswnymymymymybzmznznznznwlzmw     hwHwlwSwTw <w8z ]\"\n\"x tx Zxjwmx RwWw/wgw pw_ynwky=wCwmwaw\\\\w_wnw  1wIwlz 'wiwuwaw  mw    Pw   swlwjw     hw        f| pyWx/wgw rxSw/wCwmwaw\\\\w_wnw  1w  AwRx  nw    Pw   txk\"\n\"wlxm\";\n\n    // Define a 20x23 font (normal size).\n    static const char *const data_font20x23 =\n\"                                                9q\\\\q^r_rnp`qnq`plp7q\\\\q^q_qmqbq\\\\q^q_qmqHqmp_q\\\\q^r_rnp`qnq7q\\\\q^q_qmq_q \\\"r                               \"\n\"                        Mq^q^qnq`pnr`qnq`plp6q^q^pmp`qmqaq^q^pmp`qmqIpmq]q^q^qnq`pnr`qnq6q^q^pmp`qmq`q \\\"plp         'q     5qmq               Vq      \"\n\"               Xq    [plp      3qYq_p^rnpLplp8qYq_qNqYq_q4rmpaqYq_q_rmp%qYq^pGq  Irc|!pKp]raqjq`p   HtNq_qmq\\\\plqbp_shpdscq[q^q[p [q]s_r`uau]rbv`tcxbua\"\n\"t LsZucrav_udwcxdw`udqiqeq]q]qjreq]sksgrjqbtcv_tcvaud{eqiqgqfqgqjsjqlrjrhrirfzfs`q[sZqMqJqCqNsLq]q]q]q]q   .scq]s \\\\sKt%r  [s^raxdxat_qazgqlqlqctJqIqIq\"\n\"LqHsOqiqOtaqmq\\\\uft nufu`sLs`t\\\\qKv<r\\\\rLrepirepitgpeq]r^r^r^r^r^r^{gudxdxdxdxdq]q]q]q]wcrjqbt`t`t`t`tLtlpgqiqeqiqeqiqeqiqgrireq[s_q[q_pnp_pnr`qnq`plp7q[\"\n\"q_s`qmqcq[q_s`qmq]pkpbpmr`q[q_s`pmraqmq8q[q^pnp_qnq^qaq\\\\qnq !pnqd{!pJp^tdunucr _y  dvOq_qmq\\\\plpap_pmpipdudq[p\\\\p_plplp _q^ubtawcw^rbvavdxcwcw Ou]yerawb\"\n\"xeyexdwbxeqiqeq]q]qkrdq]sksgrjqdxewbxewcwe{eqiqfqhqfqjsjqkqjqfqiqezfs`q[s[sMpJqCqOtLq]q]q]q]q  q 1tcq]t ^vaq_w&r  \\\\u_raxdxcxcuczgqlqlqexMsJqJsMq[p^uPq\"\n\"iqdq]uaqmq]qkqcq!qkqguaqmqNpkp\\\\p]pKtmp:p]plpKpfpfpfpcpipdq]r^r^r^r^r^r^{ixexdxdxdxdq]q]q]q]yerjqdxdxdxdxdxPwnpfqiqeqiqeqiqeqiqfqiqdq\\\\u_p[p^pnpKqnq_r5p\"\n\"[p^pmp`qmqbp[p^pmp`qmq]tKp[p^pmpLqmq7p[p]pnp_qnq^p`q\\\\qnq5uauauauaucq`qhq4p]pKr_ueunucr `q  \\\\rkpOq_qmq\\\\plpctbqmqkqerlpdq\\\\q\\\\q_qnpnq\\\\q%q^qkqcqnqapjrdpjr`\"\n\"sbq]rkp^qcrkrerkq Oplr`sirgtbqkrdripeqjsfq]q]ripeqiqeq]q]qlrcq]sksgskqerjrfqkrdrjrfqkrerjp`q`qiqfqhqeqkskqiqlqdqkq\\\\qeq]qZq\\\\qmqNqKqCqOqIq5q]q  q 1q`qZq\"\n\" _rlqbtaqjp$q  ^qkqatbr^q]rjrewdqhqgqlqlqfrjrOuKqKu8p_rlpOqkqcq]qFpgpcp\\\"pgpTpkp\\\\q^p\\\\p^qLump:p^pjpLpgpepgpbpjpPt`t`t`t`t`qnq_qnqcripeq]q]q]q]q]q]q]q]qj\"\n\"sfskqerjrfrjrfrjrfrjrfrjrRrjrfqiqeqiqeqiqeqiqeqkqcvbrlq`q]q_plp Iq]q_qmqNq]q_qmqKtIq]q_qmq ^q]q^plpKq`q mqkqcqkqcqkqcqkqcqkqdq`qhq5q^qLt`ueunudtasbqip\"\n\"`q`pipcq  [qIq_qmq`{gvcqmqkpdq_q\\\\q\\\\q]rZq%q_rkraqZq]qaqnqbq]qXqcqiqeqiq1pSpXq`qfrhqnqbqjqdq]qhqfq]q]q]qiqeq]q]qmrbq]qnqmqnqgskqeqhqfqjqdqhqfqjqeqYq`qiq\"\n\"frjreqkskqirnrdrmr]qdq]qZq]qkq)qCqOqIq5q]q  q 1q`qZq _qkq_qaq mq  ^qkqaqnqar_q]qhqfrnqnreqhqgqlqlqfqhqPwLqLw9p_q_phqdqkqcq]qGplslpiu#pmtlpUpkp\\\\q_q_r8u\"\n\"mp:p^pjpLpgpepgperipcq^qnq`qnq`qnq`qnq`qnq`qnq`qmqcq]q]q]q]q]q]q]q]q]qhqfskqeqhqfqhqfqhqfqhqfqhqdphpfqirfqiqeqiqeqiqeqiqermrcwcqkq    [q 3qZp Oq nqmqm\"\n\"qeqiqeqiqeqiqeqiqeq_piq4q^pLvatd|evdvcqipasaqkqdq  [qHq_qmq`{hrnpmpcqmqlpcq_q\\\\pZp]rZq%q_qiqaqZq]qapmqbq^qWqcqiqeqiqdq]qUsSs[qaqdqhqnqbqjqeq\\\\qgqgq]q^q\\\\\"\n\"qiqeq]q]qnraq]qnqmqnqgqnqlqfqfqgqjqeqfqgqjqeqYq`qiqeqjqdqlqmqlqhqnqbqmq]rdq]qZq^pgp=taqns`s`snqatdv_snqcqnsbq]q]qkqcq]qnsmshqns`saqnsasnqcqnr`tbvaqjqe\"\n\"qiqdqkqkqjrkreqiqdw`q`qZq#tnreqkq^qatauaqnsdqiq`raqjqdqiqdpmrcxdqmqmqatbxfyeqiqbqnq`r`q^qfqhrmqmrfqhqgqlqlqgqfqep[pnqnp[p`q`pipbpnqnpNq]taq^qnqnqbqmqb\"\n\"q\\\\qIqmpkpmqkqkp$qmpkpmqVqmq\\\\q`q[pLqjqeump:p^pjpLphpdphpapkpbq^qnq`qnq`qnq`qnq`qnq`qnq`qmqdq\\\\q]q]q]q]q]q]q]q]qgqgqnqlqfqfqhqfqhqfqhqfqhqfqfrjrhqiqnqgqi\"\n\"qeqiqeqiqeqiqdqmqbqkrdqmsbt`t`t`t`t`t`tlsfs_t`t`t`tbq]q]q]q[tbqns`s_s_s_s_s\\\\q`smpdqjqdqjqdqjqdqjqeqiqdqnscqiq;qlqlqgqgqgqnqmqnqgqjqnqgqgqfq_qjq<{fpjpL\"\n\"vatd|fxeqkqdqipasaqkqdp  \\\\yNqGplqeqmp`qmqmqcrLqZq`qnpnq\\\\q%q_qiqaqZq^rbqmqbubqms^qaqkqdqiqdq]qXuf{fu_q`qlrnqlqjqlqcqkreq\\\\qgqgq]q^q\\\\qiqeq]q]t`q]qnqmqnqg\"\n\"qnqlqfqfqgqkreqfqgqkres[q`qiqeqjqdqlqmqlqhs`s]rcq]qZq#vbwcvbwcwev`wcwcq]q]qlqbq]vnthwcwcwcwcubwcvaqjqdqkqcqkqkqiqkqdqiqdw`q`qZq7smsfxdqlr^qavdvawdqkq_\"\n\"raqjqdpgpeqntdxdqmqmqcwdyfyeqiqcqlq`raq^qfqhqlqlqfqhqgqlqlqgqfqfrZqZraqarkraqLq^vbq^wbqmqbq]tKpmpfpkpjp_plp9plpkplpUs[qaqZpLqjqeump:p^pjpaplp_piqdpiqa\"\n\"plqbq_qlqbqlqbqlqbqlqbqlqbqlqbrmqdq\\\\q]q]q]q]q]q]q]q]qgqgqnqlqfqfqhqfqhqfqhqfqhqfqerlrgqjqmqgqiqeqiqeqiqeqiqcsaqjqdqnq`vbvbvbvbvbvbvnuivbwcwcwcwcq]q]q]\"\n\"q]wcwcwcwcwcwcwOwcqjqdqjqdqjqdqjqeqiqdwdqiq;pkqkpgpepgpmumpgpjrmpgpepfq_qkq;{hrkpLxdxf|fxepipdqipas`pkpcp  ZqHqGplpdt_pmplpmshsMqZqaplplp]q&q^qiqaq[qa\"\n\"t`plqbvcx_q`ucrkr:uc{cucq`qlvlqjqlqcwdq\\\\qgqgxdvcqjtfyeq]q]s_q]qmsmqgqmqmqfqfqgwdqfqgwcv_q`qiqdqlqbqmqmqmqfr`s]qbq\\\\q[q#pjqcrlrdqkpcrlrcqkrdq^rlrcrlrdq]\"\n\"q]qmqaq]rlrlqirlrdqkqcrlrerlrcr_qjpbq]qjqdqkqcqlslqhqmqbqkq^q_q`qZq_tjpSqmsmpgrlsdqnsaqmqbqkqdq\\\\rlrdqlq_raqjqeqgqgrnqnrdqlqcqmqmqcqkqerkq`qaycqlq_rbq^\"\n\"qfqhqlqlqfqhqgqlqlqgqnvnqgrYqYrbqbrirbqLq_rnpmpdwaqmqcydq^qlqLpmpfpkpkq`plpa{RpltkpB{gpXpLqjqdtmpcqHp]plp_plp`pipjpipipmsfplpjphr_qlqbqlqbqlqbqlqbqlqb\"\n\"qlqbqlxkq\\\\xdxdxdxdq]q]q]q_vjqgqmqmqfqfqhqfqhqfqhqfqhqfqdrnrfqkqlqgqiqeqiqeqiqeqiqcsaqjqdqnq`pjqcpjqcpjqcpjqcpjqcpjqcpjrlrjqkpbqkrdqkrdqkrdqkrdq]q]q]q]\"\n\"qkrdrlrdqkqcqkqcqkqcqkqcqkqOqkqcqjqdqjqdqjqdqjqdqkqcrlrdqkq:pnwnpgpnwnpgplslpgpkrlpgpkqkpfq^qlq6qaqlpMzfzfzfzgqipdqipbqmp`qmqc|  fqHqHqlpcuasmplpmpiul\"\n\"qSqZq]p^{+q^qiqaq\\\\q`ubqlqbpkrdrkrarawcx<tEteq`qlqlqlqjqlqcwdq\\\\qgqgxdvcqjtfyeq]q]t`q]qmsmqgqmqmqfqfqgvcqfqgv_t`q`qiqdqlqbqmqmqmqgs_q]qaq\\\\q[q\\\"vcqjqeq]qj\"\n\"qdqiqdq^qjqcqjqdq]q]qnq`q]qkqkqiqjqeqiqdqjqeqjqcq^s^q]qjqdqkqbqmsmqgqmqbqkq_qas_qYsc{Spkqkphqkrcqntcvcqiqeq\\\\qjqdqmr`tbqjqeqgqgqmqmqdqlqcqmqmqdqiqfqiqa\"\n\"qaycqlq_qaq^qfqhqlqlqfqhqfqmqmqfqnvnqh}cqc}cqc}cqLq_qmpawbqkqasaq^qkqMpmpfpjsnpaplp`{RplpmqkpB{huatKqjqbrmpcqJt^r]plpctlpjqktlpmpkpltlpjqhq^qlqbqlqbql\"\n\"qbqlqbqlqcrlrcqlxkq\\\\xdxdxdxdq]q]q]q_vjqgqmqmqfqfqhqfqhqfqhqfqhqfqcteqlqkqgqiqeqiqeqiqeqiqbq`qkrdqmravbvbvbvbvbvbvjqkq]qiqeqiqeqiqeqiqdq]q]q]q^qiqdqjqe\"\n\"qiqeqiqeqiqeqiqeqiqd{hqkpnqdqjqdqjqdqjqdqjqdqkqcqjqdqkq:pnwnpgpnwnpgplslpgplrkpgpkqkpfq^qlq6qaqmqMzg|fxdxfqipdqipbqmqaqmqcp  \\\\wLqK{dt]qmqmqkrmrnrSqZqK\"\n\"{TtKq^qiqaq]r\\\\rdqkq\\\\qdqiqaqarkrcsmq<tEtfq_qlqlqlqkqjqdqjqeq\\\\qgqgq]q^qgqfqiqeq]q]qnraq]qmsmqgqlqnqfqfqgq^qfqgqkq]raq`qiqdqlqbqnqkqnqgt`q^raq\\\\q[q#wcqjqe\"\n\"q]qjqdydq^qjqcqjqdq]q]s_q]qkqkqiqjqeqiqdqjqeqjqcq]uaq]qjqcqmqaqmpmpmqfs`qmq_ras_qYscpjtRpkqkphqkrcqkreqlrcqiqcr_qjqdqmq_qnqbqjqeqlqlqgqmqmqdqlqcqmqmqd\"\n\"qiqfqiqaqaqiqdqjqaq`q^qfqhqlqlqfqhqfrnqnrfqfqh}cqc}cqc}cqLq_qmp_q^qkq`qMrlqMpmpfpWplpUqRplplqlp=q&qjq`pmp _plp]qkpnpdqhpeqkpnpiq^qjqdqjqdqjqdqjqdqjqdq\"\n\"jqdqkqdq\\\\q]q]q]q]q]q]q]q]qgqgqlqnqfqfqhqfqhqfqhqfqhqfqbrdqmqjqgqiqeqiqeqiqeqiqbq`wcqlrcwcwcwcwcwcwc~kq]yeyeyeydq]q]q]q^qiqdqjqeqiqeqiqeqiqeqiqeqiqd{hq\"\n\"lpmqdqjqdqjqdqjqdqjqcqmqbqjqcqmq9pkqkpgpepgpmumpgpmrjpgpepfq]pmq:{epmpLzg|evbveqipdqipbqmqaqmpbq  [qHqK{cpmq^plqmqkqktRqZqFqOtKq^qiqaq^rZqdy^qdqiqaqaq\"\n\"iq]q:uc{cudq_qlqlqmqjxdqiqfq\\\\qgqgq]q^qgqfqiqeq]q]qmrbq]qlqlqgqlqnqfqfqgq^qfqgqkr]qaq`qiqcqnqaqnqkqnqhrnq`q_r`q\\\\q[q$qjqcqjqeq]qjqdydq^qjqcqjqdq]q]s_q]q\"\n\"kqkqiqjqeqiqdqjqeqjqcqZsbq]qjqcqmqaqnqmqnqfs`qmq`r^r`qZr9pkqkphqkrcqjqeqkqcqiqet_qjqcqnq`rnqbqjqeqlqlqgqmqmqdqlqcqmqmqdqiqfqiqaqaqiqdqjqbr`q]qhqgrmqmr\"\n\"fqhqeweqfqgrYqYrdpnqnpdrirdpnqnpNq_qmp_q]qmqcyPrmqMqmpkpmqkvaplpVqRqmpkpmq=q&qjq`pmp(v_plp\\\\pkpmpdphqepkpmpjq]xdxdxdxdxdxdwdq\\\\q]q]q]q]q]q]q]q]qgqgqlqnq\"\n\"fqfqhqfqhqfqhqfqhqfqcteqnqiqgqiqeqiqeqiqeqiqbq`vbqjqeqjqdqjqdqjqdqjqdqjqdqjqdqjxkq]yeyeyeydq]q]q]q^qiqdqjqeqiqeqiqeqiqeqiqeqiqQqmplqdqjqdqjqdqjqdqjqcq\"\n\"mqbqjqcqmq9qlqlqgqgqgqnqmqnqgqnqjqgqgqfq]qnq:{eqnpLzg|dt`tdqipcpipbpkp`sbq  Zq plq`pmq_pkqmqkqjrQqZqFq'q]rkraq_rYqdy^qdqiqbq`qiq^q6uf{fuaq_qlyjzeqiqeq\"\n\"]qhqfq]q]qhqfqiqeq]q]qlrcq]qlqlqgqkseqhqfq]qhqfqjq]qaq`qiqcqnq`skshrmraq_q_q[q\\\\q$qjqcqjqeq]qjqdq\\\\q^qjqcqjqdq]q]qnq`q]qkqkqiqjqeqiqdqjqeqjqcqXqbq]qjqcq\"\n\"mqaqnqmqnqgqmq`s_q\\\\q`qZq7pmpnqmpgqkrcqjqeqkpbqiqeq\\\\qjqcs_qlqcqjqeqlqlqgqmqmqdqlqcqmqmqdqiqfqiqaq`qkqdrjrdr_q]riqfrnqnreqhqducqhqerZqZrdwdrkrdwOq_qmp_q\"\n\"^w`q`q[sKplslpTplpWqQpmpkqnp<q&qjq`pmp aplp\\\\pkplpephqepkplpjq^zfzfzfzfzfzfxcq]q]q]q]q]q]q]q]q]qhqfqkseqhqfqhqfqhqfqhqfqhqcrnreriqfqiqeqiqeqiqeqiqbq`q]\"\n\"qjqeqjqdqjqdqjqdqjqdqjqdqjqdqjqdq]q]q]q]q\\\\q]q]q]q^qiqdqjqeqiqeqiqeqiqeqiqeqiqQqnpkqdqjqdqjqdqjqdqjqbsaqjqbs7qmqmqeqiqeqiqeqiqeqiqeq]qnp7q]rJrnpnresnpn\"\n\"sct_rcqipcqkqcqkqasaq  [rkp&plpcplpnr`qkqmqkrltRqZqFq'q\\\\qkq`q`r_pjr^qcpjrcqkrbq`rkrdpkr3sSsLrlrnrhqhqeqjreripeqjsfq]q]riqfqiqeq]q]qkrdq]qgqgqkserjrfq]\"\n\"rjrfqjrfpiraq_qkqbt`skshqkqaq`q^q[q\\\\q$qkrcrlrdqkpcrlrcqipdq^rlrcqjqdq]q]qmqaq]qkqkqiqjqdqkqcrlrerlrcq^pjqbq]rlrbs_rkrfqmq`s`r\\\\q`qZq6qlrfrmscrlrepkqbrk\"\n\"qdqkpaqjqcs`rlqcrlrernsnrgrnqnrdqlqcrnqnrdrkqdqkraq`qkqdqhqer^q\\\\rkqdwdqhqbqarjrdpYqYpbubpipbuNq_rnpmpbq^qnqnq`q`qZqIpgpRplp7pgp;q&rlr`pmp bplp[pkufpiq\"\n\"dpkukrlpcqhqfqhqfqhqfqhqfqhqfqhqfqjqcripeq]q]q]q]q]q]q]q]qjsfqkserjrfrjrfrjrfrjrfrjrdrlrfrjreqkqcqkqcqkqcqkqaq`q]qnplqeqkrdqkrdqkrdqkrdqkrdqkrdqksjpjq\"\n\"kpbqipdqipdqipdqipdq]q]q]q]qkqcqjqdqkqcqkqcqkqcqkqcqkq^qbqkqcrlrdrlrdrlrdrlrbsarlrbs6qkqcqkqcqkqcqkqcqkqdq\\\\r7q\\\\qFp\\\\p]r^rcqipcvbqkqas`r  \\\\vOqIqlpcw_pip\"\n\"mpivnrRpZpEqbqIq^q[ubwdxdw]qcwbwaq_wcvbq]qRpSp[q^q^qhqexcxeyexdq\\\\xeqiqeq]q]qjrexdqgqgqjrdxeq\\\\xeqiqfx`q_war_ririqiqbqazfq[q\\\\q$xcwcvbwcxdq]wcqjqdq]q]qlq\"\n\"bq]qkqkqiqjqdwcwcwcq^wbu`wbs_rkrgqkq`q`w`q`qZq$yewdqmq`wdvaqjqbr`qkqcyeyewcqlsdwcxdw`sauczexdq^umteucqhqbq`xLqJsKsMq^vdxdpgpaq`qYqIqkq bqkq?{+yapmp Jp\"\n\"fpfpipcpfpiucqhqfqhqfqhqfqhqfqhqfqhqfqjxixexdxdxdxdq]q]q]q]yeqjrdxdxdxdxdxdrjrgpnwdwcwcwcwaq`q]qnuexdxdxdxdxdxdvnwjvbxdxdxdxdq]q]q]q]wcqjqdwcwcwcwcw^q\"\n\"bwbwcwcwcwaq`w`q4uauauauaucq\\\\r7p[qFp\\\\p\\\\p\\\\pbqipasapip`q^y  ctNqIqmqbu_phsgslrSq\\\\qEqbqIq^qZsawdxcu\\\\qbt^taq]uataq]q q]qgpiqfqfw`udwcxdqZudqiqeq]q]qirfxdq\"\n\"gqgqjrbtcqZtcqirfv_q]s_r_rirjrircqazfq[q\\\\q#tnqcqns`s`snqaucq\\\\snqcqjqdq]q]qkqcq]qkqkqiqjqbsaqnsasnqcq]t_t_snqaq^rkrhrkraq`w`q`qZq#smrevbs^t`s`qjqbq`qiq\"\n\"dqnrmqdrmrcubqkrcubqntat^r`sc|fxdq^umtcqaqhqbq^tJqIqIqLq]tcxLq`qYqHu `u>{+qnrmqapmp Kpepgpiuhpephscqfqhqfqhqfqhqfqhqfqhqfqhqixgudxdxdxdxdq]q]q]q]wcqjr\"\n\"bt`t`t`t`taphpgplt`s_s_s_s_q`q]qmsctnqctnqctnqctnqctnqctnqbsktgs_uauauaucq]q]q]q[saqjqbs_s_s_s_sNpms_snqbsnqbsnqbsnqaq`qns_q !p Zp      jp#q\\\\q6q7q   l\"\n\"q [sjq  Qq -q  OqZq]q  Cq;q HqWq $rIq`qZq _q iqbqKqFqIq`q     hp$q]u   JqYpmpLp   .p        jp    ]p Xr`q[r !p       Tp\\\"p\\\\p6q6q   mq Yx  Qr -r  Ps\\\\q_s\"\n\"  Ipkq:q HqWq $qHq`qZq _q iqbqKqFqIq`q     hp$q]t   IqYpmpLq   /q        kq     Fq_q[q #s       Tp\\\"q^q6p   1p Vu  Rs    YsJsMy &v<s HqWq &sHtcq]t _q i\"\n\"qbqKqFqIq`q     hp$q   2q2q   /q        kq     Hs_q]s \\\"q                (r     Xy %t;r GqWq &rFscq]s ^q iqbqKqFqIq`q         ,q4r   0r        lr     G\"\n\"r^q                               *q                                                                                   kr               i\";\n\n    // Define a 47x53 font (extra-large size).\n    static const char *const data_font47x53 =\n\"                                                                                                                                                      \"\n\"        9])]2_2]T\\\\8^U^3]  E])]2`4^U^>])]2_4^U^ 6^T\\\\5])]1_2]T\\\\8^U^  K])]2`4^V^3]                                                                       \"\n\"                                                                                                                    U]*\\\\2a4`V\\\\8^U^5a  F]*\\\\1\\\\X\\\\4^U^=]*\\\\\"\n\"2a5^U^ 7aV\\\\4]*\\\\1a4`V\\\\8^U^  J]*\\\\1\\\\X\\\\4^V^3\\\\                                                                                                             \"\n\"                                                                              S],\\\\1\\\\W\\\\5g8^U^6c  F],\\\\1\\\\V\\\\5^U^<],\\\\2]W]6^U^ 8h3],\\\\0\\\\W\\\\5g8^U^  I],\\\\1\\\\V\\\\5^V\"\n\"^4\\\\      ;]                                                                                                                                           \"\n\"                                         :\\\\-]2\\\\U\\\\6\\\\V`7^U^7]U]  F\\\\-]2\\\\T\\\\6^U^;\\\\-]3]U]7^U^ 8\\\\Va1\\\\-]1\\\\U\\\\6\\\\V`7^U^  H\\\\-]2\\\\T\\\\6^V^5]      =a                  \"\n\"              J]                                                                                                                                      \"\n\"              N\\\\/]2\\\\S\\\\7\\\\T]6^U^7\\\\S\\\\  E\\\\/]2\\\\R\\\\7^U^:\\\\/]3]S]8^U^ 8\\\\T^/\\\\/]1\\\\S\\\\7\\\\T]6^U^  G\\\\/]2\\\\R\\\\7^V^6]      =c                                L^           \"\n\"                                                         *^                            U`                                         O^             )\\\\S\\\\ \"\n\"                    !^$^3\\\\  E]U\\\\  K^$^4^ G^$^4]   J^$^3\\\\   #^$^3\\\\ 4^            B[                                                                    \"\n\"&^                            Xe                                         S^             (\\\\S\\\\               )Z      Q^&^3^2]S\\\\ A\\\\S\\\\  K^&^3^ F^&^4_  >]S\"\n\"\\\\9^&^3^2]S\\\\   W^&^3^ 6^        Q]    M[               ?`   ![1^H]?` =]4](\\\\    %` >b4c  Bb ?`2a    .a   Ib   Pb      Aa <a @b      Fb =b  F^ :] '] Da A\"\n\"].].].].]            <_:]._    Xh ?c   W^       @`   La   Pa        Sa   Va5^U^ @`   \\\"f4_ >`0`*^   $^.` <^F]F^F]G`G]     F\\\\S\\\\ ;b        %a2a2a2a2a <bR\"\n\"\\\\     D`4^(^3`4`U\\\\8^V^6\\\\S\\\\  J^(^3`4^U^@^(^3_4^U^/^/`U\\\\8^(^3`4`U\\\\8^V^  K^(^3`4^V^1^9]+^V^      ?`    O\\\\  D\\\\6]M]            We D]1]T] 9[3bJ\\\\@e<])]2])\\\\  \"\n\"  T]0d3_7h9i/_;k5f?n:f7e    3g :_8i3h@h9n?l5iB]H]C].].]J^B].`I`H_J]<g?g1g?g4hAuB]H]G]C]F]K_K]S^J^F^G^CrBb7]*b'_ D] :] '] Fc A].].].].]            >a:]\"\n\".a   !^T_ Bg   `       Dd2_8n?m7g3]:rD]P]P]@g <] 8] 8] B] 3e J^K^ If7^U^+b@d   Fb@f5a Ad4e-] :f  Ra0d AaF\\\\HaF\\\\HeJ\\\\?]._0_0_0_0_2\\\\U\\\\0tHh@n?n?n?n?].].].]\"\n\"-h:_J]<g8g8g8g8g BhV]G]H]C]H]C]H]C]H]G^G^B]*d5](]2\\\\X\\\\4aW]8^V^6\\\\S\\\\  I](]3]X]5^U^?](]3\\\\W\\\\5^U^.^R[9aW]7](]2\\\\X\\\\4aW]8^V^  J](]2\\\\X\\\\4^V^1]8]+^V^      ?a>w   \"\n\"P[ 9[/a:aQa7[    Wl      \\\"h E]1]T]+\\\\R\\\\;[4dL]Ag=])]2])\\\\    U^1f8c8k;j1`;k7h?n;h9g    5i*b:_8k6kBl=n?l7mD]H]C].].]L_A].`I`H`K]>kAj6kAj9kBuB]H]F]E]E^L_L^\"\n\"R^L^D^I^BrBb7^+b(a D] ;] '] Gd A].].].].]      ;]     (b:].b   #^Q] Dj  !a       Ff3_8n?m8i4]:rD]P]P]Bk ?_ 9] 9_ C]&[0f I]K]=]0g7^U^-fC\\\\S]   IfBf6c B[\"\n\"S]5[S].] <i  R\\\\W\\\\1]T] B\\\\W\\\\G]H\\\\W\\\\G]H[S]K]?]._0_0_0_0_2c1uIkBn?n?n?n?].].].]-l>`K]>k<k<k<k<k EoF]H]C]H]C]H]C]H]F^I^A],h6]*]2\\\\V\\\\6]Wa7^V^6\\\\S\\\\  H]*]2\\\\V]6^U\"\n\"^>]*]3]W]6^U^._V_;]Wa5]*]2\\\\V\\\\6]Wa7^V^  I]*]2\\\\V\\\\5^V^2]7]+^V^      @]W\\\\=v   P[ 9\\\\1c<cSd:]   \\\"o      #_S^ F]1]T],]S];[5^V^N]A_T]=]*]0]*\\\\    U]1^T^;e8`S_<\"\n\"^R_2`;k8^R]?n<_T_;^S^    6^S_.i>_8m:`R`Cn?n?l9`QaE]H]C].].]M_@].aKaH`K]?`S`Bk8`S`Bk;_R_BuB]H]F]E]D]MaM]P]L]B^K^ArB]1]&])c D] <] '] G] :].].].].]      \"\n\";]     (^6]*^   #]P^ E^P\\\\   V^       H^T^4_8n?m:`S`6]:rD]P]P]C`S` Aa :] :a D]&[1^S\\\\ I^M^=]0^R[7^U^/^R^EZO\\\\   L^R^ N]U] :],\\\\0] <j  M\\\\2]R] >\\\\H]B\\\\H]=\\\\M]>\"\n\"]._0_0_0_0_0_/uK`R`Cn?n?n?n?].].].]-n@`K]?`S`>`S`>`S`>`S`>`S` H`ScE]H]C]H]C]H]C]H]E^K^@],^T^5],]1\\\\V\\\\6\\\\U`7^V^6]U\\\\  F],]2\\\\T\\\\6^U^=],]2\\\\U\\\\6^U^-e9\\\\U`4],]1\\\\\"\n\"V\\\\6\\\\U`7^V^  H],]1\\\\V\\\\5^V^3]6]+^V^  B`1`1`1`1`6]W]>u   P[ 9]2e>eUf;^   %q      $^O\\\\ F]1]T],]S];[5]T]N\\\\@]P[=]*]0]2ZR\\\\RZ   $]2]P]<_W]8]N]<ZL^4a;]+]MZ/]<^P\"\n\"^=^Q^    7\\\\O]1nAa9]N_<_M]C]NaA].]+_L^E]H]C].].]N_?].aKaHaL]@^M^C]P_:^M^C]P_=^M\\\\6]6]H]F^G^D]MaM]P^N^B^K^-^B]1]&]*e D] =] '] H] 9].].].].]      ;]     )\"\n\"^5])^   %^O]8^3]LZ   U]       I^R^6a9_0]+^M^7]:]H]D]P]P]D^M^ Cc ;] ;c E]&[2^PZ H]M]<]1^-^U^1]L];[   N]L] Q]S] :\\\\,\\\\1] <dU\\\\  M\\\\2\\\\P\\\\ >\\\\H\\\\A\\\\H\\\\<\\\\M\\\\=]/a2a2a\"\n\"2a2a1_/]V];_M]C].].].].].].].]-]ObBaL]@^M^@^M^@^M^@^M^@^M^ J^N`D]H]C]H]C]H]C]H]E^K^@]-^Q]5].]1\\\\T\\\\7\\\\S]6^V^5c  E].]2]S\\\\7^U^<].]2\\\\S\\\\7^U^,a6\\\\S]2].]1\\\\T\\\\7\\\\S\"\n\"]6^V^  G].]1\\\\T\\\\6^V^4]5]+^V^  De6e6e6e6e9\\\\U\\\\>u   P[ :_3f@gVf<_   &r      $]M[ F]1]T],\\\\R]>d<^T^P]A^OZ=]+].]4]T\\\\T]   &^3^P^=[S]8[K].]4\\\\X];],]!]<]N]>^O^  \"\n\"  8ZM^3`P`Ba9]M^=^J\\\\C]K_B].],^H\\\\E]H]C].].]O_>].aKaHaL]A^K^D]N^<^K^D]N^>]JZ6]6]H]E]G]C]MaM]O^P^@^M^-^A]1]&]+_W_ D] >] '] H] 9]  B].]      ;]     )]4](]\"\n\"   %]N]:c6]   G]       J^P^7a8_1],^K^;c=]H]D]P]P]E^K^ Ee <] <e F]&[2] =^O^<]1] 0\\\\H\\\\<\\\\   P\\\\H\\\\ R\\\\Q\\\\+]3\\\\,\\\\2] <eU\\\\  M\\\\3]P\\\\ >\\\\I]A\\\\I]<\\\\N]=]/a2a2a2a2a2a1]U]<\"\n\"^J\\\\C].].].].].].].]-]K_CaL]A^K^B^K^B^K^B^K^B^K^ K]K^D]H]C]H]C]H]C]H]D^M^?]-]P]4]0]1\\\\R\\\\  Ha  C]0]2]R] E]0]2\\\\Q\\\\ 9c 9]0]1\\\\R\\\\   !]0]1\\\\R\\\\ ?]4]   Di:i:i:i:i\"\n\";\\\\6]G]   P\\\\ :`5g@gWh>a   (_       J]KZ F]1]T],\\\\R\\\\?h>]R]P\\\\@]1]+].]3^V\\\\V^.]   T]2]N]5]8ZJ]-]6]X];]-]!^=]L]?]M]    *]5_J_Ec:]L^>]H[C]I^C].],]F[E]H]C].].]\"\n\"P_=].]X]M]X]HbM]A]I]D]M]<]I]D]M]?]%]6]H]E]G]C^NaN^N]Q^>^O^-^@]0]'],_U_  &] '] H] 9]  B].]      ;]     )]4](]   %]N]:d7]   F]       K]N]8c8^1],]I]>i@]H\"\n\"]D]P]P]E]I] Fg =] =g G]&[2] <]O];]1] 1\\\\F\\\\=\\\\   Q\\\\F\\\\ S\\\\Q\\\\+]3\\\\.]  IeU\\\\  M\\\\3\\\\N\\\\ ?\\\\I\\\\@\\\\I\\\\=]M\\\\<]0c4c4c4c4c3a1]U]<]H[C].].].].].].].]-]J_DbM]A]I]B]I]B]I]B]I]\"\n\"B]I] L]J_E]H]C]H]C]H]C]H]C^O^>].]N]    .]        '`X_           I]   FbWa=bWa=bWa=bWa=bWa<\\\\6^I^  ?Z2[ :a5gAiXh?c   *^       H] 7]1]T]-]S]Aj>]R]Q]@]1],\"\n\"],\\\\1^X\\\\X^,]   T]3]L]6]'].]7]W];]-]!]<]L]?]M^    +]6^F^F]W]:]K]?]FZC]H^D].]-]DZE]H]C].].]Q_<].]X]M]X]H]X]M]B]G]E]M^>]G]E]M^@]%]6]H]E^I^B]O^X]O]M^R^=]O^\"\n\"-^@]0]']-_S_  '] '] H] 9]  B].]      ;]     )]4](]   %]N]:e8_   H]       L]M]8]W]7^2]-]G]AmB]H]D]P]P]F]G] Hi >] >i  J[3] ;^Q^;]1] 2\\\\RbT\\\\Ge   R\\\\VdR\\\\ T\\\\\"\n\"Q\\\\+]4\\\\2a  IfU\\\\  M\\\\3\\\\N\\\\ ?\\\\J\\\\?\\\\J\\\\AaM\\\\ G]W]4]W]4]W]4]W]4]W]4c3^U]=]FZC].].].].].].].]-]H]D]X]M]B]G]D]G]D]G]D]G]D]G]A[H[B]J`E]H]C]H]C]H]C]H]B]O^>g8]N]    \"\n\"         1]T_      3[    9]   G_O^?_O^?_O^?_O^?_O^=\\\\5]I^  @\\\\3[ ;c6gAy?d7`8]L]7^7]L]>^       H] 6]1]T]-]S]B_W[U]>]R]R]?]1],],]0d*]   T]3]L]6]'].]7\\\\V];]\"\n\".] ]<]L]@]K]  7Z PZ X]7^D^G]W]:]K]?]/]G]D].]-]/]H]C].].]R_;].]X^O^X]H]X^N]B]G]E]L]>]G]E]L]@]%]6]H]D]I]A]O]W]O]L^T^<^Q^-^?]0]'].^O^  Sb7]U`2b4`U]8a8])`\"\n\"7]T_  M].]%_O_@_2`0`3`/_3c9]     )]4](]   N_6]N]3^7a/c0_ <^  D[U^  Ga  N]L]9]W]6^3]-]G]B`W]W`C]H]D]P]P]F]G] I_X]X_ ?] ?_X]X_  Nb7]2ZFZ=]Q]:]0] 3[SfU[I\"\n\"g   R[UfS[ T\\\\Q\\\\+]5]2a  IfU\\\\  M\\\\3\\\\N\\\\ ?\\\\K]?\\\\K]AaN] G]W]4]W]4]W]4]W]4]W]4]W]3]T]=]/].].].].].].].]-]G]E]X^N]B]G]D]G]D]G]D]G]D]G]B]J]C]KbF]H]C]H]C]H]C]H]B\"\n\"^Q^=j;]P_9b3b3b3b3b3b3bN`Bb3a2a2a2a    V_2_2`1`1`1`1` ;aU]    :]U`   S^T]U^A^L^A^L^A^L^A^L^?]5]I]  @^5\\\\ <e7gAy@f;e:]L]8`8^N^?^       G] 6]1]T]-\\\\R\\\\A]U[\"\n\"RZ>]R]R\\\\>]1],],].`(]   U^3]L]6]'].]8]V];].]!^<]L]@]K]  :] P]#^8^A]I^W^;]K]@].]G^E].].].]H]C].].]S_:].]W]O]W]H]W]N]C]E]F]L]?]E]F]L]@]%]6]H]D]J^A]O]W]O]\"\n\"L^U^:^S^-^>]0^(]/^M^  Wh:]Wd6f8dW]:e>h2dW]?]Vd<].].]O_>].]WdScK]Vd8f;]Wd7dW]?]Wa6h>h6]L]B]I]A]P`P]K^L^B^K^@l4]4](]   PdU]A]N]2^8e5g;]Vd?^J^8]6]L] E]V`\"\n\">pA]S]S]:e6kDo>]L]:^W^6^4].]E]D_U]U_D]H]D]P]P]G]E] K_W]W_ @] @_W]W_  Qf9]3\\\\H\\\\>^S^:]0_ 6[ThT[K]Q\\\\   S[T\\\\R]S[ U]S]+]6],] ?]L]@fU\\\\  M\\\\3\\\\N\\\\ ?\\\\K\\\\>\\\\K\\\\;]O\\\\ G\"\n\"^W^6^W^6^W^6^W^6^W^5]W]4^T]>].].].].].].].].]-]G^F]W]N]C]E]F]E]F]E]F]E]F]E]D_L_E]K]W]F]H]C]H]C]H]C]H]A^S^<k<]Ra<h9h9h9h9h9h9hTeFf7e6e6e6e;].].].]\\\"^;]V\"\n\"d8f7f7f7f7f/^6eX]@]L]?]L]?]L]?]L]B^K^?]Wd>^K^  O]S]S]B]I]B]I]B]I]B]I]@]5^K^  @]4[ ;f8gAyAg<h<]L]8`7]N]>]       F] 6]1]T]-\\\\R\\\\B]T[6]R]S]>^2]-]*\\\\.`(]   U\"\n\"]2]L]6]'].]9]U];].]!];]L]@]K]  =` P`'^7]?\\\\I]U];]K]@].]F]E].].].]H]C].].]T_9].]W]O]W]H]W^O]C]E]F]L]?]E]F]L]@]%]6]H]C]K]@^P]W]P^K^V^9]S]-^=]/](]0^K^  Xi\"\n\";]Xf9h9fX]<h?h3fX]?]Xg=].].]P_=].]XfVfL]Xg:h<]Xf9fX]?]Xb7i>h6]L]A]K]@^Q`Q^J^N^@]K]?l4]4](]   QfW^A]O^1]6f9h;]Xg@_K]7]6]L]=]G]C^Wc@pA]S]S]<h9mDo>]L]:]U\"\n\"]5^5].]E]E^S]S^E]H]D]P]P]G]E]@Z+]V]V^-Z4]5ZKZ:]V]V^  Sh9]4^J^>]S]9]._ 8[U_Q[T[L]P\\\\   S[T\\\\Q]T[ T]U]*]7]*] @]L]@fU\\\\  M\\\\3\\\\N\\\\ ?\\\\L]>\\\\L]:]Q]:]1]U]6]U]6]U]6]\"\n\"U]6]U]6^W^5]S]>].].].].].].].].]-]F]F]W^O]C]E]F]E]F]E]F]E]F]E]C_N_D]L^W]F]H]C]H]C]H]C]H]@]S];]P_=]S^8i:i:i:i:i:i:iVgIh9h9h9h9h<].].].]'d<]Xg:h9h9h9h9h\"\n\"0^8k?]L]?]L]?]L]?]L]A]K]>]Xf>]K]  O]R]R]D]G]D]VZOZV]D]KZV]D]G]A]4]K]  @]3[ <g7fAyBi>j=]L]8`7]N]?]       F^ 6]1]T]5uI]T[6]R]S\\\\<^3]-]*]1d*]   U]3]J]7]']\"\n\".]9\\\\T];].\\\\Ua-^;]L]@]K^?].] Uc Pc+_8]>]J]U];]K]@].]F]E].].].]H]C].].]U_8].]W^Q^W]H]V]O]C]E]F]L]?]E]F]L]@^&]6]H]C]K]?]Q^V]Q]I^X^8^U^.^<]/](]1^I^  ]R_<aT\"\n\"_;_R\\\\:^Tb=_S^@h4_Ub?bT^=].].]Q_<].aT_X]T^LbT^;_T_=aT_;^Tb?aTZ8_R]>h6]L]A]K]?]Q`Q]H^P^?]K]?l4]4](]   R^U^W]@]O]0^7g;_S];bT^@`L]8_7]L]>]E]E^W]V]@pA]S]S]\"\n\"=_T_<oDo?]K^;]U]5_6].\\\\D]E]R]R]E]H]D]P]P]G]E]A\\\\+[U]U\\\\,\\\\6]6\\\\L\\\\;[U]U\\\\  S_W[V\\\\9]3^V`V^=^U^9]/a :[T]G[M\\\\O\\\\1ZQZ  M[S\\\\P\\\\S[ Ud)]8](\\\\ @]L]@fU\\\\  M\\\\3\\\\N\\\\9ZQZ0\\\\L\\\\=\"\n\"\\\\L\\\\8\\\\Q\\\\9]1]U]6]U]6]U]6]U]6]U]6]U]5]S]>].].].].].].].].]-]F]F]V]O]C]E]F]E]F]E]F]E]F]E]B_P_C]L]V^G]H]C]H]C]H]C]H]@^U^;]N^>]T]6]R_;]R_;]R_;]R_;]R_;]R_;]R\"\n\"_X_T^K_R\\\\:_S^;_S^;_S^;_S^=].].].]*h=bT^;_T_;_T_;_T_;_T_;_T_1^9_T`>]L]?]L]?]L]?]L]A]K]>aT_?]K]  P]Q]R]E]F]E]V\\\\Q\\\\W]E]K\\\\W]E]F]A]4^L]  A^@ZN\\\\ =i8e@yCk?^R^\"\n\"=]L]9b8]O^?]       Im B]1]T]5uI]T[6]S^T]<^3]-]*]3^X\\\\X^,]   V^3]J]7](^/]9]T];e7]We/]9]N]?]K^?].] Wd Nd._8]O`U\\\\T\\\\K]S]<]L^A]-]F^F].]/]-]H]C].].]V_7].]V]Q\"\n\"]V]H]V^P]D]C]G]L]@]C]G]L]?^']6]H]C^M^?]Q]U]Q]Ic6^W^._<]/^)]2^G^ !ZM^=`Q^=^NZ;^Q`>^P^=].^Q`?`Q^>].].]R_;].`R^X\\\\R^M`Q^=^P^>`Q^=^Q`?`1]MZ;].]L]A^M^?]Q`Q]\"\n\"G^R^>^M^1^4]4](]  D]P^A]R^X]@]P^/]9^Vb=^NZ;`Q^AaN^8_7]L]>]E]F^V]U]>]P]>]S]S]>^P^>`T`7]6]J]<]S]5^6]/]C]G]Q]Q]F]H]D]P]P]H]C]C^&]TZ,^7]7^N^6]TZ H]/^U[TZ9\"\n\"]2n;]U]8]0d <[U]F[M\\\\P]2[R[  M[S\\\\P\\\\S[ Tb(]9]'\\\\ @]L]@fU\\\\  M\\\\3]P]9[R[1\\\\M\\\\<\\\\M\\\\7\\\\R\\\\8]2]S]8]S]8]S]8]S]8]S]7]U]6]R]?]-].].].].].].].]-]F]F]V^P]D]C]H]C]H]C]H]\"\n\"C]H]C]B_R_C]L]T]G]H]C]H]C]H]C]H]?^W^:]M]>]U^6ZM^<ZM^<ZM^<ZM^<ZM^<ZM^<ZMbP]M^NZ;^P^=^P^=^P^=^P^>].].].]+i=`Q^=^P^=^P^=^P^=^P^=^P^2^:^P^>]L]?]L]?]L]?]L]\"\n\"A^M^>`Q^@^M^  P]Q]Q]F]E]F]W^S^W]F]L^W]F]E]B]3]M^  B^B^O[ =k8d?xClA^P^>]L]9]X]8^P]>\\\\       Hl A] 9uI]T[5]T]T]:^ =]*]5^V\\\\V^.]   V]2]J]7](]/^:]S];h:]Xg0]\"\n\"9^P^?]K^?].]!e Je2_7\\\\PdW\\\\S\\\\L]S]<]M^@]-]E]F].]/]-]H]C].].]X_5].]V]Q]V]H]U^Q]D]C]G]L]@]C]G]M^?`)]6]H]B]M]>]Q]U]Q]Hb5c-^;].])]   B]=_O]=].]O_>]N^>].]O_?_\"\n\"O]>].].]S_:]._P`P]M_O]=]N]>_O]=]O_?_1]-].]L]@]M]>]RbR]G^R^=]M]1^3]4](]  FaSaD^Qa?]R_.]9]R`>]._O]>^N]8`7]L]>]E]G^U]U^?]P]>]S]S]>]N]>^P^7]6]J]<]S]4^7]/]\"\n\"C]G]Q]Q]F]H]D]P]P]H]C]D_&]&_8]8_N_7] B]/]T[3]1l:^W^8]1]W` >\\\\U\\\\E\\\\N\\\\P]3\\\\S\\\\  N\\\\S\\\\P\\\\S\\\\ S_']:]&\\\\ @]L]@fU\\\\  M\\\\2\\\\P\\\\8\\\\S\\\\2\\\\N]<\\\\N]7\\\\S]8]2]S]8]S]8]S]8]S]8]S]8]S]\"\n\"7]R]?]-].].].].].].].]-]E]G]U^Q]D]C]H]C]H]C]H]C]H]C]A_T_B]M]S]G]H]C]H]C]H]C]H]>c9]M^?]U]'].].].].].].`O^N].]N^>]N^>]N^>]N^?].].].],_R^>_O]=]N]=]N]=]N]\"\n\"=]N]=]N]2^:]O_?]L]?]L]?]L]?]L]@]M]=_O]?]M]  O\\\\P]Q]F\\\\D]F\\\\U^U^V]F\\\\L^V]F\\\\D]B]3]M]  RuJ`O[ >m9c>wCmA]N]>]L]9]X]7]P]?]       Im A] 2\\\\R\\\\A]T[5^V^T\\\\:` ?](\\\\6]T\"\n\"\\\\T]/]   V]2]J]7])^1_9]S];i;bS^2^8^S_>]K^?].]$e@u@e6_7]QfX\\\\S\\\\M^S^=]N^?]-]E]F].]/]-]H]C].].c4].]U]S]U]H]T]Q]D]C]G]M^@]C]G]M]=c-]6]H]B]M]>^R]U]R^G`4c.^:]\"\n\".])]   B]=^M]?^/]M^?]L]>]/]M^?^N^?].].]T_9].^O_O^N^N^?]M^?^M]?]M^?^0]-].]L]@]M]>^S]X]S^F^T^<^O^2_3]4](]  GcUcE]Pa?]Vb-]:]O_?].^N^>]O^8a8]L]?]C]H]T]T]?\"\n\"]P]>]S]S]?]L]@^N^8]6]J]=^S^4^8]/]C]H^Q]Q^G]H]D]P]P]H]C]E_%]%_9]9_L_8] B]0^T[3]0_T_>cWc=]1]U_ ?[U\\\\C[N]R^4]T]  N[R\\\\Q]R[ 'uG]&] @]L]?eU\\\\  M\\\\2]R]8]T]3\\\\N\\\\;\"\n\"\\\\N\\\\7]S\\\\7]3^S^:^S^:^S^:^S^:^S^9]S]8^R]?]-].].].].].].].]-]E]G]T]Q]D]C]H]C]H]C]H]C]H]C]@_V_A]N]R]G]H]C]H]C]H]C]H]>c9]L]?]U]'].].].].].]._M]O^/]L]?]L]?]L\"\n\"]?]L]?].].].]-^O]>^N^?]M^?]M^?]M^?]M^?]M^ I]O`?]L]?]L]?]L]?]L]@^O^=^M]@^O^  P]P]P\\\\G]C\\\\G]T^W^T\\\\G]M^T\\\\G]C\\\\B]3^O^  RuJ[X]P[ >o=\\\\XaX]BwDoC]L\\\\>]L]:^X^8]P]?\"\n\"]       E] 5] 3]S]A^U[4dT];b @](]6ZR\\\\RZ.]   V]2]J]7]*^7d8]R];]R_<aQ^3]5f<^M_?].]'e=u=e:_6\\\\Q^S`S]N]Q]=l>]-]E]Fm>k=]-rC].].b3].]U]S]U]H]T^R]D]C]G]M]?]C]\"\n\"G]N^<f1]6]H]B^O^=]S^U^S]F_2a.^9].])]   A]>^M]?].]M^?]L]>]/]M^?^M]?].].]U_8].^N^N]N^M]?]L]?^M]?]M^?^0]-].]L]@^O^=]S]X]S]D^V^:]O]2_2]4](]  H\\\\U^W]U\\\\E]Pa?\"\n\"]Vb-];]M^?].^M]>^P]7a8]L]?]C]H]T]T]?]P]>]S]S]?]L]@]L]8]6p=]Q]3^9]/]C]H]P]P]G]H]C]Q]Q]G]ViV]F_$]$_:]:_J_9] B]0]S[3]0]P]>o=]2]S_ @[U\\\\C[M]T_5^U^;u O[R\\\\R]\"\n\"Q[ 'uH]/ZQ] ?]L]?eU\\\\  M\\\\1]T]7^U^4\\\\O]O]I\\\\O]T`MZQ]S]O]E]3]Q]:]Q]:]Q]:]Q]:]Q]:^S^9]QmO]-m>m>m>m>].].].]1hL]G]T^R]D]C]H]C]H]C]H]C]H]C]?_X_@]O]Q]G]H]C]H]C]\"\n\"H]C]H]=a8]L]?]U]&].].].].].].^M]O].]L]?]L]?]L]?]L]?].].].].^M]?^M]?]L]?]L]?]L]?]L]?]L] I]Pa?]L]?]L]?]L]?]L]?]O]<^M]?]O]  O]P]P\\\\G]C\\\\G]ScS\\\\G]N^S\\\\G]P]P\\\\B\"\n\"]2]O]  QuF]Q[ >oAqDuDqD]L]?]L]:^X^8^R^?\\\\       D] 5] 3]S]@`X[3bS\\\\R^G]W^N] P](].\\\\&]   W]1]J]7]*^7c8]Q];ZM^=`O^4]4d:]M_?].])d:u:d=_5\\\\R]O^R\\\\N]Q]=j<]-]E]F\"\n\"m>k=]-rC].].a2].]U^U^U]H]S]R]D]C]G]N^?]C]G]P_:g3]6]H]A]O]<]S]S]S]E^1_.^8]-]*]   A]>^M]?]/^M^?]K]?]0^M^?]L]?].].]V_7].]M]M]N]L]@^L]?^M]@^M^?]/]-].]L]?]\"\n\"O]<]S]X]S]C^X^9]O]2^1]4](]0_IZ O[R\\\\X]S\\\\G^O_>]Vd9_U];]L]?].]L]=]P]8]X^9]L]?]C]I^T]S]@]P]>]S]S]?]L]@]L^9]6p=]Q]3^9]/]C]H]P]P]G]H]C]Q]Q]G]ViV]G_#]#_;];_H\"\n\"_:] B]0]S[3]0\\\\N\\\\>o=]2]Q^ A[U\\\\C[LcX\\\\6]T]9u O[RfP[ 'uIf7e >]L]>dU\\\\<] :f5d4]T]:fT\\\\O^NfT\\\\UdOeR\\\\O^F^3]Q]:]Q]:]Q]:]Q]:]Q]:]Q]:^QmO]-m>m>m>m>].].].]1hL]G]S]R\"\n\"]D]C]H]C]H]C]H]C]H]C]>d?]P^Q]G]H]C]H]C]H]C]H]<_7]L]?]U^'].].].].].].^L]P].]K]@]K]@]K]@]K]@].].].].]L]?]L]@^L]@^L]@^L]@^L]@^L] I]Q]X^@]L]?]L]?]L]?]L]?]\"\n\"O]<^M]?]O]  O\\\\WmX]H\\\\WmX]H\\\\QaR]H\\\\N^R]H\\\\O]P]C]2]O]  QuF]R\\\\ ?qCsDtDrE]L]?]L]:]V]7]R]>x      '] 5] 3\\\\R\\\\?e3^R\\\\SbJ^V^O] P](].\\\\&]   W]1]J]7]+^6e:]Q]-^>_M]5^6\"\n\"h<^O`  Qe8u8e@^5]R\\\\M]R\\\\O^Q^>m?]-]E]Fm>k=]KdFrC].].b3].]T]U]T]H]S^S]D]C]G]P_>]C]Gk6f5]6]H]A^Q^<]S]S]S]F_1_/_8]-]*]   A]>]K]A].]K]@]J]?]0]K]?]L]?].].]W_\"\n\"6].]M]M]N]L]@]J]@]K]A]K]?]/^.].]L]?]O]<]T^W]T]C^X^9^Q^3^1]3]']3dN\\\\ P\\\\R`Q[G]N_>]Q`;bW];\\\\K^?]/]L]=]Q^8]W]9]L]?]C]I]S]S]@]P]>]S]S]@]J]B^L^9]6p>^Q^4^9]/]C\"\n\"]H]P]P]G]H]C]Q]Q]G]ViV]H_\\\"]\\\"_<]<_F_;] B]1]R[3]1]N]8a6]2]P^ B[U\\\\C[K`V\\\\7]T]8u O[RdN[ 'uIf5a <]L]=cU\\\\<] :f3`1]T];fU\\\\N^NfU\\\\T[S]NaQ\\\\N^G^3^Q^<^Q^<^Q^<^Q^<^Q\"\n\"^;]Q]:]PmO]-m>m>m>m>].].].]1hL]G]S^S]D]C]H]C]H]C]H]C]H]C]=b>]P]P]G]H]C]H]C]H]C]H]<_7]L]?]U_(].].].].].].]K]Q].]J]A]J]A]J]A]J]@].].].].]L]?]L]@]J]A]J]A\"\n\"]J]A]J]A]J] K]P\\\\V]@]L]?]L]?]L]?]L]?^Q^<]K]@^Q^  O\\\\WmX]H\\\\WmX]H\\\\P_Q]H\\\\O^Q]H\\\\O]P]C]2^Q^  D^<]R[ >qDuEsCqD]L]?]L]:]V]7]R]>x      '] 5] 3\\\\R\\\\=f+]TdL^T^P] P]\"\n\"(].\\\\2u  *]1]J]7],^-_=]P],]>_M]5]7_R^<^Qa  Sd .dC^4\\\\R]M]R\\\\O]O]>]N_@]-]E]F].]/]KdF]H]C].].]X^4].]T]U]T]H]R]S]D]C]Gk=]C]Gj1c6]6]H]@]Q];^T]S]T^Ga1].^7]-]*\"\n\"]   Lh>]K]A].]K]@]J]?]0]K]?]L]?].].]X_5].]M]M]N]L]@]J]@]K]A]K]?]._0].]L]>]Q];^U]V]U^Bb7]Q]3^1^3]'^6iS^ P[P^P[G]N_>]N^=dX]<]J]>^1]L]=^R]8^W]9]L]@]A]J]S\"\n\"]S]@]P]>]S]S]@]J]B]J]9]6]J]>]O]5^8]/]C]H]P]P]G]H]B]R]R]F]C]Iz<]<z=]=z<] B]1]R[7j:\\\\L\\\\7_5]2]P^ B[U\\\\C[ V]T]7u O[R\\\\U^O[  T]   ]L];aU\\\\<]   I]T],]O[X\\\\>]K]@]\"\n\"O[X\\\\I`3]O]<]O]<]O]<]O]<]O]<]O];]P]?]-].].].].].].].]-]E]G]R]S]D]C]H]C]H]C]H]C]H]C]<`=]Q]O]G]H]C]H]C]H]C]H];]6]L]?]T_4h9h9h9h9h9h9hK]Q].]J]A]J]A]J]A]J]\"\n\"@].].].]/]J]@]L]@]J]A]J]A]J]A]J]A]J]?tG]Q\\\\U]@]L]?]L]?]L]?]L]>]Q];]K]?]Q]  N\\\\WmX]H\\\\WmX]H\\\\P_Q]H\\\\P^P]H\\\\O]P]C]1]Q]  C]:]S[ ?sEvEqAoC]L]?]L];^V^8^T^>x     \"\n\" '] 5] 4]S]<g-\\\\T^V^M]S_Q\\\\ O](].\\\\2u Se =^1]J]7]-^*^?]O],^?^K]7^7]N]<^Sb  Sa (aC]3\\\\R\\\\K\\\\R\\\\P^O^?]L^A]-]E]F].]/]KdF]H]C].].]W^5].]T^W^T]H]R^T]D]C]Gj<]C]Gj-\"\n\"`7]6]H]@]Q]:]U^S^U]Fb2]/^6]-^+]   Nj>]K]A].]K]@p?]0]K]?]L]?].].b3].]M]M]N]L]@]J]@]K]A]K]?].c4].]L]>]Q]:]U]V]U]@`6^S^4^5b2]&b<u P[O]P\\\\H]N^=]M]>^Ua<]J]=\"\n\"c7]L]<]S^8]V^:]L]@]A]J]S]S]@]P]>]S]S]@]J]B]J]9]6]J]?^O^7^7]/]C]H]P]P]G]H]B]R]R]F]C]Iz<]<z=]=z<] B]1]R[7j:\\\\L\\\\7_ C^P] B[U\\\\C[ W]T] W] O[R\\\\T^P[  T]   ]L]7\"\n\"]U\\\\<]   H]T]-\\\\O\\\\X\\\\>\\\\I\\\\@\\\\O\\\\X\\\\J`3^O^>^O^>^O^>^O^>^O^=]O]<^P]?]-].].].].].].].]-]E]G]R^T]D]C]H]C]H]C]H]C]H]C];^<]R]N]G]H]C]H]C]H]C]H];]6]L]?]S`8j;j;j;j;j\"\n\";j;|Q].pApApAp@].].].]/]J]@]L]@]J]A]J]A]J]A]J]A]J]?tG]R]U]@]L]?]L]?]L]?]L]>^S^;]K]?^S^  N\\\\WmX]H\\\\WmX]H\\\\QaR]H\\\\Q^O]H\\\\O]P]C]1^S^  D]9]T\\\\ ?sFwDo?nC]L]?]L];\"\n\"]T]7]T]=]       Hj ?] 4]S]8d/]T]T]N^R_R\\\\ O](] =u Se =]0]J]7].^(]?]O]+]?^K]7]7]L]<gX]  Sa (aC]3\\\\R\\\\K\\\\R\\\\P]M]?]K]A]-]E]F].]/]D]F]H]C].].]V^6].]S]W]S]H]Q]T\"\n\"]D]C]Gg9]C]G]Q_,^7]6]H]@^S^:]U]Q]U]G^X]2]0^5],]+]   Pl>]K]A].]K]@p?]0]K]?]L]?].].a2].]M]M]N]L]@]J]@]K]A]K]?]-f8].]L]>^S^:]U]V]U]?^4]S]4^4`0]$`<^Si O[O\"\n\"\\\\O\\\\H]N^=]M^@^S`<]J]=c7]L]<]S]8^U]:]L]@]O]O]J]S]S]@]P]>]S]S]@]J]B]J]9]6]J]?]M]7]6]/^E^H]P]P]G]H]A]S]S]E]C]Iz<]<z=]=z<] B]1]R[7j:\\\\L\\\\6] A^Q] B[U\\\\C[Ni:]T]\"\n\" V] O[R\\\\S]P[  T]   ]L]6\\\\U\\\\<]  Dh2]T]/]P\\\\W\\\\?]I\\\\A]P\\\\W\\\\K`2]M]>]M]>]M]>]M]>]M]>^O^=]O]?]-].].].].].].].]-]E]G]Q]T]D]C]H]C]H]C]H]C]H]C]<`=]S]M]G]H]C]H]C]H]\"\n\"C]H];]6]M^?]R`;l=l=l=l=l=l=~Q].pApApAp@].].].]/]J]@]L]@]J]A]J]A]J]A]J]A]J]?tG]S]T]@]L]?]L]?]L]?]L]=]S]:]K]>]S]  M]P]P\\\\G]C\\\\G]ScS\\\\G]S^N\\\\G]P]P\\\\B]0]S]  D]\"\n\"7\\\\T[ >sFwCn?mB]L]?]L];]T]7]T]=]       Hi >] 4]S]7[Xa1]T^T^O]P_T] O](] =u Se =]0]J]7]/^'^A]N]+]?^K]7]8^L^<eW]  Sd .dC]3\\\\R\\\\K\\\\R\\\\P]M]?]K]A]-]E]F].]/]D]F]H\"\n\"]C].].]U^7].]ScS]H]Q^U]D]C]G]/]C]G]O^,^8]6]H]?]S]9]U]Q]U]H^W^3]1^4],]+]   Q`P]>]K]A].]K]@p?]0]K]?]L]?].].b3].]M]M]N]L]@]J]@]K]A]K]?]+e9].]L]=]S]9]V]T]\"\n\"V]@_4]S]5_4b2]&b<\\\\Nd M[O]P\\\\H]N^=]L]@]Q_<]J]?e7]L];]T]8]T]:]L]@]O]O]J]S]S]@]P]>]S]S]@]J]B]J]9]6]J]?]M]8^6].]E]G]P]Q^G]H]A^T]T^E]C]Iz<]<z=]=z<] B]1]R[3]\"\n\"1\\\\L\\\\6] A_R] B\\\\U\\\\E\\\\Ni:]T] V] O\\\\S\\\\R]R\\\\  T]   ]L]6\\\\U\\\\<]  Dh2]T]/\\\\O[V\\\\?\\\\H\\\\A\\\\O[V\\\\L`1]M]>]M]>]M]>]M]>]M]>]M]>^O]?]-].].].].].].].]-]E]G]Q^U]D]C]H]C]H]C]H]C]\"\n\"H]C]=b>]T]L]G]H]C]H]C]H]C]H];]6]M]>]Qa>`P]>`P]>`P]>`P]>`P]>`P]>`PoQ].pApApAp@].].].]/]J]@]L]@]J]A]J]A]J]A]J]A]J]?tG]T]S]@]L]?]L]?]L]?]L]=]S]:]K]>]S]  \"\n\"L\\\\P]P\\\\F\\\\C\\\\F\\\\T^W^T\\\\F\\\\T^M\\\\F\\\\C\\\\B]0]S]  E^7]U[ >sFwBl=kA]L]?]L]<^T^8^V^=]       Ij >] <u=[U^1\\\\S]R]O]O_U\\\\ N](] 1] Ge =]0]J]7]0_&]A]N]+]?^K]8^8]J]:aU\\\\  Pe 4\"\n\"eA]3\\\\R\\\\K\\\\R\\\\Qo@]J]A].]F^F].].]E]F]H]C].].]T^8].]RaR]H]P]U]C]E]F].]E]F]N^,]8]6]H]?]S]9^V]Q]V^H^V^4]2_4],]+]   Q]M]>]K]A].]K]@],]0]K]?]L]?].].c4].]M]M]N]\"\n\"L]@]J]@]K]A]K]?](d;].]L]=]S]9^W]T]W^@`5^U^5^/_3]'_8ZJ` K[O]P\\\\H]N^=]L]@]P];]J]@_0]L];]U^9^T^;]L]@]O]O]J]S]S]@]P]>]S]S]@]J]B]J]9]6]J]@^M^:^5].]E]F]Q]Q]F\"\n\"]H]@^U]U^C]E]G_\\\"]\\\"_BZT]TZB_F_;] B]1]R[3]1\\\\L\\\\?o I_S] A[U]F[ V]T] W] N[S\\\\R]R[  S]   ]L]6\\\\U\\\\   ']T]/\\\\O\\\\V\\\\@\\\\H\\\\A\\\\O\\\\V\\\\M_0o@o@o@o@o?m>l>].].].].].].].].]-]F^\"\n\"G]P]U]C]E]F]E]F]E]F]E]F]E]=d?^V]L]F]H]C]H]C]H]C]H];]6]N^>]O`?]M]>]M]>]M]>]M]>]M]>]M]>]M]?].].].].]-].].].]/]J]@]L]@]J]A]J]A]J]A]J]A]J] K]U]R]@]L]?]L]?\"\n\"]L]?]L]=^U^:]K]>^U^  L\\\\P]Q]F\\\\D]F\\\\U^U^V]F\\\\U^M]F\\\\D]B\\\\/^U^  OuD]V[ =sFwBk;i@]L]?]L]<]R]7]V];]       F^   Nu=[T^3]S]R]O]N_V\\\\ N](] 1]   ].]L]6]1_%]Aq0]>]K]\"\n\"8]7]J]/]  Md:u:d>]3\\\\R\\\\K\\\\S\\\\Po@]J]A].]F]E].].]E]F]H]C].].]S^9].]RaR]H]P^V]C]E]F].]E]F]M],]8]6]H]>]U^8]W^Q^W]H^U^4]2^3]+],]   R^M]>]K]A].]K]@],]0]K]?]L]?\"\n\"].].]X_5].]M]M]N]L]@]J]@]K]A]K]?]$`;].]L]=^U^8]W]T]W]@b5]U]5^,]3]']  J\\\\Q_Q[G]N^=]L]A]O];]J]@].]L];]U]8]R];]L]@]O]O]J]S]S]@]P]>]S]S]@]J]B]J]9]5]L]?]K];\"\n\"^4].^G^F]Q]Q]F]H]?_W]W_B]E]F_#]#_B\\\\U]U\\\\B_H_A\\\\U]U[ H]1]R[3]1]N]?o H`V] @[T]G[ U]T] X] N[S\\\\Q]S[  S]   ]L]6\\\\U\\\\   (]T]/]P\\\\U\\\\A]I]B]P\\\\U\\\\M^/o@o@o@o@o@o@m>].]\"\n\".].].].].].].]-]F]F]P^V]C]E]F]E]F]E]F]E]F]E]>_X_?]W^L]F]H]C]H]C]H]C]H];]6]P_=]M^@^M]?^M]?^M]?^M]?^M]?^M]?^M]?].].].].]-].].].]/]J]@]L]@]J]A]J]A]J]A]J]\"\n\"A]J] K]U\\\\Q]@]L]?]L]?]L]?]L]<]U]9]K]=]U]  K]Q]Q]F]E]F]W^S^W]F]W^L]F]E]B\\\\.]U]  NuC\\\\V[ =eXZXdFgXhAi9h@]L]?]L]<]R]7]V];]       E]   Nu=[S]3\\\\R]R]O]M_X\\\\ M](\"\n\"] 1]   ].]L]6]2_$]Aq0]>]K]8]7]J]/]  Ke=u=e<]3\\\\R\\\\K\\\\S\\\\Po@]J]A].]F]E].].]E]F]H]C].].]R^:].]RaR]H]O^W]C]E]F].]E]F]M^-]8]6]H]>]U]7]W]O]W]I^S^5]3^2]+],]   R\"\n\"]L]>]K]A].]K]@],]0]K]?]L]?].].]W_6].]M]M]N]L]@]J]@]K]A]K]?]\\\"_<].]L]<]U]7]W]T]W]Ac5^W^6^+^4](]  H[R\\\\X]S\\\\G]N^=]L]A]O];]J]A^.]L]:]W^9^R];]L]@]O]O]J]S]S]@\"\n\"]P]>]S]S]@]J]B]J]9]5]L]?]K];^4]-]G]D]R]R]E]H]>kA]E]E_$]$_B^V]V^B_J_A^V]V] I]1]R[3]0\\\\N\\\\>o G`X] ?\\\\U_Q[T\\\\ T]T] ] N\\\\T\\\\Q]T\\\\  S]   ]L]6\\\\U\\\\   )]T].\\\\P\\\\T\\\\A\\\\I]A\"\n\"\\\\P\\\\T\\\\N^.o@o@o@o@o@o@m>].].].].].].].].]-]F]F]O^W]C]E]F]E]F]E]F]E]F]E]?_V_@]W]K]F]H]C]H]C]H]C]H];]6k<]L^A]L]?]L]?]L]?]L]?]L]?]L]?]L]?].].].].]-].].].]/\"\n\"]J]@]L]@]J]A]J]A]J]A]J]A]J] K]V\\\\P]@]L]?]L]?]L]?]L]<^W^9]K]=^W^  J]R]R]D]G]D]W\\\\Q\\\\W]D]W\\\\L]D]G]A\\\\.^V]  NuC]W[ <cWZXdEfXh@g8g?]L]?]L]=^R^8^X^:]       F]  \"\n\" G\\\\R\\\\5[S]4]R]R]O]Lb M](\\\\ 0]   ].]L]6]3_#]Aq0]>]K]9]6]J]/]  He@u@e H\\\\R]M]T]Q^J]A]J]@]/]G^E].]-]F]F]H]C].].]Q^;].]Q_Q]H]N]W]B]G]E]-]G^F]L]-]8]6]I^>^W^7]\"\n\"W]O]W]I^R^6]4^1]+],]   R]M^>^M^@]/^M^?]-]0^M^?]L]?].].]V_7].]M]M]N]L]@^L]?^M^A^M^?] ]<].]L]<]U]7]X]R]X]B^W^5]W]6^)]4](]  H\\\\T]W]U\\\\F]O_=]L]A]P^;^L^A]-]L\"\n\"]:]W]8]P]<]L]@]O]O]J^T]T]?]P]>]S]S]@^L]A^L]8]5]L]@^J]=^3]-^I^D^S]S^E]H]<g>]G]C_%]%_A_W]W_A_L_@_W]W_ J]0]S[3]0]P]5]4],b =[ThT[ R]T]!] M[T\\\\P]U[  R]   ]L\"\n\"]6\\\\U\\\\   *]T].]P[S\\\\B]J]A]P[S\\\\N].^J]B^J]B^J]B^J]B^J]B^K^A]M]=]/].].].].].].].]-]G^F]N]W]B]G]D]G]D]G]D]G]D]G]?_T_AbK]E]I^C]I^C]I^C]I^;]6j;]K]A]M^?]M^?]M^\"\n\"?]M^?]M^?]M^?]M_?].].].].].].].].]/]J]@]L]@^L]@^L]@^L]@^L]@^L] J^X]Q]?]L]?]L]?]L]?]L];]W]8^M^<]W]  I]R]S]C]H]C]VZOZW]C]VZL]C]H]@\\\\-]W]  MuC]X[ ;cWZWbDe\"\n\"WZXe>e6e>]L]?]L]=]P]8^X^:]       F^   H\\\\R\\\\5[S]5]Q]R]O^L` K]*] 0]  !^.]L]6]4_\\\"]2],^>^M]8]6]J]0]  DeCuCe E]R\\\\M]T\\\\P]I]A]J]@]/]G]D].]-]F]F]H]C].].]P^<].]Q\"\n\"_Q]H]N^X]B]G]E]-]G]E]L^.]8]5]J]<]W]6^X]O]X^J^Q^6]5^0]+^-]   R]M^>^M]?].]M^?]-]/]M^?]L]?].].]U_8].]M]M]N]L]?]L]?^M]?]M^?] ]<].]M^<^W^6aRbB^V^6]W]7^(]4]\"\n\"(]  GcUcE]P_=]L]A]P]9]L]@]-]L]:^X]9^P]<]M^@]P^O]I]T]T]?]P]>]S]S]@^L]@]L]8]5]M]?]I]>^2],]I]B_U]U_D]H]:c<]G]B_&]&_?_X]X_?_N_>_X]X_ I]0]S[3]0_T_5]4]+` ;[\"\n\"SfU[ P^U^#] L[U\\\\P]V[  Q]   ]M^6\\\\U\\\\   ,^U^-\\\\P\\\\S\\\\B\\\\J]@\\\\P\\\\S\\\\N].]I]B]I]B]I]B]I]B]I]B]I]B^M]=]/].].].].].].].]-]G]E]N^X]B]G]D]G]D]G]D]G]D]G]@_R_A`J]D]J]A]J\"\n\"]A]J]A]J]:]6g8]K]A]M^?]M^?]M^?]M^?]M^?]M^?]M_?].].].].].].].].].]L]?]L]?]L]?]L]?]L]?]L]?]L]3^;aP]?]M^?]M^?]M^?]M^;]W]8^M];]W]  H]S]T^B]J^B]J^B]J^B]J^@\"\n\"\\\\-]W]  G^1_ :aW[V`BcW[Wc<d5c=]L]>]N]<]P]7]X]8]       F]KZ   X]S]5[S]5\\\\P]R]N]K_ K]*] 0]  !],]N]5]5_\\\"]1],]<]M]9^6^L^0]  Ad Nd A\\\\R]O^U\\\\P^I^B]K^?]H[C]H^D]\"\n\".],]G]F]H]C].].]O^=].]P^Q]H]M]X]A]I]D],]I^E]K]AZH^8]5]J]<]W]5bObJ^O^7]6_0]*]-]   R]M^>^M]?^/]M^?^.]/]M^?]L]?].].]T_9].]M]M]N]L]?]L]?^M]?]M^?] ]<].]M^;\"\n\"]W]5aRaB^U^6c8_(]4](]  FaSaD]P_=]M]@]P]9]L]@]-]L]9b9]O^=^N^?\\\\P_Q]H]T]T]?]P]=]T]T]?^L]@]L]8]4]N]@^I^?]1],^K^A`W]W`C]H]7]8]I]@^&]&^=i=^N^<i H]0^T[3]1l6]\"\n\"4])_ <\\\\RbT\\\\ O]T]#] L\\\\V\\\\O]X\\\\     M^N^6\\\\U\\\\   ,]T]-\\\\OhF\\\\J]@\\\\OhQ]/^I^D^I^D^I^D^I^D^I^C]I]B]L]<]H[C].].].].].].].]-]H]D]M]X]A]I]B]I]B]I]B]I]B]I]@_P_B_J]C]J\"\n\"]A]J]A]J]A]J]:]6].]K]A]M^?]M^?]M^?]M^?]M^?]M^?]M_?^/^/^/^/^/].].].].]L]?]L]?]L]?]L]?]L]?]L]?]L]3^;`O]?]M^?]M^?]M^?]M^;c8^M];c  G^U]U^@^M^@^M^@^M^@^M^?\"\n\"\\\\-c  H^0_ 9^U[U^@aV[Va:b3a<]L]>^P^=^P]7]X]8_       H^M[ F] 6]S]>ZQ[T^6]P]S^N^K^ K]*] 0]:] 8]0],]O^5]6_2ZI]1]-^<^O^9]4]L]0]<].] Uc Pc1]2\\\\Q^S`W^P]G]B]K]\"\n\">^J\\\\C]I^C].],^H]F]H]C].].]N^>].]C]H]MbA^K^D],^K^D]K^B[I]7]5^L^<c5aMaJ^N]7]6^/]*]-]   R^O_>_O]=].]O_>].].]O_?]L]?].].]S_:].]M]M]N]L]>]N]>_O]=]O_?] ]<]-\"\n\"]O_;]X^5aRaC^S^6a8_']4](]  D]P^B^Ra>^N]@]Q]7]N]?^.]L]9a8]N]=^N^?]Q_Q]G]U]U]>]P]=]T]T]?_N]>]N]7]4^P^@]G]@^1]+^M^?mB]H]7]8^K^?\\\\%]%\\\\;g;\\\\L\\\\:g G]/]T[3]2n7]\"\n\"4]'^ <\\\\F\\\\ M\\\\S\\\\  J\\\\F\\\\     L^N^6\\\\U\\\\   ,\\\\S\\\\-]OhG]K]@]OhQ]LZ=]G]D]G]D]G]D]G]D]G]D]G]D^L]<^J\\\\C].].].].].].].]-]J_D]MbA^K^B^K^B^K^B^K^B^K^A_N_B^K]B^L^A^L^A^\"\n\"L^A^L^:]6].]K]A^O_?^O_?^O_?^O_?^O_?^O_?^Oa?].].].].]/].].].]-]N]>]L]>]N]=]N]=]N]=]N]=]N]2^;_O]=]O_>]O_>]O_>]O_:a7_O]9a  E^P_>^P_>^P_>^P_>^P_>\\\\,a  H^.]\"\n\" /[5]T[S\\\\8a1`<]L]=^R^<]O^8b7_       H^O\\\\ F] 6\\\\R\\\\=[R[U^5\\\\N]T]L^M` L]*] 0]:] 8]1^+]P]4]7_1[L_1]<ZL^:^Q^8]4^N^>ZM];].] R` P`.]2]QfXaN]G]B]L^=^L]C]K_B].]+\"\n\"_J]F]H]C].].]M^?].]C]H]La@^M^C]+^M^C]J]B]L^7]4^N^:a4aMaK^M^8]7^.]*^.]   Q]P`>`Q^=^NZ;^Q`>_LZ>].^Q`?]L]?].].]Q^;].]M]M]N]L]>^P^>`Q^=^Q`?]/ZL];]-^Q`:a4`\"\n\"P`D^Q^7a8^&]4](]   S]Sb>_P^@]R^7^P^>^MZ<]L]9a9]M]=_P`XZB]Q_Q]G^V]V^>]P]=^U]U^?`P^>^P^6]4]Q^?]G]A^0]*^O^<i@]H]7]7^M^=Z$]%Z8e9ZKZ7e F]/^U[TZ9]3^V`V^8]4]\"\n\"&^ <\\\\H\\\\ K[R[  I\\\\H\\\\     K_P`XZ9\\\\U\\\\   ,[R[,\\\\E\\\\D\\\\K]?\\\\E\\\\M]O\\\\=]G]D]G]D]G]D]G]D]G]D]G]D]K];^L]C].].].].].].].]-]K_C]La@^M^@^M^@^M^@^M^@^M^A_L_C`N^A^N^?^N^?^\"\n\"N^?^N^9]6].]L]?]P`>]P`>]P`>]P`>]P`>]P`>]P]X^LZN^NZ;_LZ>_LZ>_LZ>_LZ?].].].]-^P^>]L]>^P^=^P^=^P^=^P^=^P^2^:^P^=^Q`>^Q`>^Q`>^Q`:a7`Q^9a  Dk<k<k<k<k>],a  \"\n\"H]-] /[,[._0_;]L]=j<]N]7`5a       J_S^ F] 6\\\\R\\\\=^U[W_5]N^V^K_Rd L],] /]:] 8]1])^T^3]8_0^Q`0]<]Q_8^S^8^3_R_=]R^:].] O] P]+]1\\\\PdW`N^G^C]N_;`R`C]NaA].]*`O\"\n\"`F]H]C].].]L^@].]C]H]La?`S`B]*`S`B]J]B`Q_6]3_R_9a4aMaL^K^9]8^-])].]   Q_Tb>aS^;_R\\\\:^Sa=`Q]>]-^Sa?]L]?].].]P^<].]M]M]N]L]=_T_=aS^;^Sa?]/^R_:]-^Sa:a3_P_\"\n\"C^P^7_8^%]4](]   S_V^X^?aS^>]T^5_T_=`R]<]L]8_8]M^>`SdA]SaS]E^W]W^=]P^=_W]W_>]X]T_<_T_5^4^T^?^G^C^/])^Q^8c=]H]7]6`S` ?] ;c >c E]._W[V\\\\9]4^J^9]4]%] ;]L]\"\n\" IZQZ  H]L] !u  ,`Sd9\\\\U\\\\   ,ZQZ,]E\\\\E]L]?]E\\\\M_S^>^G^F^G^F^G^F^G^F^G^F^G^F^K]:`R`C].].].].].].].]-]ObB]La?`S`>`S`>`S`>`S`>`S`?]J]CcS`?_R_=_R_=_R_=_R_8]6\"\n\"].]V[R^?_Tb>_Tb>_Tb>_Tb>_Tb>_Tb>_T^V_Q]M_R\\\\:`Q]=`Q]=`Q]=`Q]?].].].],_T_=]L]=_T_;_T_;_T_;_T_;_T_1^:`T_;^Sa=^Sa=^Sa=^Sa9_6aS^7_  Bi:i:i:i:i=]+`  I],] /[\"\n\",[-].]:]L]<h;]N]7`3q      \\\"h E] 7]S]=k5]LdIjW^ M],] /]:] 8]1](f9k?n?l/]<j6g7]1j<h9].] LZ PZ(]1]O`U]K]E]Cm8kBn?n?](nE]H]C].].]K^Am>]C]H]K`>kA])kA]J^Cm5\"\n\"]2j7_2`M`K^J]9]8tC])].]   PgX]>]Xf9h9fX]<k>],fX]?]L]?].].]O^=].]M]M]N]L]<h<]Xf9fX]?]/j9d4gX]:a3_P_D^O^7_8m4]4](]   RfXaBk=^V^3h;j<]L]8_9^L]>qA^U]W]U^D\"\n\"i<]O`?k=]Xg:h3a7f>uCn?]/eSe;]:]H]7]5k >] :a <a D]-h>n?\\\\H\\\\8]4]%] 9^R^   *^R^  Xu  ,q9\\\\U\\\\    /]D\\\\F]LfH]D\\\\Li>]E]F]E]F]E]F]E]F]E]F]E]F]JnIkBn?n?n?n?].].].\"\n\"]-n@]K`>k<k<k<k<k=[H[Co<j;j;j;j7]6].]Vf=gX]=gX]=gX]=gX]=gX]=gX]=gTjLh9k<k<k<k?].].].]+h<]L]<h9h9h9h9h Fk:gX]=gX]=gX]=gX]9_6]Xf6_  @e6e6e6e6e;]+_  G\\\\+[\"\n\" /].]-[,[9]L];e:^N^8`2p       e D] 7]S]<i4\\\\JbGgT^ M\\\\,\\\\ .]:] 8]1]'d8k?n>i-]<i4e6]0h;g8].]   I]0]3]E]Cl6h@l=n?]&jC]H]C].].]J^Bm>]C]H]K`<g?]'g?]I]Bj3]1h6\"\n\"_2_K_L^I^:]8tC])].]   OdV]>]Wd6f8dW]:i>]+dW]?]L]?].].]N^>].]M]M]N]L];f;]Wd7dW]?]/i7c3dV]9_2_P_E^M^8_8m4]4](]   QdV`B]Xe;d1f8h<]L]8_9]K]>]XdW_@eWeBg;]O\"\n\"`=g;]Vd8f1`6d=uCn?]/eSe;]:]H]7]3g <] 9_ :_ C]+f>n>ZFZ7]4]%] 7f   &f  Vu  ,]XdW_9\\\\U\\\\    /\\\\C\\\\F\\\\KfH\\\\C\\\\Kg=]E]F]E]F]E]F]E]F]E]F]E]F]JnHh@n?n?n?n?].].].]-l>\"\n\"]K`<g8g8g8g8g J]Vh:h9h9h9h6]6].]Ve;dV]<dV]<dV]<dV]<dV]<dV]<eRiJf7i:i:i:i?].].].]*f;]L];f7f7f7f7f F]Xe7dV]<dV]<dV]<dV]9_6]Wd5_  <\\\\-\\\\-\\\\-\\\\-\\\\6]+_  FZ*[ /]\"\n\".],Z+Z9]L]8`8]L]7^.m       W` A] 7\\\\R\\\\7b2]H^BaP_ O].] .]:\\\\ 7]2^%`6k?n:b*]9c/a5],b6b5].\\\\   H]/\\\\4]C]Di0b=h9n?]#c?]H]C].].]I_Dm>]C]H]J_9a<]$d?]I^?c0].b3_2\"\n\"_K_M^G^;]8tC](]/]   M`T]>]U`2b4`U]7c;])`U]?]L]?].].]M^?].]M]M]N]L]8`8]U`3`U]?],c2a0_T]9_2^N^F^K^8]7m4]4](]   O`R^B]Va8b-`3d:]L]7]9^J]?]V`T]>cUc?c9]N_:\"\n\"a8]T`3`-_4`<wDn?]/eSe;]:]H]7]0a 9] 8] 8] B])b<n @]4]&^ 5b   \\\"b  Tu  ,]V`T]8\\\\U\\\\    0].].]0b;]C]H]C]H]C]H]C]H]C]H^E^H^JnEb=n?n?n?n?].].].]-h:]J_9a2a2a2a\"\n\"2a G\\\\Rb4b3b3b3b3]6].]Vc7`T]:`T]:`T]:`T]:`T]:`T]:aMcEb2c4c4c4c<].].].]'`8]L]8`1`1`1`1` D]Ua2_T]9_T]9_T]9_T]8]5]U`2]      =]                       &[   \"\n\"O].]  E]  E]         ']    S]        R]      ^       (](]/]        C]  S]    '] V]      F^ 7]4](]   %])[  4]7] @])_Q_:] 9]6]                6[   S]0[R\"\n\"^           H]%\\\\U\\\\ A\\\\            @\\\\             /Z            <\\\\             ,[    M^5](^      =]                       &[   N]0]  D\\\\  D]         '\\\\  \"\n\"  Q^DZ       1]      _       )](]/]        D^  S]    '] V]      F] 6]4](]   %]   ;]7] @] /] 9]6]                6[   S]0g           H]%\\\\U\\\\ @\\\\         \"\n\"   @\\\\                          J\\\\                  X]4](]      <]                       &[   N]0]  D\\\\  E^         '\\\\    P^G]       2]      X^       )]\"\n\"(^0]        D]  R]    '] V]      G^ 6]4](]   %]   ;]7] @] /] 9]6]                6[   S]0e           F]%\\\\U\\\\ ?[            ?[                          \"\n\"I[                  ^4])^      @ZV]                       &[   M]2]  D]  E]         ']    O_K_       3]      V^       *b,]5b        E^  R]    '] V]   \"\n\"   G^ 6^5])^   %]   ;]7] @] /] 9]6]                6[   S].a           D]%\\\\U\\\\ ?\\\\            @\\\\                          J\\\\                 !^4])^     \"\n\" B\\\\V]                       &[   M]2]  D\\\\            G\\\\    L`P`       2]      U^       +b =b        RZN^  R^    '] V]      H^ 4^6]*^   $]   ;]7] @] /]\"\n\" 9]6]                6[   S]            J]  :\\\\            @\\\\                          J\\\\                 \\\"^3]*^      A\\\\V\\\\                       %[   L\"\n\"]4]                   Vm       2^      S^       ,b =b        R\\\\Q_  R]    &] V]      I^ 3b:].b   $]   ;]7] @] /] 9]6]                6[   S]           \"\n\" J]  @ZU]            FZU]                          PZU]                 #^2]+^      @b                       %[                       Si       4b     \"\n\"                  %i  Ua    &] V]      Mb 2a:].a   #]   ;]7] @] /] 9]6]                   .]            J]  @b            Fb                          \"\n\"Pb                 'b2]       E`                                               Qb       1a                       $g  S`    %] V]      Ma /_:]._   !]  \"\n\" ;]7] @] /] 9]6]                   .]            J]  @a            Ea                          Oa                 &a1]       D^                       \"\n\"                                X^                 Ip      Fc  Q^    #] V]      M_  A]    )]   ;]7] @] /] 9]6]                                T]  @`  \"\n\"          D`                          N`                 %_/]       BZ                                                                        Ap      \"\n\"                 6]                                                                                                                                   \"\n\"                                                        p                       6]                                                                    \"\n\"                                                                                                                                                      \"\n\"                                                F]']2]    +]']2^ D]']3_   E]']1]   \\\"]']2^ 8]                             H\";\n\n    // Define a 90x103 font (huge size).\n    static const char *const _data_font90x103[] = {  // Defined as an array to avoid MS compiler limit about constant string (65Kb).\n      // Start of first string.\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                                        HX     4V         >X       IX           *W             FW                     \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                                                                                     HX  W 4Z 3VCT   <Z     >X  W 4Z  \"\n\" HX  W 4Z     'VCT ;X  W 3Y 2UCT       KX  W 3Y   0W                                                                                                  \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                    @W !W 4\\\\ 5YET ?XHX 8]     >W !W 4\\\\ 7XGX KW !W 4\\\\ 7XHX   +YET :W !W 3[ 5ZFT ?XGX     EW !W 3[ 7XGX 5W              \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                                                                                        >W \\\"V 3\\\\ 7]HU ?XHX 9`     ?W \\\"\"\n\"V 3\\\\ 7XGX JW \\\"V 3\\\\ 7XHX   -]HU 9W \\\"V 3] 7]HT ?XGX     DW \\\"V 3] 8XGX 5V                                                                                \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                      <W $V 3VNV 8_KV ?XHX 9`     >W $V 3VNV 8XGX IW $V 3VNV 8XHX   -_KV 8W $V 2] 7_KU ?XGX     CW $V \"\n\"2] 8XGX 6V                                                                                                                                            \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                :W &W \"\n\"4VLV :j >XHX :VJV     >W &W 4VLV 9XGX HW &W 4VLV 9XHX   .j 6W &W 3VMV 9i >XGX     BW &W 3VMV 9XGX 7W               MW                                 \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                                                      CV 'W 4VJV ;j >XHX ;UGV     >V 'W 4VJV :XGX GV 'W 4VJV :XHX   .j\"\n\" 5V 'W 3VKV :i >XGX     AV 'W 3VKV :XGX 8W               N[                                                                                           \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                            DV )W 4VHU <VK_ =XHX ;TEU     =V )W 4VHU :XGX FV )W 4VHU :XHX   /VK_ 3V )W 3VIV <UK_ =XGX     @V )W 3VIV ;XGX 9W          \"\n\"     N]                                                                                                                                               \"\n\"                                                                                                                                                      \"\n\"                                                                                                                              DV *V 3UFU =UH\\\\ <XHX <UD\"\n\"T     <V *V 3UFU ;XGX EV *V 3UFU ;XHX   /UH\\\\ 1V *V 2UGU <TH] =XGX     ?V *V 2UGU ;XGX 9V               a                                              \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                                                                         EV ,V 3UDU >TEY ;XHX <TBT     <V ,V 3UDU <XGX DV ,V 3UDU <XHX   /TEY /V ,V 2U\"\n\"EU =TFZ <XGX     >V ,V 2UEU <XGX :V               Na                                                                                                  \"\n\"                                                                                                                                                      \"\n\"                                                                                                                                                      \"\n\"                     DU -V 3VDV ?TCV :XHX <TBT     ;U -V 3VDV =XGX CU -V 3VDV =XHX   /TCV -U -V 2UCU >TCU :XGX     =U -V 2UCU =XGX ;V               NV\"\n\"IV                                                                          \\\"W                                                                        \"\n\"                                                                                                                                                      \"\n\"                                                                                                                          JU /V 3VBV     ETBT     :U /\"\n\"V 3VBV   FU /V 3VBV       (U /V 2UAU         DU /V 2UAU   @V               NVGV                                                                       \"\n\"   $X                                                                                                                                                 \"\n\"              *X                                                                                                                                      \"\n\"                           JX                                GTBT                                                   MX  GX 7V     :UEU     DX  GX 7V  \"\n\" JX  GX 7W       4X  GX 6V         GX  GX 5V   (X                            &X                                                                       \"\n\"                                                                                        )X                                                     8V     \"\n\"                                                                                                      ;X                                FTBT          \"\n\"                                         LX  IX 7X     <UCU     DX  IX 7X   JX  IX 6W       3X  IX 6X         GX  IX 5X   *X                          \"\n\"  &Y                                                                                                                                                  \"\n\"             (X                                                     9V                                                                                \"\n\"                           <X                                ETBT                                                   KX  KX 6X 1TBT   BTAT     CX  KX 6\"\n\"Y   JX  KX 6Y     (TBT BX  KX 5X 1TBT       LX  KX 4X   +X                            %T                                                    #W 9W     \"\n\"                                                                                          3a   :a     <W   2W    >W   E\\\\   AW ,W ,W ,W ,W             \"\n\"                HY GV +Y         4Z           NX                 @X                                                                  %W               \"\n\"                 DUDU                                                 =Y 7W  KW 6Z 4XDT   BTAT     BW  KW 6Z   IW  KW 6[   ,Y )XDT AW  KW 5Z 4XDT     \"\n\"  KW  KW 4Z   ,W BW                 8V         (S                                             <S       9V 7V                                          \"\n\"                                                     3a   :a     ;W   3W    >W   H_   AW ,W ,W ,W ,W                             L] GV +]         ;a  \"\n\"        #[                 F^                                           8XGX                      +W                                BTEU              \"\n\"                      *R            9a :W  MW 6\\\\ 6ZET ?XHX <TAT     AW  MW 6\\\\ 7XGX LW  MW 5[ 7XGX .Y +ZET @W  MW 5\\\\ 6ZET ?XHX     DW  MW 4\\\\ 7XHX 0W AW\"\n\" &XHX               MZ         +T                                   $Y         BS 1W,V MY   8W 7W  T           9X   5Z /[     0Z   8Z /Y           GY \"\n\"      .\\\\       <\\\\               [   4[   :\\\\              -a   :a     :W   4W    >W   Ja   AW ,W ,W ,W ,W                             N_ GV +_         \"\n\"?e   8]       J]                 Jb       8[       <[                  $Y       FY 7XGX   =Z         Di 5W   8Z .Y !W         FW *Y   4W)V*W)V-Y(V    \"\n\"        <UFU   3\\\\                    +[ 0[ 0[ 0[ 0[   4[=T            <e ;W  W 5\\\\ 7\\\\FT ?XHX <TAT     @W  W 6^ 8XGX KW  W 5] 8XGX .Z@R ?\\\\FT ?W  W 4\\\\ 7\\\\\"\n\"FT ?XHX     CW  W 3\\\\ 7XHX 1W @W &XHX               N\\\\         ,T     :U :U5U                            `   EX 2VFV   .S 4]0W\\\"b DV  V 5V  T         7W\"\n\" .` 3[ 7c 8d )Z Dq 8b Hy Bb 7`           Na   /Z @k .d Kj ?x Mt 7f MX/X'X -X -X2Z&X -]0]0[3X Dc Ii -c Ij 4f N~W$X/X.X&X.X4Y4XDY/Y/Y,Y'~S%a >W $a  MY  \"\n\" EW   5W    >W   Kb   AW ,W ,W ,W ,W                            !a GV +a         Ch   =f       ^                 Mf 2Z @x Mx <c 3X C~Q)X?X?X Kc   2T  \"\n\" .V   .T   CX   $a  !W.W   N` ;XGX ![ Lb       &Z Mi 7[   >a 5a &W   0g    #\\\\ -_   <\\\\*V.\\\\*V0a-V\\\"X )Z /Z /Z /Z /Z 4WJV 1~U+d Kx Mx Mx Mx MX -X -X -X ,j\"\n\" @[3X Dc 8c 8c 8c 8c   <cBV.X/X'X/X'X/X'X/X/Y,Y$X &h ;W \\\"W 5VNV 8]HU ?XHX <TAT     ?W \\\"W 5VNV 8XGX JW \\\"W 5VMV 9XGX -ZDV @]HU >W \\\"W 4VNV 8]HU ?XHX     \"\n\"BW \\\"W 3VNV 8XHX 2W ?W &XHX               ^ K~\\\\       >S   3Q +[ @[;[ ;Q                          ;e   HX 2VFV #VBV FS 6`1V#g GV !V 3V !T         7W 0d\"\n\" :` ;j ?k -[ Dq :g Ky Df ;d          $f   1Z @o 5j Np Ex Mt :m\\\"X/X'X -X -X3Z%X -]0]0\\\\4X Gi Lm 4i Ln ;m#~W$X/X-X(X-X4Y4XCY1Y-Y.Y&~S%a >W $a  N[   EV   \"\n\"5W    >W   Lc   AW ,W ,W ,W ,W                            \\\"b GV +a         Dk   Aj      \\\"_                 h 3Z @x Mx ?i 6X C~Q)X?X?X Ni   6V   /V   /\"\n\"V   DX   &f  #W0W   e >XGX %c#e       +b\\\"i 9_   Be 9d 'V   3k    %^ /c   @^*V0^*V2d.V\\\"X )Z /Z /Z /Z /Z 3b 1~U.j Nx Mx Mx Mx MX -X -X -X ,p F\\\\4X Gi >i \"\n\">i >i >i   BiEV.X/X'X/X'X/X'X/X.Y.Y#X 'j ;V \\\"V 5VLV :_IT >XHX <TAT     >V \\\"V 5VLV 9XGX IV \\\"V 4VMV 9XGX ,ZHY A_IT <V \\\"V 4VLV :_IT >XHX     AV \\\"V 3VLV 9\"\n\"XHX 2V >W &XHX              !_ K~[       >T   4R -_ D_?_ >S         =t                Fh   IX 2VFV #VBV FS 7c4V#i HV \\\"W 3V !T         7V 0f @e >o Co 0\"\n\"\\\\ Dq <j Ly Fj ?h          (i  \\\\ ?Z @r :o\\\"s Hx Mt <q$X/X'X -X -X4Z$X -]0]0\\\\4X Im Np 9m Np ?q%~W$X/X-X(X,W5[6XAX1X+X.X%~S%a =V $a  ]   EV   6W    >W   M\"\n\"d   AW ,W ,W ,W ,W               HW             1b GV +b         Fm   Dm      #`                \\\"j 4Z @x Mx Am 8X C~Q)X?X?X!m   9X   0V   0X   EX   'h\"\n\"  $W0W  \\\"h ?XGX 'g%g       0h%i :a   Cf :f *V   4m    %^ 0e   A^+V/^+V1f1V!X )Z /Z /Z /Z /Z 2` 1~V0o\\\"x Mx Mx Mx MX -X -X -X ,t J\\\\4X Im Bm Bm Bm Bm   F\"\n\"mHV-X/X'X/X'X/X'X/X-X.X\\\"X (l ;V $V 4UJU :ULXLU >XHX <UCU     =V $V 5VJV :XGX HV $V 4VKV :XGX +ZL\\\\ AULXLU ;V $V 3UJU :ULXLU >XHX     @V $V 2UJU 9XHX 3V\"\n\" =W &XHX              !` K~Z       >T   4S /a FaAa @T         @w                Hl   KX 2VFV $WCV ES 8e5V$j HV \\\"V 1V \\\"T         7V 2j Eh ?q Dp 1\\\\ Dq >\"\n\"l Ly Hn Bj          +l %e E\\\\ At >s$v Kx Mt >u&X/X'X -X -X5Z#X -^2^0]5X Jo q ;o r Br%~W$X/X-X(X,X6[6XAY3Y+Y0Y%~S%W 3V  IW !_   FW   7W    >W   Md   AW \"\n\",W ,W ,W ,W               HW             2[ ?V #[         Hn   En      #`                #l 6\\\\ Ax Mx Cp 9X C~Q)X?X?X\\\"o   ;Z   1V   1Z   FX  KS 0i  #W2\"\n\"W LV ,i ?XGX *l'h       3l'i ;c   Dg ;g ,W   6o    %^ 1g   B^,V.^,V0g3V X *\\\\ 1\\\\ 1\\\\ 1\\\\ 1\\\\ 2^ 0~V2s$x Mx Mx Mx MX -X -X -X ,v L]5X Jo Do Do Do Do   HpKW\"\n\"-X/X'X/X'X/X'X/X-Y0Y\\\"X )n <W &W 5VJV ;TI_ >XHX ;UEU     <W &W 5VIV ;XGX HW &W 5VIV ;XGX *g ?TI_ ;W &W 4VJV ;TI_ >XHX     @W &W 3VJV :XHX 4W =W &XHX   \"\n\"  1\\\\ 1\\\\ 1\\\\ 1\\\\ 1\\\\ =XMV K~Y       =S   4U 1c IdCc AU         Dz                In   LX 2VFV $VBV ES 9g7V$k HV #W 1W #T         8W 3l Fh ?r Eq 3] Dq ?m L\"\n\"y Ip Em          -n )k H\\\\ Au Av%x Mx Mt ?x(X/X'X -X -X6Z\\\"X -^2^0]5X Ls\\\"s ?s\\\"s Et%~W$X/X,X*X+X6[6X@Y5Y)Y2Y$~S%W 3W  JW \\\"a   FW   8W    >W   NZ   6W ,W \"\n\",W ,W ,W               HW             2X <V  X         H[G[   Go       KZ                %[H[ 7\\\\ Ax Mx Ds ;X C~Q)X?X?X$s   >\\\\   2V   2\\\\   GX  KS 1j  #\"\n\"W2W LV -j ?XGX +ZEZ)VGY       5ZDZ)i <e   EUFY <UFX -W   7q    %VMU 2YIY   CVMU,V.VMU,V0UFX3V X *\\\\ 1\\\\ 1\\\\ 1\\\\ 1\\\\ 1\\\\ 0~W4v%x Mx Mx Mx MX -X -X -X ,x N]5X\"\n\" Ls Hs Hs Hs Hs   LsMW,X/X'X/X'X/X'X/X,Y2Y!X *\\\\G[ <W (W 4UHU <UH] =XHX ;VGV     ;W (W 5VHV ;XGX GW (W 4UGU ;XGX )c =UH] 9W (W 3UHU <UH] =XHX     ?W (W\"\n\" 2UHU :XHX 5W <W &XHX     5c 8c 8c 8c 8c @WKU J~X       >T   5V 2e KfEe CW         G|                Jp   MX 2VFV $VBV ES 9XIX8V$l HV #V /V #T        \"\n\" 8V 3n Gh ?s Fr 5^ Dq @n Lx Ir Go          .o -q L^ Bv Cx&z x Mt A{)X/X'X -X -X7Z!X -^2^0^6X Mu#t Au#t Gu%~W$X/X,X*X+X6[6X?X5X'X2X#~S%W 2V  JW #c   FW\"\n\"   9W    >W   NX   4W ,W ,W ,W ,W               HW             2W ;V  NW         IZCY   Hp       JY                &ZDZ 9^ Bx Mx Eu <X C~Q)X?X?X%u   @\"\n\"^   3V   3^   HX  KS 2k  \\\"W4W KV -ZGW ?XGX -X=X+R@W       8X<X  .XIX   FQ@W <Q@W /W   7dGU    %QHU 3XEX   DQHU-V-QHU-V/Q@W5V NX +^ 3^ 3^ 3^ 3^ 2\\\\ 0~W5\"\n\"x&x Mx Mx Mx MX -X -X -X ,z!^6X Mu Ju Ju Ju Ju   N}+X/X'X/X'X/X'X/X+X2X X +ZBY ;W *W 4UFU =TF\\\\ =XHX :VIV     9W *W 5VFV <XGX FW *W 4VGV <XGX (_ :TF\\\\ 8\"\n\"W *W 3UFU =TF\\\\ =XHX     >W *W 2UFU ;XHX 6W ;W &XHX     7h =h =h =h =h DWJV K~X       >T   5W 4g MgFg EY         J~                K]FZ   MX 2VFV $VBV \"\n\"ES :XGX9V%\\\\GX HV $W /W 3PATAP         GV 3[H[ Gh ?]F] GZE^ 6^ Dq A]FX Lx I\\\\F\\\\ G\\\\G[          /[H] 0u N^ Bw E_D^&{!x Mt B`C_)X/X'X -X -X8Z X -_4_0_7X N^\"\n\"E^$u C^E^$u H^E\\\\%~W$X/X,Y,Y*W7]8X>Y7Y'Y4Y#~S%W 2V  JW $e   FV   9W    >W   NW   3W ,W ,W ,W ,W               HW             2W ;V  NW         IY@X >X \"\n\"4[AV       IX                &X@X 9^ Bx Mx F^E^ =X C~Q)X?X?X&^E^   B`   4V   4`   IX  KS 3\\\\GW  \\\"W4W KV .YBT ?XGX .V7V,P=W       :W8W  /VEV   3V +V /V \"\n\"  7eGU     KU 3WCW   ;U-V$U-V LV5V NX +^ 3^ 3^ 3^ 3^ 3^ 1~W6_D^&x Mx Mx Mx MX -X -X -X ,{\\\"_7X N^E^ L^E^ L^E^ L^E^ L^E^  !^Ed*X/X'X/X'X/X'X/X+Y4Y X +Y?\"\n\"X ;V *V 4UDU >TEZ <XHX 9a     7V *V 4UDV =XGX EV *V 4VEV =XGX )] 7TEZ 6V *V 3UDU >TEZ <XHX     =V *V 2UDU <XHX 6V :W &XHX     9k @k @k @k @k EWJV K~W \"\n\"      >T   5Y 5g MhHi G[         M~Q                L\\\\AW   MX 2VFV $VCV DS :WEW:V%ZAU HV $V -V 3RCTCR         HW 4ZDZ H\\\\LX ?Y?[ HV>\\\\ 8_ DX )[?T -Y J[B\"\n\"[ I[CZ          0WAZ 2x ^ BX>^ G]=Z&X=b#X -X '];[)X/X'X -X -X:[ NX -_4_0_7X \\\\?\\\\%X@^ E\\\\?\\\\%X?] J[=X =X <X/X+X,X)X8]8X=Y9Y%Y6Y )Y$W 2W  KW %ZMZ   FV   :W\"\n\"    >W   X   3W     4W ,W               HW             3X ;V  NX         KY?X Ca 9Y:R       HX                (X>X :VNV BZ /X '\\\\?\\\\ A^ FX0X)X?X?X'\\\\?\\\\  \"\n\" Db   5V   5b   JX  KS 3ZBT  !W6W JV .X?R   4V4U HV       ;V4V  1VCV   4V *U 0V   7fGU     KU 4WAW   <U.V#U.V JU6V MX +^ 3^ 3^ 3^ 3^ 3^ 2XIX F]=Z&X -X\"\n\" -X -X -X -X -X -X ,X=b$_7X \\\\?\\\\ N\\\\?\\\\ N\\\\?\\\\ N\\\\?\\\\ N\\\\?\\\\  #\\\\?`)X/X'X/X'X/X'X/X*Y6Y NX ,Y=W :V ,V 3UDU >TDX   ;a     6V ,V 4UBU   GV ,V 3UCU   0` 6TDX 4V ,V\"\n\" 2UDU >TDX       >V ,V 1UDU   :V 9W       (o Do Do Do Do GWIU J~V       >T   6Z 6i jIj I\\\\         N~R                M[=U   MX 2VFV %VBV H] AWCW;V%Y=R\"\n\" HV %W -V 4UETEU         IV 4ZBZ IWGX ?V;[ IS9Z 9VNX DX *Z;R -X JZ>Y JZ?Y          1U>Z 5`C_#` CX;[ H[7W&X9_$X -X (\\\\6X)X/X'X -X -X;[ MX -_4_0`8X![;[&X\"\n\"=[ F[;[&X<[ LZ8U =X <X/X+X,X)X8]8X<X9X#X6X )Z$W 1V  KW &ZKZ   FV   ;W    >W   W   2W     4W ,W               HW             3W :V  MW         KX=W Cc \"\n\";X7P       HX                (W<W ;WNW BY /X ([;[ Gg JX0X)X?X?X([;[   Fd   6V   6d   KX  KS 4Y>R  !X8X JV /X<P   6V1U IV       <U0U  2UAU   3U *U 1V  \"\n\" 6fGU     KU 4V?V   <U/V\\\"U/V IU7V LX ,` 5` 5` 5` 5` 5` 3XIX G[7W&X -X -X -X -X -X -X -X ,X9_%`8X![;[![;[![;[![;[![;[  %[;](X/X'X/X'X/X'X/X)X6X MX ,X;W\"\n\" :V .V 3UBU ?TBT   7]     3V .V 4VAU   GV .V 3UAU   4d 7TBT 1V .V 2UBU ?TBT       ;V .V 1UBU   <V 8W       )r Gr Gr Gr Gr IVHR GX+W       =S   5[ 7i!k\"\n\"Jk I]        !^                )Y:T   MX 2VFV %VBV Le EVAV<V$X:P HV %W -W 6WFTFV         IV 4X?Y IRBX ?T7Y IP5Z :VNX DX +Z8P .Y JY<Y KY=X          1S;\"\n\"Y 6];\\\\$WNW CX9Z J[4U&X6]%X -X )[2V)X/X'X -X -X<[ LX -XNV6VNX0`8X\\\"Z7Z'X;Z HZ7Z'X;Z LY4R =X <X/X*X.X(X8]8X<Y;Y#Y8Y *Z#W 1V  KW 'ZIZ   FV   <W    >W   W \"\n\"  2W     4W ,W               HW             3W :V  MW         KW<X Dd <W       -W                )W;X <WNW AY 0X )Z7Z Jl MX0X)X?X?X)Z7Z   Hf   7V   7f\"\n\"   LX  KS 4X;P   W8W IV /W   \\\"V.U JV       >U.U  4VAV &V 5U *U 2V   6gGU     KU 5W?W   =U/V\\\"U/V IU7V LX ,WNW 5WNW 5WNW 5WNW 5WNW 5WNW 4XHX H[4U&X -X -\"\n\"X -X -X -X -X -X ,X6]&`8X\\\"Z7Z#Z7Z#Z7Z#Z7Z#Z7Z  'Z8['X/X'X/X'X/X'X/X)Y8Y MX ,W:W 9V 0V 3U@U     ?[     1V 0V 3U@V   GV 0V 3U?U   8h   1V 0V 2U@U       \"\n\"  CV 0V 1U@U   >V 7W       *`L` I`L` I`L` I`L` I`L` JV =X,X       >T   6] 9k\\\"lKl K_        #\\\\                'Y8S   MX 2VFV %VBV Nk IVAV=V$X 1V %V +V \"\n\"6YHTHY -V       EW 5Y>Y :X ?R5Z .Y ;VMX DX +Y  DX IY<Y LY;X          2Q8Y 8[5[&WNW CX8Y KZ1T&X4\\\\&X -X *Z.T)X/X'X -X -X=[ KX -XNV6VNX0a9X#Z5Z(X:Y IZ5Z(\"\n\"X:Z NY1P =X <X/X*X.X'W9WNV:X:Y=Y!Y:Y *Z\\\"W 1W  LW (ZGZ      -W    >W   W   2W     4W ,W               HW             3W :V  MW         KW;W De =W      \"\n\" -X                *W:W <VLV @Y 1X *Z5Z Mp X0X)X?X?X*Z5Z   Jh   8V   8h   MX  KS 5Y   :X:X IV /W   #U+T JV       ?U+T  5U?U &V 5U +V     AgGU     KU 5\"\n\"V=V   =U0V!U0V IV8V KX ,WNW 5WNW 5WNW 5WNW 5WNW 5WNW 4XHX IZ1T&X -X -X -X -X -X -X -X ,X4\\\\'a9X#Z5Z%Z5Z%Z5Z%Z5Z%Z5Z  )Z5Z(X/X'X/X'X/X'X/X(Y:Y LX -X:W  \"\n\"        !W                    2\\\\LZ                          EW       +[@[ K[@[ K[@[ K[@[ K[@[ KV <X-X     /P 0T   7^ 9k\\\"lLm La        %Z              \"\n\"  %Z6Q   MX 2VFV %VCV n KWAW>V$X 1V &W +W 5XITIX +V       EV 4X<X :X ?P2Y -X <WMX DX ,Y  CX JY:Y MX9W          2P7Y :Z0Z(WLW DX7X KY.R&X2Z&X -X *Y+R)X\"\n\"/X'X -X -X>[ JX -XNW8WNX0a9X#Y3Y(X9Y JY3Y(X9Y NX  LX <X/X*X.X'X:VMV:X9X=X NX:X *Z!W 0V  LW )ZEZ      .W    >W   W   2W     4W ,W               HW     \"\n\"        3W :V  MW         LX;W Df >W       ,W                +W8W >WLW @Y 2X +Z3Z!t\\\"X0X)X?X?X*Y3Y   Kj   9V   9j     AS 5X   8W:W HV /W   #T)T KV     \"\n\"  @T(T  6U?U &V 5T +V     AhGU     KU 5V=V   =U0V!U0V JV7V   WLW 7WLW 7WLW 7WLW 7WLW 7XNX 6XGX IY.R&X -X -X -X -X -X -X -X ,X2Z'a9X#Y3Y%Y3Y%Y3Y%Y3Y%Y3\"\n\"Y  )Y3Z)X/X'X/X'X/X'X/X'X:X Ki >W8V                               *XHZ                          FW       ,Z<Z MZ<Z MZ<Z MZ<Z MZ<Z LV <X.X     .R 2S   \"\n\"7` :k#nMm Mb        &Z                $Y4P   MX 2VFV &VBV!o KV?V?V#W 0V &V )V 3XKTKX )V       EV 5X:X ;X  X -Y =VLX DX -Y  CY JY:Y NY9X           HX ;\"\n\"Z-Y)WLW DX7Y MY,Q&X1Z'X -X +Y)Q)X/X'X -X -X?[ IX -XMV8VMX0XNX:X$Y1Y)X9Y KY1Y)X8X NX  LX <X/X)X0X&X:VMV:X9Y?Y NY<Y *Y W 0V  LW *ZCZ      /W    >W   W  \"\n\" 2W     4W ,W               HW             3W :V  MW         LW:W Dg ?W       ,X                ,W8W >WLW ?Y 3X +Y1Y\\\"v#X0X)X?X?X+Y1Y   MYNVNY   :V   :\"\n\"YNVNY     BS 5X   8X<X HV /W   $T?ZBT*c       AT&T  7U?U &V 6U -W     @hGU     KU 6V;V   >U1V U1V KW7V   NWLW 7WLW 7WLW 7WLW 7WLW 7WLW 6XGX JY,Q&X -X \"\n\"-X -X -X -X -X -X ,X1Z(XNX:X$Y1Y'Y1Y'Y1Y'Y1Y'Y1Y P)P$Y3[)X/X'X/X'X/X'X/X'Y<Y Km BW8W                               +UDZ               7P          1W  \"\n\"     -Y8Y Y8Y Y8Y Y8Y Y8Y MV ;W.X     /T 4T   7a ;k#nMn Nc 6P :W4W ?Z ?X6X KY                #Y   0X 2VFV &VBV\\\"p KV?V?V#W 0V 'W )W 2XMTMX 'V       FW \"\n\"5X:X ;X  Y -X >VKX DX -X  BX IX8X NX7W      KP  1P  =X <Y)X+XLX EX6X NY*P&X0Z(X -X ,Y'P)X/X'X -X -X@Z GX -XMV8VMX0XNX:X%Y/Y*X8X LY/Y*X8Y!X  KX <X/X)X0\"\n\"X&X:VMV:X8YAY LY>Y *Z W 0W  MW +ZAZ      0W    >W   W   2W     4W ,W               HW             3W :V  MW         LW:W DSF[ @X       -X             \"\n\"   -X8W ?WJW ?Y 4X ,Y/Y%z%X0X)X?X?X,Y/Y   YMVMY   ;V   ;YMVMY     CS 5X 5P*Q JW<W GV /W   %TBbET/g       BTGb?T  8U?U &V 7U 5_     ?hGU     KU 6V;V   \"\n\">U2V NU2V$_7V   NXLX 9XLX 9XLX 9XLX 9XLX 8WLW 6XGX KY*P&X -X -X -X -X -X -X -X ,X0Z)XNX:X%Y/Y)Y/Y)Y/Y)Y/Y)Y/Y\\\"R+R&Y3]*X/X'X/X'X/X'X/X&Y>Y Jp EW:Y     \"\n\"                          +R@Y               7Q          2W       .XEVFY\\\"X5Y\\\"X5Y\\\"X5Y\\\"X5Y NV ;X/X     0V 5T   8c <k#nNo e >^ AW4W ?Z >W6W KY           \"\n\"     \\\"Y   0X 2VFV &VCW#[LSKZ KV?V@V\\\"W 0V 'W )W 1XNTNX &V       FW 6Y:Y <X  NX -X ?WKX DX .Y  CY IX8X NX7W      NS  1S  @X =X&X,WJW EX6X NY /X/Y(X -X ,\"\n\"Y /X/X'X -X -XAZ FX -XMW:WMX0XMX;X%Y/Y*X8Y MY/Y*X8Y!X  KX <X/X)Y1X%W;WMW;W6XAX JX>X *Z NW 0W  MW ,Z?Z      1W    >W   W   2W     4W ,W               H\"\n\"W             3W :V  MW         LW:W DPAY ?Y       .W                -W6W @WJW >Y 5X ,X-X&_MXM_&X0X)X?X?X,Y/Y  !YLVLY   <V   <YLVLY     DS 6Y 6R,R JX>\"\n\"W FV /X   'TCfFT2i       CUGfBT  9U?U &V 7U 5]     >iGU     KU 6V;V   >U2V NU2V$]5V   NWJW 9WJW 9WJW 9WJW 9WJW 9WJW 8XFX KY /X -X -X -X -X -X -X -X ,X\"\n\"/Y)XMX;X%Y/Y)Y/Y)Y/Y)Y/Y)Y/Y#T-T'Y3]*X/X'X/X'X/X'X/X%X>X Ir GW=\\\\                                GY               9S          3W       /XDVDX$X2X$X2X$X\"\n\"2X$X2X V ;X0X     0X 7T   8d <k#~`!g Bd DW4W ?[ ?X7W LY                !X   /X 2VFV &VCV#ZJSGV KV?VAV!W 0V 'V 'V /d $V       FV 5X8X <X  NX -X ?VJX DX\"\n\" .X  BX HX8X Y7X     #V  1V  CX >X$X-WJW EX6X Y .X.Y)X -X -Y .X/X'X -X -XBZ EX -XLV:VLX0XMX;X&Y-Y+X7X NY-Y+X7X!X  KX <X/X(X2X$X<VKV<X6YCY JY@Y +Z MW /\"\n\"V  MW -Y;Y    \\\"Z ;WDX 0Z 2XDW >Z <W !X :WDY     IW ,W  HX8X MY 3Z *X 3X &X 7] <W             3W :V  MW       ;X :W:W 4Y @[ )\\\\ (Y   6X     8QEV     :[ \"\n\"    JW6W @VIW =Y 6X -Y-Y(]JXJ]'X0X)X?X?X-Y-Y  #YKVKY   =V   =YKVKY     IZ 9X 6T.T JW>W FV .X   (TDgFT3j       CTFhDT  9U?U &V 8U 4\\\\     =iGU     KU 6V\"\n\";V   >U3V MU3V#\\\\5V   MWJW 9WJW 9WJW 9WJW 9WJW 9WJW 8XFX LY .X -X -X -X -X -X -X -X ,X.Y*XMX;X&Y-Y+Y-Y+Y-Y+Y-Y+Y-Y%V/V)Y3_+X/X'X/X'X/X'X/X%Y@Y Is HW?^ \"\n\"?Z /Z /Z /Z /Z /Z /Z6Y NZ 0Z /Z /Z /Z         8Y 1Y 3Z /Z /Z /Z /Z   3ZCV          5WDX       DXCVCW%X0W%X0W%X0W%X0W V :X1X     0X 7T   9f =k#~`\\\"h Cf \"\n\"EW4W @\\\\ ?X8X LX                !Y   /X 2VFV 'VBV#XHSET KV?VAV!W 0V (W 'W .` \\\"V       GW 5X8X <X  NX -X @VIX DX .X  BX HX8X X5W     &Y  1Y  FX >W\\\"W.XJX\"\n\" FX6X X -X.Y)X -X -X -X/X'X -X -XCZ DX -XLV:VLX0XLX<X&X+X+X7X NX+X+X7X!X  KX <X/X(X2X$X<VKV<X5YEY HYBY +Z LW /W  NW .Y9Y    'b ?WG^ 7b 9^GW A` Gl 2_GW\"\n\" MWG_ DW ,W ,W8Y MW ,WG^>^4WG_ 9` @WG^ 9^GW MWG\\\\ ;f Gm <W6W#X2X#W;X;W5Y7Y#W1X\\\"u 6W :V  MW       >^BV\\\"W:W 3X ?^ 0e AWG_ KV.X ?X <W6W   HTG[ K}!WCWCW Ca\"\n\" 7p&{ NW6W AWHW >Z 7X -X+X)\\\\HXH\\\\(X0X)X?X?X-X+X  $YJVJY   >V   >YJVJY     Ma =X 7V0V JW@W EV .Y   *TEiET5k       DTEiDT  :VAV &V 9U 3_   ;W6W NiGU     \"\n\"KU 6V;V   >U3V MU3V#_8V   NXJX ;XJX ;XJX ;XJX ;XJX ;XJX :XEX LX -X -X -X -X -X -X -X -X ,X.Y*XLX<X&X+X+X+X+X+X+X+X+X+X&X1X*X3`+X/X'X/X'X/X'X/X$YBY Ht \"\n\"IW@_ Cb 7b 7b 7b 7b 7b 7b>a'b 7` 5` 5` 5` AW ,W ,W ,W  DY EWG_ 9` 5` 5` 5` 5` (Z <`GV W6W MW6W MW6W MW6W#W1X NWG^ HW1X     NWBVBW&W.W&WJP:PJW&W4PJW&W.\"\n\"W!V :X2X     0X 6S   8g >k#~`#j Fj GW4W @\\\\ >W8W LX                 X   .X 2VFV 'VBV$XGSCR KV?VBV X 1V (W 'W ,\\\\  V       GW 5X8X <X  NX -X AWIX DX /X  \"\n\"BY HX8X X5W     ([  1[  HX ?W W/WHW FX6X!Y -X-Y*X -X .Y -X/X'X -X -XDZ CX -XLW<WLX0XKW<X'Y+X+X7X Y+X+X7X!X  KX <X/X'X4X#X<VKV<X4XFY FXBX *Y KW /W  NW \"\n\"/Y7Y    +g AWIb ;f =bIW De Il 3bIW MWIc FW ,W ,W9Y LW ,WIbBb6WIc >f CWIb =bIW MWI^ =j Im <W6W\\\"W2W\\\"W<Z<W4X7X!W2W!u 6W :V  MW       @bEW\\\"W:W 2X @c 8j CW\"\n\"Ic MX0W =W <W6W IW/W\\\"VI^ L}!WCWCW Ee =t&{ W4W BWHW =Y 7X .X*Y*ZFXFZ(X0X)X?X?X.Y+X  #WIVIW   =V   =WIVIW     f ?X 8X2X KW@W EV .Z   +SE[GVDS6ZDV       \"\n\"DSDVDXDS  9UAU %V :U 2`   <W6W NiGU     KU 6V;V   >U4V LU4V\\\"`:V GX /WHW ;WHW ;WHW ;WHW ;WHW ;WHW :XEX MY -X -X -X -X -X -X -X -X ,X-Y+XKW<X'Y+X,Y+X,Y+\"\n\"X,Y+X,Y+X'Z3Z,Y4WNY,X/X'X/X'X/X'X/X#XBX Gu JWB\\\\ Ag <g <g <g <g <g <gBe+f <e :e :e :e CW ,W ,W ,W  Mc FWIc >f ;f ;f ;f ;f +Z >eJU NW6W MW6W MW6W MW6W\\\"W\"\n\"2W MWIb IW2W     NWAVAW(W,W(WJR<RJW(W4RJW(W,W\\\"V 9W2X     1X 6T   9i ?k#~`#k Hl HW4W @] ?X9W LW                 NX   .X 2VFV 'VCW$WFSAP KV?VBV NW 1V (V\"\n\" &W *X  MV       GV 5X6X =X  NX -X AVHX DX /X  BX GX8X X5X     ,^  1^  LX ?W MW0WHW FX6X!X ,X-Y*X -X .X ,X/X'X -X -XEZ BX -XKV<VKX0XKX=X'Y+Y,X7X Y+Y,X\"\n\"7X!X  KX <X/X'X4X\\\"W=WKV<W3YGY FYDY +Z KW .V  NW 0Y5Y    /l CWJe ?j AeJW Eh Kl 5eJW MWJe GW ,W ,W:Y KW ,WJdDd7WJe @h DWJe AeJW MWJ_ ?l Im <W6W\\\"W2W!W=Z=\"\n\"W2X9X W2W!u 6W :V  MW       BeFV!W;X 1W ?f =k CWJe NY2X =X =W6W JW-W$WI` N}!WCWCW Gi Av&{ W4W BVGW <Y 8X .X)X+ZEXEZ)X0X)X?X?X.Y+Y  #UHVHU   <V   <UHVH\"\n\"U    !j AX 9Z4Z KWBW DV -Z   -TFY@RDT8XAV       ETDVBWET  :VCV %V ;V )X   =W6W NiGU     KU 6V;V   >U5V KU5V GX<V FX /WHW ;WHW ;WHW ;WHW ;WHW ;WHW :WDX\"\n\" MX ,X -X -X -X -X -X -X -X ,X-Y+XKX=X'Y+Y-Y+Y-Y+Y-Y+Y-Y+Y'Z5Z+Y5WMY,X/X'X/X'X/X'X/X#YDY GX@^ KWCZ Al Al Al Al Al Al AlFh.j ?h =h =h =h EW ,W ,W ,W !g\"\n\" GWJe @h =h =h =h =h ,Z @hLV NW6W MW6W MW6W MW6W\\\"W2W MWJe KW2W     W@VAW)W+W)WJT>TKW)W4TKW)W+W\\\"V 9X3X     2X 5T   :k ?i\\\"~`$m Jn IW4W A^ ?X:X MW       \"\n\"          NY   .X 2VFV 7~X2XFS <V?VCV MX 2V )W %W +X  MV       GV 5X6X =X  NX -X BVGX DX /X  BX GX8X X5X LX -X  7a  1a  X @W KW2XHX GX6X!X ,X,X*X -X .\"\n\"X ,X/X'X -X -XFZ AX -XKV<VKX0XJW=X'X)X,X7X X)X,X7X!X  KX <X/X'X4X\\\"X>VIV>X2YIY DYFY +Z JW .V  NW 1Y3Y    1n DWLh Bm ChLW Gk Ll 6hLW MWKg HW ,W ,W;Y JW \"\n\",WKfGg8WKg Cl FWLh ChLW MWK` @m Im <W6W\\\"X4X!W=Z=W1X;X NW3X!u 6W :V  MW       CgGV!W;W 0X ?g Am CWKg [4X >Y =W6W JW-W&YJb }!WCWCW Hk Dx&{ W4W CWFW <Y 9\"\n\"X /Y)X,ZDXDZ*X0X)X?X?X.X)X P #SGVGS %P 7V 9P0P CSGVGS    !l BX 8ZGWFZ JWCX DV ,Z   .SEW<PCS8V?V .P>P     JSCVAVDS  :WEV $V <V &W   >W6W NiGU     KU 6V\"\n\";V BP>P /U5V KU5V EW=V FX 0XHX =XHX =XHX =XHX =XHX =XHX <XDX MX ,X -X -X -X -X -X -X -X ,X,X+XJW=X'X)X-X)X-X)X-X)X-X)X&Z7Z*X5WKX,X/X'X/X'X/X'X/X\\\"YFY F\"\n\"X=[ KWDY @n Cn Cn Cn Cn Cn CnHj1m Bk @k @k @k FW ,W ,W ,W $j GWKg Cl Al Al Al Al .Z Bs MW6W MW6W MW6W MW6W\\\"W3X MWLh LW3X     V?V@W*V)W*VJV@VKW*V4VKW*V\"\n\")W#V 9X4X     2X 4S   :l ?i\\\"~`%o Lp JW4W A^ >W:X MW                 NX   -X 2VFV 7~X2WES <V?VDV LX 2V )W %W -\\\\  V       HW 5X6X =X  NX .X BWGX DX 0X  \"\n\"BY FX:X NX5X LX -X  :d  1d $Y @V IV2WFW GX6X\\\"Y ,X,Y+X -X /Y ,X/X'X -X -XH[ @X -XKW>WKX0XJX>X(Y)X,X7X!Y)X,X7X!Y  LX <X/X&X6X!X>VIV>X1YKY BXFX +Z IW .W \"\n\" W 2Y1Y    2o EWMj Dn DjMW Hn Nl 7jMW MWLi IW ,W ,W<Y IW ,WLhIi9WLi En GWMj EjMW MWLa An Im <W6W!W4W W=Z=W1Y=Y MW4W u 6W :V  MW       DiIV W;W /W =g C\"\n\"m CWLi![4W =Y =W6W KW+W(ZKd!}!WCWCW Im Fy&{ W4W CWFW ;Y :X /X'X-YCXCY*X0X)X?X?X/Y)X!R #QFVFQ $R 9V :R1R DQFVFQ    \\\"n BX 7ZJ\\\\JZ HWDW CV +[   1TFW.T:W?V\"\n\" /Q?Q     KTCVAWET  :XIX $V =V #U   >W6W NiGU     KU 6V;V BQ?Q 0U6V JU6V BU>V EX 0WFW =WFW =WFW =WFW =WFW =WFW <XDX NY ,X -X -X -X -X -X -X -X ,X,Y,XJ\"\n\"X>X(Y)X.Y)X.Y)X.Y)X.Y)X%Z9Z*Y6WJX,X/X'X/X'X/X'X/X!XFX EX;Z LWDX ?o Do Do Do Do Do DoKn4n Cn Cn Cn Cn HW ,W ,W ,W %l HWLi En Cn Cn Cn Cn /Z Cs LW6W MW6\"\n\"W MW6W MW6W!W4W LWMj LW4W     W?V?V+W(V+WKXBXKV+W5XKV+W(V$W 8W4X     2X 5T   ;n ?g!~_%p LZDZ JW4W A^ >W:W MW                 MX   -X 2VFV 7~X2WES <WAW\"\n\"DV KX 3V )W %W /` \\\"V       HV 4X6X =X  Y .X BVFX DX 0X  BX EX:X NX5X LX -X  <e  /e 'Y @V GV4XFX HX7X!X +X+X+X -X /X +X/X'X -X -XI[ ?X -XJV>VJX0XIW>X(X\"\n\"'X-X7X!X'X-X7X!Y  LX <X/X&X6X!X>VIV>X1YKY AXHX +Z HW -V  W 3Y/Y    3p FWMk Fo EkMW Io Nl 8kMW MWMk JW ,W ,W=Y HW ,WMjJj:WMk Gp HWMk GkMW MWMb Bo Im <W\"\n\"6W!W4W W>\\\\>W0X=X LW5X u 6W :V  MW       EkJV W<X /W >j Fn CWMk\\\"\\\\6X =Z >W6W KW+W)[Ke\\\"}!WCWCW Jo Hz&{ W4W DWDW ;Y ;X /X'X.YBXBY+X0X)X?X?X/X'X#T  HV  IT \"\n\":V ;T3T :V   CV +o BX 6ZM`MZ GXFX CV *\\\\   3SFW,S:V>V 0R@R     KSBV@VDS  9e #V ?W \\\"V   ?W6W NiGU     KU 6V;V BR@R 1U6V JU6V BV?V EX 1XFX ?XFX ?XFX ?XFX\"\n\" ?XFX ?XFW =XCX NX +X -X -X -X -X -X -X -X ,X+X,XIW>X(X'X/X'X/X'X/X'X/X'X%Z;Z)X5VHX-X/X'X/X'X/X'X/X XHX DX:Y LWEX >p Ep Ep Ep Ep Ep EpMp6o Do Do Do Do\"\n\" HW ,W ,W ,W 'o IWMk Gp Ep Ep Ep Ep 0Z Ds KW6W MW6W MW6W MW6W!W5X LWMk MW5X     V>V?W,V'W,VKZDYKW,V5YKW,V'W%W 8X5W     2X 4T   ;o @g ~^%q NY@Y KW4W B`\"\n\" ?X<X MV                 LX   -X 2VFV 7~X2WES ;VAVDV JY 4V )V $W 1d $V       HV 4X6X =X  X .Y CWFX DXLY =XEX 'Y EY<X MX5X LX -X  ?e  )e +Y ?V:X6V4WDW \"\n\"HX7X!X +X+X+X -X /X +X/X'X -X -XJ[ >X -XJW@WJX0XIX?X(X'X-X7X!X'X-X8Y Y  MX <X/X%W6X W?WIV>W/YMY @YJY +Y GW -V  W 4X+X    4YE\\\\ FWNXG\\\\ H]EX F\\\\GXNW J\\\\F[ \"\n\"GW ,\\\\GXNW MWNXG[ JW ,W ,W?Z GW ,WNXH[KXH[:WNXG[ H]H] IWNXG\\\\ I\\\\GXNW MWNXFQ C\\\\CW CW ,W6W!X6X NW?\\\\?W.X?X JW6W 1X 6W :V  MW     9X=X\\\"[IZKW W=Y /W @m H]DV \"\n\"CWNXG[\\\"\\\\6W =[ >W6W LW)W*ZJWKY\\\"}!WCWCW K\\\\H] J{&{ V3W DWDW :Y <X /X'X.XAXAX+X0X)X?X?X/X'X$V  IV  JV ;V <V5V ;V   CV ,^MSKW BX 5x EWFW BV ,_   5TFW,S:V?W\"\n\" 1SAS     LTBV@VDS  9d \\\"V @W  U   ?W6W NiGU     KU 5V=V ASAS 2U7V IU7V @U@V DX 1WDW ?WDW ?WDW ?WDW ?WDW ?XFX >XCX NX +X -X -X -X -X -X -X -X ,X+X,XIX?\"\n\"X(X'X/X'X/X'X/X'X/X'X$Z=Z(X6WHX-X/X'X/X'X/X'X/X YJY DX9Y MWEW =YE\\\\ EYE\\\\ EYE\\\\ EYE\\\\ EYE\\\\ EYE\\\\ EYE]N\\\\G[7]EX E\\\\F[ F\\\\F[ F\\\\F[ F\\\\F[ IW ,W ,W ,W (p IWNXG[ H]H\"\n\"] G]H] G]H] G]H] G]H] 1Z E]H^ JW6W MW6W MW6W MW6W W6W KWNXG\\\\ MW6W     NV>V>V,V&V,VJZFYIV,V6YIV,V&V%W 7W6X     3X LR:T   ;q @e N~^&s!Y>Y LW4W B` >W<X N\"\n\"W                $x   FX 2VFV 7~X2WES ;VAVEW IY 5V *W #W 4XNTNX &V       IW 5X5X =X  X .X CWEX Di AXH_ +X CX<X MX5X LX -X  Be  #e /Z @V<^IUDV5WDW HX8Y\"\n\"!X +X+X+X -X /X +X/X'X -X -XK[ =X -XIV@VIX0XHW?X(X'X-X7X!X'X-X8X NZ  NX <X/X%X8X NX@VGV@X.c >XJX +Z GW -W !W 5X)X    5U>Z G_CZ I[>T FZC_ KZAZ HW -ZB_ \"\n\"M^BZ KW ,W ,W@Z FW ,^CZMVCZ;^BZ IZBZ I_CZ IZC_ M^ 5Y<S CW ,W6W W6W MW?\\\\?W.YAY JW6W 2Y 6W :V  MW     ;\\\\A\\\\%YDYLV NW>Y .W AXJa IZ<Q C^BZ MX8X =\\\\ ?W6W LW)\"\n\"W+YIXJY LW=W JWCWCW LZBZ K]F] ;W >W2W EWDW 9Y =X /X'X/YAXAY,X0X)X?X?X/X'X%X  JV  KX <V =X7X <V   CV -\\\\JSHT BX 4v DXHX BV -b   7SEV*S;V?W 2TBT     LSAV\"\n\"@VCS  9b !V AV  MU   ?W6W MhGU     KU 5V=V ATBT 3U8V HU8V ?UAV CX 1WDW ?WDW ?WDW ?WDW ?WDW ?WDW ?XBX NX +X -X -X -X -X -X -X -X ,X+X,XHW?X(X'X/X'X/X'X\"\n\"/X'X/X'X#Z?Z'X7WGX-X/X'X/X'X/X'X/X NXJX CX9Y MWFW <U>Z FU>Z FU>Z FU>Z FU>Z FU>Z FU>eBZ9[>T FZAZ HZAZ HZAZ HZAZ JW ,W ,W ,W )r J^BZ IZBZ GZBZ GZBZ GZBZ\"\n\" GZBZ 1Z EZB[ JW6W MW6W MW6W MW6W W6W K_CZ MW6W     V=V>V-V%V-VHZHYHV-V6YHV-V%V%W 7X7X     4X NU:T   <s Ae N~^'u\\\"X<X LW4W BWNW >W<W MW                \"\n\"$w   EX   2~X2WES ;WCWEV GY   9W #W 5XMTMX 'V       IV 4X4X >X !Y 0Y BVDX Dk CXJc -X BX>X LX5Y MX -X  Ee   Le 3Z ?U=bKUCU6XDX IX9Y X +X+X+X -X /X +X/X\"\n\"'X -X -XL[ <X -XIV@VIX0XHX@X(X'X-X8Y!X'X-X8X N[  X <X/X%X8X NX@VGV@X.c =XLX +Z FW ,V !W       AR9Y H]?Y KZ:R GY?] LY=Y IW -Y?] M]@Y KW ,W ,WAY DW ,]@X\"\n\"NV@X;]@Y JY>Y J]?Y KY?] M] 4X8P CW ,W6W X8X MW?\\\\?W-XAX IW7X 3Y 5W :V  MW     =_C_(YBXLV NW?Z -W CXC\\\\ KY ,]@Y LW8X >] ?W6W LW)W,YHWHY MW=W JWCWCW MY>Y \"\n\"L[B[ ;W >W2W FWBW 9Y >X 0X%X0X@X@X,X0X)X?X?X/X'X&Y  JV  KY =V >Y7Y =V   CV .[HSFR BX 3t BWHW AV .WN\\\\   9SFV)S;V?W 3UCU     LSAV@VCS  7_  V BV  LU   ?W\"\n\"6W MhGU     KU 5W?W AUCU 4U8V HU8V ?UAV CX 2XDX AXDX AXDX AXDX AXDX AXDX @XBX NX +X -X -X -X -X -X -X -X ,X+X,XHX@X(X'X/X'X/X'X/X'X/X'X\\\"ZAZ&X8WFX-X/X'\"\n\"X/X'X/X'X/X MXLX BX8X MWFW <R9Y GR9Y GR9Y GR9Y GR9Y GR9Y GR9a>Y;Z:R GY=Y JY=Y JY=Y JY=Y KW ,W ,W ,W *]E[ J]@Y JY>Y IY>Y IY>Y IY>Y IY>Y 2Z FY>Y JW6W MW\"\n\"6W MW6W MW6W W7X K]?Y NW7X     V=V=U-V$U-VGZJYFU-V7YFU-V$U%W 7X8X    &~X/X:T   =t @c L~\\\\'v\\\"W:W LW4W CXNX ?X>X MV                $x   EX   2~X2WES :VDW\"\n\"EV FZ   :W #W 7XKTKX )V       IV 4X4X >X !X 0Y BWDX Dm FXKf /Y AYBY KX5Y MX -X  Gd ~X d 5Y ?V>dLUCU6WBW IX;Z Y +X+Y,X -X 0Y +X/X'X -X -XM[ ;X -XIWBWIX\"\n\"0XGW@X)Y'Y.X8X!Y'Y.X9Y M] #X <X/X$X:X MX@VGV@X-a <YNY ,Z EW ,V !W       AP6X H\\\\=Y LY7P HY=\\\\ LX;X IW .Y=\\\\ M[=X KW ,W ,WBY CW ,[=]=W;[=X KY<Y K\\\\=Y MY=\\\\ \"\n\"M\\\\ 4X *W ,W6W NW8X MW@VNV@W,XCX GW8W 3Y 4W :V  MW     >aEa)X@XNW NWA[ ,W DW?[ LX +[=X KW:X =] ?W6W MW'W-XGWGX MW=W JWCWCW MX<Y NZ>Z <W >W2W FWBW 9Z ?X\"\n\" 0X%X0X@X@X,X0X(X@X@X/Y'Y(Y  IV  JY >V ?Y5Y >V   CV .YFSDP BX 2q @XJX AV /WK[   :SFV)S;V@X 4VDV     LSAV@VCS  6\\\\  MV CV  KU   ?W6W MhGU     KU 4V?V @V\"\n\"DV 5U9V GU9V >UBV BX 2WBW AWBW AWBW AWBW AWBW AXDX @XBX Y +X -X -X -X -X -X -X -X ,X+Y-XGW@X)Y'Y1Y'Y1Y'Y1Y'Y1Y'Y\\\"ZCZ&Y9WEY.X/X'X/X'X/X'X/X MYNY BX8Y N\"\n\"WFW <P6X GP6X GP6X GP6X GP6X GP6X GP6_<X;Y7P GX;X JX;X JX;X JX;X KW ,W ,W ,W *Z?Y K[=X KY<Y KY<Y KY<Y KY<Y KY<Y 3Z GY<Y KW6W MW6W MW6W MW6W NW8W J\\\\=Y \"\n\"NW8W     NV=V=V.V$V.VFZLYEV.V8YEV.V$V&W 6W8X    &~X2\\\\<T   =v Ab K~\\\\(x$W8W MW4W CXNX ?X>X NW                $w   DX   $VBV#XFS :WFXEV H]   ;W #W 9XITIX\"\n\" +V       JW 4X4X >X \\\"Y 3[ BWCX Dn GXLi 1X ?ZFZ JY7Z MX -X  Je M~X Me 9Y >U?gMUCV7WBW IX>\\\\ NX *X*X,X -X 0X *X/X'X -X -XNZ 9X -XHVBVHX0XGXAX)X%X.X9Y!X%\"\n\"X.X:Y La 'X <X/X$X:X LWAWGV@W+_ :XNX ,Z DW ,W \\\"W       &W H[;X MY .X;[ MX9X JW .X;[ M[<X LW ,W ,WCY BW ,Z<\\\\<X<[<X LX:X K[;X MX;[ M[ 3W )W ,W6W NW8W KW\"\n\"AVNVAW*XEX FW9X 4Y 3W :V  MW     ?cGc+Y?WNV MWD] +W DV=Z LX +Z;X LW:X >_ @W6W MW'W.YGWFX NW=W JWCWCW NX:X NY<Y <W >W2W FWBW 8Z @X 0X%X0X@X@X,X0X(X@X@X\"\n\"/X%X)Y  HV  IY ?V @Y3Y ?V   CV /YES 6X 1\\\\H[ JcJc LV 0WI\\\\   =TFV)S;WAX 5WEW     MTAVAWCS  3W 4~W.W  KV   ?W6W LgGU     KU 4WAW @WEW 6U9V GU9V ?VBV BX 2\"\n\"WBW AWBW AWBW AWBW AWBW AWBW AXAX X *X -X -X -X -X -X -X -X ,X*X-XGXAX)X%X1X%X1X%X1X%X1X%X!ZEZ%X9WCX.X/X'X/X'X/X'X/X LXNX AX7X NWFW !W ,W ,W ,W ,W ,W \"\n\",]:X=Y .X9X LX9X LX9X LX9X LW ,W ,W ,W +Z=X K[<X LX:X KX:X KX:X KX:X KX:X 3Z GX<Z KW6W MW6W MW6W MW6W NW9X J[;X NW9X     NU<V=V.U#V.UDZNYDV.U8YDV.U#V&\"\n\"V 5X9W    %~X3]<T   >x A` J~\\\\(y%W8W MW4W CXMW >W>W MV                $x   DX   $VCV\\\"XFS 9XIXEV H_   <W #W ;YHTHY -V       JV 3X4X >X #Y ?g AVBX Do HXM\"\n\"k 3Y >l HX7Z MX -X  Me J~X Je =Y >V?hNUBU8XBX Ju MX *X*X,w Lq IX *~R'X -X -c 8X -XHVBVHX0XFWAX)X%X.X9Y!X%X.X;Z Ke ,X <X/X$X:X LXBVEVBX+_ 9` +Y CW +V \\\"\"\n\"W       %W IZ9X NX .X9Z MW7W JW /X9Z MZ;X LW ,W ,WDY AW ,Z;[;W<Z;X MY:Y LZ9X X9Z MZ 2W )W ,W6W NX:X KWAVNVAW*YGY EW:W 4Z 3W :V  MW     ?XMYIe,X>WNV MW\"\n\"Ib +W EW;Y MW *Z;X KV:W =_ @W6W NW%W/XFWFX NW=W JWCWCW NW8X!Y:Y =W >| GW@W 8Y @X 0X%X1Y@X@Y-X0X(X@X@X/XImIX*Y  GV  HY @V AY1Y @V   CV /XDS 6X 0YDY JdL\"\n\"d LV 1WF[   >SFV'S<WBY 6XFX     MS@VAVAS    @~W/W  JU   >W6W LgGU     KU 3WCW ?XFX 7U:V FU:V >UBV AX 3XBX CXBX CXBX CXBX CXBX CXBX BXAw?X *w Lw Lw Lw \"\n\"LX -X -X -X ,X*X-XFWAX)X%X1X%X1X%X1X%X1X%X ZGZ$X:WBX.X/X'X/X'X/X'X/X K` @X7X NWFW  W ,W ,W ,W ,W ,W ,[8W=X -W7W LW7W LW7W LW7W LW ,W ,W ,W ,Y:X LZ;X M\"\n\"Y:Y MY:Y MY:Y MY:Y MY:Y  \\\"Y=\\\\ LW6W MW6W MW6W MW6W MW:W IZ9X NW:W     NV<V=V/V#V/VCcCV/V9YCV/V=X>V&V 4W:X    %~X2TNV<S   =y KWM^LW$~Z({&W7V MW4W CWLX ?\"\n\"X?W MV                 KX   ,X   %VBV!XGS 9gFV Ha   >W \\\"W ;WFTFW -V       JV 3X4X >X #Y ?f AWBX Dp IXNm 4X <j GX7Z MX -X !e G~X Ge AY =U?ZH^BU8W@W Jt \"\n\"LX *X*X,w Lq IX *~R'X -X -b 7X -XHWDWHX0XFXBX)X%X.X:Y X%X.X<Z Ih 0X <X/X#X<X KXBVEVBX*] 8` ,Z CW +V \\\"W       %W IZ9X X -X9Z NX7X KW /X9Z MY9W LW ,W ,W\"\n\"EY @W ,Y:Z:W<Y9W MX8X LZ9X X9Z MY 1W )W ,W6W MW:W JWAVNVAW)XGX DW:W 4Y 3X :V  MW     @VHXKWGV,W<^ MWIa *W FW9Y NW *Y9W KW<X >` @W6W NW%W/WEWEW NW=W JW\"\n\"CWCW X8X!X8X =W >| GW@W 7Y AX 0X%X1X?X?X-X0X(X@X@X/XImIX+Y  FV  GY AV BY/Y AV   DX 1XCS 6X 0W@X KdLd LV 1VCZ   ?SFV'S;WE[ 7XFX G~X  .S@VBWAS    @~W0W \"\n\".P>W   >W6W KfGU     KU 3XEX >XFX 8U;V:W3U;VCZ9P>WCV:W/Y 3W@W CW@W CW@W CW@W CW@W CXBX CX@w?X *w Lw Lw Lw LX -X -X -X 5p9X-XFXBX)X%X1X%X1X%X1X%X1X%X N\"\n\"ZIZ#X:VAX.X/X'X/X'X/X'X/X K` @X7X NWFW  W ,W ,W ,W ,W ,W ,[8X?X -X7X NX7X NX7X NX7X MW ,W ,W ,W ,X9X LY9W MX8X MX8X MX8X MX8X MX8X  \\\"X=] LW6W MW6W MW6\"\n\"W MW6W MW:W IZ9X NW:W     NVLuKU/VLuKU/VBaAU/V:YAU/V=X=U&V 4X;X    %~X2RLW>T   >{!z'~Z)}(W6W NW4W DXLX ?X@X MV                 KX   ,X   %VBV!YHS 8eEV\"\n\" Ic   ?W !W ;UETEU ,V       KW 3X4X >X $Y >c ?WAX DWD^ JbG] 5X 9d DY9[ MX -X #d D~X Dd DY <U@YD\\\\BU9X@X Kq IX *X*X,w Lq IX *~R'X -X -a 6X -XGVDVGX0XEWB\"\n\"X)X%X.X;Z X%X.X?\\\\ Gk 4X <X/X#X<X KXBVEVBX)[ 6^ ,Z BW +W #W       %W IY7W X -W7Y NW5W KW 0X7Y MY9W LW ,W ,WFY ?W ,Y:Z:W<Y9W MW6W LY7W W7Y MY 1W )W ,W6W\"\n\" MW:W JWBVLVBW(XIX CW;X 5Y 2X :V  MX     BUDVKVDU.X<] LWI_ :WEW FV7X NW *Y9W JV<X >a AW6W NW%W0XEWEX W=W JWCWCW W6W!X8X =W >| HX@X 7Y BX 0X%X1X?X?X-X0\"\n\"X(X@X@X/XImIX,Y  EV  FY BV CY-Y BV   DX 1XCS 6X 1W>W KeNe LV 1VB[   ASFV'S;YI] 9YGY F~X  .S@VDX@S    @~W1V ,TEZ   >W6W JeGU IX   +U 2YIY <YGY :U;V:W3U\"\n\";VGa<TEZCV:W/X 3X@X EX@X EX@X EX@X EX@X EX@X DX@w?X *w Lw Lw Lw LX -X -X -X 5p9X-XEWBX)X%X1X%X1X%X1X%X1X%X MZKZ\\\"X;WAX.X/X'X/X'X/X'X/X J^ ?X7X NWFX !W \"\n\",W ,W ,W ,W ,W ,Z6W?X -W5W NW5W NW5W NW5W MW ,W ,W ,W -X7W LY9W MW6W MW6W MW6W MW6W MW6W  \\\"W=^ LW6W MW6W MW6W MW6W MW;X IY7W NW;X     NVLuKU/VLuKU/VA_\"\n\"@U/V;Y@U/V=X=U&V 4X<X    $~X,W>T   ?|\\\"}(~X)~(W6W NW4W DXKW >W@X MV                 KX   ,X   %VBV!ZIS 7cEV IYNZ8W  0W !W :RCTCR +V       KW 3X4X >X %Y\"\n\" =b >V@X DS=\\\\ K`C[ 6Y 8b BX9[     Nd A~X Ad HY <VAX@ZBV:X?W Kq IX *X*X,w Lq IX *~R'X -X -a 6X -XGVDVGX0XEXCX)X%X.X=[ NX%X.u Fl 6X <X/X\\\"W<W IWCWEVBW([ \"\n\"5\\\\ ,Z AW +W #W       $V IY7X\\\"X -X7Y NW5W KW 0X7Y MX8X MW ,W ,WHZ >W ,X8X8W=X8X X6X MY7X\\\"X7Y MX 0W )W ,W6W MX<X IWCVLVCW&XKX AW<W 5Y 1W 9V  LW  4P  /TB\"\n\"VMVBT.X;\\\\ LWI` =\\\\HW GW7X NW *X8X KV=X >XMW AW6W NW%W0XEWDW W=W JWCWCW!X6X#X6X >W >| HW>W 6Y CX 0X%X1X?X?X-X0X'XAXAX.XImIX-Y  DV  EY CV DY+Y CV   DX 2X\"\n\"BS 6X 1V<V KeNe LV 2V?Y   ASFV'S:dNV :XFY E~X  .S@i?S    @~W2i >h   =W6W JeGU IX   4g :g :YFX DgEV:X<gEVHe>hCV:X/X 3X?W EX?W EX?W EX?W EX?W EX@X EX?w?\"\n\"X *w Lw Lw Lw LX -X -X -X 5p9X-XEXCX)X%X1X%X1X%X1X%X1X%X LZMZ!X<W@X.X/X'X/X'X/X'X/X I\\\\ >X7X NWFY !V +V +V +V +V +V +Y6W@X ,W5W NW5W NW5W NW5W MW ,W ,W\"\n\" ,W -X7X MX8X X6X X6X X6X X6X X6X  $X=_ MW6W MW6W MW6W MW6W LW<W HY7X NW<W     MVLuKU/VLuKU/V@]?U/V<Y?U/V=X=U&V 3W<X    $~X+V>S   >}%~R)~V(~P)W6W NW4W\"\n\" DWJX ?XAW L~^               $X   ,X   %VCV N\\\\LS 6aDVAW0XLZ9W  0W !W :PATAP +V       KV 2X4X >X &Z =e BW@X DP8[ L^?Z 7X :h EY;\\\\    \\\"d >~X ?e LY ;U@W>Y\"\n\"AU:W>W Ks KX *X*X,w Lq IX6f+~R'X -X -b 7X -XGWFWGX0XDWCX)X%X.X@^ NX%X.s Bl 8X <X/X\\\"X>X IXDVCVDX)[ 4\\\\ -Z @W *V #W       $W JX5W\\\"X -W5X W4W KW 0W5X MX7W\"\n\" MW ,W ,WIZ =W ,X8X8W=X7W W4W MX5W\\\"W5X MX 0X *W ,W6W LW<W HWCVLVCW&YMY AW=X 6Y 1X 9V  LX 1X.Q  /TA]AU/W:\\\\ LWIb A`JW GV5X NW +X7W KW>X >XMX BW6W W#W1WD\"\n\"WDW W=W JWCWCW!W4W#X6X >W >| HW>W 7Y BX 0X%X1X?X?X-X0X'XAXAX.XImIX.Y  CV  DY DV EY)Y DV   DX 2XBS 6X 2W<W =^ =V 2V>Y   BSFV'S9bMV ;XFY D~X  .S@h>S    \"\n\"@~W2i >g   <W6W HcGU IX   4g 9e 8YFX EgEV;Y<gEVHf?gBV;Y0Y 3W>W EW>W EW>W EW>W EW>W EW>W EX?w?X *w Lw Lw Lw LX -X -X -X 5p9X-XDWCX)X%X1X%X1X%X1X%X1X%X \"\n\"Ke X=W?X.X/X'X/X'X/X'X/X I\\\\ >X7X NWEY \\\"W ,W ,W ,W ,W ,W ,X5W@X -W4W W4W W4W W4W MW ,W ,W ,W -W6X MX7W W4W W4W W4W W4W W4W  $W=VMW MW6W MW6W MW6W MW6W \"\n\"LW=X HX5W NW=X     MVLuKU/VLuKU/V?[>U/V=Y>U/V=X=U&V 3X=W     7X FW@T   ?~&~T*~V)~R*W5V NW4W EXJX ?XBX L~^               $X   ,X   &VBV Mb 4]CVC]4XJZ:W\"\n\"  0W !W +T  KV       KV 2X4X >X 'Z <g EW?X +Z L]=Z 9Y <l GZ=]    %e    e!Y :UAW<XAU;X>X Lu MX *X*X,w Lq IX6f+~R'X -X -c 8X -XFVFVFX0XDXDX)X%X.u MX%X.r\"\n\" ?l :X <X/X\\\"X>X IXDVCVDX)\\\\ 4Z ,Y ?W *V #W       $W JX5W\\\"W ,W5X W3W LW 0W5X MX7W MW ,W ,WJY ;W ,X8X8W=X7W W4W MX5W\\\"W5X MX 0X *W ,W6W LW<W HWCVKUCW%XMX \"\n\"?W>W 6Y 0X 9V  LX 5`3R  0T?[?T/W:[ KWId DbKW HW5X NW +X7W JV>W =WLX BW6W W#W1WDWDW W=W JWCWCW!W4W#W4W >W >| IX>X 9Y AX 0X%X1X?X?X-X0X'XAXAX.XImIX/Y  B\"\n\"V  CY EV FY'Y EV   DX 2WAS ?r CV:V =^ =V 2V=Y   CSFV'S8`LV <XFX B~X  .S@e;S    @~W2i >e   :W6W GbGU IX   4g 8c 5XFX FgFV:Y<gFVGg@eAV:Y1Y 3X>X GX>X GX>\"\n\"X GX>X GX>X GX>X FX?w?X *w Lw Lw Lw LX -X -X -X 5p9X-XDXDX)X%X1X%X1X%X1X%X1X%X Jc NX>W>X.X/X'X/X'X/X'X/X HZ =X7X NWEZ #W ,W ,W ,W ,W ,W ,X4WAW ,W3W!W3\"\n\"W!W3W!W3W NW ,W ,W ,W .X5W MX7W W4W W4W W4W W4W W4W  $W>VLW MW6W MW6W MW6W MW6W KW>W GX5W MW>W     LVLuKU/VLuKU/V>Z>U/V>Y=U/V=X=U&V 2W>X     8Y FW@T  \"\n\" ?~P(~V*~T(~Q)V4V NW4W EXJX >WBX L~^               $X   ,X   &VBV Ld 4WAVD`6XHZ;W  0W !W +T  KV       LW 2X4X >X 'Y ;i GV>X *Z M\\\\;Y 9X =p HZ?^    'd  \"\n\"  Id$Y 9UAW<XAU;W<W Lw X *X*X,w Lq IX6f+~R'X -X -d 9X -XFVFVFX0XCWDX)X%X.t LX%X.p ;k ;X <X/X!X@X HXDVCVDX*^ 4X ,Z ?W *W $W       $W JX5W\\\"W ,W5X W3W LW\"\n\" 0W5X MW6W MW ,W ,WKY :W ,W7W7W=W6W W4W MX5W\\\"W5X MX /Y ,W ,W6W LX>X GWEVJVEW#a >W>W 7Y 1Y 8V  KY 9e8T  0T?Z>T0X:[ KWIf GdLW HW4W MW ,W6W JV?X >XKW BW6\"\n\"W W#W2XDWDX!W=W JWCWCW!W4W#W4W >W >| IW<W :Y @X 0X%X1X?X?X-X0X&XBXBX-XImIX0Y  AV  BY FV GY%Y FV   DX 2WAS ?r DW:W =\\\\ <V 2V;W   CSFV'S7]JV =XFX A~X  .S\"\n\"@d:S    (V Ii <a   8W6W FaGU IX   4g 6_ 2XFX GgGV:Z<gGVFUFY?a@V:Z2Y 2W<W GW<W GW<W GW<W GW<W GX>X GX>w?X *w Lw Lw Lw LX -X -X -X 5p9X-XCWDX)X%X1X%X1X%\",\n// Start of second string.\n\"X1X%X1X%X Ia MX?W=X.X/X'X/X'X/X'X/X GX <X7X NWDZ $W ,W ,W ,W ,W ,W ,X4WAW ,W3W!W3W!W3W!W3W NW ,W ,W ,W .W4W MW6W W4W W4W W4W W4W W4W  $W?VKW MW6W MW6W\"\n\" MW6W MW6W KW>W GX5W MW>W     LVLuKU/VLuKU/V?\\\\?U/V?Y<U/V=X=U&V 2W>X     8X DWBT   ?~Q)~W)~R&~(V4V NW4W EWHW >WBW K~^               $X   ,X   &VBV Kg \\\"\"\n\"VEc8WFZ=W  /W !W +T 4~W      5V 1X4X >X (Y -] IW>X )Y M[9X 9X >\\\\F\\\\ H[C`    'a    Ca$Y 9UAV:WAU;W<W LX<\\\\!X *X*X,X -X 0X6f+X/X'X -X -XN[ :X -XEVHVEX0XCX\"\n\"EX)X%X.s KX%X.o 6h <X <X/X!X@X GWDVCVDW*_ 4X -Z >W )V $W       6i JX5X$X -X5X V2W LW 1W3W MW6W MW ,W ,WLY 9W ,W7W7W=W6W!X4X NX5X$X5X MW .[ .W ,W6W KW>\"\n\"W FWEVJVEW#a >W?X 8Z 4\\\\ 8V  K[ =i<V  0S=Y=S0X:[ KW@^ IfMW HW4W MY .W6W JW@W =XKX CW6W W#W2WCWCW!W=W JWCWCW\\\"X4X%X4X ?W >W2W IW<W :Y @X 0X%X1X?X?X-X0X&X\"\n\"BXBX-X%X1~` GV H~` GV H~` GV   DX 3XAS ?r DV8V =\\\\ <V 2V;X   DSFV'S4W /XFX @~X  .S@VIX;S    (V Ii 8Z   5W6W D_GU IX   4g 3Y .XFX HgGV;TNU<gGVFQ@W;Z=V;T\"\n\"NU3Y 1W<W GW<W GW<W GW<W GW<W GW<W GX>X X *X -X -X -X -X -X -X -X ,X*X-XCXEX)X%X1X%X1X%X1X%X1X%X H_ LX@W<X.X/X'X/X'X/X'X/X GX <X7X NWD\\\\ 8i >i >i >i >i\"\n\" >i >i3WBX ,V2W!V2W!V2W!V2W NW ,W ,W ,W .W4W MW6W!X4X\\\"X4X\\\"X4X\\\"X4X\\\"X4X M~Y2X@VIW NW6W MW6W MW6W MW6W KW?X GX5X NW?X     LVLuKU/VLuKU/V@^@U/V@Y;U/V=X=U&\"\n\"V 2X?W     8X CWBT   ?~R*~X)~Q%}(V4W W4W FXHX ?XDX K~^               $X   ,X   'WCV Ii &VEe:XEZ>W  /W !W +T 4~W      5V 1X4X >X )Y )[ KW=X (Y N[9Y ;Y \"\n\"?Z@Z I]Gb    '^    =^$X 9U@V:WAU<X<X MX9Z\\\"X *X*X,X -X 0X6f+X/X'X -X -XM[ ;X -XEVHVEX0XBWEX)X%X.r JX%X.q 4e =X <X/X!X@X GXFVAVFX*` 5X .Z =W )V $W      \"\n\" :m JW3W$W ,W3W!W2W LW 1W3W MW6W MW ,W ,WMY 8W ,W7W7W=W6W!W2W NW3W$W3W MW -^ 2W ,W6W KX@X FWEVJVEW\\\"_ <W@W 7Y :b 7V  Jb FmAX  0S<W<S0W8Y JW<[ KYHVMV GV\"\n\"3X MZ 0W6W IVAX >XIW CW6W!W!W3WCWCW!W=W JWCWCW\\\"W2W%W3X ?W >W2W JW;X <Y ?X 0X&Y1X?X?X-X0X&YCXCY-X%X2~a GV H~a HV I~b HV   DX 3W@S ?r DV8V <Z ;V 2W;W   \"\n\"DSFV'S  <XFX  =V  .S@VGW<S    (V      \\\"W6W A\\\\GU IX       2XFX *V;TMU LV2V V;TMU4Z 2X<X IX<X IX<X IX<X IX<X IX<X IX=X X *X -X -X -X -X -X -X -X ,X*X-XB\"\n\"WEX)X%X1X%X1X%X1X%X1X%X G] KX@V;X.X/X'X/X'X/X'X/X GX <X8Y NWC\\\\ =m Bm Bm Bm Bm Bm Bm3WBW ,W2W\\\"W2W\\\"W2W\\\"W2W NW ,W ,W ,W /X4X NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y\"\n\"2W@VHW NW6W MW6W MW6W MW6W JW@W FW3W MW@W     KVLuKU/VLuKU/VA`AU/VAY:U/V=X=U&V 1W@X     9X BWBS   >~R+~Z*~P#{'V4W W4W FXHX ?XDX K~^               $X  \"\n\" ,X   'VBV Gi (VFg;WCZ?W  /W !W +T 4~W      6W 1X4X >X *Y &Z LW=X (Y NZ7X ;X ?Z>Z ImNX    '[    8\\\\%Y 9UAW:WAU<W:W MX7Y#X *X*X,X -X 0X6f+X/X'X -X -XL[ \"\n\"<X -XEWJWEX0XBXFX)X%X.p HX%X.r 0a >X <X/X XBX FXFVAVFX+b 6X /Z <W )W %W       =p JW3W$W ,W3W!| LW 1W3W MW6W MW ,W ,WNY 7W ,W7W7W=W6W!W2W NW3W$W3W MW -\"\n\"b 6W ,W6W JW@W EWFVHVFW!] ;WAX 8Y 9` 5V  H` HrG[  0S<W<S0W8Y JW:Y KXF^ HW2W Kc ;W6W IVAX >XIW CW6W!W!W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W >W2W JW:W =Y >X 0Y'\"\n\"X0X?X?X-X0X%XCXCX,X%X2~a GV H~a HV I~b HV   DX 3W@S ?r DV8V <Z   FW;W   DSFV'S  =XFX  <V  .S@VFW=S    (V      \\\"W6W <WGU IX       1XFX +V;SLU LV2V V;SL\"\n\"U5Z 1W:W IW:W IW:W IW:W IW:W IX<X IX=X X *X -X -X -X -X -X -X -X ,X*X-XBXFX)X%X1X%X1X%X1X%X1X%X F[ JXAW;X.X/X'X/X'X/X'X/X GX <X8X MWB] Bp Ep Ep Ep Ep \"\n\"Ep E~eBW ,|\\\"|\\\"|\\\"| NW ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y2WAWHW NW6W MW6W MW6W MW6W JWAX FW3W MWAX     KV<V=V/V#V/VBbCV/VBY:V/V=X>V&V 1XAW     9\"\n\"X @WDT   ?~S+~Z)}!y'W4W W4W FWFW >WDW J~^               *r   ?V   &VBV Eh *VEXIX<XBZ@W  /W !W +T 4~W  5f   8V 0X4X >X +Y $Z NW<X 'X NZ7X ;X ?X:X HkMX \"\n\"   '[    7[%X 8UAV8VAU=X:X NX6X#X *X*X,X -X 0X6f+X/X'X -X -XK[ =X -XDVJVDX0XAWFX)X%X.m EX%X.XA\\\\ -^ ?X <X/X XBX FXFVAVFX,c 6X /Y ;W (V %W       ?r JW3W\"\n\"$W ,W3W!| LW 1W3W MW6W MW ,W ,a 6W ,W7W7W=W6W!W2W NW3W$W3W MW ,e :W ,W6W JW@W DWGVHVGW N[ 9WBW 8Y 8^ 3V  F^ I~X  0S;U;T1W8Y JW8X MXC\\\\ HW2W Ia ;W6W IWB\"\n\"W >XHX DW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W >W2W KX:X ?Y =X /X'X0Y@X@Y-X0X%YDXDY,X%X2~a GV H~a HV I~b HV   DX 3W@S ?r DV8V ;X   DW;V   DSFV'S  >XFX \"\n\" ;V  .S@VFW=S    (V      \\\"W6W :UGU IX       0XFX -V;TLU MV0U!V;TLU6Y 0X:X KX:X KX:X KX:X KX:X KX:X JW<X X *X -X -X -X -X -X -X -X ,X*X-XAWFX)X%X1X%X1X\"\n\"%X1X%X1X%X F[ JXBW:X.X/X'X/X'X/X'X/X GX <X9Y MWA] Er Gr Gr Gr Gr Gr G~gBW ,|\\\"|\\\"|\\\"| NW ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y2WBWGW NW6W MW6W MW6W \"\n\"MW6W IWBW EW3W LWBW     IU<V=V.U#V.UCdDV.UCY9V.U=X>V&V 1XBX     :X ?WDT   ?~S,~[({ x&W4W W4W FWFX ?XFX JV                \\\"q   >V   &VBV Af -VEXGX=W@ZB\"\n\"W  .W !W +T 4~W  5f   8V 0X4X >X ,Y \\\"Y W;X 'X NZ7X <Y @Y:Y HiLX    '^    =^%X 8UAV8VAU=X:X NX5X$X *X*X,X -X 0X(X+X/X'X -X -XJ[ >X -XDVJVDX0XAXGX)X%X.i\"\n\" AX%X.X>Z ,\\\\ ?X <X/X NWBW DWFVAVFW+XMY 7X 0Z ;W (V %W       @s JW3W$W ,W3W!| LW 1W3W MW6W MW ,W ,` 5W ,W7W7W=W6W!W2W NW3W$W3W MW +g =W ,W6W JXBX DWGVH\"\n\"VGW N[ 9WBW 9Y 7^ 3V  F^ I[Gr  /S;U;T1W8X IW7X NWA[ HW2W F^ ;W6W HVCX >XGW DW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W >W2W KW9X ?Y =X /X'X/X@X@X,X0X$YEXEY\"\n\"+X%X2~a GV H~a HV I~b HV   DX 3W@S 6X 3V8V ;X   DX<V   DTFV)T  >WEW  :V  .TAVEW?T    (V      \\\"W6W :UGU IX       /WEW .V;TKU NV/U\\\"V;TKU7Y /X:X KX:X KX:\"\n\"X KX:X KX:X KX:X KX<X X *X -X -X -X -X -X -X -X ,X*X-XAXGX)X%X1X%X1X%X1X%X1X%X G] KXCW9X.X/X'X/X'X/X'X/X GX <X9Y MW?] Hs Hs Hs Hs Hs Hs H~hBW ,|\\\"|\\\"|\\\"|\"\n\" NW ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y2WBVFW NW6W MW6W MW6W MW6W IWBW EW3W LWBW     IU<V=V.U#V.UDYMZEV.UDY8V.U#V&V 0WBX     ;X >WDS   >~T-~\\\\(y\"\n\" Mw&W4W W4W GXFX ?XFX JV                #r   >V   'WCV <c .VEWEW=W?ZCW  .W !W   :~W  5f   9W 0X4X >X -Y  Y!W;X 'Y Y5X =X @Y8Y HgKX    'a    Ca%X 8UAV8\"\n\"VAU=W8W NX4X%X *X+Y,X -X 0X(X+X/X'X -X -XI[ ?X -XDWLWDX0X@WGX)X&Y.X 0X&Y.X=Y *[ @X <X/X NXDX DXHW@VHX,YMZ 8X 1Z :W (W &W       At JW3W$W ,W3W!| LW 1W3\"\n\"W MW6W MW ,W ,` 5W ,W7W7W=W6W!W2W NW3W$W3W MW )g ?W ,W6W IWBW CWGVHVGW MY 8WCX :Y 6` 5V  H` IW@m  -S;V<T1W8X IW7X W@[ HW2W Ia ;W6W HVCW >XFX EW6W!W<W<\"\n\"W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W >W2W KW8W @Y <X /X'X/X@X@X,X0X#YFXFY*X&Y2~a GV H~a HV I~b HV   DX 3W@S 6X 3V8V ;X   CX=V   CSFV)S  =WEW  :V  -SAVDW@S   \"\n\" 'V      \\\"W6W :UGU IX       /WEW .V<TJU NV/U\\\"V<TJU8Z /W8W KW8W KW8W KW8W KW8W KX:X KX<X X *X -X -X -X -X -X -X -X ,X+Y-X@WGX)X&Y1X&Y1X&Y1X&Y1X&Y H_ LX\"\n\"DW9Y.X/X'X/X'X/X'X/X GX <X:Y LW>] Jt It It It It It I~iBW ,|\\\"|\\\"|\\\"| NW ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y2WCVEW NW6W MW6W MW6W MW6W IWCX EW3W L\"\n\"WCX     IV=V=V.V$V.VFYKZFV.VFY7V.V$V&V 0XCW     ;Y =WFT   >~T-~\\\\'w Ku%W4W W4W GXEW >WFW IV                #q   =V   6~X JSN^ /VEWCW?W=ZDW  .W !W   :~W\"\n\"  5f   9V /X4X >X .Y  MX\\\"W:X &X Y5X >Y @X6X FcJX    &d    Id%X 8UAV8VAU>X8X X4X$X +X+X+X -X /X)X+X/X'X -X -XH[ @X -XCVLVCX0X@XHX(X'X-X /X'X-X<Y *Z @X \"\n\"<X/X NXDX DXHV?VHX-YKY 8X 2Z 9W 'V &W       B]?W JW3W$W ,W3W!| LW 1W3W MW6W MW ,W ,a 6W ,W7W7W=W6W!W2W NW3W$W3W MW 'g AW ,W6W IWBW CWHVFVHW NZ 7WDW :Z\"\n\" 6a 6V  Jb IU;i  ,S;V<S0W7W IW6W W?Z HW2W Kc ;W6W HWEX >XFX EW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W =V2V KX8X BY ;X /Y)Y/X@X@X,X0X#YFXGZ)X'X0~` GV H~` \"\n\"GV H~` GV   DX 3W@S 6X 3V8V M|  &Z?V   CSFV)S:m AXFX  ;V  -SAVDW@S    'V      \\\"W6W :UGU      *m 5XFX /V;SIU V.T\\\"V;SIU9Z /X8X MX8X MX8X MX8X MX8X MX8X \"\n\"MX;X NX +X -X -X -X -X -X -X -X ,X+X,X@XHX(X'X/X'X/X'X/X'X/X'X Ha LXFW8X-X/X'X/X'X/X'X/X GX <X;Z LW<\\\\ L]?W J]?W J]?W J]?W J]?W J]?W J]?{BW ,|\\\"|\\\"|\\\"| NW\"\n\" ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W M~Y2WDVDW NW6W MW6W MW6W MW6W HWDW DW3W KWDW     HV=V>V-V%V-VGYIZHV-VGY7V-V%V%V /WDX     ;X <WFT   >~T-~\\\\'v Is\"\n\"$W4W W4W GWDX ?XGW HV                %r   =V   6~X JSJ[ 0VEVAV?W<ZFW  -W !W   \\\"V   Lf   9V /X5X =X /Z  MX\\\"V9X &X NX5X >X ?X6X D`IX    $d    Ne#X 8UAV8\"\n\"VBU=x X4X$X +X+X+X -X /X)X+X/X'X -X -XG[ AX -XCVLVCX0X?WHX(X'X-X /X'X-X;Y *Y @X <X/X MXFX CXHV?VHX-XIY 9X 3Z 8W 'V &W       CZ;W JW3W$W ,W3W!| LW 1W3W\"\n\" MW6W MW ,W ,b 7W ,W7W7W=W6W!W2W NW3W$W3W MW %f BW ,W6W IXDX BWIVFVIW N\\\\ 8WEX :Y .[ 7V  K\\\\ BT8e  *S<X=S0W7V HW6X\\\"W=X GW2W Me ;W6W GVEX >WDW EW6W!W<W<W\"\n\"3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W =W4W KW6W CY :X .X)X.YAXAY,X0X\\\"ZHXHZ(X'X/Y  AV  BY FV GY%Y FV   DX 3W@S 6X 2V:V L|  %ZAV   BSEV*S:m @XFX  <V  -SAVCWAS   \"\n\" 'V      \\\"W6W :UGU      *m 6XFX .V<TIU V/U\\\"V<TIU9Y .x Mx Mx Mx Mx Mx Mu NX +X -X -X -X -X -X -X -X ,X+X,X?WHX(X'X/X'X/X'X/X'X/X'X Ic MXGW7X-X/X'X/X'X/\"\n\"X'X/X GX <X=[ KW:[ NZ;W KZ;W KZ;W KZ;W KZ;W KZ;W KZ;{BW ,|\\\"|\\\"|\\\"| NW ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W  &WEVCW NW6W MW6W MW6W MW6W HWEX DW3W KWEX \"\n\"    GV>V>V,V&V,VIYGZIV,VIY6V,V&V&W /XEW     N~X'VGT   =~T-~\\\\&u Ir#W4W NV4W HXDX ?XHX HV                 KX   ,V   6~X JSHZ 2VDVAV?W;ZGW  -W !W   \\\"V   \"\n\"Lf   :W .X6X =X 0Z  LY#~ /X NX5X >X @X5Y AYFX    !d >~X >d X 8UAV8VBU>z!X3X%X +X+X+X -X /X)X+X/X'X -X -XF[ BX -XCWNWCX0X?XIX(X'X-X /X'X-X:X )Y AX <X/X\"\n\" MXFX BWHV?VHW-YIY 9X 3Y 7W 'W 'W       CX9W JW3W$W ,W3W!W 'W 1W3W MW6W MW ,W ,WNZ 8W ,W7W7W=W6W!W2W NW3W$W3W MW !c CW ,W6W HWDW AWIVFVIW N] 8WFW :Y *\"\n\"Y 8V  KY ?R3`  (S<X=S0W7V HW5W\\\"W=X GW2W N[ 0W6W GWFW >XDX FW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W =W4W LX6X DY :X .X)X-XAXAX+X0X!ZIXIZ'X'X.Y  BV  CY EV\"\n\" FY'Y EV   DX 3W@S 6X 2V:V L|  $[CV   BTFW,T:m ?XFX  =V  -TBVBVBT    'V      \\\"W6W :UGU      *m 7XFX .V<THU!V/U\\\"V<THU:Y .z z z z z Nx Nv NX +X -X -X -X\"\n\" -X -X -X -X ,X+X,X?XIX(X'X/X'X/X'X/X'X/X'X Je NXGV6X-X/X'X/X'X/X'X/X GX <X@^ KW9[ X9W KX9W KX9W KX9W KX9W KX9W KX9W MW ,W ,W ,W ,W )W ,W ,W ,W /W2W N\"\n\"W6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W  &WFVBW NW6W MW6W MW6W MW6W GWFW CW3W JWFW     FV>V?W,V'W,VJYEZKW,VJY6W,V'W&W /XFX     N~X'WHT   =~T-~\\\\%s Gp\\\"W4W NV4V GXCW >WH\"\n\"X HW                 LX   ,V   6~X JSGY 3VDWAW@W:ZIW  ,W !W   \\\"V   Lf   :W .X6X =X 1Z  JX#~ /X NX5X ?Y @X4X .X     Md A~X Ad LX 8UAV8VBU>z!X3X%X +X+X+\"\n\"X -X /X)X+X/X'X -X -XE[ CX -XBVNVBX0X>WIX(X'X-X /X'X-X9X *Y AX <X/X MXFX BXJW?WJX.YGY :X 4Z 7W 'W 'W       DX8W JW3W$W ,W3W!W 'W 1W3W MW6W MW ,W ,WLY \"\n\"9W ,W7W7W=W6W!W2W NW3W$W3W MW  K_ DW ,W6W HXFX AWIVFVIW ^ 8WFW ;Y (Y 9V  LY >Q.X  $T>Z?T0W8W HW5W\\\"W<W GW2W Y -W6W GWGX >WCX FW6W!W<W<W3WCWCW!W=W JWCWC\"\n\"W\\\"W2W%W2W ?W =W4W LX6X EY 9X .Y+Y-YBXBY+X0X ZJXJZ&X'X-Y  CV  DY DV EY)Y DV   DX 3W@S 6X 2W<W L|  #\\\\FW   ASFW,S9m >XFX  >V  ,SBVBWCS    &V      \\\"W6W :U\"\n\"GU      *m 8XFX .V<TGU\\\"V.U#V<TGU;Y -z z z z z z v NX +X -X -X -X -X -X -X -X ,X+X,X>WIX(X'X/X'X/X'X/X'X/X'X KZMZ XHW6X-X/X'X/X'X/X'X/X GX <u JW7Y!X8W \"\n\"LX8W LX8W LX8W LX8W LX8W LX8W MW ,W ,W ,W ,W )W ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W  &WGWBW NW6W MW6W MW6W MW6W GWFW CW3W JWFW     FW?V?V+W(V+WKXCY\"\n\"KV+WKX5V+W(V%W .WFX     N~X'WHT   =~T-~\\\\$q Eo\\\"W4W NV4V GWBW >XIW GW                 LX       ;~X JSFX 3VDV?V@W9ZJW  +V \\\"W   !V       V -X6X =X 2Z  IX#\"\n\"~ /X NX5X ?X ?X4X .X     Jd D~X Dd IX 8UAV8VCV>z!X3X%Y ,X,Y+X -X /Y*X+X/X'X -X -XD[ DX -XBVNVBX0X>XJX(Y)X,X /Y)X,X9Y *X AX <X/X LXHX AXJV=VJX.XEY ;X 5\"\n\"Z 6W &V 'W       DW7W JW3W$W ,W3W!W 'W 1W3W MW6W MW ,W ,WKY :W ,W7W7W=W6W!W2W NW3W$W3W MW  H\\\\ DW ,W6W GWFW @WJVDVJW!` 9WGX <Y &X 9V  LX =P   (T?\\\\@T0W8\"\n\"X IW5W\\\"W<W GW2W X ,W6W FVGW >XBW FW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W =W4W LW4W FY 8X -X+X+YCXCY*X0X N\\\\MXM\\\\%Y)X+Y  DV  EY NQFVFQ Y+Y CV   DX 3W@S 6X\"\n\" 1V<V K|  ![HW   @TFW.T9m =XFX  ?V  ,TCVAVDT    &V      \\\"W6W :UGU      *m 9XFX -V<SFU\\\"V/U\\\"V<SFU;X ,z z z z z z v NY ,X -X -X -X -X -X -X -X ,X,Y,X>XJX\"\n\"(Y)X.Y)X.Y)X.Y)X.Y)X KZKZ!YJW6X,X/X'X/X'X/X'X/X GX <t IW6Y\\\"W7W LW7W LW7W LW7W LW7W LW7W LW7W MW ,W ,W ,W ,W )W ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W \"\n\" &WHWAW NW6W MW6W MW6W MW6W GWGX CW3W JWGX     EV?V@W*V)W*VJVAWKW*VJV5W*V)W%W .XGW     M~X&WJT   <~S,kNn#o Cm!W4W NV4V HXBX ?XJX FW                 MY\"\n\"       <~X JSEX 5VCV?V@W8ZLW  *W #W   !V       V -X6X =X 3Z  HX#~ /X NX5X @Y ?X4X /X     Ge G~X Ge GX 8UAV9WCU>|\\\"X3X$X ,X,X*X -X .X*X+X/X'X -X -XC[ EX\"\n\" -XA\\\\AX0X=WJX'X)X,X .X)X,X8X *X AX <X/X LXHX AXJV=VJX/YEY ;X 6Z 5W &V 'W       DW7W JW3W$W ,W3W!W 'W 1W3W MW6W MW ,W ,WJY ;W ,W7W7W=W6W!W2W NW3W$W3W M\"\n\"W  EZ EW ,W6W GWFW ?WKVDVKW!b 9WHW <Y $W 9V  LW     BTAVNUAT/W8X IW5W#W;V FW2W!X +W6W FWIX >XBX GW6W!W<W<W3WCWCW!W=W JWCWCW\\\"W2W%W2W ?W =W4W MX4X HY 7X\"\n\" -Y-Y+ZDXDZ*X0X Mt#X)X*Y  EV  FY NSGVGS Y-Y MQFVFQ   X 3W@S 6X 1W>W 9X   =\\\\KW   >SEW<PCS  6XFX  @V  +SCVAWES    %V      \\\"W6W :UGU        &XFX -V<TFU#V\"\n\"/U\\\"V<TFU<X ,|\\\"|\\\"|\\\"|\\\"|\\\"|\\\"w MX ,X -X -X -X -X -X -X -X ,X,X+X=WJX'X)X-X)X-X)X-X)X-X)X LZIZ!XKW5X,X/X'X/X'X/X'X/X GX <s HW5X\\\"W7W LW7W LW7W LW7W LW7W LW7W\"\n\" LW7W MW ,W ,W ,W ,W )W ,W ,W ,W /W2W NW6W!W2W\\\"W2W\\\"W2W\\\"W2W\\\"W2W  &WIW@W NW6W MW6W MW6W MW6W FWHW BW3W IWHW     DW@VAW)W+W)WJT?UKW)WJT5W)W+W$W -WHX     \"\n\"M~X&WJT   ;eMQMe+jNQNj!m Bl W4W NW6W HXBX >WJX FW                 LX       <~X JSEX 6WCV?V@W7ZMW  *W #W   !V      !W -X6X =X 4Z  GX#~ /X NX5X @X >X4X \"\n\"/X     De J~X Je DX 8U@V:WDV>|\\\"X3X$X ,X-Y*X -X .X*X+X/X'X -X -XB[ FX -XA\\\\AX0X=XKX'X*Y,X .X*Y,X8Y +X AX <Y1Y KWHW ?WJV=VJW/YCY <X 7Z 4W &W (W       EW6\"\n\"W JX5X$X -X5X!X (W 0W5X MW6W MW ,W ,WIY <W ,W7W7W=W6W!X4X NX5X$X5X MW  CX EW ,W6W GXHX ?WKVDVKW!XNY :WIX =Y #X :V  MX     BUCVMVBT/W9Y IW5W#W<W FW3X!W\"\n\" *W6W EVIX ?X@W GW6W!W=Y=W3XDWDX!W=W JWCWCW\\\"X4X%X4W >W <W6W LX4X HY 7X ,X-X)ZEXEZ)X0X Lr\\\"X)X)Y  FV  GY NUHVHU Y/Y MSGVGS  !X 3XAS 6X 0W@W 8X   ;\\\\NW   \"\n\"=TEX@RDT  5XFY  BV  +TDV@WGT    %V      \\\"W6W :UGU        (YFX ,V=TEU#V0U!V=TEU<X ,|\\\"|\\\"|\\\"|\\\"|\\\"|\\\"w MX ,X -X -X -X -X -X -X -X ,X-Y+X=XKX'X*Y-X*Y-X*Y-X*Y-\"\n\"X*Y MZGZ\\\"XLW5Y,Y1Y'Y1Y'Y1Y'Y1Y GX <r GW4X$W6W MW6W MW6W MW6W MW6W MW6W MW6X NX -X -X -X -X *W ,W ,W ,W /W2W NW6W!X4X\\\"X4X\\\"X4X\\\"X4X\\\"X4X  &WIV@X NW6W MW6W\"\n\" MW6W MW6W FWIX BX5X IWIX     CWAVAW(W,W(WJR=SJW(WJR4W(W,W$W -XIX     M~X&WJS   :dLQLd+iMQNj!l @j NW4W NW6W HW@W >WJW DW                 MX       .VCV\"\n\" :SDW 6VBV?V@W6b  )W #W   !V      !V +X8X <X 5Z  FX#~ /X MW5X @X >X4X /X     Ad L~X Ld AX 8VAV:WDU=|\\\"X3X$Y -X-Y*X -X .Y+X+X/X'X -X -XA[ GX -XA\\\\AX0X<WK\"\n\"X'Y+X+X .Y+Y,X7X +X AX ;X1X JXJX ?XLW=WLX/XAY =X 7Y 3W %V (W       EW7X JX5W\\\"W ,W5X W (W 0W5X MW6W MW ,W ,WHY =W ,W7W7W=W6W W4W MX5W\\\"W5X MW  BX FW ,W6\"\n\"W FWHW >WKVDVKW\\\"XLX 9WJW =Z #X :V  MX     AUEVKVDU/X:Y IW5W#W<W EW4W!X *W6W EVJX >X@W GW6W!W=Y=W2WDWDW W=W JWCWCW\\\"X4W#W4W >W <W6W LW2W IY 6X ,Y/Y(ZFXF\"\n\"Z(X0X Kp!Y+X'Y  GV  HY NWIVIW Y1Y MUHVHU  \\\"X 2WAS 6X 0YDY 8X   :c   <TE[FUDS  3XFY  CV  *SDV@WGS    $V      \\\"W6W :UGU        )YFX ,V=TDU$V0V\\\"V=TDU=X +\"\n\"|\\\"|\\\"|\\\"|\\\"|\\\"|#x MY -X -X -X -X -X -X -X -X ,X-Y+X<WKX'Y+X,Y+X,Y+X,Y+X,Y+X MZEZ#YNW4X*X1X%X1X%X1X%X1X FX <p EW4X$W7X MW7X MW7X MW7X MW7X MW7X MW7Y MW ,W \"\n\",W ,W ,W *W ,W ,W ,W .W4W MW6W W4W W4W W4W W4W W4W  $WKV?W MW6W MW6W MW6W MW6W EWJW AX5W GWJW     BXBVBW'X.W'XJP;QJW'XJP4W'X.W#V ,XIW     L~X%WLT   :d\"\n\"LQLc*iMQMi k ?i NW4W NW6W IX@X ?XLX DW                 MY       0VBV :SDW 7VAV?V@X6a  )W #W   !V      !V +X8X <X 6Z  EX#~ 0Y MW5X AY >X4X 0X     =d ~X\"\n\" d   LUAW<XEV>X2X#X3X#X -X.Y)X -X -X+X+X/X'X -X -X@[ HX -X@Z@X0X<XLX&X+X+X -X+X+X7Y ,X AX ;X1X JXJX ?XLV;VLX0YAY =X 8Z 3W %V (W       EW7X JX5W\\\"W ,W5X\"\n\" W (W 0W5X MW6W MW ,W ,WGY >W ,W7W7W=W6W W4W MX5W\\\"W5X MW  BX FW ,W7X FWHW >WLVBVLW#YKX :WJW =Y !W :V  MW     @VHXJWHV-W:Y IW5W#W<W EW4W!W )W6W EWKX ?X\"\n\"?X HW6W!X>Y>W1WDWDW W=W JWCWCW\\\"X4W#W4W >W <W6W MX2X KY 5X +Y1Y'[GXH\\\\(X0X Jn NX+X&Y  HV  IY NYJVJY Y3Y MWIVIW  #X 2WAS 6X 0[H[ 8X :V %`   :TEiET  2YGY \"\n\" DV  *TEV?WIT    $V      \\\"W6W :UGU        *YGY ,V<SCU%V0V\\\"V<SCU=X ,X2X$X2X$X2X$X2X$X2X$X2X$X8X LX -X -X -X -X -X -X -X -X ,X.Y*X<XLX&X+X+X+X+X+X+X+X+X\"\n\"+X NZCZ#`3X*X1X%X1X%X1X%X1X FX <m BW3W$W7X MW7X MW7X MW7X MW7X MW7X MW7Y MW ,W ,W ,W ,W *W ,W ,W ,W .W4W MW6W W4W W4W W4W W4W W4W 5Z IWLV>W MW7X MW7X \"\n\"MW7X MW7X EWJW AX5W GWJW     AXCVCW%X0W%X0W%X0W%X0W\\\"V +WJX     ?X 2WLT   9bKQKb)gLQMh Mi =g MW4W MV6W IX@X ?XLX CW                 MX       0VBV :SDW \"\n\"7VAV?V@X5_  (W #W   !V      \\\"W +X8X <X 7Z  DX 5X 'X LX7X @X =X4X 0X     ;e   Le   JUAW<XFV=X1W#X3X#Y .X.Y)X -X -Y,X+X/X'X -X -X?[ IX -X@Z@X0X;XMX&Y-Y+\"\n\"X -Y-Y+X6X ,X AX ;X1X IXLX >XLV;VLX1Y?Y >X 9Z 2W %W )W       EW7X JX5W\\\"X -W5X X )W 0X7Y MW6W MW ,W ,WFY ?W ,W7W7W=W6W W4W MX5W\\\"W5X MW  AW FW ,W7X FXJX\"\n\" =WMVBVMW#YJY ;WKX >Y  W :V  MW     ?dId,W;Z IW5W#W=W DW4W!W )W6W DVKW >X>W HW6W W>Y>W1WDWDW W=W JWCWDX\\\"X4W#W4W >W ;V7W LX2X LY 4X *X1X%]JXJ]'X0X Hj L\"\n\"Y-Y%Y  IV  JY LYKVKY MY5Y MYJVJY  $X 2XBS 6X 2q 9X :V #\\\\   7TDgFT  /XFX  EV  )TFV>VJT    #V      \\\"W6W :UGU        +XFX *V=TCU%V1V!V=TCU=X ,X1W$X1W$X1W\"\n\"$X1W$X1W$X2X%X7X LY .X -X -X -X -X -X -X -X ,X.Y*X;XMX&Y-Y+Y-Y+Y-Y+Y-Y+Y-Y ZAZ$_3Y*X1X%X1X%X1X%X1X FX <i >W3W$W7X MW7X MW7X MW7X MW7X MW7X MW7Z NX -X \"\n\"-X -X -X +W ,W ,W ,W .W4W MW6W W4W W4W W4W W4W W4W 5Z IWMV=W MW7X MW7X MW7X MW7X EWKX AX5W GWKX     @XDVDX$X2X$X2X$X2X$X2X\\\"V +XKW     ?X 1WMT   7`JQKa\"\n\"'fLQLf Kg <f LW4W MW8W HW>W >WLW BX                 NY       1VBV :SDW 8V@V?V?W4]  &V $W    V      \\\"V *Y:Y <X 8Z  DY 5X 'X KW7X @X =X5Y 1Y     8e  #e \"\n\"  GU@W>YGW>X0X$X4Y\\\"Y /X/Y(X -X ,Y-X+X/X'X -X -X>[ JX -X@Z@X0X;XMX%Y/Y*X ,Y/Y*X6Y -X AX ;Y3Y IXLX =WLV;VLW0X=Y ?X :Z 1W $V )W       EW8Y JY7X\\\"X -X7Y X \"\n\")W 0X7Y MW6W MW ,W ,WEY @W ,W7W7W=W6W X6X MY7X\\\"X7Y MW  AW FW ,X8X EWJW <WMVBVMW#XHX :WLW >Y  NW :V  MW     >bGc,W;[ JW6X#W=W DX6X!W )W6W DVLX >W=X IW7\"\n\"X W>Y>W1XEWEX W=W IWDWDW!Y6X#X6X >W ;W8W MX0X MY 4X *Y3Y$^LXL^&X0X Ff IY/Y#Y  JV  KY JYLVLY KY7Y KYKVKY  #X 2XBS 6X 3t ;X :V ![   8TCfFT  .XFX  FV  )U\"\n\"GV>WKT            MW7X :UGU        ,XFX *V=TBU&V2W!V=TBU=X -X0X&X0X&X0X&X0X&X0X&X0W%X7X KY /X -X -X -X -X -X -X -X ,X/Y)X;XMX%Y/Y)Y/Y)Y/Y)Y/Y)Y/Y Z?Z$\"\n\"^4Y)Y3Y%Y3Y%Y3Y%Y3Y FX <X -W3W$W8Y MW8Y MW8Y MW8Y MW8Y MW8Y MW8[ NX -X -X -X -X +W ,W ,W ,W .X6X MW6W X6X X6X X6X X6X X6X 5Z I_=X MX8X MX8X MX8X MX8X \"\n\"DWLW @Y7X FWLW     >XEVFY\\\"X5Y\\\"X5Y\\\"X5Y\\\"X5Y!V *WLX     @X /WNT   7`JQJ_&eKQKe Je :d KW4W MW8W HW>X ?XNX AX                 Y       1VCV 9SDW 9V?V?V?X4\\\\ \"\n\" &W %W    V      \\\"V )X:X ;X 9Z  CX 4X (Y KW7X AX <Y6Y 1X     4e  )e   DVAX@ZHW=X0X$X4Y\\\"Y*P&X0Z(X -X ,Y-X+X/X'X -X -X=[ KX -X?X?X0X:XNX%Y/Y*X ,Y/Y*X5X \"\n\".Y AX :X3X HXLX =XNW;WNX1Y=Y ?X ;Z 0W $V )W       EW8Y JY7W W ,W7Y NX *W /W8Z MW6W MW ,W ,WDY AW ,W7W7W=W6W NW6W LY7W W7Y MW  AW FW ,X9Y EWJW <WMVBVMW\"\n\"$XFX ;WMX ?Y  MW :V  MW     =`Ea+X<[ JW6W\\\"W>W BW6W W )W6W DWMX ?X=X IX8X W?[?W0WEWEW NW=W IWDWDW!Y6W!W6W =W ;W8W MX0X NY 3X )Y5Y\\\"z%X0X C` FY/Y\\\"X  JV  \"\n\"KX HYMVMY IX7X IYLVLY  \\\"X 1XCS 6X 4v <X :V  [   8TBbET  ,WEW  FV  (T$T            LX8X :UGU        ,WEW )V=m,V3W V=mCX -X0X&X0X&X0X&X0X&X0X&X0X&X7X KY\"\n\"*P&X -X -X -X -X -X -X -X ,X0Z)X:XNX%Y/Y)Y/Y)Y/Y)Y/Y)Y/Y!Z=Z%]3Y(X3X#X3X#X3X#X3X EX <X -W3W$W8Y MW8Y MW8Y MW8Y MW8Y MW8Y MW8[ MW ,X -X -X -X ,W ,W ,W \"\n\",W -W6W LW6W NW6W MW6W MW6W MW6W MW6W 4Z H^=W LX9Y MX9Y MX9Y MX9Y DWMX @Y7W EWMX     =Y8Y Y8Y Y8Y Y8Y Y8Y V *WLX     AX .WNT   6^IQI]$cKRJc Id 8c KW4W\"\n\" MX:X IX>X ?XNX AY                 Y4P       VBV 9SDW 9V?V?V?Y4Z  %W %W    V      #W )X:X ;X :Z  CY 4X (Y KX9Y AX ;X6X 1Y     1e  /e   @U@XB[JX<X/W$X4\"\n\"X Y,Q&X1Z'X -X +Y.X+X/X'X -X -X<[ LX -X?X?X0X:XNX$Y1Y)X +Y1Y)X5Y /X @X :X4Y GXNX <XNV9VNX2Y;Y @X ;Y /W $W *W       EW9Z JZ9X X -X9Z NX *W /X9Z MW6W MW\"\n\" ,W ,WCY BW ,W7W7W=W6W NX8X LZ9X X9Z MW  AW FW +W9Y EXLX <WNV@VNW%YEX ;WNW ?Y  LW :V  MW     <^C_)W=\\\\ JX7W\\\"W>W BX8X W )W6W CVNX >W;W IX8X X@[@X0XFWEW \"\n\"NW=W IWDWEX!Z8X!X8X =W :W:W LX0X Y 2X (Y7Y Nv#X0X ?X AY1Y V  IV  JV FYNVNY GV5V GYMVMY  !X 1XCS 6X 5x =X :V  MZ   8T?ZBT  *VDV  FV  'T&T            KX\"\n\"8X :UGU        ,VDV )V<m-V3V NV<mCX -X/W&X/W&X/W&X/W&X/W&X0X'X6X JY,Q&X -X -X -X -X -X -X -X ,X1Z(X:XNX$Y1Y'Y1Y'Y1Y'Y1Y'Y1Y!Z;Z%[3Y'X4Y#X4Y#X4Y#X4Y EX\"\n\" <X -W3W$W9Z MW9Z MW9Z MW9Z MW9Z MW9Z MW9] NX -X -X -X -X ,W ,W ,W ,W -X8X LW6W NX8X MX8X MX8X MX8X MX8X 4Z H]=X KW9Y LW9Y LW9Y LW9Y CWNW ?Z9X DWNW   \"\n\"  ;Y;Z MY;Z MY;Z MY;Z MY;Z NV *XMW     AY -[   3ZHRH[\\\"aJRI` Fb 6a JW4W LW:W HX=W >WNX @Y                !Z6Q       VBV KP>SEW 9V>WAW>X3Z  &W %W    V  \"\n\"    #V 'X<X :X ;Z  BY 4X )Y IW9X AY ;Y8Y 2Y     .d  1d   >U?ZH^MZ<X.X%X5Y NY.R&X2Z&X -X *Y/X+X/X'X -X -X;[ MX -X&X0X9a$Z3Y(X *Y3Y(X4X$P-Y @X :Y5Y GXNX\"\n\" <XNV9VNX2X9Y AX <Z /W #V *W       EX:Z JZ9X NX .X9Z MX +W .X;[ MW6W MW ,W ,WBY CW ,W7W7W=W6W NX9Y LZ9X X9Z MW  AW FW +W:Z DWLW :^@^$XDY <WNW @Z  LW :\"\n\"V  MW     ;\\\\@['X>\\\\ JX8X\\\"W?W AX9Y X *W6W CVNX ?X;X JX9Y NW@[@W/XFWFX NW=W IXEWEX!Z8X!X8W ;W ;W;X MX.X\\\"Y 1X 'Y9Y Lt\\\"X0X ?X @Y3Y MT  HV  IT Dj ET3T EYNVN\"\n\"Y   X 0XDS 6X 6ZM`LY >X :V  LY   7T)T  (UCU     ET(T            JX9Y :UGU        ,UCU )V;m.V3V NV;mCY7P HX.X(X.X(X.X(X.X(X.X(X.X(X6X IY.R&X -X -X -X -\"\n\"X -X -X -X ,X2Z'X9a$Z3Y&Z3Y&Z3Y&Z3Y&Z3Y!Z9Z&Z3Y&Y5Y#Y5Y#Y5Y#Y5Y EX <X -W3W$X:Z MX:Z MX:Z MX:Z MX:Z MX:Z MX:^ NX -X -X -X -X -W ,W ,W ,W -X8X LW6W NX9Y\"\n\" MX9Y MX9Y MX9Y MX9Y 4Z H\\\\=Y KW:Z LW:Z LW:Z LW:Z CWNW ?Z9X DWNW     :[@[ K[@[ K[@[ K[@[ K[@[ MV )WNX     AX ,[   1WGRFW N_IRH^ Da 5_ IW4W LX<X HW<W >`\"\n\" >Y                !Y8S   MX   +VBV KQ?SFX 9V=VAV=Y6]  &V &W    NV BX   1X 1V 'Y>Y :X <Z  BY 3X GP3Z IX;Y AX :Y9Z 2X GX -X  7a  1a .X 6V@iNa;X.X%X6Z N\"\n\"Z1T&X4\\\\&X -X *Z0X+X/X'X -X -X:[ NX -X&X0X9a#Z5Z(X *Z5Z(X4Y%R/Y @X 9Y7Y EWNW :WNV9VNW2Y9Y AX =Z .W #V *W       EX;[ J[;X MY .X;[ MY2P JW .Y=\\\\ MW6W MW ,\"\n\"W ,WAY DW ,W7W7W=W6W MX:X K[;X MX;[ MW /P4X FX ,X<[ DXNX :^@^%XBX <` @Y  KW :V  MW     8V;W%X?^ KY9X!V@X @X:X NX *W6W C_ >X:W JY;Z NXB]BX.XGWGX MW=W H\"\n\"XFWFX [:X NX:X ;W :W<W LX.X\\\"Y 1X &Y;Y Ip X0X ?X @Z5Z LR  GV  HR Bh CR1R Cj   NX 0YES 6X 7ZJ\\\\IY ?X :V  KY   8U+U  'TBT     DU+T            IY;Z :UGU   \"\n\"     ,TBT (V;m.V4V MV;mCY8Q HX.X(X.X(X.X(X.X(X.X(X.X)X5X IZ1T&X -X -X -X -X -X -X -X ,X4\\\\'X9a#Z5Z%Z5Z%Z5Z%Z5Z%Z5Z\\\"Z7Z&Z5Z%Y7Y!Y7Y!Y7Y!Y7Y DX <X -W4X$X\"\n\";[ MX;[ MX;[ MX;[ MX;[ MX;[ MX;`3P=Y .Y2P LY2P LY2P LY2P LW ,W ,W ,W ,X:X KW6W MX:X KX:X KX:X KX:X KX:X 3Z GZ<X JX<[ LX<[ LX<[ LX<[ C` ?[;X C`     9_J\"\n\"_ I_J_ I_J_ I_J_ I_J_ LV )`     AX +Z    S <[GRFZ A_ 4^ HW4W KX>X HX<X ?` =Z                \\\"Y:T   MX   +VCV JSASFX :V<VAV<Y8_  'W 'W    NV BX   1X 2W\"\n\" &X>X 9X =Z 1P2Z 3X GQ5Z GX=Y @X 9Y:Y KP8Z GX -X  4^  1^ +X 5U?gM_9W,W%X7Z L[4U&X6]%X -X )[2X+X/X'X -X -X9[ X -X&X0X8`\\\"Z7Z'X )Z7Z'X3X%T2Y ?X 9Z9Z E` :\"\n\"_9_3Y7Y BX >Z -W #W +W       DX=\\\\ J\\\\=Y LY7P HY=\\\\ LY5R JW -Y?] MW6W MW ,W ,W@Y EW ,W7W7W=W6W MY<Y K\\\\=Y MY=\\\\ MW /R6W DW ,Y=[ CWNW 9^@^&X@X <^ @Y  JW :V \"\n\" MW       HXA` LZ;X V@W ?Y<Y MX +W6W B^ ?X9W JZ<Z NXB]BX.YHWHY MW=W HYGWGY \\\\<Y NY<X :W :X>X LX.X#Y 0X %Y=Z Gl MX0X ?X ?Z7Z JP  FV  GP @f AP/P Ah   MX \"\n\"/YFSDP BX 8ZFVEY @X :V  JX   7V.U  %SAS     CU.U            HZ<Z :UGU        ,SAS (V:m/V5W MV:mBY;S HW,W(W,W(W,W(W,W(W,W(X.X)X5X H[4U&X -X -X -X -X -X\"\n\" -X -X ,X6]&X8`\\\"Z7Z#Z7Z#Z7Z#Z7Z#Z7Z\\\"Z5Z&[8Z$Z9Z!Z9Z!Z9Z!Z9Z DX <X -W4W\\\"X=\\\\ LX=\\\\ LX=\\\\ LX=\\\\ LX=\\\\ LX=\\\\ LX=b6R<Y7P GY5R KY5R KY5R KY5R LW ,W ,W ,W ,Y<Y KW\"\n\"6W MY<Y KY<Y KY<Y KY<Y KY<Y 3Z GY<Y JY=[ LY=[ LY=[ LY=[ B^ >\\\\=Y B^     7r Gr Gr Gr Gr KV (_     BX )Y    S 8RBSCR <] 2\\\\ GW4W KZBZ HX;W >_ <[          \"\n\"      $[=U   MX   ,VBV JUCSHY :V;WCW<[<b  (W 'W    NV BX   1X 2W &Y@Y 9X >Z 0R5Z 2X GT9[ GY?Z AY 9[>[ KR;Z FX -X  1[  1[ (X 5V>dL^9X,X&X9[ J[7W&X9_$X \"\n\"-X (\\\\6Z+X/X'X -X -X8[!X -X&X0X8`![;[&X ([;[&X3Y&W7[ ?X 8Z;Z D` :^7^3X5Y CX ?Z ,W #W +W       DY?] J]?Y KZ:R GY?] LZ8T JW -ZA^ MW6W MW ,W ,W?Y FW ,W7W7\"\n\"W=W6W LY>Y J]?Y KY?] MW /T9X DX ,Y@] CWNW 9]>]'Y@Y =^ AY  IW :V  MW       HYCXNW L\\\\>Y VAX >Y>Y LY ,W6W B] >X9X K[>[ MXDVMVDX,YIWIY LW=W GYHWHY N]>Y LY\"\n\">Y :X :X@X LX,X%Y /X $ZAZ Ch KX0X ?X >[;[   ?V   6d   >f   LX /[HSFR BX 9Z3Y AX :V  IX   7V1V  #R@R     BU0U            G[>[ :UGU        ,R@R 'V(U)V6W\"\n\" LV(U<Z>U IX,X*X,X*X,X*X,X*X,X*X,X*W4X G[7W&X -X -X -X -X -X -X -X ,X9_%X8`![;[![;[![;[![;[![;[\\\"Z3Z(];[\\\"Z;Z NZ;Z NZ;Z NZ;Z CX <X -WJP;X\\\"Y?] LY?] LY?] \"\n\"LY?] LY?] LY?] LY?XNZ9T<Z:R GZ8T KZ8T KZ8T KZ8T LW ,W ,W ,W +Y>Y JW6W LY>Y IY>Y IY>Y IY>Y IY>Y 2Z FY>Y HY@] KY@] KY@] KY@] B^ >]?Y A^     6o Do Do Do \"\n\"Do IV (_     CX (Y    S (S ,[ 0[ GW4W J\\\\H\\\\ GW:W >^ :\\\\                %[@W   MX   ,VBV JXFSIZ :V:WEW:\\\\@e  (V 'V    MV BX   1X 2V $ZDZ 8X ?Z /U;] 2X GV=\"\n\"\\\\ EZC[ @X 7[@[ JT?[ EX -X  /Y  1Y &X 5V=bK\\\\7X,X&X<^ I]=Z&X=b#X -X ']:\\\\+X/X'X -X -X7[\\\"X -X&X0X7_ \\\\?\\\\%X '\\\\?\\\\%X2X&Z<\\\\ >X 7[?[ B^ 9^7^4Y5Y CX ?Y +W \\\"V +W \"\n\"      DZB_ J_CZ I[>T G[C_ K[=W JW ,\\\\GXNW MW6W MW ,W ,W>Y GW ,W7W7W=W6W KZBZ I_CZ J[C_ MW /W>Z DZ .ZB^ C` 8\\\\>\\\\&X>Y =\\\\ AY  HW :V  MW       GZFYNY N]AZ N\"\n\"WCX <ZBZ JZ:Q EW6W B] ?X7W K\\\\A^ NYFWMWFY,ZJWJY KW=X H[JWJ[ N_BZ JZBZ 8Y <ZDZ LX,X&Y .X #ZCZ >_ FX0X ?X =\\\\?\\\\   >V   5b   <d   KX .\\\\JSHT BX 8X2X @X :V  \"\n\"IX   5V4U   Q?Q     AV4V            F\\\\A^ ;UGU        ,Q?Q 'V'U*V6W LV'U<[AW IX,X*X,X*X,X*X,X*X,X*X,X+X4X F]=Z&X -X -X -X -X -X -X -X ,X=b$X7_ \\\\?\\\\ N\\\\?\\\\\"\n\" N\\\\?\\\\ N\\\\?\\\\ N\\\\?\\\\ X1X(`?\\\\ [?[ L[?[ L[?[ L[?[ BX <X -WJS@Z\\\"ZB_ LZB_ LZB_ LZB_ LZB_ LZB_ LZBYM\\\\>W;[>T F[=W J[=W J[=W J[=W LW ,W ,W ,W *ZBZ IW6W KZBZ GZBZ \"\n\"GZBZ GZBZ GZBZ 1Z F[BZ GZB^ KZB^ KZB^ KZB^ A\\\\ =_CZ ?\\\\     3l Al Al Al Al HV (^     BX (X    NS (S ,Z .Y FW4W In GX:X ?^ 9_                (]FZ   MX   \"\n\",VBV J[ISL\\\\ :V9XGX9^Fi  )W )W    MV BX   1X 3W #[H[ Et Mx MZC_ 1X GZD^ C[G\\\\ @Y 7^F] IXF] DX -X  ,V  1V #X 4V<^IY5X*X'y G_D^&{!y NX &`B`+X/X'X -X -X6[#\"\n\"w LX&X0X7_ N^E^$X &^E^$X2Y'^C^ =X 7^E^ B^ 8]7]4Y3Y DX @~U&W \\\"W ,W       C\\\\HYNW JWNXG\\\\ H]EX F\\\\GXNW J]D[ JW +kMW MW6W MW ,W ,W=Y HW ,W7W7W=W6W K]H] IWNX\"\n\"G\\\\ I\\\\GXNW MW /[E\\\\ Be 9[GXNW B^ 7\\\\>\\\\'X<X =\\\\ AX  GW :V  MW       G\\\\IYM^$`F\\\\ MWEX ;]H] J]BV EW6W A\\\\ ?X7X L_GaKP#ZJYMYJZ*[LWL[ KW=Y H\\\\LWL\\\\ MWNXG] J]H\\\\ 7a \"\n\"C[H[ L~W'x MX 1iEi HX CX0X ?X <^E^   =V   4`   :b   JX -^MSLX Lz V0V ?X :V  HW   4V7V   MP>P     @W8W    3~W      :_GaKP @UGU        ,P>P 'V&U+V6V KV&\"\n\"U;]GZ JX*X,X*X,X*X,X*X,X*X,Y,Y,X4y7_D^&y Ny Ny Ny NX -X -X -X ,{\\\"X7_ N^E^ L^E^ L^E^ L^E^ L^E^ MV/V(dE^ N^E^ L^E^ L^E^ L^E^ BX <X -WJWF[ \\\\HYNW K\\\\HYNW K\"\n\"\\\\HYNW K\\\\HYNW K\\\\HYNW K\\\\HYNW K\\\\H[K^E[:]EX E]D[ I]D[ I]D[ I]D[ LW ,W ,W ,W )[F[ HW6W K]H] G]H] G]H] G]H] G]H] 1Z F]G] F[GXNW J[GXNW J[GXNW J[GXNW A\\\\ =WNX\"\n\"G\\\\ ?\\\\     1h =h =h =h =h FV ']     AV &W    T )T +X -X EW4W Hl FX9W ?^ 8~R                Jp   MX   ,VCV It 9V8XIX7sLZ  *W )W    MV BX   1X 3W #n Et M\"\n\"x Mu 0X Gs Ao @X 5t In CX -X  )S  1S  X 4V9XFU1X*X'x Ex&z y NX %|*X/X'X -X -X5[$w LX&X0X6^ Mu#X %u#X1X'y =X 6u A^ 8]7]4X1X DX @~U&W \\\"W ,W       ClMW J\"\n\"WMk Fo EkMW Is JW *jMW MW6W MW ,W ,W<Y IW ,W7W7W=W6W Jp HWMk GkMW MW /q Ae 9kMW B^ 7\\\\=[(Y;X >\\\\ Av 6W :V  MW       FkL]$u LXGX 9p Hp EW6W A[ ?X6X LpN\\\\#\"\n\"hKh)s JW<] Lu LWNm Hp 6` Bl K~W'x MX 1iEi HX CX0X ?X ;u   <V   3^   8`   IX ,o Lz NT.T >X :V  HW   3X=X        )X<X    2~W      :pN\\\\ @UGU           V&\"\n\"U+V7i.V&U:o JX*X,X*X,X*X,X*X,X*X,X*X-X3y6x&y Ny Ny Ny NX -X -X -X ,z!X6^ Mu Ju Ju Ju Ju KT-T(} Lu Ju Ju Ju AX <X -WJk NlMW KlMW KlMW KlMW KlMW KlMW Kn\"\n\"Is9o Ds Hs Hs Hs LW ,W ,W ,W )p HW6W Jp Ep Ep Ep Ep   Ls EkMW JkMW JkMW JkMW A\\\\ =WMk >\\\\     /c 8c 8c 8c 8c CV '\\\\     ?T %W    U *T *W ,V DW4W Gj EW8W \"\n\">\\\\ 5~P                In   LX   -VBV Is 9V7g6qJZ  *V )V    LV BX   1X 3V !l Dt Mx Mt /X Gr ?m ?X 4r Hm BX -X  &P  1P  LX 3V 3X*X'w Cv%x My NX #x(X/X'X\"\n\" -X -X4[%w LX&X0X5] Ls\\\"X $s\\\"X1Y(w ;X 5s ?\\\\ 7\\\\5\\\\5Y1Y EX @~U&W !V ,W       BjLW JWMj Dn DjMW Hr JW )hLW MW6W MW ,W ,W;Y JW ,W7W7W=W6W In GWMj EjMW MW /p\"\n\" ?d 8iLW B^ 6Z<[)Y:Y >Z @v 6W :V  MW       EiK]$t JYLZ 7n Fo EW6W A[ ?X5W LWNfM\\\\\\\"gKg'q IW<] Ks KWMk Fn 5` Aj J~W'x MX 1iEi HX CX0X ?X :s   ;V   2\\\\   6\"\n\"^   HX +n Lz MR,R =X :V  HW   1ZEZ        %ZDZ    0~W      :WNfM\\\\ @UGU          !V%U,V6i/V%U9n JX*X,X*X,X*X,X*X,X*X,X*X-X3y5v%y Ny Ny Ny NX -X -X -X ,\"\n\"x NX5] Ls Hs Hs Hs Hs IR+R(WMs Js Hs Hs Hs @X <X -WJk MjLW JjLW JjLW JjLW JjLW JjLW JmHr8n Cr Gr Gr Gr LW ,W ,W ,W (n GW6W In Cn Cn Cn Cn   Ls CiLW Ii\"\n\"LW IiLW IiLW @Z <WMj <Z     +] 2] 2] 2] 2] @V &[     >R $V    NU *U *U *U DW4W Fh DW8X ?\\\\ 4~                Hl   KX   -VBV Hp 8V5e4nGZ  +W +W    LV BX\"\n\"   1X 3V  j Ct Mx Mr -X Gq =j >Y 3p Gl AX -X       2X 3W 5X(X(u ?s$v Ky NX \\\"v'X/X'X -X -X3[&w LX&X0X5] Kq!X #p X0X(v :X 4p =\\\\ 7\\\\5\\\\6Y/Y FX @~U&W !V ,W \"\n\"      AhKW JWLh Bm ChLW Gq JW (eJW MW6W MW ,W ,W:Y KW ,W7W7W=W6W Hl FWLh ChLW MW /o >d 7gKW A\\\\ 5Z<Z(X8X >Z @v 6W :V  MW       DgI\\\\$s He 5l Dn EW6W @Y \"\n\">W4X MWMeM\\\\!eIe%o HW<] Jq JWLi Dk 2_ @h J~Y(x MX 1iEi HX CX0X ?X 9q   :V   1Z   4\\\\   GX *m Lz LP*P <X :V  HW   0m        \\\"l    .~W      :WMeM\\\\ @UGU   \"\n\"       !V%U,V6i/V%U8l JX(X.X(X.X(X.X(X.X(X.Y)X/X2y3s$y Ny Ny Ny NX -X -X -X ,v LX5] Kq Fq Fq Fq Fq GP)P'VKp Gp Ep Ep Ep >X <X -WJj KhKW IhKW IhKW IhKW\"\n\" IhKW IhKW IjEq7m Bq Fq Fq Fq LW ,W ,W ,W &j EW6W Hl Al Al Al Al   Ls AgKW HgKW HgKW HgKW @Z <WLh ;Z               MV &[     =P \\\"U    V +V )S (S CW4W \"\n\"De DX8X ?\\\\ 2|                Fh   IX   -VBV Ek 6V4c1kEZ  +V +V    KV BW   0X 4W  Mf At Mx Mq ,X Go :h =X 0l Ej ?X -W       1X 2W 6X(X(s ;o\\\"s Hy NX  r%\"\n\"X/X'X -X -X2['w LX&X0X4\\\\ Im NX !m NX0Y(t 9X 2m ;Z 5[5[5X-X FX @~U&W !W -W       @fJW JWJe ?j AeJW En IW 'cIW MW6W MW ,W ,W9Y LW ,W7W7W=W6W Fh DWJe AeJ\"\n\"W MW .m ;b 6eJW A\\\\ 5Z<Z)X6X >X ?v 6W :V  MW       CeG[$r Fc 2h Am EW6W @Y ?X3W MWMdL\\\\ cGc#m GW;\\\\ Hm HWKg Ah /] ?f I~Y(x MX 1iEi HX CX0X ?X 7m   8V   0\"\n\"X   2Z   FX (j Kz   AX :V  HW   -g         Lh    ,~W      :WMdL\\\\ @UGU          \\\"V$U-V5i0V$U7i HX(X.X(X.X(X.X(X.X(X.X(X/X2y1o\\\"y Ny Ny Ny NX -X -X -X ,t\"\n\" JX4\\\\ Im Bm Bm Bm Bm  %VHm Dm Bm Bm Bm =X <X -WJh HfJW HfJW HfJW HfJW HfJW HfJW HhBn4j ?n Cn Cn Cn KW ,W ,W ,W %h DW6W Fh =h =h =h =h   KVMi >eJW GeJW\"\n\" GeJW GeJW ?X ;WJe 9X               MW &Z       =U    W ,W *R &Q BW4W B` AW6W >[ /y                Dd   GX   -VCV Af 5V2a.gBZ  ,W -W    KV CX   0X 4V \"\n\" Kd @t Mx Km *X Ek 6d ;X .h Bh >X .X       1X 1W 7X(X(q 7j Np Ey NX  Mm\\\"X/X'X -X -X1[(w LX&X0X4\\\\ Gi LX  Ni LX/X$n 7X 0i 9Z 5[5[6Y-Y GX @~U&W  V -W    \"\n\"   >cIW JWIb <g =bIW Ci FW %_GW MW6W MW ,W ,W8Y MW ,W7W7W=W6W Ef CWIb =bIW MW +h 8a 5cIW @Z 4Y:Y*Y5X ?X ?v 6W :V  MW       AbDY$WMf Ca 0f >k EW6W @Y ?\"\n\"W2W MWK`I[ NaEa i EW;\\\\ Fi FWIc >e ,\\\\ =b G~Y(x MX 1iEi HX CX0X ?X 5i   6V   /V   0X   EX &f Iz   AX :V /P;W   *c         Gb    )~W      :WK`I[ @UGU    \"\n\"      #V#U.V4i1V#U6f FX(X.X(X.X(X.X(X.X(X.X(X/X2y/j Ny Ny Ny Ny NX -X -X -X ,p FX4\\\\ Gi >i >i >i >i  $VEi @i >i >i >i ;X <X -WIf EcIW FcIW FcIW FcIW Fc\"\n\"IW FcIW Fd>i0g ;i >i >i >i HW ,W ,W ,W #d BW6W Ef ;f ;f ;f ;f   JUJe ;cIW FcIW FcIW FcIW ?X ;WIb 7X               MW %Y       =T    X -X )P %P AW4W ?Z\"\n\" >W6X ?Z ,w                B`   EX   .VBV <] 1V0]*b?[  -W -W    KV CW   /X 4V  I` >t Mx Hg 'X Bf 2` :X +d =b ;X .W       0X 1X 9X&X)m 0d Kj ?y NX  Jg \"\n\"NX/X'X -X -X0[)w LX&X0X3[ Dc IX  Kf LX/Y!g 4X .e 7Z 5Z3Z7Y+Y HX @~U&W  V -W       =`GW JWG^ 7b 9^GW Ad CW \\\"YDW MW6W MW ,W ,W7Y NW ,W7W7W=W6W B` @WG^ 9\"\n\"^GW MW (c 2] 3_GW @Z 3X:X*Y4Y @X ?v 6W :V  MW       ?_AW$WKb @^ +` 9g CW6W ?W ?X2X NWJ^GY K]B^ Ke CW:[ Dd CWG_ 9` 'Y ;^ F~[)x MX 1iEi HX CX0X ?X 2c   \"\n\"3V   .T   .V   DX $b Gz   AX :V /R>X   &[         ?Z    %~W      :WJ^GY ?UGU          #V +V +V 1b EX&X0X&X0X&X0X&X0X&X0Y'X1X1y,d Ky Ny Ny Ny NX -X -X \"\n\"-X ,j @X3[ Dc 8c 8c 8c 8c  !VBc ;e :e :e :e 9X <X -WFa B`GW E`GW E`GW E`GW E`GW E`GW D`:d*b 7d 9d 9d 9d EW ,W ,W ,W !` @W6W B` 5` 5` 5` 5`   HVHa 7_GW\"\n\" D_GW D_GW D_GW ?X ;WG^ 5X               MW         7S                   @r                >Y         BS .V,W#Z   ;V -V     7W     ;W  EX     ;\\\\   6] \"\n\"+Z   5\\\\ 5Z   <W         7X     %\\\\       <]    \\\"X         ([   4c   E]   /[          (W  W .W       :Y #X 0Z 2X *\\\\   $W    &W         .Z =WDX 3XDW   I[\"\n\"   0Y       8W   -W :V  MW       <Z ;WH[ 9Y &Z 1]  LW ?W   >WGXBU FX=X E` \\\"W >] @WDY 3Z   2X               C[           >T     :[       KV /TAY       \"\n\"                   EWGXBU =UGU   BT       6V +V +V ,Y               ?\\\\                    +[ 0[ 0[ 0[ 0[   KT=[ 2[ 0[ 0[ 0[     7Z ;Y .Y .Y .Y .Y .Y -\"\n\"Y2\\\\\\\"Z /\\\\ 1\\\\ 1\\\\ 1\\\\         CZ   3Z /Z /Z /Z /Z   FVCZ 1Y .Y .Y .Y ,W :WDX 2W               LW         7R                                             #S\"\n\"       >W /W     8W     :V                      \\\"W         5X                  )X             &Z                  CW  NV .W                   :W    %W\"\n\"           @W  :W              -X   -W :V  MW         LW        FW ?W   >W    NW   0W =W                                      3S       GV /XGZ        \"\n\"                  DW  HUGU   AT                            %T                               'R                             JT                         \"\n\"      #T         (X :W  NX               LW                                                       7S       =V /V     7W     :V                      \\\"W\"\n\"         4X'Q                 &Y             %Z                  DW  NV .W                   :W    %W           @W  :W              -W   ,W :V  MW    \"\n\"     LW        FW ?W   >W    NW   0W =W                                      3S       GV /j                          CW  HUGU   @T                    \"\n\"        %T                               'P                             HT                               \\\"Q         'W 9W  NW               KW        \"\n\"                                               7S       =W 1W     7V     :W                      \\\"V         2X)R                 &X             #Z    \"\n\"              EW  NW /W                   :W    %W           @W  :W              -W   ,X ;V  NX         LW        FW ?W   >W    NW   0W =W            \"\n\"                          3S       GV /j                          CW  HUGU   @U                            &U                                         \"\n\"                    U                               \\\"P         'W 9W  NW               KV                                                       6S    \"\n\"   <V 1V     6V     :V                      !V         1Y-U                 'X             \\\"Z                  FW  MV /W                   ;X    %W   \"\n\"        @W  :W              .X   +W ;V  NW         KW        FW ?W   >W    NW   0W =W                                      3S       GV /h             \"\n\"             AW  HUGU   ?T                            %T                                                             NT                               \"\n\"          )X 9W  X               KV                                                       6S       <W 3V     6V     9V                      \\\"V        \"\n\" /Z1X                 (X             !Z                  Ga (V 9a                   ;W    $W           @W  :W              .W   *W ;V  NW         KW  \"\n\"      FW ?W   >W    NW   0W =W                                      3S       GV .f                          @W  HUGU   ?U                            &\"\n\"U                                                             U                                         *W 8W  W               JV                     \"\n\"                                  6S       ;V 3V     6V     :W                      \\\"V         .[5[                 *Y              Z                 \"\n\" Ha (W :a                   <X    $W           @W  :W              /X   *X <V  X         KW        FW ?W   >W    NW   0W =W                           \"\n\"           3S       GV +a                          >W  HUGU   >T                            %T                                                        \"\n\"     NT                                         +X 8W !X              (VIV                                                       6S       :V 5V     5U\"\n\"     9W                      \\\"U         +\\\\;]                 )X              MZ                  Ia (W :a                   =Y    %W           ?W  :W \"\n\"             /W   )[ ?V #[         KW        FW ?W   >W    NW   0W =W                                      3S       GV 'Z                          ;W \"\n\" HUGU   >U                            &U                                                             U                                         ,W 7W !\"\n\"W              'VIV                                                       6S       :V 6W     6V                            4V         *_C`            \"\n\"     )Y              LZ                  Ja   :a                  (P7Y    $W           ?W  :W              0X   (b GV +b         JW        FW ?W   >W \"\n\"   NW   0W =W                                      3S       GV                            7W  HUGU   >U                            &U                 \"\n\"                                            U                                         -X 7W \\\"X              'VJW                                      \"\n\"                 6S       9V 7V     5U                            3U         'x                 (Z              KZ                  Ka   :a           \"\n\"       (R:Z    $W           ?W  :W              0X   (b GV +b         JW        FW ?W   >W    NW   0W =W                                      3S      \"\n\" GV                            7W     #U                            &U                                                             U                  \"\n\"                       -X 7W \\\"X              &UJW                                                       6S       9W 9W                                \"\n\"            Bu                 ([              IZ                  La   :a                  (T>[    $X           ?W  :W              1X   &a GV +a    \"\n\"     IW        FW ?W   >W    NW   0W =W                                      3S       GV                            7W     $V                         \"\n\"   'V                                                            !V                                         .X 6W #X              %VLW                \"\n\"                                       5S                                                     2p                 -a                                   \"\n\"                    8XE]    %Y           >W  :W              3Z   $_ GV +_         GW        FW ?W   >W    NW   0W =W                                 \"\n\"     3S       GV                            7W     /QGW                            2QGW                                                            ,QG\"\n\"W                                         0Z 6W %Z              %a                                                       5S                           \"\n\"                          0l                 +a                                                       8p    +_           >W  :W              ;a   !] G\"\n\"V +]         EW        FW ?W   >W    NW   0W =W                                      3S       GV                            7W     /`                 \"\n\"           1`                                                            +`                                         7a 5W -a              #`          \"\n\"                                                                                                   >e                 '`                              \"\n\"                         7o    *^           =W  :W              ;`    KY GV +Y         AW        FW ?W   >W    NW   0W =W                             \"\n\"         3S       GV                            7W     /`                            1`                                                            +` \"\n\"                                        7` 4W -`              \\\"_                                                                                      \"\n\"                       8\\\\                 #_                                       \\\"}              3n    )^           =W  :W              ;`     9V   \"\n\"        BW        FW ?W   >W    NW   0W =W                                             'V                            7W     /_                        \"\n\"    0_                                                            *_                                         6` 4W -`              !]                 \"\n\"                                                                                                              -]                                      \"\n\"  }              3l    ']           <W  :W              ;_     8V           BW        FW ?W   >W    NW   0W =W                                        \"\n\"     'V                            7W     /^                            /^                                                            )^              \"\n\"                           5_ 3W -_               N[                                                                                                  \"\n\"                             ,[                                        M}              2j    &\\\\           ;W  :W              ;^     7V           BW  \"\n\"      FW ?W   >W    NW   0W =W                                                                          7W     -Y                            *Y       \"\n\"                                                     $Y                                         2^ 2W -^               LX                             \"\n\"                                                                                                  *X                                        J}        \"\n\"      /d    #Z           9W  :W              ;\\\\     5V           BW        FW ?W   >W    NW   0W =W                                                   \"\n\"                       7W                                                                                                                             \"\n\"            /\\\\ 0W                 HT                                                                                                                  \"\n\"                                                      I}              *[     NW           6W  :W              ;Z     3V           BW        FW ?W   >W\"\n\"    NW   0W =W                                                                          7W                                                            \"\n\"                                                                             /Z .W                                                                    \"\n\"                                                                                                                     =}                               \"\n\"                                                                                                                                                      \"\n\"                                                                                                                              D\" };\n\n    // Define a 40x38 'danger' color logo (used by cimg::dialog()).\n    static const unsigned char logo40x38[4576] = {\n      177,200,200,200,3,123,123,0,36,200,200,200,1,123,123,0,2,255,255,0,1,189,189,189,1,0,0,0,34,200,200,200,\n      1,123,123,0,4,255,255,0,1,189,189,189,1,0,0,0,1,123,123,123,32,200,200,200,1,123,123,0,5,255,255,0,1,0,0,\n      0,2,123,123,123,30,200,200,200,1,123,123,0,6,255,255,0,1,189,189,189,1,0,0,0,2,123,123,123,29,200,200,200,\n      1,123,123,0,7,255,255,0,1,0,0,0,2,123,123,123,28,200,200,200,1,123,123,0,8,255,255,0,1,189,189,189,1,0,0,0,\n      2,123,123,123,27,200,200,200,1,123,123,0,9,255,255,0,1,0,0,0,2,123,123,123,26,200,200,200,1,123,123,0,10,255,\n      255,0,1,189,189,189,1,0,0,0,2,123,123,123,25,200,200,200,1,123,123,0,3,255,255,0,1,189,189,189,3,0,0,0,1,189,\n      189,189,3,255,255,0,1,0,0,0,2,123,123,123,24,200,200,200,1,123,123,0,4,255,255,0,5,0,0,0,3,255,255,0,1,189,\n      189,189,1,0,0,0,2,123,123,123,23,200,200,200,1,123,123,0,4,255,255,0,5,0,0,0,4,255,255,0,1,0,0,0,2,123,123,123,\n      22,200,200,200,1,123,123,0,5,255,255,0,5,0,0,0,4,255,255,0,1,189,189,189,1,0,0,0,2,123,123,123,21,200,200,200,\n      1,123,123,0,5,255,255,0,5,0,0,0,5,255,255,0,1,0,0,0,2,123,123,123,20,200,200,200,1,123,123,0,6,255,255,0,5,0,0,\n      0,5,255,255,0,1,189,189,189,1,0,0,0,2,123,123,123,19,200,200,200,1,123,123,0,6,255,255,0,1,123,123,0,3,0,0,0,1,\n      123,123,0,6,255,255,0,1,0,0,0,2,123,123,123,18,200,200,200,1,123,123,0,7,255,255,0,1,189,189,189,3,0,0,0,1,189,\n      189,189,6,255,255,0,1,189,189,189,1,0,0,0,2,123,123,123,17,200,200,200,1,123,123,0,8,255,255,0,3,0,0,0,8,255,255,\n      0,1,0,0,0,2,123,123,123,16,200,200,200,1,123,123,0,9,255,255,0,1,123,123,0,1,0,0,0,1,123,123,0,8,255,255,0,1,189,\n      189,189,1,0,0,0,2,123,123,123,15,200,200,200,1,123,123,0,9,255,255,0,1,189,189,189,1,0,0,0,1,189,189,189,9,255,\n      255,0,1,0,0,0,2,123,123,123,14,200,200,200,1,123,123,0,11,255,255,0,1,0,0,0,10,255,255,0,1,189,189,189,1,0,0,0,2,\n      123,123,123,13,200,200,200,1,123,123,0,23,255,255,0,1,0,0,0,2,123,123,123,12,200,200,200,1,123,123,0,11,255,255,0,\n      1,189,189,189,2,0,0,0,1,189,189,189,9,255,255,0,1,189,189,189,1,0,0,0,2,123,123,123,11,200,200,200,1,123,123,0,11,\n      255,255,0,4,0,0,0,10,255,255,0,1,0,0,0,2,123,123,123,10,200,200,200,1,123,123,0,12,255,255,0,4,0,0,0,10,255,255,0,\n      1,189,189,189,1,0,0,0,2,123,123,123,9,200,200,200,1,123,123,0,12,255,255,0,1,189,189,189,2,0,0,0,1,189,189,189,11,\n      255,255,0,1,0,0,0,2,123,123,123,9,200,200,200,1,123,123,0,27,255,255,0,1,0,0,0,3,123,123,123,8,200,200,200,1,123,\n      123,0,26,255,255,0,1,189,189,189,1,0,0,0,3,123,123,123,9,200,200,200,1,123,123,0,24,255,255,0,1,189,189,189,1,0,0,\n      0,4,123,123,123,10,200,200,200,1,123,123,0,24,0,0,0,5,123,123,123,12,200,200,200,27,123,123,123,14,200,200,200,25,\n      123,123,123,86,200,200,200,91,49,124,118,124,71,32,124,95,49,56,114,52,82,121,0 };\n\n    //! Get/set default output stream for the \\CImg library messages.\n    /**\n       \\param file Desired output stream. Set to \\c 0 to get the currently used output stream only.\n       \\return Currently used output stream.\n    **/\n    inline std::FILE* output(std::FILE *file) {\n      cimg::mutex(1);\n      static std::FILE *res = cimg::_stderr();\n      if (file) res = file;\n      cimg::mutex(1,0);\n      return res;\n    }\n\n    // Return number of available CPU cores.\n    inline unsigned int nb_cpus() {\n      unsigned int res = 1;\n#if cimg_OS==2\n      SYSTEM_INFO sysinfo;\n      GetSystemInfo(&sysinfo);\n      res = (unsigned int)sysinfo.dwNumberOfProcessors;\n#elif cimg_OS == 1\n      res = (unsigned int)sysconf(_SC_NPROCESSORS_ONLN);\n#endif\n      return res?res:1U;\n    }\n\n    // Lock/unlock mutex for CImg multi-thread programming.\n    inline int mutex(const unsigned int n, const int lock_mode) {\n      switch (lock_mode) {\n      case 0 : cimg::Mutex_attr().unlock(n); return 0;\n      case 1 : cimg::Mutex_attr().lock(n); return 0;\n      default : return cimg::Mutex_attr().trylock(n);\n      }\n    }\n\n    //! Display a warning message on the default output stream.\n    /**\n       \\param format C-string containing the format of the message, as with <tt>std::printf()</tt>.\n       \\note If configuration macro \\c cimg_strict_warnings is set, this function throws a\n       \\c CImgWarningException instead.\n       \\warning As the first argument is a format string, it is highly recommended to write\n       \\code\n       cimg::warn(\"%s\",warning_message);\n       \\endcode\n       instead of\n       \\code\n       cimg::warn(warning_message);\n       \\endcode\n       if \\c warning_message can be arbitrary, to prevent nasty memory access.\n    **/\n    inline void warn(const char *const format, ...) {\n      if (cimg::exception_mode()>=1) {\n        char *const message = new char[16384];\n        std::va_list ap;\n        va_start(ap,format);\n        cimg_vsnprintf(message,16384,format,ap);\n        va_end(ap);\n#ifdef cimg_strict_warnings\n        throw CImgWarningException(message);\n#else\n        std::fprintf(cimg::output(),\"\\n%s[CImg] *** Warning ***%s%s\\n\",cimg::t_red,cimg::t_normal,message);\n#endif\n        delete[] message;\n      }\n    }\n\n    // Execute an external system command.\n    /**\n       \\param command C-string containing the command line to execute.\n       \\param module_name Module name.\n       \\return Status value of the executed command, whose meaning is OS-dependent.\n       \\note This function is similar to <tt>std::system()</tt>\n       but it does not open an extra console windows\n       on Windows-based systems.\n    **/\n    inline int system(const char *const command, const char *const module_name=0) {\n      cimg::unused(module_name);\n#ifdef cimg_no_system_calls\n      return -1;\n#else\n#if cimg_OS==1\n      const unsigned int l = (unsigned int)std::strlen(command);\n      if (l) {\n        char *const ncommand = new char[l + 16];\n        std::strncpy(ncommand,command,l);\n        std::strcpy(ncommand + l,\" 2> /dev/null\"); // Make command silent.\n        const int out_val = std::system(ncommand);\n        delete[] ncommand;\n        return out_val;\n      } else return -1;\n#elif cimg_OS==2\n      PROCESS_INFORMATION pi;\n      STARTUPINFO si;\n      std::memset(&pi,0,sizeof(PROCESS_INFORMATION));\n      std::memset(&si,0,sizeof(STARTUPINFO));\n      GetStartupInfo(&si);\n      si.cb = sizeof(si);\n      si.wShowWindow = SW_HIDE;\n      si.dwFlags |= SW_HIDE | STARTF_USESHOWWINDOW;\n      const BOOL res = CreateProcess((LPCTSTR)module_name,(LPTSTR)command,0,0,FALSE,0,0,0,&si,&pi);\n      if (res) {\n        WaitForSingleObject(pi.hProcess,INFINITE);\n        CloseHandle(pi.hThread);\n        CloseHandle(pi.hProcess);\n        return 0;\n      } else return std::system(command);\n#else\n      return std::system(command);\n#endif\n#endif\n    }\n\n    //! Return a reference to a temporary variable of type T.\n    template<typename T>\n    inline T& temporary(const T&) {\n      static T temp;\n      return temp;\n    }\n\n    //! Exchange values of variables \\c a and \\c b.\n    template<typename T>\n    inline void swap(T& a, T& b) { T t = a; a = b; b = t; }\n\n    //! Exchange values of variables (\\c a1,\\c a2) and (\\c b1,\\c b2).\n    template<typename T1, typename T2>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2) {\n      cimg::swap(a1,b1); cimg::swap(a2,b2);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,\\c a3) and (\\c b1,\\c b2,\\c b3).\n    template<typename T1, typename T2, typename T3>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3) {\n      cimg::swap(a1,b1,a2,b2); cimg::swap(a3,b3);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,...,\\c a4) and (\\c b1,\\c b2,...,\\c b4).\n    template<typename T1, typename T2, typename T3, typename T4>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4) {\n      cimg::swap(a1,b1,a2,b2,a3,b3); cimg::swap(a4,b4);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,...,\\c a5) and (\\c b1,\\c b2,...,\\c b5).\n    template<typename T1, typename T2, typename T3, typename T4, typename T5>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5) {\n      cimg::swap(a1,b1,a2,b2,a3,b3,a4,b4); cimg::swap(a5,b5);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,...,\\c a6) and (\\c b1,\\c b2,...,\\c b6).\n    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6) {\n      cimg::swap(a1,b1,a2,b2,a3,b3,a4,b4,a5,b5); cimg::swap(a6,b6);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,...,\\c a7) and (\\c b1,\\c b2,...,\\c b7).\n    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6,\n                     T7& a7, T7& b7) {\n      cimg::swap(a1,b1,a2,b2,a3,b3,a4,b4,a5,b5,a6,b6); cimg::swap(a7,b7);\n    }\n\n    //! Exchange values of variables (\\c a1,\\c a2,...,\\c a8) and (\\c b1,\\c b2,...,\\c b8).\n    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>\n    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6,\n                     T7& a7, T7& b7, T8& a8, T8& b8) {\n      cimg::swap(a1,b1,a2,b2,a3,b3,a4,b4,a5,b5,a6,b6,a7,b7); cimg::swap(a8,b8);\n    }\n\n    //! Return the endianness of the current architecture.\n    /**\n       \\return \\c false for <i>Little Endian</i> or \\c true for <i>Big Endian</i>.\n    **/\n    inline bool endianness() {\n      const int x = 1;\n      return ((unsigned char*)&x)[0]?false:true;\n    }\n\n    //! Reverse endianness of all elements in a memory buffer.\n    /**\n       \\param[in,out] buffer Memory buffer whose endianness must be reversed.\n       \\param size Number of buffer elements to reverse.\n    **/\n    template<typename T>\n    inline void invert_endianness(T* const buffer, const cimg_ulong size) {\n      if (size) switch (sizeof(T)) {\n        case 1 : break;\n        case 2 : { for (unsigned short *ptr = (unsigned short*)buffer + size; ptr>(unsigned short*)buffer; ) {\n              const unsigned short val = *(--ptr);\n              *ptr = (unsigned short)((val>>8)|((val<<8)));\n            }\n        } break;\n        case 4 : { for (unsigned int *ptr = (unsigned int*)buffer + size; ptr>(unsigned int*)buffer; ) {\n              const unsigned int val = *(--ptr);\n              *ptr = (val>>24)|((val>>8)&0xff00)|((val<<8)&0xff0000)|(val<<24);\n            }\n        } break;\n        default : { for (T* ptr = buffer + size; ptr>buffer; ) {\n              unsigned char *pb = (unsigned char*)(--ptr), *pe = pb + sizeof(T);\n              for (int i = 0; i<(int)sizeof(T)/2; ++i) swap(*(pb++),*(--pe));\n            }\n        }\n        }\n    }\n\n    //! Reverse endianness of a single variable.\n    /**\n       \\param[in,out] a Variable to reverse.\n       \\return Reference to reversed variable.\n    **/\n    template<typename T>\n    inline T& invert_endianness(T& a) {\n      invert_endianness(&a,1);\n      return a;\n    }\n\n    // Conversion functions to get more precision when trying to store unsigned ints values as floats.\n    inline unsigned int float2uint(const float f) {\n      int tmp = 0;\n      std::memcpy(&tmp,&f,sizeof(float));\n      if (tmp>=0) return (unsigned int)f;\n      unsigned int u;\n      // use memcpy instead of assignment to avoid undesired optimizations by C++-compiler.\n      std::memcpy(&u,&f,sizeof(float));\n      return ((u)<<1)>>1; // set sign bit to 0.\n    }\n\n    inline float uint2float(const unsigned int u) {\n      if (u<(1U<<19)) return (float)u;  // Consider safe storage of unsigned int as floats until 19bits (i.e 524287).\n      float f;\n      const unsigned int v = u|(1U<<(8*sizeof(unsigned int)-1)); // set sign bit to 1.\n      // use memcpy instead of simple assignment to avoid undesired optimizations by C++-compiler.\n      std::memcpy(&f,&v,sizeof(float));\n      return f;\n    }\n\n    //! Return the value of a system timer, with a millisecond precision.\n    /**\n       \\note The timer does not necessarily starts from \\c 0.\n    **/\n    inline cimg_ulong time() {\n#if cimg_OS==1\n      struct timeval st_time;\n      gettimeofday(&st_time,0);\n      return (cimg_ulong)(st_time.tv_usec/1000 + st_time.tv_sec*1000);\n#elif cimg_OS==2\n      SYSTEMTIME st_time;\n      GetLocalTime(&st_time);\n      return (cimg_ulong)(st_time.wMilliseconds + 1000*(st_time.wSecond + 60*(st_time.wMinute + 60*st_time.wHour)));\n#else\n      return 0;\n#endif\n    }\n\n    // Implement a tic/toc mechanism to display elapsed time of algorithms.\n    inline cimg_ulong tictoc(const bool is_tic);\n\n    //! Start tic/toc timer for time measurement between code instructions.\n    /**\n       \\return Current value of the timer (same value as time()).\n    **/\n    inline cimg_ulong tic() {\n      return cimg::tictoc(true);\n    }\n\n    //! End tic/toc timer and displays elapsed time from last call to tic().\n    /**\n       \\return Time elapsed (in ms) since last call to tic().\n    **/\n    inline cimg_ulong toc() {\n      return cimg::tictoc(false);\n    }\n\n    //! Sleep for a given numbers of milliseconds.\n    /**\n       \\param milliseconds Number of milliseconds to wait for.\n       \\note This function frees the CPU ressources during the sleeping time.\n       It can be used to temporize your program properly, without wasting CPU time.\n    **/\n    inline void sleep(const unsigned int milliseconds) {\n#if cimg_OS==1\n      struct timespec tv;\n      tv.tv_sec = milliseconds/1000;\n      tv.tv_nsec = (milliseconds%1000)*1000000;\n      nanosleep(&tv,0);\n#elif cimg_OS==2\n      Sleep(milliseconds);\n#else\n      cimg::unused(milliseconds);\n#endif\n    }\n\n    inline unsigned int _wait(const unsigned int milliseconds, cimg_ulong& timer) {\n      if (!timer) timer = cimg::time();\n      const cimg_ulong current_time = cimg::time();\n      if (current_time>=timer + milliseconds) { timer = current_time; return 0; }\n      const unsigned int time_diff = (unsigned int)(timer + milliseconds - current_time);\n      timer = current_time + time_diff;\n      cimg::sleep(time_diff);\n      return time_diff;\n    }\n\n    //! Wait for a given number of milliseconds since the last call to wait().\n    /**\n       \\param milliseconds Number of milliseconds to wait for.\n       \\return Number of milliseconds elapsed since the last call to wait().\n       \\note Same as sleep() with a waiting time computed with regard to the last call\n       of wait(). It may be used to temporize your program properly, without wasting CPU time.\n    **/\n    inline cimg_long wait(const unsigned int milliseconds) {\n      cimg::mutex(3);\n      static cimg_ulong timer = 0;\n      if (!timer) timer = cimg::time();\n      cimg::mutex(3,0);\n      return _wait(milliseconds,timer);\n    }\n\n    // Random number generators.\n    // CImg may use its own Random Number Generator (RNG) if configuration macro 'cimg_use_rng' is set.\n    // Use it for instance when you have to deal with concurrent threads trying to call std::srand()\n    // at the same time!\n#ifdef cimg_use_rng\n\n#include <stdint.h>\n\n    // Use a custom RNG.\n    inline unsigned int _rand(const unsigned int seed=0, const bool set_seed=false) {\n      static cimg_ulong next = 0xB16B00B5;\n      cimg::mutex(4);\n      if (set_seed) next = (cimg_ulong)seed;\n      next = next*1103515245 + 12345U;\n      cimg::mutex(4,0);\n      return (unsigned int)(next&0xFFFFFFU);\n    }\n\n    inline void srand() {\n      const unsigned int t = (unsigned int)cimg::time();\n#if cimg_OS==1\n      cimg::_rand(t + (unsigned int)getpid(),true);\n#elif cimg_OS==2\n      cimg::_rand(t + (unsigned int)_getpid(),true);\n#else\n      cimg::_rand(t,true);\n#endif\n    }\n\n    inline void srand(const unsigned int seed) {\n      _rand(seed,true);\n    }\n\n    inline double rand(const double val_min, const double val_max) {\n      const double val = cimg::_rand()/16777215.;\n      return val_min + (val_max - val_min)*val;\n    }\n\n#else\n\n    // Use the system RNG.\n    inline void srand() {\n      const unsigned int t = (unsigned int)cimg::time();\n#if cimg_OS==1 || defined(__BORLANDC__)\n      std::srand(t + (unsigned int)getpid());\n#elif cimg_OS==2\n      std::srand(t + (unsigned int)_getpid());\n#else\n      std::srand(t);\n#endif\n    }\n\n    inline void srand(const unsigned int seed) {\n      std::srand(seed);\n    }\n\n    //! Return a random variable uniformely distributed between [val_min,val_max].\n    /**\n    **/\n    inline double rand(const double val_min, const double val_max) {\n      const double val = (double)std::rand()/RAND_MAX;\n      return val_min + (val_max - val_min)*val;\n    }\n#endif\n\n    //! Return a random variable uniformely distributed between [0,val_max].\n    /**\n     **/\n    inline double rand(const double val_max=1) {\n      return cimg::rand(0,val_max);\n    }\n\n    //! Return a random variable following a gaussian distribution and a standard deviation of 1.\n    /**\n    **/\n    inline double grand() {\n      double x1, w;\n      do {\n        const double x2 = cimg::rand(-1,1);\n        x1 = cimg::rand(-1,1);\n        w = x1*x1 + x2*x2;\n      } while (w<=0 || w>=1.0);\n      return x1*std::sqrt((-2*std::log(w))/w);\n    }\n\n    //! Return a random variable following a Poisson distribution of parameter z.\n    /**\n    **/\n    inline unsigned int prand(const double z) {\n      if (z<=1.0e-10) return 0;\n      if (z>100) return (unsigned int)((std::sqrt(z) * cimg::grand()) + z);\n      unsigned int k = 0;\n      const double y = std::exp(-z);\n      for (double s = 1.0; s>=y; ++k) s*=cimg::rand();\n      return k - 1;\n    }\n\n    //! Cut (i.e. clamp) value in specified interval.\n    template<typename T, typename t>\n    inline T cut(const T& val, const t& val_min, const t& val_max) {\n      return val<val_min?(T)val_min:val>val_max?(T)val_max:val;\n    }\n\n    //! Bitwise-rotate value on the left.\n    template<typename T>\n    inline T rol(const T& a, const unsigned int n=1) {\n      return n?(T)((a<<n)|(a>>((sizeof(T)<<3) - n))):a;\n    }\n\n    inline float rol(const float a, const unsigned int n=1) {\n      return (float)rol((int)a,n);\n    }\n\n    inline double rol(const double a, const unsigned int n=1) {\n      return (double)rol((cimg_long)a,n);\n    }\n\n    inline double rol(const long double a, const unsigned int n=1) {\n      return (double)rol((cimg_long)a,n);\n    }\n\n#ifdef cimg_use_half\n    inline half rol(const half a, const unsigned int n=1) {\n      return (half)rol((int)a,n);\n    }\n#endif\n\n    //! Bitwise-rotate value on the right.\n    template<typename T>\n    inline T ror(const T& a, const unsigned int n=1) {\n      return n?(T)((a>>n)|(a<<((sizeof(T)<<3) - n))):a;\n    }\n\n    inline float ror(const float a, const unsigned int n=1) {\n      return (float)ror((int)a,n);\n    }\n\n    inline double ror(const double a, const unsigned int n=1) {\n      return (double)ror((cimg_long)a,n);\n    }\n\n    inline double ror(const long double a, const unsigned int n=1) {\n      return (double)ror((cimg_long)a,n);\n    }\n\n#ifdef cimg_use_half\n    inline half ror(const half a, const unsigned int n=1) {\n      return (half)ror((int)a,n);\n    }\n#endif\n\n    //! Return absolute value of a value.\n    template<typename T>\n    inline T abs(const T& a) {\n      return a>=0?a:-a;\n    }\n    inline bool abs(const bool a) {\n      return a;\n    }\n    inline int abs(const unsigned char a) {\n      return (int)a;\n    }\n    inline int abs(const unsigned short a) {\n      return (int)a;\n    }\n    inline int abs(const unsigned int a) {\n      return (int)a;\n    }\n    inline int abs(const int a) {\n      return std::abs(a);\n    }\n    inline cimg_int64 abs(const cimg_uint64 a) {\n      return (cimg_int64)a;\n    }\n    inline double abs(const double a) {\n      return std::fabs(a);\n    }\n    inline float abs(const float a) {\n      return (float)std::fabs((double)a);\n    }\n\n    //! Return square of a value.\n    template<typename T>\n    inline T sqr(const T& val) {\n      return val*val;\n    }\n\n    //! Return <tt>1 + log_10(x)</tt> of a value \\c x.\n    inline int xln(const int x) {\n      return x>0?(int)(1 + std::log10((double)x)):1;\n    }\n\n    //! Return the minimum between three values.\n    template<typename t>\n    inline t min(const t& a, const t& b, const t& c) {\n      return std::min(std::min(a,b),c);\n    }\n\n    //! Return the minimum between four values.\n    template<typename t>\n    inline t min(const t& a, const t& b, const t& c, const t& d) {\n      return std::min(std::min(a,b),std::min(c,d));\n    }\n\n    //! Return the maximum between three values.\n    template<typename t>\n    inline t max(const t& a, const t& b, const t& c) {\n      return std::max(std::max(a,b),c);\n    }\n\n    //! Return the maximum between four values.\n    template<typename t>\n    inline t max(const t& a, const t& b, const t& c, const t& d) {\n      return std::max(std::max(a,b),std::max(c,d));\n    }\n\n    //! Return the sign of a value.\n    template<typename T>\n    inline T sign(const T& x) {\n      return (T)(x<0?-1:x>0);\n    }\n\n    //! Return the nearest power of 2 higher than given value.\n    template<typename T>\n    inline cimg_ulong nearest_pow2(const T& x) {\n      cimg_ulong i = 1;\n      while (x>i) i<<=1;\n      return i;\n    }\n\n    //! Return the sinc of a given value.\n    inline double sinc(const double x) {\n      return x?std::sin(x)/x:1;\n    }\n\n    //! Return the modulo of a value.\n    /**\n       \\param x Input value.\n       \\param m Modulo value.\n       \\note This modulo function accepts negative and floating-points modulo numbers, as well as variables of any type.\n    **/\n    template<typename T>\n    inline T mod(const T& x, const T& m) {\n      const double dx = (double)x, dm = (double)m;\n      return (T)(dx - dm * std::floor(dx / dm));\n    }\n    inline int mod(const bool x, const bool m) {\n      return m?(x?1:0):0;\n    }\n    inline int mod(const unsigned char x, const unsigned char m) {\n      return x%m;\n    }\n    inline int mod(const char x, const char m) {\n#if defined(CHAR_MAX) && CHAR_MAX==255\n      return x%m;\n#else\n      return x>=0?x%m:(x%m?m + x%m:0);\n#endif\n    }\n    inline int mod(const unsigned short x, const unsigned short m) {\n      return x%m;\n    }\n    inline int mod(const short x, const short m) {\n      return x>=0?x%m:(x%m?m + x%m:0);\n    }\n    inline int mod(const unsigned int x, const unsigned int m) {\n      return (int)(x%m);\n    }\n    inline int mod(const int x, const int m) {\n      return x>=0?x%m:(x%m?m + x%m:0);\n    }\n    inline cimg_int64 mod(const cimg_uint64 x, const cimg_uint64 m) {\n      return x%m;\n    }\n    inline cimg_int64 mod(const cimg_int64 x, const cimg_int64 m) {\n      return x>=0?x%m:(x%m?m + x%m:0);\n    }\n\n    //! Return the min-mod of two values.\n    /**\n       \\note <i>minmod(\\p a,\\p b)</i> is defined to be:\n       - <i>minmod(\\p a,\\p b) = min(\\p a,\\p b)</i>, if \\p a and \\p b have the same sign.\n       - <i>minmod(\\p a,\\p b) = 0</i>, if \\p a and \\p b have different signs.\n    **/\n    template<typename T>\n    inline T minmod(const T& a, const T& b) {\n      return a*b<=0?0:(a>0?(a<b?a:b):(a<b?b:a));\n    }\n\n    //! Return base-2 logarithm of a value.\n    inline double log2(const double x) {\n      const double base = std::log(2.0);\n      return std::log(x)/base;\n    }\n\n    template<typename T>\n    inline T round(const T& x) {\n      return (T)std::floor((_cimg_Tfloat)x + 0.5f);\n    }\n\n    //! Return rounded value.\n    /**\n       \\param x Value to be rounded.\n       \\param y Rounding precision.\n       \\param rounding_type Type of rounding operation (\\c 0 = nearest, \\c -1 = backward, \\c 1 = forward).\n       \\return Rounded value, having the same type as input value \\c x.\n    **/\n    template<typename T>\n    inline T round(const T& x, const double y, const int rounding_type=0) {\n      if (y<=0) return x;\n      if (y==1) switch (rounding_type) {\n        case 0 : return round(x);\n        case 1 : return (T)std::ceil((_cimg_Tfloat)x);\n        default : return (T)std::floor((_cimg_Tfloat)x);\n        }\n      const double sx = (double)x/y, floor = std::floor(sx), delta =  sx - floor;\n      return (T)(y*(rounding_type<0?floor:rounding_type>0?std::ceil(sx):delta<0.5?floor:std::ceil(sx)));\n    }\n\n    //! Return x^(1/3).\n    template<typename T>\n    inline double cbrt(const T& x) {\n#if cimg_use_cpp11==1\n      return std::cbrt(x);\n#else\n      return x>=0?std::pow((double)x,1.0/3):-std::pow(-(double)x,1.0/3);\n#endif\n    }\n\n    // Code to compute fast median from 2,3,5,7,9,13,25 and 49 values.\n    // (contribution by RawTherapee: http://rawtherapee.com/).\n    template<typename T>\n    inline T median(T val0, T val1) {\n      return (val0 + val1)/2;\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2) {\n      return std::max(std::min(val0,val1),std::min(val2,std::max(val0,val1)));\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4) {\n      T tmp = std::min(val0,val1);\n      val1 = std::max(val0,val1); val0 = tmp; tmp = std::min(val3,val4); val4 = std::max(val3,val4);\n      val3 = std::max(val0,tmp);  val1 = std::min(val1,val4); tmp = std::min(val1,val2); val2 = std::max(val1,val2);\n      val1 = tmp; tmp = std::min(val2,val3);\n      return std::max(val1,tmp);\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4, T val5, T val6) {\n      T tmp = std::min(val0,val5);\n      val5 = std::max(val0,val5); val0 = tmp; tmp = std::min(val0,val3); val3 = std::max(val0,val3); val0 = tmp;\n      tmp = std::min(val1,val6); val6 = std::max(val1,val6); val1 = tmp; tmp = std::min(val2,val4);\n      val4 = std::max(val2,val4); val2 = tmp; val1 = std::max(val0,val1); tmp = std::min(val3,val5);\n      val5 = std::max(val3,val5); val3 = tmp; tmp = std::min(val2,val6); val6 = std::max(val2,val6);\n      val3 = std::max(tmp,val3); val3 = std::min(val3,val6); tmp = std::min(val4,val5); val4 = std::max(val1,tmp);\n      tmp = std::min(val1,tmp); val3 = std::max(tmp,val3);\n      return std::min(val3,val4);\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4, T val5, T val6, T val7, T val8) {\n      T tmp = std::min(val1,val2);\n      val2 = std::max(val1,val2); val1 = tmp; tmp = std::min(val4,val5);\n      val5 = std::max(val4,val5); val4 = tmp; tmp = std::min(val7,val8);\n      val8 = std::max(val7,val8); val7 = tmp; tmp = std::min(val0,val1);\n      val1 = std::max(val0,val1); val0 = tmp; tmp = std::min(val3,val4);\n      val4 = std::max(val3,val4); val3 = tmp; tmp = std::min(val6,val7);\n      val7 = std::max(val6,val7); val6 = tmp; tmp = std::min(val1,val2);\n      val2 = std::max(val1,val2); val1 = tmp; tmp = std::min(val4,val5);\n      val5 = std::max(val4,val5); val4 = tmp; tmp = std::min(val7,val8);\n      val8 = std::max(val7,val8); val3 = std::max(val0,val3); val5 = std::min(val5,val8);\n      val7 = std::max(val4,tmp); tmp = std::min(val4,tmp); val6 = std::max(val3,val6);\n      val4 = std::max(val1,tmp); val2 = std::min(val2,val5); val4 = std::min(val4,val7);\n      tmp = std::min(val4,val2); val2 = std::max(val4,val2); val4 = std::max(val6,tmp);\n      return std::min(val4,val2);\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4, T val5, T val6, T val7, T val8, T val9, T val10, T val11,\n                    T val12) {\n      T tmp = std::min(val1,val7);\n      val7 = std::max(val1,val7); val1 = tmp; tmp = std::min(val9,val11); val11 = std::max(val9,val11); val9 = tmp;\n      tmp = std::min(val3,val4);  val4 = std::max(val3,val4); val3 = tmp; tmp = std::min(val5,val8);\n      val8 = std::max(val5,val8); val5 = tmp; tmp = std::min(val0,val12); val12 = std::max(val0,val12);\n      val0 = tmp; tmp = std::min(val2,val6); val6 = std::max(val2,val6); val2 = tmp; tmp = std::min(val0,val1);\n      val1 = std::max(val0,val1); val0 = tmp; tmp = std::min(val2,val3); val3 = std::max(val2,val3); val2 = tmp;\n      tmp = std::min(val4,val6);  val6 = std::max(val4,val6); val4 = tmp; tmp = std::min(val8,val11);\n      val11 = std::max(val8,val11); val8 = tmp; tmp = std::min(val7,val12); val12 = std::max(val7,val12); val7 = tmp;\n      tmp = std::min(val5,val9); val9 = std::max(val5,val9); val5 = tmp; tmp = std::min(val0,val2);\n      val2 = std::max(val0,val2); val0 = tmp; tmp = std::min(val3,val7); val7 = std::max(val3,val7); val3 = tmp;\n      tmp = std::min(val10,val11); val11 = std::max(val10,val11); val10 = tmp; tmp = std::min(val1,val4);\n      val4 = std::max(val1,val4); val1 = tmp; tmp = std::min(val6,val12); val12 = std::max(val6,val12); val6 = tmp;\n      tmp = std::min(val7,val8); val8 = std::max(val7,val8); val7 = tmp; val11 = std::min(val11,val12);\n      tmp = std::min(val4,val9); val9 = std::max(val4,val9); val4 = tmp; tmp = std::min(val6,val10);\n      val10 = std::max(val6,val10); val6 = tmp; tmp = std::min(val3,val4); val4 = std::max(val3,val4); val3 = tmp;\n      tmp = std::min(val5,val6); val6 = std::max(val5,val6); val5 = tmp; val8 = std::min(val8,val9);\n      val10 = std::min(val10,val11); tmp = std::min(val1,val7); val7 = std::max(val1,val7); val1 = tmp;\n      tmp = std::min(val2,val6); val6 = std::max(val2,val6); val2 = tmp; val3 = std::max(val1,val3);\n      tmp = std::min(val4,val7); val7 = std::max(val4,val7); val4 = tmp; val8 = std::min(val8,val10);\n      val5 = std::max(val0,val5); val5 = std::max(val2,val5); tmp = std::min(val6,val8); val8 = std::max(val6,val8);\n      val5 = std::max(val3,val5); val7 = std::min(val7,val8); val6 = std::max(val4,tmp); tmp = std::min(val4,tmp);\n      val5 = std::max(tmp,val5); val6 = std::min(val6,val7);\n      return std::max(val5,val6);\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4,\n                    T val5, T val6, T val7, T val8, T val9,\n                    T val10, T val11, T val12, T val13, T val14,\n                    T val15, T val16, T val17, T val18, T val19,\n                    T val20, T val21, T val22, T val23, T val24) {\n      T tmp = std::min(val0,val1);\n      val1 = std::max(val0,val1); val0 = tmp; tmp = std::min(val3,val4); val4 = std::max(val3,val4);\n      val3 = tmp; tmp = std::min(val2,val4); val4 = std::max(val2,val4); val2 = std::min(tmp,val3);\n      val3 = std::max(tmp,val3); tmp = std::min(val6,val7); val7 = std::max(val6,val7); val6 = tmp;\n      tmp = std::min(val5,val7); val7 = std::max(val5,val7); val5 = std::min(tmp,val6); val6 = std::max(tmp,val6);\n      tmp = std::min(val9,val10); val10 = std::max(val9,val10); val9 = tmp; tmp = std::min(val8,val10);\n      val10 = std::max(val8,val10); val8 = std::min(tmp,val9); val9 = std::max(tmp,val9);\n      tmp = std::min(val12,val13); val13 = std::max(val12,val13); val12 = tmp; tmp = std::min(val11,val13);\n      val13 = std::max(val11,val13); val11 = std::min(tmp,val12); val12 = std::max(tmp,val12);\n      tmp = std::min(val15,val16); val16 = std::max(val15,val16); val15 = tmp; tmp = std::min(val14,val16);\n      val16 = std::max(val14,val16); val14 = std::min(tmp,val15); val15 = std::max(tmp,val15);\n      tmp = std::min(val18,val19); val19 = std::max(val18,val19); val18 = tmp; tmp = std::min(val17,val19);\n      val19 = std::max(val17,val19); val17 = std::min(tmp,val18); val18 = std::max(tmp,val18);\n      tmp = std::min(val21,val22); val22 = std::max(val21,val22); val21 = tmp; tmp = std::min(val20,val22);\n      val22 = std::max(val20,val22); val20 = std::min(tmp,val21); val21 = std::max(tmp,val21);\n      tmp = std::min(val23,val24); val24 = std::max(val23,val24); val23 = tmp; tmp = std::min(val2,val5);\n      val5 = std::max(val2,val5); val2 = tmp; tmp = std::min(val3,val6); val6 = std::max(val3,val6); val3 = tmp;\n      tmp = std::min(val0,val6); val6 = std::max(val0,val6); val0 = std::min(tmp,val3); val3 = std::max(tmp,val3);\n      tmp = std::min(val4,val7); val7 = std::max(val4,val7); val4 = tmp; tmp = std::min(val1,val7);\n      val7 = std::max(val1,val7); val1 = std::min(tmp,val4); val4 = std::max(tmp,val4); tmp = std::min(val11,val14);\n      val14 = std::max(val11,val14); val11 = tmp; tmp = std::min(val8,val14); val14 = std::max(val8,val14);\n      val8 = std::min(tmp,val11); val11 = std::max(tmp,val11); tmp = std::min(val12,val15);\n      val15 = std::max(val12,val15); val12 = tmp; tmp = std::min(val9,val15); val15 = std::max(val9,val15);\n      val9 = std::min(tmp,val12); val12 = std::max(tmp,val12); tmp = std::min(val13,val16);\n      val16 = std::max(val13,val16); val13 = tmp; tmp = std::min(val10,val16); val16 = std::max(val10,val16);\n      val10 = std::min(tmp,val13); val13 = std::max(tmp,val13); tmp = std::min(val20,val23);\n      val23 = std::max(val20,val23); val20 = tmp; tmp = std::min(val17,val23); val23 = std::max(val17,val23);\n      val17 = std::min(tmp,val20); val20 = std::max(tmp,val20); tmp = std::min(val21,val24);\n      val24 = std::max(val21,val24); val21 = tmp; tmp = std::min(val18,val24); val24 = std::max(val18,val24);\n      val18 = std::min(tmp,val21); val21 = std::max(tmp,val21); tmp = std::min(val19,val22);\n      val22 = std::max(val19,val22); val19 = tmp; val17 = std::max(val8,val17); tmp = std::min(val9,val18);\n      val18 = std::max(val9,val18); val9 = tmp; tmp = std::min(val0,val18); val18 = std::max(val0,val18);\n      val9 = std::max(tmp,val9); tmp = std::min(val10,val19); val19 = std::max(val10,val19); val10 = tmp;\n      tmp = std::min(val1,val19); val19 = std::max(val1,val19); val1 = std::min(tmp,val10);\n      val10 = std::max(tmp,val10); tmp = std::min(val11,val20); val20 = std::max(val11,val20); val11 = tmp;\n      tmp = std::min(val2,val20); val20 = std::max(val2,val20); val11 = std::max(tmp,val11);\n      tmp = std::min(val12,val21); val21 = std::max(val12,val21); val12 = tmp; tmp = std::min(val3,val21);\n      val21 = std::max(val3,val21); val3 = std::min(tmp,val12); val12 = std::max(tmp,val12);\n      tmp = std::min(val13,val22); val22 = std::max(val13,val22); val4 = std::min(val4,val22);\n      val13 = std::max(val4,tmp); tmp = std::min(val4,tmp); val4 = tmp; tmp = std::min(val14,val23);\n      val23 = std::max(val14,val23); val14 = tmp; tmp = std::min(val5,val23); val23 = std::max(val5,val23);\n      val5 = std::min(tmp,val14); val14 = std::max(tmp,val14); tmp = std::min(val15,val24);\n      val24 = std::max(val15,val24); val15 = tmp; val6 = std::min(val6,val24); tmp = std::min(val6,val15);\n      val15 = std::max(val6,val15); val6 = tmp; tmp = std::min(val7,val16); val7 = std::min(tmp,val19);\n      tmp = std::min(val13,val21); val15 = std::min(val15,val23); tmp = std::min(val7,tmp);\n      val7 = std::min(tmp,val15); val9 = std::max(val1,val9); val11 = std::max(val3,val11);\n      val17 = std::max(val5,val17); val17 = std::max(val11,val17); val17 = std::max(val9,val17);\n      tmp = std::min(val4,val10); val10 = std::max(val4,val10); val4 = tmp; tmp = std::min(val6,val12);\n      val12 = std::max(val6,val12); val6 = tmp; tmp = std::min(val7,val14); val14 = std::max(val7,val14);\n      val7 = tmp; tmp = std::min(val4,val6); val6 = std::max(val4,val6); val7 = std::max(tmp,val7);\n      tmp = std::min(val12,val14); val14 = std::max(val12,val14); val12 = tmp; val10 = std::min(val10,val14);\n      tmp = std::min(val6,val7); val7 = std::max(val6,val7); val6 = tmp; tmp = std::min(val10,val12);\n      val12 = std::max(val10,val12); val10 = std::max(val6,tmp); tmp = std::min(val6,tmp);\n      val17 = std::max(tmp,val17); tmp = std::min(val12,val17); val17 = std::max(val12,val17); val12 = tmp;\n      val7 = std::min(val7,val17); tmp = std::min(val7,val10); val10 = std::max(val7,val10); val7 = tmp;\n      tmp = std::min(val12,val18); val18 = std::max(val12,val18); val12 = std::max(val7,tmp);\n      val10 = std::min(val10,val18); tmp = std::min(val12,val20); val20 = std::max(val12,val20); val12 = tmp;\n      tmp = std::min(val10,val20);\n      return std::max(tmp,val12);\n    }\n\n    template<typename T>\n    inline T median(T val0, T val1, T val2, T val3, T val4, T val5, T val6,\n                    T val7, T val8, T val9, T val10, T val11, T val12, T val13,\n                    T val14, T val15, T val16, T val17, T val18, T val19, T val20,\n                    T val21, T val22, T val23, T val24, T val25, T val26, T val27,\n                    T val28, T val29, T val30, T val31, T val32, T val33, T val34,\n                    T val35, T val36, T val37, T val38, T val39, T val40, T val41,\n                    T val42, T val43, T val44, T val45, T val46, T val47, T val48) {\n      T tmp = std::min(val0,val32);\n      val32 = std::max(val0,val32); val0 = tmp; tmp = std::min(val1,val33); val33 = std::max(val1,val33); val1 = tmp;\n      tmp = std::min(val2,val34); val34 = std::max(val2,val34); val2 = tmp; tmp = std::min(val3,val35);\n      val35 = std::max(val3,val35); val3 = tmp; tmp = std::min(val4,val36); val36 = std::max(val4,val36); val4 = tmp;\n      tmp = std::min(val5,val37); val37 = std::max(val5,val37); val5 = tmp; tmp = std::min(val6,val38);\n      val38 = std::max(val6,val38); val6 = tmp; tmp = std::min(val7,val39); val39 = std::max(val7,val39); val7 = tmp;\n      tmp = std::min(val8,val40); val40 = std::max(val8,val40); val8 = tmp; tmp = std::min(val9,val41);\n      val41 = std::max(val9,val41); val9 = tmp; tmp = std::min(val10,val42); val42 = std::max(val10,val42);\n      val10 = tmp; tmp = std::min(val11,val43); val43 = std::max(val11,val43); val11 = tmp;\n      tmp = std::min(val12,val44); val44 = std::max(val12,val44); val12 = tmp; tmp = std::min(val13,val45);\n      val45 = std::max(val13,val45); val13 = tmp; tmp = std::min(val14,val46); val46 = std::max(val14,val46);\n      val14 = tmp; tmp = std::min(val15,val47); val47 = std::max(val15,val47); val15 = tmp;\n      tmp = std::min(val16,val48); val48 = std::max(val16,val48); val16 = tmp; tmp = std::min(val0,val16);\n      val16 = std::max(val0,val16); val0 = tmp; tmp = std::min(val1,val17); val17 = std::max(val1,val17);\n      val1 = tmp; tmp = std::min(val2,val18); val18 = std::max(val2,val18); val2 = tmp; tmp = std::min(val3,val19);\n      val19 = std::max(val3,val19); val3 = tmp; tmp = std::min(val4,val20); val20 = std::max(val4,val20); val4 = tmp;\n      tmp = std::min(val5,val21); val21 = std::max(val5,val21); val5 = tmp; tmp = std::min(val6,val22);\n      val22 = std::max(val6,val22); val6 = tmp; tmp = std::min(val7,val23); val23 = std::max(val7,val23); val7 = tmp;\n      tmp = std::min(val8,val24); val24 = std::max(val8,val24); val8 = tmp; tmp = std::min(val9,val25);\n      val25 = std::max(val9,val25); val9 = tmp; tmp = std::min(val10,val26); val26 = std::max(val10,val26);\n      val10 = tmp; tmp = std::min(val11,val27); val27 = std::max(val11,val27); val11 = tmp;\n      tmp = std::min(val12,val28); val28 = std::max(val12,val28); val12 = tmp; tmp = std::min(val13,val29);\n      val29 = std::max(val13,val29); val13 = tmp; tmp = std::min(val14,val30); val30 = std::max(val14,val30);\n      val14 = tmp; tmp = std::min(val15,val31); val31 = std::max(val15,val31); val15 = tmp;\n      tmp = std::min(val32,val48); val48 = std::max(val32,val48); val32 = tmp; tmp = std::min(val16,val32);\n      val32 = std::max(val16,val32); val16 = tmp; tmp = std::min(val17,val33); val33 = std::max(val17,val33);\n      val17 = tmp; tmp = std::min(val18,val34); val34 = std::max(val18,val34); val18 = tmp;\n      tmp = std::min(val19,val35); val35 = std::max(val19,val35); val19 = tmp; tmp = std::min(val20,val36);\n      val36 = std::max(val20,val36); val20 = tmp; tmp = std::min(val21,val37); val37 = std::max(val21,val37);\n      val21 = tmp; tmp = std::min(val22,val38); val38 = std::max(val22,val38); val22 = tmp;\n      tmp = std::min(val23,val39); val39 = std::max(val23,val39); val23 = tmp; tmp = std::min(val24,val40);\n      val40 = std::max(val24,val40); val24 = tmp; tmp = std::min(val25,val41); val41 = std::max(val25,val41);\n      val25 = tmp; tmp = std::min(val26,val42); val42 = std::max(val26,val42); val26 = tmp;\n      tmp = std::min(val27,val43); val43 = std::max(val27,val43); val27 = tmp; tmp = std::min(val28,val44);\n      val44 = std::max(val28,val44); val28 = tmp; tmp = std::min(val29,val45); val45 = std::max(val29,val45);\n      val29 = tmp; tmp = std::min(val30,val46); val46 = std::max(val30,val46); val30 = tmp;\n      tmp = std::min(val31,val47); val47 = std::max(val31,val47); val31 = tmp; tmp = std::min(val0,val8);\n      val8 = std::max(val0,val8); val0 = tmp; tmp = std::min(val1,val9); val9 = std::max(val1,val9); val1 = tmp;\n      tmp = std::min(val2,val10); val10 = std::max(val2,val10); val2 = tmp; tmp = std::min(val3,val11);\n      val11 = std::max(val3,val11); val3 = tmp; tmp = std::min(val4,val12); val12 = std::max(val4,val12); val4 = tmp;\n      tmp = std::min(val5,val13); val13 = std::max(val5,val13); val5 = tmp; tmp = std::min(val6,val14);\n      val14 = std::max(val6,val14); val6 = tmp; tmp = std::min(val7,val15); val15 = std::max(val7,val15); val7 = tmp;\n      tmp = std::min(val16,val24); val24 = std::max(val16,val24); val16 = tmp; tmp = std::min(val17,val25);\n      val25 = std::max(val17,val25); val17 = tmp; tmp = std::min(val18,val26); val26 = std::max(val18,val26);\n      val18 = tmp; tmp = std::min(val19,val27); val27 = std::max(val19,val27); val19 = tmp;\n      tmp = std::min(val20,val28); val28 = std::max(val20,val28); val20 = tmp; tmp = std::min(val21,val29);\n      val29 = std::max(val21,val29); val21 = tmp; tmp = std::min(val22,val30); val30 = std::max(val22,val30);\n      val22 = tmp; tmp = std::min(val23,val31); val31 = std::max(val23,val31); val23 = tmp;\n      tmp = std::min(val32,val40); val40 = std::max(val32,val40); val32 = tmp; tmp = std::min(val33,val41);\n      val41 = std::max(val33,val41); val33 = tmp; tmp = std::min(val34,val42); val42 = std::max(val34,val42);\n      val34 = tmp; tmp = std::min(val35,val43); val43 = std::max(val35,val43); val35 = tmp;\n      tmp = std::min(val36,val44); val44 = std::max(val36,val44); val36 = tmp; tmp = std::min(val37,val45);\n      val45 = std::max(val37,val45); val37 = tmp; tmp = std::min(val38,val46); val46 = std::max(val38,val46);\n      val38 = tmp; tmp = std::min(val39,val47); val47 = std::max(val39,val47); val39 = tmp;\n      tmp = std::min(val8,val32); val32 = std::max(val8,val32); val8 = tmp; tmp = std::min(val9,val33);\n      val33 = std::max(val9,val33); val9 = tmp; tmp = std::min(val10,val34); val34 = std::max(val10,val34);\n      val10 = tmp; tmp = std::min(val11,val35); val35 = std::max(val11,val35); val11 = tmp;\n      tmp = std::min(val12,val36); val36 = std::max(val12,val36); val12 = tmp; tmp = std::min(val13,val37);\n      val37 = std::max(val13,val37); val13 = tmp; tmp = std::min(val14,val38); val38 = std::max(val14,val38);\n      val14 = tmp; tmp = std::min(val15,val39); val39 = std::max(val15,val39); val15 = tmp;\n      tmp = std::min(val24,val48); val48 = std::max(val24,val48); val24 = tmp; tmp = std::min(val8,val16);\n      val16 = std::max(val8,val16); val8 = tmp; tmp = std::min(val9,val17); val17 = std::max(val9,val17);\n      val9 = tmp; tmp = std::min(val10,val18); val18 = std::max(val10,val18); val10 = tmp;\n      tmp = std::min(val11,val19); val19 = std::max(val11,val19); val11 = tmp; tmp = std::min(val12,val20);\n      val20 = std::max(val12,val20); val12 = tmp; tmp = std::min(val13,val21); val21 = std::max(val13,val21);\n      val13 = tmp; tmp = std::min(val14,val22); val22 = std::max(val14,val22); val14 = tmp;\n      tmp = std::min(val15,val23); val23 = std::max(val15,val23); val15 = tmp; tmp = std::min(val24,val32);\n      val32 = std::max(val24,val32); val24 = tmp; tmp = std::min(val25,val33); val33 = std::max(val25,val33);\n      val25 = tmp; tmp = std::min(val26,val34); val34 = std::max(val26,val34); val26 = tmp;\n      tmp = std::min(val27,val35); val35 = std::max(val27,val35); val27 = tmp; tmp = std::min(val28,val36);\n      val36 = std::max(val28,val36); val28 = tmp; tmp = std::min(val29,val37); val37 = std::max(val29,val37);\n      val29 = tmp; tmp = std::min(val30,val38); val38 = std::max(val30,val38); val30 = tmp;\n      tmp = std::min(val31,val39); val39 = std::max(val31,val39); val31 = tmp; tmp = std::min(val40,val48);\n      val48 = std::max(val40,val48); val40 = tmp; tmp = std::min(val0,val4); val4 = std::max(val0,val4);\n      val0 = tmp; tmp = std::min(val1,val5); val5 = std::max(val1,val5); val1 = tmp; tmp = std::min(val2,val6);\n      val6 = std::max(val2,val6); val2 = tmp; tmp = std::min(val3,val7); val7 = std::max(val3,val7); val3 = tmp;\n      tmp = std::min(val8,val12); val12 = std::max(val8,val12); val8 = tmp; tmp = std::min(val9,val13);\n      val13 = std::max(val9,val13); val9 = tmp; tmp = std::min(val10,val14); val14 = std::max(val10,val14);\n      val10 = tmp; tmp = std::min(val11,val15); val15 = std::max(val11,val15); val11 = tmp;\n      tmp = std::min(val16,val20); val20 = std::max(val16,val20); val16 = tmp; tmp = std::min(val17,val21);\n      val21 = std::max(val17,val21); val17 = tmp; tmp = std::min(val18,val22); val22 = std::max(val18,val22);\n      val18 = tmp; tmp = std::min(val19,val23); val23 = std::max(val19,val23); val19 = tmp;\n      tmp = std::min(val24,val28); val28 = std::max(val24,val28); val24 = tmp; tmp = std::min(val25,val29);\n      val29 = std::max(val25,val29); val25 = tmp; tmp = std::min(val26,val30); val30 = std::max(val26,val30);\n      val26 = tmp; tmp = std::min(val27,val31); val31 = std::max(val27,val31); val27 = tmp;\n      tmp = std::min(val32,val36); val36 = std::max(val32,val36); val32 = tmp; tmp = std::min(val33,val37);\n      val37 = std::max(val33,val37); val33 = tmp; tmp = std::min(val34,val38); val38 = std::max(val34,val38);\n      val34 = tmp; tmp = std::min(val35,val39); val39 = std::max(val35,val39); val35 = tmp;\n      tmp = std::min(val40,val44); val44 = std::max(val40,val44); val40 = tmp; tmp = std::min(val41,val45);\n      val45 = std::max(val41,val45); val41 = tmp; tmp = std::min(val42,val46); val46 = std::max(val42,val46);\n      val42 = tmp; tmp = std::min(val43,val47); val47 = std::max(val43,val47); val43 = tmp;\n      tmp = std::min(val4,val32); val32 = std::max(val4,val32); val4 = tmp; tmp = std::min(val5,val33);\n      val33 = std::max(val5,val33); val5 = tmp; tmp = std::min(val6,val34); val34 = std::max(val6,val34);\n      val6 = tmp; tmp = std::min(val7,val35); val35 = std::max(val7,val35); val7 = tmp;\n      tmp = std::min(val12,val40); val40 = std::max(val12,val40); val12 = tmp; tmp = std::min(val13,val41);\n      val41 = std::max(val13,val41); val13 = tmp; tmp = std::min(val14,val42); val42 = std::max(val14,val42);\n      val14 = tmp; tmp = std::min(val15,val43); val43 = std::max(val15,val43); val15 = tmp;\n      tmp = std::min(val20,val48); val48 = std::max(val20,val48); val20 = tmp; tmp = std::min(val4,val16);\n      val16 = std::max(val4,val16); val4 = tmp; tmp = std::min(val5,val17); val17 = std::max(val5,val17);\n      val5 = tmp; tmp = std::min(val6,val18); val18 = std::max(val6,val18); val6 = tmp;\n      tmp = std::min(val7,val19); val19 = std::max(val7,val19); val7 = tmp; tmp = std::min(val12,val24);\n      val24 = std::max(val12,val24); val12 = tmp; tmp = std::min(val13,val25); val25 = std::max(val13,val25);\n      val13 = tmp; tmp = std::min(val14,val26); val26 = std::max(val14,val26); val14 = tmp;\n      tmp = std::min(val15,val27); val27 = std::max(val15,val27); val15 = tmp; tmp = std::min(val20,val32);\n      val32 = std::max(val20,val32); val20 = tmp; tmp = std::min(val21,val33); val33 = std::max(val21,val33);\n      val21 = tmp; tmp = std::min(val22,val34); val34 = std::max(val22,val34); val22 = tmp;\n      tmp = std::min(val23,val35); val35 = std::max(val23,val35); val23 = tmp; tmp = std::min(val28,val40);\n      val40 = std::max(val28,val40); val28 = tmp; tmp = std::min(val29,val41); val41 = std::max(val29,val41);\n      val29 = tmp; tmp = std::min(val30,val42); val42 = std::max(val30,val42); val30 = tmp;\n      tmp = std::min(val31,val43); val43 = std::max(val31,val43); val31 = tmp; tmp = std::min(val36,val48);\n      val48 = std::max(val36,val48); val36 = tmp; tmp = std::min(val4,val8); val8 = std::max(val4,val8);\n      val4 = tmp; tmp = std::min(val5,val9); val9 = std::max(val5,val9); val5 = tmp; tmp = std::min(val6,val10);\n      val10 = std::max(val6,val10); val6 = tmp; tmp = std::min(val7,val11); val11 = std::max(val7,val11); val7 = tmp;\n      tmp = std::min(val12,val16); val16 = std::max(val12,val16); val12 = tmp; tmp = std::min(val13,val17);\n      val17 = std::max(val13,val17); val13 = tmp; tmp = std::min(val14,val18); val18 = std::max(val14,val18);\n      val14 = tmp; tmp = std::min(val15,val19); val19 = std::max(val15,val19); val15 = tmp;\n      tmp = std::min(val20,val24); val24 = std::max(val20,val24); val20 = tmp; tmp = std::min(val21,val25);\n      val25 = std::max(val21,val25); val21 = tmp; tmp = std::min(val22,val26); val26 = std::max(val22,val26);\n      val22 = tmp; tmp = std::min(val23,val27); val27 = std::max(val23,val27); val23 = tmp;\n      tmp = std::min(val28,val32); val32 = std::max(val28,val32); val28 = tmp; tmp = std::min(val29,val33);\n      val33 = std::max(val29,val33); val29 = tmp; tmp = std::min(val30,val34); val34 = std::max(val30,val34);\n      val30 = tmp; tmp = std::min(val31,val35); val35 = std::max(val31,val35); val31 = tmp;\n      tmp = std::min(val36,val40); val40 = std::max(val36,val40); val36 = tmp; tmp = std::min(val37,val41);\n      val41 = std::max(val37,val41); val37 = tmp; tmp = std::min(val38,val42); val42 = std::max(val38,val42);\n      val38 = tmp; tmp = std::min(val39,val43); val43 = std::max(val39,val43); val39 = tmp;\n      tmp = std::min(val44,val48); val48 = std::max(val44,val48); val44 = tmp; tmp = std::min(val0,val2);\n      val2 = std::max(val0,val2); val0 = tmp; tmp = std::min(val1,val3); val3 = std::max(val1,val3); val1 = tmp;\n      tmp = std::min(val4,val6); val6 = std::max(val4,val6); val4 = tmp; tmp = std::min(val5,val7);\n      val7 = std::max(val5,val7); val5 = tmp; tmp = std::min(val8,val10); val10 = std::max(val8,val10); val8 = tmp;\n      tmp = std::min(val9,val11); val11 = std::max(val9,val11); val9 = tmp; tmp = std::min(val12,val14);\n      val14 = std::max(val12,val14); val12 = tmp; tmp = std::min(val13,val15); val15 = std::max(val13,val15);\n      val13 = tmp; tmp = std::min(val16,val18); val18 = std::max(val16,val18); val16 = tmp;\n      tmp = std::min(val17,val19); val19 = std::max(val17,val19); val17 = tmp; tmp = std::min(val20,val22);\n      val22 = std::max(val20,val22); val20 = tmp; tmp = std::min(val21,val23); val23 = std::max(val21,val23);\n      val21 = tmp; tmp = std::min(val24,val26); val26 = std::max(val24,val26); val24 = tmp;\n      tmp = std::min(val25,val27); val27 = std::max(val25,val27); val25 = tmp; tmp = std::min(val28,val30);\n      val30 = std::max(val28,val30); val28 = tmp; tmp = std::min(val29,val31); val31 = std::max(val29,val31);\n      val29 = tmp; tmp = std::min(val32,val34); val34 = std::max(val32,val34); val32 = tmp;\n      tmp = std::min(val33,val35); val35 = std::max(val33,val35); val33 = tmp; tmp = std::min(val36,val38);\n      val38 = std::max(val36,val38); val36 = tmp; tmp = std::min(val37,val39); val39 = std::max(val37,val39);\n      val37 = tmp; tmp = std::min(val40,val42); val42 = std::max(val40,val42); val40 = tmp;\n      tmp = std::min(val41,val43); val43 = std::max(val41,val43); val41 = tmp; tmp = std::min(val44,val46);\n      val46 = std::max(val44,val46); val44 = tmp; tmp = std::min(val45,val47); val47 = std::max(val45,val47);\n      val45 = tmp; tmp = std::min(val2,val32); val32 = std::max(val2,val32); val2 = tmp; tmp = std::min(val3,val33);\n      val33 = std::max(val3,val33); val3 = tmp; tmp = std::min(val6,val36); val36 = std::max(val6,val36); val6 = tmp;\n      tmp = std::min(val7,val37); val37 = std::max(val7,val37); val7 = tmp; tmp = std::min(val10,val40);\n      val40 = std::max(val10,val40); val10 = tmp; tmp = std::min(val11,val41); val41 = std::max(val11,val41);\n      val11 = tmp; tmp = std::min(val14,val44); val44 = std::max(val14,val44); val14 = tmp;\n      tmp = std::min(val15,val45); val45 = std::max(val15,val45); val15 = tmp; tmp = std::min(val18,val48);\n      val48 = std::max(val18,val48); val18 = tmp; tmp = std::min(val2,val16); val16 = std::max(val2,val16);\n      val2 = tmp; tmp = std::min(val3,val17); val17 = std::max(val3,val17); val3 = tmp;\n      tmp = std::min(val6,val20); val20 = std::max(val6,val20); val6 = tmp; tmp = std::min(val7,val21);\n      val21 = std::max(val7,val21); val7 = tmp; tmp = std::min(val10,val24); val24 = std::max(val10,val24);\n      val10 = tmp; tmp = std::min(val11,val25); val25 = std::max(val11,val25); val11 = tmp;\n      tmp = std::min(val14,val28); val28 = std::max(val14,val28); val14 = tmp; tmp = std::min(val15,val29);\n      val29 = std::max(val15,val29); val15 = tmp; tmp = std::min(val18,val32); val32 = std::max(val18,val32);\n      val18 = tmp; tmp = std::min(val19,val33); val33 = std::max(val19,val33); val19 = tmp;\n      tmp = std::min(val22,val36); val36 = std::max(val22,val36); val22 = tmp; tmp = std::min(val23,val37);\n      val37 = std::max(val23,val37); val23 = tmp; tmp = std::min(val26,val40); val40 = std::max(val26,val40);\n      val26 = tmp; tmp = std::min(val27,val41); val41 = std::max(val27,val41); val27 = tmp;\n      tmp = std::min(val30,val44); val44 = std::max(val30,val44); val30 = tmp; tmp = std::min(val31,val45);\n      val45 = std::max(val31,val45); val31 = tmp; tmp = std::min(val34,val48); val48 = std::max(val34,val48);\n      val34 = tmp; tmp = std::min(val2,val8); val8 = std::max(val2,val8); val2 = tmp; tmp = std::min(val3,val9);\n      val9 = std::max(val3,val9); val3 = tmp; tmp = std::min(val6,val12); val12 = std::max(val6,val12); val6 = tmp;\n      tmp = std::min(val7,val13); val13 = std::max(val7,val13); val7 = tmp; tmp = std::min(val10,val16);\n      val16 = std::max(val10,val16); val10 = tmp; tmp = std::min(val11,val17); val17 = std::max(val11,val17);\n      val11 = tmp; tmp = std::min(val14,val20); val20 = std::max(val14,val20); val14 = tmp;\n      tmp = std::min(val15,val21); val21 = std::max(val15,val21); val15 = tmp; tmp = std::min(val18,val24);\n      val24 = std::max(val18,val24); val18 = tmp; tmp = std::min(val19,val25); val25 = std::max(val19,val25);\n      val19 = tmp; tmp = std::min(val22,val28); val28 = std::max(val22,val28); val22 = tmp;\n      tmp = std::min(val23,val29); val29 = std::max(val23,val29); val23 = tmp; tmp = std::min(val26,val32);\n      val32 = std::max(val26,val32); val26 = tmp; tmp = std::min(val27,val33); val33 = std::max(val27,val33);\n      val27 = tmp; tmp = std::min(val30,val36); val36 = std::max(val30,val36); val30 = tmp;\n      tmp = std::min(val31,val37); val37 = std::max(val31,val37); val31 = tmp; tmp = std::min(val34,val40);\n      val40 = std::max(val34,val40); val34 = tmp; tmp = std::min(val35,val41); val41 = std::max(val35,val41);\n      val35 = tmp; tmp = std::min(val38,val44); val44 = std::max(val38,val44); val38 = tmp;\n      tmp = std::min(val39,val45); val45 = std::max(val39,val45); val39 = tmp; tmp = std::min(val42,val48);\n      val48 = std::max(val42,val48); val42 = tmp; tmp = std::min(val2,val4); val4 = std::max(val2,val4);\n      val2 = tmp; tmp = std::min(val3,val5); val5 = std::max(val3,val5); val3 = tmp; tmp = std::min(val6,val8);\n      val8 = std::max(val6,val8); val6 = tmp; tmp = std::min(val7,val9); val9 = std::max(val7,val9); val7 = tmp;\n      tmp = std::min(val10,val12); val12 = std::max(val10,val12); val10 = tmp; tmp = std::min(val11,val13);\n      val13 = std::max(val11,val13); val11 = tmp; tmp = std::min(val14,val16); val16 = std::max(val14,val16);\n      val14 = tmp; tmp = std::min(val15,val17); val17 = std::max(val15,val17); val15 = tmp;\n      tmp = std::min(val18,val20); val20 = std::max(val18,val20); val18 = tmp; tmp = std::min(val19,val21);\n      val21 = std::max(val19,val21); val19 = tmp; tmp = std::min(val22,val24); val24 = std::max(val22,val24);\n      val22 = tmp; tmp = std::min(val23,val25); val25 = std::max(val23,val25); val23 = tmp;\n      tmp = std::min(val26,val28); val28 = std::max(val26,val28); val26 = tmp; tmp = std::min(val27,val29);\n      val29 = std::max(val27,val29); val27 = tmp; tmp = std::min(val30,val32); val32 = std::max(val30,val32);\n      val30 = tmp; tmp = std::min(val31,val33); val33 = std::max(val31,val33); val31 = tmp;\n      tmp = std::min(val34,val36); val36 = std::max(val34,val36); val34 = tmp; tmp = std::min(val35,val37);\n      val37 = std::max(val35,val37); val35 = tmp; tmp = std::min(val38,val40); val40 = std::max(val38,val40);\n      val38 = tmp; tmp = std::min(val39,val41); val41 = std::max(val39,val41); val39 = tmp;\n      tmp = std::min(val42,val44); val44 = std::max(val42,val44); val42 = tmp; tmp = std::min(val43,val45);\n      val45 = std::max(val43,val45); val43 = tmp; tmp = std::min(val46,val48); val48 = std::max(val46,val48);\n      val46 = tmp; val1 = std::max(val0,val1); val3 = std::max(val2,val3); val5 = std::max(val4,val5);\n      val7 = std::max(val6,val7); val9 = std::max(val8,val9); val11 = std::max(val10,val11);\n      val13 = std::max(val12,val13); val15 = std::max(val14,val15); val17 = std::max(val16,val17);\n      val19 = std::max(val18,val19); val21 = std::max(val20,val21); val23 = std::max(val22,val23);\n      val24 = std::min(val24,val25); val26 = std::min(val26,val27); val28 = std::min(val28,val29);\n      val30 = std::min(val30,val31); val32 = std::min(val32,val33); val34 = std::min(val34,val35);\n      val36 = std::min(val36,val37); val38 = std::min(val38,val39); val40 = std::min(val40,val41);\n      val42 = std::min(val42,val43); val44 = std::min(val44,val45); val46 = std::min(val46,val47);\n      val32 = std::max(val1,val32); val34 = std::max(val3,val34); val36 = std::max(val5,val36);\n      val38 = std::max(val7,val38); val9 = std::min(val9,val40); val11 = std::min(val11,val42);\n      val13 = std::min(val13,val44); val15 = std::min(val15,val46); val17 = std::min(val17,val48);\n      val24 = std::max(val9,val24); val26 = std::max(val11,val26); val28 = std::max(val13,val28);\n      val30 = std::max(val15,val30); val17 = std::min(val17,val32); val19 = std::min(val19,val34);\n      val21 = std::min(val21,val36); val23 = std::min(val23,val38); val24 = std::max(val17,val24);\n      val26 = std::max(val19,val26); val21 = std::min(val21,val28); val23 = std::min(val23,val30);\n      val24 = std::max(val21,val24); val23 = std::min(val23,val26);\n      return std::max(val23,val24);\n    }\n\n    //! Return sqrt(x^2 + y^2).\n    template<typename T>\n    inline T hypot(const T x, const T y) {\n      return std::sqrt(x*x + y*y);\n    }\n\n    template<typename T>\n    inline T hypot(const T x, const T y, const T z) {\n      return std::sqrt(x*x + y*y + z*z);\n    }\n\n    template<typename T>\n    inline T _hypot(const T x, const T y) { // Slower but more precise version\n      T nx = cimg::abs(x), ny = cimg::abs(y), t;\n      if (nx<ny) { t = nx; nx = ny; } else t = ny;\n      if (nx>0) { t/=nx; return nx*std::sqrt(1 + t*t); }\n      return 0;\n    }\n\n    //! Return the factorial of n\n    inline double factorial(const int n) {\n      if (n<0) return cimg::type<double>::nan();\n      if (n<2) return 1;\n      double res = 2;\n      for (int i = 3; i<=n; ++i) res*=i;\n      return res;\n    }\n\n    //! Return the number of permutations of k objects in a set of n objects.\n    inline double permutations(const int k, const int n, const bool with_order) {\n      if (n<0 || k<0) return cimg::type<double>::nan();\n      if (k>n) return 0;\n      double res = 1;\n      for (int i = n; i>=n - k + 1; --i) res*=i;\n      return with_order?res:res/cimg::factorial(k);\n    }\n\n    inline double _fibonacci(int exp) {\n      double\n        base = (1 + std::sqrt(5.0))/2,\n        result = 1/std::sqrt(5.0);\n      while (exp) {\n        if (exp&1) result*=base;\n        exp>>=1;\n        base*=base;\n      }\n      return result;\n    }\n\n    //! Calculate fibonacci number.\n    // (Precise up to n = 78, less precise for n>78).\n    inline double fibonacci(const int n) {\n      if (n<0) return cimg::type<double>::nan();\n      if (n<3) return 1;\n      if (n<11) {\n        cimg_uint64 fn1 = 1, fn2 = 1, fn = 0;\n        for (int i = 3; i<=n; ++i) { fn = fn1 + fn2; fn2 = fn1; fn1 = fn; }\n        return (double)fn;\n      }\n      if (n<75) // precise up to n = 74, faster than the integer calculation above for n>10\n        return (double)((cimg_uint64)(_fibonacci(n) + 0.5));\n\n      if (n<94) { // precise up to n = 78, less precise for n>78 up to n = 93, overflows for n>93\n        cimg_uint64\n          fn1 = (cimg_uint64)1304969544928657U,\n          fn2 = (cimg_uint64)806515533049393U,\n          fn = 0;\n        for (int i = 75; i<=n; ++i) { fn = fn1 + fn2; fn2 = fn1; fn1 = fn; }\n        return (double)fn;\n      }\n      return _fibonacci(n); // Not precise, but better than the wrong overflowing calculation\n    }\n\n    //! Convert ascii character to lower case.\n    inline char lowercase(const char x) {\n      return (char)((x<'A'||x>'Z')?x:x - 'A' + 'a');\n    }\n    inline double lowercase(const double x) {\n      return (double)((x<'A'||x>'Z')?x:x - 'A' + 'a');\n    }\n\n    //! Convert C-string to lower case.\n    inline void lowercase(char *const str) {\n      if (str) for (char *ptr = str; *ptr; ++ptr) *ptr = lowercase(*ptr);\n    }\n\n    //! Convert ascii character to upper case.\n    inline char uppercase(const char x) {\n      return (char)((x<'a'||x>'z')?x:x - 'a' + 'A');\n    }\n\n    inline double uppercase(const double x) {\n      return (double)((x<'a'||x>'z')?x:x - 'a' + 'A');\n    }\n\n    //! Convert C-string to upper case.\n    inline void uppercase(char *const str) {\n      if (str) for (char *ptr = str; *ptr; ++ptr) *ptr = uppercase(*ptr);\n    }\n\n    //! Read value in a C-string.\n    /**\n       \\param str C-string containing the float value to read.\n       \\return Read value.\n       \\note Same as <tt>std::atof()</tt> extended to manage the retrieval of fractions from C-strings,\n       as in <em>\"1/2\"</em>.\n    **/\n    inline double atof(const char *const str) {\n      double x = 0, y = 1;\n      return str && cimg_sscanf(str,\"%lf/%lf\",&x,&y)>0?x/y:0;\n    }\n\n    //! Compare the first \\p l characters of two C-strings, ignoring the case.\n    /**\n       \\param str1 C-string.\n       \\param str2 C-string.\n       \\param l Number of characters to compare.\n       \\return \\c 0 if the two strings are equal, something else otherwise.\n       \\note This function has to be defined since it is not provided by all C++-compilers (not ANSI).\n    **/\n    inline int strncasecmp(const char *const str1, const char *const str2, const int l) {\n      if (!l) return 0;\n      if (!str1) return str2?-1:0;\n      const char *nstr1 = str1, *nstr2 = str2;\n      int k, diff = 0; for (k = 0; k<l && !(diff = lowercase(*nstr1) - lowercase(*nstr2)); ++k) { ++nstr1; ++nstr2; }\n      return k!=l?diff:0;\n    }\n\n    //! Compare two C-strings, ignoring the case.\n    /**\n       \\param str1 C-string.\n       \\param str2 C-string.\n       \\return \\c 0 if the two strings are equal, something else otherwise.\n       \\note This function has to be defined since it is not provided by all C++-compilers (not ANSI).\n    **/\n    inline int strcasecmp(const char *const str1, const char *const str2) {\n      if (!str1) return str2?-1:0;\n      const int\n        l1 = (int)std::strlen(str1),\n        l2 = (int)std::strlen(str2);\n      return cimg::strncasecmp(str1,str2,1 + (l1<l2?l1:l2));\n    }\n\n    //! Ellipsize a string.\n    /**\n       \\param str C-string.\n       \\param l Max number of characters.\n       \\param is_ending Tell if the dots are placed at the end or at the center of the ellipsized string.\n    **/\n    inline char *strellipsize(char *const str, const unsigned int l=64,\n                              const bool is_ending=true) {\n      if (!str) return str;\n      const unsigned int nl = l<5?5:l, ls = (unsigned int)std::strlen(str);\n      if (ls<=nl) return str;\n      if (is_ending) std::strcpy(str + nl - 5,\"(...)\");\n      else {\n        const unsigned int ll = (nl - 5)/2 + 1 - (nl%2), lr = nl - ll - 5;\n        std::strcpy(str + ll,\"(...)\");\n        std::memmove(str + ll + 5,str + ls - lr,lr);\n      }\n      str[nl] = 0;\n      return str;\n    }\n\n    //! Ellipsize a string.\n    /**\n       \\param str C-string.\n       \\param res output C-string.\n       \\param l Max number of characters.\n       \\param is_ending Tell if the dots are placed at the end or at the center of the ellipsized string.\n    **/\n    inline char *strellipsize(const char *const str, char *const res, const unsigned int l=64,\n                              const bool is_ending=true) {\n      const unsigned int nl = l<5?5:l, ls = (unsigned int)std::strlen(str);\n      if (ls<=nl) { std::strcpy(res,str); return res; }\n      if (is_ending) {\n        std::strncpy(res,str,nl - 5);\n        std::strcpy(res + nl -5,\"(...)\");\n      } else {\n        const unsigned int ll = (nl - 5)/2 + 1 - (nl%2), lr = nl - ll - 5;\n        std::strncpy(res,str,ll);\n        std::strcpy(res + ll,\"(...)\");\n        std::strncpy(res + ll + 5,str + ls - lr,lr);\n      }\n      res[nl] = 0;\n      return res;\n    }\n\n    //! Remove delimiters on the start and/or end of a C-string.\n    /**\n       \\param[in,out] str C-string to work with (modified at output).\n       \\param delimiter Delimiter character code to remove.\n       \\param is_symmetric Tells if the removal is done only if delimiters are symmetric\n       (both at the beginning and the end of \\c s).\n       \\param is_iterative Tells if the removal is done if several iterations are possible.\n       \\return \\c true if delimiters have been removed, \\c false otherwise.\n   **/\n    inline bool strpare(char *const str, const char delimiter,\n                        const bool is_symmetric, const bool is_iterative) {\n      if (!str) return false;\n      const int l = (int)std::strlen(str);\n      int p, q;\n      if (is_symmetric) for (p = 0, q = l - 1; p<q && str[p]==delimiter && str[q]==delimiter; ) {\n          --q; ++p; if (!is_iterative) break;\n        } else {\n        for (p = 0; p<l && str[p]==delimiter; ) { ++p; if (!is_iterative) break; }\n        for (q = l - 1; q>p && str[q]==delimiter; ) { --q; if (!is_iterative) break; }\n      }\n      const int n = q - p + 1;\n      if (n!=l) { std::memmove(str,str + p,(unsigned int)n); str[n] = 0; return true; }\n      return false;\n    }\n\n    //! Remove white spaces on the start and/or end of a C-string.\n    inline bool strpare(char *const str, const bool is_symmetric, const bool is_iterative) {\n      if (!str) return false;\n      const int l = (int)std::strlen(str);\n      int p, q;\n      if (is_symmetric) for (p = 0, q = l - 1; p<q && (signed char)str[p]<=' ' && (signed char)str[q]<=' '; ) {\n          --q; ++p; if (!is_iterative) break;\n        } else {\n        for (p = 0; p<l && (signed char)str[p]<=' '; ) { ++p; if (!is_iterative) break; }\n        for (q = l - 1; q>p && (signed char)str[q]<=' '; ) { --q; if (!is_iterative) break; }\n      }\n      const int n = q - p + 1;\n      if (n!=l) { std::memmove(str,str + p,(unsigned int)n); str[n] = 0; return true; }\n      return false;\n    }\n\n    //! Replace reserved characters (for Windows filename) by another character.\n    /**\n       \\param[in,out] str C-string to work with (modified at output).\n       \\param[in] c Replacement character.\n    **/\n    inline void strwindows_reserved(char *const str, const char c='_') {\n      for (char *s = str; *s; ++s) {\n        const char i = *s;\n        if (i=='<' || i=='>' || i==':' || i=='\\\"' || i=='/' || i=='\\\\' || i=='|' || i=='?' || i=='*') *s = c;\n      }\n    }\n\n    //! Replace escape sequences in C-strings by their binary ascii values.\n    /**\n       \\param[in,out] str C-string to work with (modified at output).\n    **/\n    inline void strunescape(char *const str) {\n#define cimg_strunescape(ci,co) case ci : *nd = co; ++ns; break;\n      unsigned int val = 0;\n      for (char *ns = str, *nd = str; *ns || (bool)(*nd=0); ++nd) if (*ns=='\\\\') switch (*(++ns)) {\n            cimg_strunescape('a','\\a');\n            cimg_strunescape('b','\\b');\n            cimg_strunescape('e',0x1B);\n            cimg_strunescape('f','\\f');\n            cimg_strunescape('n','\\n');\n            cimg_strunescape('r','\\r');\n            cimg_strunescape('t','\\t');\n            cimg_strunescape('v','\\v');\n            cimg_strunescape('\\\\','\\\\');\n            cimg_strunescape('\\'','\\'');\n            cimg_strunescape('\\\"','\\\"');\n            cimg_strunescape('\\?','\\?');\n          case 0 : *nd = 0; break;\n          case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' :\n            cimg_sscanf(ns,\"%o\",&val); while (*ns>='0' && *ns<='7') ++ns;\n            *nd = (char)val; break;\n          case 'x' :\n            cimg_sscanf(++ns,\"%x\",&val);\n            while ((*ns>='0' && *ns<='9') || (*ns>='a' && *ns<='f') || (*ns>='A' && *ns<='F')) ++ns;\n            *nd = (char)val; break;\n          default : *nd = *(ns++);\n          } else *nd = *(ns++);\n    }\n\n    // Return a temporary string describing the size of a memory buffer.\n    inline const char *strbuffersize(const cimg_ulong size);\n\n    // Return string that identifies the running OS.\n    inline const char *stros() {\n#if defined(linux) || defined(__linux) || defined(__linux__)\n      static const char *const str = \"Linux\";\n#elif defined(sun) || defined(__sun)\n      static const char *const str = \"Sun OS\";\n#elif defined(BSD) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__) || defined (__DragonFly__)\n      static const char *const str = \"BSD\";\n#elif defined(sgi) || defined(__sgi)\n      static const char *const str = \"Irix\";\n#elif defined(__MACOSX__) || defined(__APPLE__)\n      static const char *const str = \"Mac OS\";\n#elif defined(unix) || defined(__unix) || defined(__unix__)\n      static const char *const str = \"Generic Unix\";\n#elif defined(_MSC_VER) || defined(WIN32)  || defined(_WIN32) || defined(__WIN32__) || \\\n  defined(WIN64) || defined(_WIN64) || defined(__WIN64__)\n      static const char *const str = \"Windows\";\n#else\n      const char\n        *const _str1 = std::getenv(\"OSTYPE\"),\n        *const _str2 = _str1?_str1:std::getenv(\"OS\"),\n        *const str = _str2?_str2:\"Unknown OS\";\n#endif\n      return str;\n    }\n\n    //! Return the basename of a filename.\n    inline const char* basename(const char *const s, const char separator=cimg_file_separator)  {\n      const char *p = 0, *np = s;\n      while (np>=s && (p=np)) np = std::strchr(np,separator) + 1;\n      return p;\n    }\n\n    // Return a random filename.\n    inline const char* filenamerand() {\n      cimg::mutex(6);\n      static char randomid[9];\n      cimg::srand();\n      for (unsigned int k = 0; k<8; ++k) {\n        const int v = (int)cimg::rand(65535)%3;\n        randomid[k] = (char)(v==0?('0' + ((int)cimg::rand(65535)%10)):\n                             (v==1?('a' + ((int)cimg::rand(65535)%26)):\n                              ('A' + ((int)cimg::rand(65535)%26))));\n      }\n      cimg::mutex(6,0);\n      return randomid;\n    }\n\n    // Convert filename as a Windows-style filename (short path name).\n    inline void winformat_string(char *const str) {\n      if (str && *str) {\n#if cimg_OS==2\n        char *const nstr = new char[MAX_PATH];\n        if (GetShortPathNameA(str,nstr,MAX_PATH)) std::strcpy(str,nstr);\n        delete[] nstr;\n#endif\n      }\n    }\n\n    // Open a file (with wide character support on Windows).\n    inline std::FILE *win_fopen(const char *const path, const char *const mode);\n\n    //! Open a file.\n    /**\n       \\param path Path of the filename to open.\n       \\param mode C-string describing the opening mode.\n       \\return Opened file.\n       \\note Same as <tt>std::fopen()</tt> but throw a \\c CImgIOException when\n       the specified file cannot be opened, instead of returning \\c 0.\n    **/\n    inline std::FILE *fopen(const char *const path, const char *const mode) {\n      if (!path)\n        throw CImgArgumentException(\"cimg::fopen(): Specified file path is (null).\");\n      if (!mode)\n        throw CImgArgumentException(\"cimg::fopen(): File '%s', specified mode is (null).\",\n                                    path);\n      std::FILE *res = 0;\n      if (*path=='-' && (!path[1] || path[1]=='.')) {\n        res = (*mode=='r')?cimg::_stdin():cimg::_stdout();\n#if cimg_OS==2\n        if (*mode && mode[1]=='b') { // Force stdin/stdout to be in binary mode.\n#ifdef __BORLANDC__\n          if (setmode(_fileno(res),0x8000)==-1) res = 0;\n#else\n          if (_setmode(_fileno(res),0x8000)==-1) res = 0;\n#endif\n        }\n#endif\n      } else res = std_fopen(path,mode);\n      if (!res) throw CImgIOException(\"cimg::fopen(): Failed to open file '%s' with mode '%s'.\",\n                                      path,mode);\n      return res;\n    }\n\n    //! Close a file.\n    /**\n       \\param file File to close.\n       \\return \\c 0 if file has been closed properly, something else otherwise.\n       \\note Same as <tt>std::fclose()</tt> but display a warning message if\n       the file has not been closed properly.\n    **/\n    inline int fclose(std::FILE *file) {\n      if (!file) { warn(\"cimg::fclose(): Specified file is (null).\"); return 0; }\n      if (file==cimg::_stdin(false) || file==cimg::_stdout(false)) return 0;\n      const int errn = std::fclose(file);\n      if (errn!=0) warn(\"cimg::fclose(): Error code %d returned during file closing.\",\n                        errn);\n      return errn;\n    }\n\n    //! Version of 'fseek()' that supports >=64bits offsets everywhere (for Windows).\n    inline int fseek(FILE *stream, cimg_long offset, int origin) {\n#if cimg_OS==2\n      return _fseeki64(stream,(__int64)offset,origin);\n#else\n      return std::fseek(stream,offset,origin);\n#endif\n    }\n\n    //! Version of 'ftell()' that supports >=64bits offsets everywhere (for Windows).\n    inline cimg_long ftell(FILE *stream) {\n#if cimg_OS==2\n      return (cimg_long)_ftelli64(stream);\n#else\n      return (cimg_long)std::ftell(stream);\n#endif\n    }\n\n    //! Check if a path is a directory.\n    /**\n       \\param path Specified path to test.\n    **/\n    inline bool is_directory(const char *const path) {\n      if (!path || !*path) return false;\n#if cimg_OS==1\n      struct stat st_buf;\n      return (!stat(path,&st_buf) && S_ISDIR(st_buf.st_mode));\n#elif cimg_OS==2\n      const unsigned int res = (unsigned int)GetFileAttributesA(path);\n      return res==INVALID_FILE_ATTRIBUTES?false:(res&16);\n#else\n      return false;\n#endif\n    }\n\n    //! Check if a path is a file.\n    /**\n       \\param path Specified path to test.\n    **/\n    inline bool is_file(const char *const path) {\n      if (!path || !*path) return false;\n      std::FILE *const file = std_fopen(path,\"rb\");\n      if (!file) return false;\n      std::fclose(file);\n      return !is_directory(path);\n    }\n\n    //! Get last write time of a given file or directory.\n    /**\n       \\param path Specified path to get attributes from.\n       \\param attr Type of requested time attribute.\n                   Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second }\n       \\return -1 if requested attribute could not be read.\n    **/\n    inline int fdate(const char *const path, const unsigned int attr) {\n      int res = -1;\n      if (!path || !*path || attr>6) return -1;\n      cimg::mutex(6);\n#if cimg_OS==2\n      HANDLE file = CreateFileA(path,GENERIC_READ,0,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);\n      if (file!=INVALID_HANDLE_VALUE) {\n        FILETIME _ft;\n        SYSTEMTIME ft;\n        if (GetFileTime(file,0,0,&_ft) && FileTimeToSystemTime(&_ft,&ft))\n          res = (int)(attr==0?ft.wYear:attr==1?ft.wMonth:attr==2?ft.wDay:attr==3?ft.wDayOfWeek:\n                      attr==4?ft.wHour:attr==5?ft.wMinute:ft.wSecond);\n        CloseHandle(file);\n      }\n#elif cimg_OS==1\n      struct stat st_buf;\n      if (!stat(path,&st_buf)) {\n        const time_t _ft = st_buf.st_mtime;\n        const struct tm& ft = *std::localtime(&_ft);\n        res = (int)(attr==0?ft.tm_year + 1900:attr==1?ft.tm_mon + 1:attr==2?ft.tm_mday:attr==3?ft.tm_wday:\n                    attr==4?ft.tm_hour:attr==5?ft.tm_min:ft.tm_sec);\n      }\n#endif\n      cimg::mutex(6,0);\n      return res;\n    }\n\n    //! Get current local time.\n    /**\n       \\param attr Type of requested time attribute.\n                   Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second }\n    **/\n    inline int date(const unsigned int attr) {\n      int res;\n      cimg::mutex(6);\n#if cimg_OS==2\n      SYSTEMTIME st;\n      GetLocalTime(&st);\n      res = (int)(attr==0?st.wYear:attr==1?st.wMonth:attr==2?st.wDay:attr==3?st.wDayOfWeek:\n                  attr==4?st.wHour:attr==5?st.wMinute:st.wSecond);\n#else\n      time_t _st;\n      std::time(&_st);\n      struct tm *st = std::localtime(&_st);\n      res = (int)(attr==0?st->tm_year + 1900:attr==1?st->tm_mon + 1:attr==2?st->tm_mday:attr==3?st->tm_wday:\n                  attr==4?st->tm_hour:attr==5?st->tm_min:st->tm_sec);\n#endif\n      cimg::mutex(6,0);\n      return res;\n    }\n\n    // Get/set path to store temporary files.\n    inline const char* temporary_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the <i>Program Files/</i> directory (Windows only).\n#if cimg_OS==2\n    inline const char* programfiles_path(const char *const user_path=0, const bool reinit_path=false);\n#endif\n\n    // Get/set path to the ImageMagick's \\c convert binary.\n    inline const char* imagemagick_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the GraphicsMagick's \\c gm binary.\n    inline const char* graphicsmagick_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the XMedcon's \\c medcon binary.\n    inline const char* medcon_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the FFMPEG's \\c ffmpeg binary.\n    inline const char *ffmpeg_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the \\c gzip binary.\n    inline const char *gzip_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the \\c gunzip binary.\n    inline const char *gunzip_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the \\c dcraw binary.\n    inline const char *dcraw_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the \\c wget binary.\n    inline const char *wget_path(const char *const user_path=0, const bool reinit_path=false);\n\n    // Get/set path to the \\c curl binary.\n    inline const char *curl_path(const char *const user_path=0, const bool reinit_path=false);\n\n    //! Split filename into two C-strings \\c body and \\c extension.\n    /**\n       filename and body must not overlap!\n    **/\n    inline const char *split_filename(const char *const filename, char *const body=0) {\n      if (!filename) { if (body) *body = 0; return 0; }\n      const char *p = 0; for (const char *np = filename; np>=filename && (p=np); np = std::strchr(np,'.') + 1) {}\n      if (p==filename) {\n        if (body) std::strcpy(body,filename);\n        return filename + std::strlen(filename);\n      }\n      const unsigned int l = (unsigned int)(p - filename - 1);\n      if (body) { if (l) std::memcpy(body,filename,l); body[l] = 0; }\n      return p;\n    }\n\n    //! Generate a numbered version of a filename.\n    inline char* number_filename(const char *const filename, const int number,\n                                 const unsigned int digits, char *const str) {\n      if (!filename) { if (str) *str = 0; return 0; }\n      char *const format = new char[1024], *const body = new char[1024];\n      const char *const ext = cimg::split_filename(filename,body);\n      if (*ext) cimg_snprintf(format,1024,\"%%s_%%.%ud.%%s\",digits);\n      else cimg_snprintf(format,1024,\"%%s_%%.%ud\",digits);\n      cimg_sprintf(str,format,body,number,ext);\n      delete[] format; delete[] body;\n      return str;\n    }\n\n    //! Read data from file.\n    /**\n       \\param[out] ptr Pointer to memory buffer that will contain the binary data read from file.\n       \\param nmemb Number of elements to read.\n       \\param stream File to read data from.\n       \\return Number of read elements.\n       \\note Same as <tt>std::fread()</tt> but may display warning message if all elements could not be read.\n    **/\n    template<typename T>\n    inline size_t fread(T *const ptr, const size_t nmemb, std::FILE *stream) {\n      if (!ptr || !stream)\n        throw CImgArgumentException(\"cimg::fread(): Invalid reading request of %u %s%s from file %p to buffer %p.\",\n                                    nmemb,cimg::type<T>::string(),nmemb>1?\"s\":\"\",stream,ptr);\n      if (!nmemb) return 0;\n      const size_t wlimitT = 63*1024*1024, wlimit = wlimitT/sizeof(T);\n      size_t to_read = nmemb, al_read = 0, l_to_read = 0, l_al_read = 0;\n      do {\n        l_to_read = (to_read*sizeof(T))<wlimitT?to_read:wlimit;\n        l_al_read = std::fread((void*)(ptr + al_read),sizeof(T),l_to_read,stream);\n        al_read+=l_al_read;\n        to_read-=l_al_read;\n      } while (l_to_read==l_al_read && to_read>0);\n      if (to_read>0)\n        warn(\"cimg::fread(): Only %lu/%lu elements could be read from file.\",\n             (unsigned long)al_read,(unsigned long)nmemb);\n      return al_read;\n    }\n\n    //! Write data to file.\n    /**\n       \\param ptr Pointer to memory buffer containing the binary data to write on file.\n       \\param nmemb Number of elements to write.\n       \\param[out] stream File to write data on.\n       \\return Number of written elements.\n       \\note Similar to <tt>std::fwrite</tt> but may display warning messages if all elements could not be written.\n    **/\n    template<typename T>\n    inline size_t fwrite(const T *ptr, const size_t nmemb, std::FILE *stream) {\n      if (!ptr || !stream)\n        throw CImgArgumentException(\"cimg::fwrite(): Invalid writing request of %u %s%s from buffer %p to file %p.\",\n                                    nmemb,cimg::type<T>::string(),nmemb>1?\"s\":\"\",ptr,stream);\n      if (!nmemb) return 0;\n      const size_t wlimitT = 63*1024*1024, wlimit = wlimitT/sizeof(T);\n      size_t to_write = nmemb, al_write = 0, l_to_write = 0, l_al_write = 0;\n      do {\n        l_to_write = (to_write*sizeof(T))<wlimitT?to_write:wlimit;\n        l_al_write = std::fwrite((void*)(ptr + al_write),sizeof(T),l_to_write,stream);\n        al_write+=l_al_write;\n        to_write-=l_al_write;\n      } while (l_to_write==l_al_write && to_write>0);\n      if (to_write>0)\n        warn(\"cimg::fwrite(): Only %lu/%lu elements could be written in file.\",\n             (unsigned long)al_write,(unsigned long)nmemb);\n      return al_write;\n    }\n\n    //! Create an empty file.\n    /**\n       \\param file Input file (can be \\c 0 if \\c filename is set).\n       \\param filename Filename, as a C-string (can be \\c 0 if \\c file is set).\n    **/\n    inline void fempty(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(\"cimg::fempty(): Specified filename is (null).\");\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      if (!file) cimg::fclose(nfile);\n    }\n\n    // Try to guess format from an image file.\n    inline const char *ftype(std::FILE *const file, const char *const filename);\n\n    // Load file from network as a local temporary file.\n    inline char *load_network(const char *const url, char *const filename_local,\n                              const unsigned int timeout=0, const bool try_fallback=false,\n                              const char *const referer=0);\n\n    //! Return options specified on the command line.\n    inline const char* option(const char *const name, const int argc, const char *const *const argv,\n                              const char *const defaut, const char *const usage, const bool reset_static) {\n      static bool first = true, visu = false;\n      if (reset_static) { first = true; return 0; }\n      const char *res = 0;\n      if (first) {\n        first = false;\n        visu = cimg::option(\"-h\",argc,argv,(char*)0,(char*)0,false)!=0;\n        visu |= cimg::option(\"-help\",argc,argv,(char*)0,(char*)0,false)!=0;\n        visu |= cimg::option(\"--help\",argc,argv,(char*)0,(char*)0,false)!=0;\n      }\n      if (!name && visu) {\n        if (usage) {\n          std::fprintf(cimg::output(),\"\\n %s%s%s\",cimg::t_red,cimg::basename(argv[0]),cimg::t_normal);\n          std::fprintf(cimg::output(),\": %s\",usage);\n          std::fprintf(cimg::output(),\" (%s, %s)\\n\\n\",cimg_date,cimg_time);\n        }\n        if (defaut) std::fprintf(cimg::output(),\"%s\\n\",defaut);\n      }\n      if (name) {\n        if (argc>0) {\n          int k = 0;\n          while (k<argc && std::strcmp(argv[k],name)) ++k;\n          res = (k++==argc?defaut:(k==argc?argv[--k]:argv[k]));\n        } else res = defaut;\n        if (visu && usage) std::fprintf(cimg::output(),\"    %s%-16s%s %-24s %s%s%s\\n\",\n                                        cimg::t_bold,name,cimg::t_normal,res?res:\"0\",\n                                        cimg::t_green,usage,cimg::t_normal);\n      }\n      return res;\n    }\n\n    inline const char* option(const char *const name, const int argc, const char *const *const argv,\n                              const char *const defaut, const char *const usage=0) {\n      return option(name,argc,argv,defaut,usage,false);\n    }\n\n    inline bool option(const char *const name, const int argc, const char *const *const argv,\n                       const bool defaut, const char *const usage=0) {\n      const char *const s = cimg::option(name,argc,argv,(char*)0);\n      const bool res = s?(cimg::strcasecmp(s,\"false\") && cimg::strcasecmp(s,\"off\") && cimg::strcasecmp(s,\"0\")):defaut;\n      cimg::option(name,0,0,res?\"true\":\"false\",usage);\n      return res;\n    }\n\n    inline int option(const char *const name, const int argc, const char *const *const argv,\n                      const int defaut, const char *const usage=0) {\n      const char *const s = cimg::option(name,argc,argv,(char*)0);\n      const int res = s?std::atoi(s):defaut;\n      char *const tmp = new char[256];\n      cimg_snprintf(tmp,256,\"%d\",res);\n      cimg::option(name,0,0,tmp,usage);\n      delete[] tmp;\n      return res;\n    }\n\n    inline char option(const char *const name, const int argc, const char *const *const argv,\n                       const char defaut, const char *const usage=0) {\n      const char *const s = cimg::option(name,argc,argv,(char*)0);\n      const char res = s?*s:defaut;\n      char tmp[8];\n      *tmp = res; tmp[1] = 0;\n      cimg::option(name,0,0,tmp,usage);\n      return res;\n    }\n\n    inline float option(const char *const name, const int argc, const char *const *const argv,\n                        const float defaut, const char *const usage=0) {\n      const char *const s = cimg::option(name,argc,argv,(char*)0);\n      const float res = s?(float)cimg::atof(s):defaut;\n      char *const tmp = new char[256];\n      cimg_snprintf(tmp,256,\"%g\",res);\n      cimg::option(name,0,0,tmp,usage);\n      delete[] tmp;\n      return res;\n    }\n\n    inline double option(const char *const name, const int argc, const char *const *const argv,\n                         const double defaut, const char *const usage=0) {\n      const char *const s = cimg::option(name,argc,argv,(char*)0);\n      const double res = s?cimg::atof(s):defaut;\n      char *const tmp = new char[256];\n      cimg_snprintf(tmp,256,\"%g\",res);\n      cimg::option(name,0,0,tmp,usage);\n      delete[] tmp;\n      return res;\n    }\n\n    //! Print information about \\CImg environement variables.\n    /**\n       \\note Output is done on the default output stream.\n    **/\n    inline void info() {\n      std::fprintf(cimg::output(),\"\\n %s%sCImg Library %u.%u.%u%s, compiled %s ( %s ) with the following flags:\\n\\n\",\n                   cimg::t_red,cimg::t_bold,cimg_version/100,(cimg_version/10)%10,cimg_version%10,\n                   cimg::t_normal,cimg_date,cimg_time);\n\n      std::fprintf(cimg::output(),\"  > Operating System:       %s%-13s%s %s('cimg_OS'=%d)%s\\n\",\n                   cimg::t_bold,\n                   cimg_OS==1?\"Unix\":(cimg_OS==2?\"Windows\":\"Unknow\"),\n                   cimg::t_normal,cimg::t_green,\n                   cimg_OS,\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > CPU endianness:         %s%s Endian%s\\n\",\n                   cimg::t_bold,\n                   cimg::endianness()?\"Big\":\"Little\",\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Verbosity mode:         %s%-13s%s %s('cimg_verbosity'=%d)%s\\n\",\n                   cimg::t_bold,\n                   cimg_verbosity==0?\"Quiet\":\n                   cimg_verbosity==1?\"Console\":\n                   cimg_verbosity==2?\"Dialog\":\n                   cimg_verbosity==3?\"Console+Warnings\":\"Dialog+Warnings\",\n                   cimg::t_normal,cimg::t_green,\n                   cimg_verbosity,\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Stricts warnings:       %s%-13s%s %s('cimg_strict_warnings' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_strict_warnings\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Support for C++11:      %s%-13s%s %s('cimg_use_cpp11'=%d)%s\\n\",\n                   cimg::t_bold,\n                   cimg_use_cpp11?\"Yes\":\"No\",\n                   cimg::t_normal,cimg::t_green,\n                   (int)cimg_use_cpp11,\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using VT100 messages:   %s%-13s%s %s('cimg_use_vt100' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_vt100\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Display type:           %s%-13s%s %s('cimg_display'=%d)%s\\n\",\n                   cimg::t_bold,\n                   cimg_display==0?\"No display\":cimg_display==1?\"X11\":cimg_display==2?\"Windows GDI\":\"Unknown\",\n                   cimg::t_normal,cimg::t_green,\n                   (int)cimg_display,\n                   cimg::t_normal);\n\n#if cimg_display==1\n      std::fprintf(cimg::output(),\"  > Using XShm for X11:     %s%-13s%s %s('cimg_use_xshm' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_xshm\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using XRand for X11:    %s%-13s%s %s('cimg_use_xrandr' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_xrandr\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n#endif\n      std::fprintf(cimg::output(),\"  > Using OpenMP:           %s%-13s%s %s('cimg_use_openmp' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_openmp\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n      std::fprintf(cimg::output(),\"  > Using PNG library:      %s%-13s%s %s('cimg_use_png' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_png\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n      std::fprintf(cimg::output(),\"  > Using JPEG library:     %s%-13s%s %s('cimg_use_jpeg' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_jpeg\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using TIFF library:     %s%-13s%s %s('cimg_use_tiff' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_tiff\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using Magick++ library: %s%-13s%s %s('cimg_use_magick' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_magick\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using FFTW3 library:    %s%-13s%s %s('cimg_use_fftw3' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_fftw3\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"  > Using LAPACK library:   %s%-13s%s %s('cimg_use_lapack' %s)%s\\n\",\n                   cimg::t_bold,\n#ifdef cimg_use_lapack\n                   \"Yes\",cimg::t_normal,cimg::t_green,\"defined\",\n#else\n                   \"No\",cimg::t_normal,cimg::t_green,\"undefined\",\n#endif\n                   cimg::t_normal);\n\n      char *const tmp = new char[1024];\n      cimg_snprintf(tmp,1024,\"\\\"%.1020s\\\"\",cimg::imagemagick_path());\n      std::fprintf(cimg::output(),\"  > Path of ImageMagick:    %s%-13s%s\\n\",\n                   cimg::t_bold,\n                   tmp,\n                   cimg::t_normal);\n\n      cimg_snprintf(tmp,1024,\"\\\"%.1020s\\\"\",cimg::graphicsmagick_path());\n      std::fprintf(cimg::output(),\"  > Path of GraphicsMagick: %s%-13s%s\\n\",\n                   cimg::t_bold,\n                   tmp,\n                   cimg::t_normal);\n\n      cimg_snprintf(tmp,1024,\"\\\"%.1020s\\\"\",cimg::medcon_path());\n      std::fprintf(cimg::output(),\"  > Path of 'medcon':       %s%-13s%s\\n\",\n                   cimg::t_bold,\n                   tmp,\n                   cimg::t_normal);\n\n      cimg_snprintf(tmp,1024,\"\\\"%.1020s\\\"\",cimg::temporary_path());\n      std::fprintf(cimg::output(),\"  > Temporary path:         %s%-13s%s\\n\",\n                   cimg::t_bold,\n                   tmp,\n                   cimg::t_normal);\n\n      std::fprintf(cimg::output(),\"\\n\");\n      delete[] tmp;\n    }\n\n    // Declare LAPACK function signatures if LAPACK support is enabled.\n#ifdef cimg_use_lapack\n    template<typename T>\n    inline void getrf(int &N, T *lapA, int *IPIV, int &INFO) {\n      dgetrf_(&N,&N,lapA,&N,IPIV,&INFO);\n    }\n\n    inline void getrf(int &N, float *lapA, int *IPIV, int &INFO) {\n      sgetrf_(&N,&N,lapA,&N,IPIV,&INFO);\n    }\n\n    template<typename T>\n    inline void getri(int &N, T *lapA, int *IPIV, T* WORK, int &LWORK, int &INFO) {\n      dgetri_(&N,lapA,&N,IPIV,WORK,&LWORK,&INFO);\n    }\n\n    inline void getri(int &N, float *lapA, int *IPIV, float* WORK, int &LWORK, int &INFO) {\n      sgetri_(&N,lapA,&N,IPIV,WORK,&LWORK,&INFO);\n    }\n\n    template<typename T>\n    inline void gesvd(char &JOB, int &M, int &N, T *lapA, int &MN,\n                      T *lapS, T *lapU, T *lapV, T *WORK, int &LWORK, int &INFO) {\n      dgesvd_(&JOB,&JOB,&M,&N,lapA,&MN,lapS,lapU,&M,lapV,&N,WORK,&LWORK,&INFO);\n    }\n\n    inline void gesvd(char &JOB, int &M, int &N, float *lapA, int &MN,\n                      float *lapS, float *lapU, float *lapV, float *WORK, int &LWORK, int &INFO) {\n      sgesvd_(&JOB,&JOB,&M,&N,lapA,&MN,lapS,lapU,&M,lapV,&N,WORK,&LWORK,&INFO);\n    }\n\n    template<typename T>\n    inline void getrs(char &TRANS, int &N, T *lapA, int *IPIV, T *lapB, int &INFO) {\n      int one = 1;\n      dgetrs_(&TRANS,&N,&one,lapA,&N,IPIV,lapB,&N,&INFO);\n    }\n\n    inline void getrs(char &TRANS, int &N, float *lapA, int *IPIV, float *lapB, int &INFO) {\n      int one = 1;\n      sgetrs_(&TRANS,&N,&one,lapA,&N,IPIV,lapB,&N,&INFO);\n    }\n\n    template<typename T>\n    inline void syev(char &JOB, char &UPLO, int &N, T *lapA, T *lapW, T *WORK, int &LWORK, int &INFO) {\n      dsyev_(&JOB,&UPLO,&N,lapA,&N,lapW,WORK,&LWORK,&INFO);\n    }\n\n    inline void syev(char &JOB, char &UPLO, int &N, float *lapA, float *lapW, float *WORK, int &LWORK, int &INFO) {\n      ssyev_(&JOB,&UPLO,&N,lapA,&N,lapW,WORK,&LWORK,&INFO);\n    }\n\n    template<typename T>\n    inline void sgels(char & TRANS, int &M, int &N, int &NRHS, T* lapA, int &LDA,\n                      T* lapB, int &LDB, T* WORK, int &LWORK, int &INFO){\n      dgels_(&TRANS, &M, &N, &NRHS, lapA, &LDA, lapB, &LDB, WORK, &LWORK, &INFO);\n    }\n\n    inline void sgels(char & TRANS, int &M, int &N, int &NRHS, float* lapA, int &LDA,\n                      float* lapB, int &LDB, float* WORK, int &LWORK, int &INFO){\n      sgels_(&TRANS, &M, &N, &NRHS, lapA, &LDA, lapB, &LDB, WORK, &LWORK, &INFO);\n    }\n\n#endif\n\n    // End of the 'cimg' namespace\n  }\n\n  /*------------------------------------------------\n   #\n   #\n   #   Definition of mathematical operators and\n   #   external functions.\n   #\n   #\n   -------------------------------------------------*/\n\n#define _cimg_create_ext_operators(typ) \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator+(const typ val, const CImg<T>& img) { \\\n    return img + val; \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator-(const typ val, const CImg<T>& img) { \\\n    typedef typename cimg::superset<T,typ>::type Tt; \\\n    return CImg<Tt>(img._width,img._height,img._depth,img._spectrum,val)-=img; \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator*(const typ val, const CImg<T>& img) { \\\n    return img*val; \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator/(const typ val, const CImg<T>& img) { \\\n    return val*img.get_invert(); \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator&(const typ val, const CImg<T>& img) { \\\n    return img & val; \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator|(const typ val, const CImg<T>& img) { \\\n    return img | val; \\\n  } \\\n  template<typename T> \\\n  inline CImg<typename cimg::superset<T,typ>::type> operator^(const typ val, const CImg<T>& img) { \\\n    return img ^ val; \\\n  } \\\n  template<typename T> \\\n  inline bool operator==(const typ val, const CImg<T>& img) {   \\\n    return img == val; \\\n  } \\\n  template<typename T> \\\n  inline bool operator!=(const typ val, const CImg<T>& img) { \\\n    return img != val; \\\n  }\n\n  _cimg_create_ext_operators(bool)\n  _cimg_create_ext_operators(unsigned char)\n  _cimg_create_ext_operators(char)\n  _cimg_create_ext_operators(signed char)\n  _cimg_create_ext_operators(unsigned short)\n  _cimg_create_ext_operators(short)\n  _cimg_create_ext_operators(unsigned int)\n  _cimg_create_ext_operators(int)\n  _cimg_create_ext_operators(cimg_uint64)\n  _cimg_create_ext_operators(cimg_int64)\n  _cimg_create_ext_operators(float)\n  _cimg_create_ext_operators(double)\n  _cimg_create_ext_operators(long double)\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> operator+(const char *const expression, const CImg<T>& img) {\n    return img + expression;\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> operator-(const char *const expression, const CImg<T>& img) {\n    return CImg<_cimg_Tfloat>(img,false).fill(expression,true)-=img;\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> operator*(const char *const expression, const CImg<T>& img) {\n    return img*expression;\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> operator/(const char *const expression, const CImg<T>& img) {\n    return expression*img.get_invert();\n  }\n\n  template<typename T>\n  inline CImg<T> operator&(const char *const expression, const CImg<T>& img) {\n    return img & expression;\n  }\n\n  template<typename T>\n  inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {\n    return img | expression;\n  }\n\n  template<typename T>\n  inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {\n    return img ^ expression;\n  }\n\n  template<typename T>\n  inline bool operator==(const char *const expression, const CImg<T>& img) {\n    return img==expression;\n  }\n\n  template<typename T>\n  inline bool operator!=(const char *const expression, const CImg<T>& img) {\n    return img!=expression;\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sqr(const CImg<T>& instance) {\n    return instance.get_sqr();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sqrt(const CImg<T>& instance) {\n    return instance.get_sqrt();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> exp(const CImg<T>& instance) {\n    return instance.get_exp();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> log(const CImg<T>& instance) {\n    return instance.get_log();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> log2(const CImg<T>& instance) {\n    return instance.get_log2();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> log10(const CImg<T>& instance) {\n    return instance.get_log10();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> abs(const CImg<T>& instance) {\n    return instance.get_abs();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sign(const CImg<T>& instance) {\n    return instance.get_sign();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> cos(const CImg<T>& instance) {\n    return instance.get_cos();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sin(const CImg<T>& instance) {\n    return instance.get_sin();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sinc(const CImg<T>& instance) {\n    return instance.get_sinc();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> tan(const CImg<T>& instance) {\n    return instance.get_tan();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> acos(const CImg<T>& instance) {\n    return instance.get_acos();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> asin(const CImg<T>& instance) {\n    return instance.get_asin();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> atan(const CImg<T>& instance) {\n    return instance.get_atan();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> cosh(const CImg<T>& instance) {\n    return instance.get_cosh();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> sinh(const CImg<T>& instance) {\n    return instance.get_sinh();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> tanh(const CImg<T>& instance) {\n    return instance.get_tanh();\n  }\n\n  template<typename T>\n  inline CImg<T> transpose(const CImg<T>& instance) {\n    return instance.get_transpose();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> invert(const CImg<T>& instance) {\n    return instance.get_invert();\n  }\n\n  template<typename T>\n  inline CImg<_cimg_Tfloat> pseudoinvert(const CImg<T>& instance) {\n    return instance.get_pseudoinvert();\n  }\n\n  /*-----------------------------------\n   #\n   # Define the CImgDisplay structure\n   #\n   ----------------------------------*/\n  //! Allow the creation of windows, display images on them and manage user events (keyboard, mouse and windows events).\n  /**\n     CImgDisplay methods rely on a low-level graphic library to perform: it can be either \\b X-Window\n     (X11, for Unix-based systems) or \\b GDI32 (for Windows-based systems).\n     If both libraries are missing, CImgDisplay will not be able to display images on screen, and will enter\n     a minimal mode where warning messages will be outputed each time the program is trying to call one of the\n     CImgDisplay method.\n\n     The configuration variable \\c cimg_display tells about the graphic library used.\n     It is set automatically by \\CImg when one of these graphic libraries has been detected.\n     But, you can override its value if necessary. Valid choices are:\n     - 0: Disable display capabilities.\n     - 1: Use \\b X-Window (X11) library.\n     - 2: Use \\b GDI32 library.\n\n     Remember to link your program against \\b X11 or \\b GDI32 libraries if you use CImgDisplay.\n  **/\n  struct CImgDisplay {\n    cimg_ulong _timer, _fps_frames, _fps_timer;\n    unsigned int _width, _height, _normalization;\n    float _fps_fps, _min, _max;\n    bool _is_fullscreen;\n    char *_title;\n    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;\n    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;\n    bool _is_closed, _is_resized, _is_moved, _is_event,\n      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,\n      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,\n      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,\n      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,\n      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,\n      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,\n      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,\n      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,\n      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,\n      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,\n      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,\n      _is_keyPADMUL, _is_keyPADDIV;\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Plugins\n    //@{\n    //---------------------------\n\n#ifdef cimgdisplay_plugin\n#include cimgdisplay_plugin\n#endif\n#ifdef cimgdisplay_plugin1\n#include cimgdisplay_plugin1\n#endif\n#ifdef cimgdisplay_plugin2\n#include cimgdisplay_plugin2\n#endif\n#ifdef cimgdisplay_plugin3\n#include cimgdisplay_plugin3\n#endif\n#ifdef cimgdisplay_plugin4\n#include cimgdisplay_plugin4\n#endif\n#ifdef cimgdisplay_plugin5\n#include cimgdisplay_plugin5\n#endif\n#ifdef cimgdisplay_plugin6\n#include cimgdisplay_plugin6\n#endif\n#ifdef cimgdisplay_plugin7\n#include cimgdisplay_plugin7\n#endif\n#ifdef cimgdisplay_plugin8\n#include cimgdisplay_plugin8\n#endif\n\n    //@}\n    //--------------------------------------------------------\n    //\n    //! \\name Constructors / Destructor / Instance Management\n    //@{\n    //--------------------------------------------------------\n\n    //! Destructor.\n    /**\n       \\note If the associated window is visible on the screen, it is closed by the call to the destructor.\n    **/\n    ~CImgDisplay() {\n      assign();\n      delete[] _keys;\n      delete[] _released_keys;\n    }\n\n    //! Construct an empty display.\n    /**\n       \\note Constructing an empty CImgDisplay instance does not make a window appearing on the screen, until\n       display of valid data is performed.\n       \\par Example\n       \\code\n       CImgDisplay disp;  // Does actually nothing.\n       ...\n       disp.display(img); // Construct new window and display image in it.\n       \\endcode\n    **/\n    CImgDisplay():\n      _width(0),_height(0),_normalization(0),\n      _min(0),_max(0),\n      _is_fullscreen(false),\n      _title(0),\n      _window_width(0),_window_height(0),_button(0),\n      _keys(new unsigned int[128]),_released_keys(new unsigned int[128]),\n      _window_x(0),_window_y(0),_mouse_x(-1),_mouse_y(-1),_wheel(0),\n      _is_closed(true),_is_resized(false),_is_moved(false),_is_event(false) {\n      assign();\n    }\n\n    //! Construct a display with specified dimensions.\n    /** \\param width Window width.\n        \\param height Window height.\n        \\param title Window title.\n        \\param normalization Normalization type\n        (<tt>0</tt>=none, <tt>1</tt>=always, <tt>2</tt>=once, <tt>3</tt>=pixel type-dependent, see normalization()).\n        \\param is_fullscreen Tells if fullscreen mode is enabled.\n        \\param is_closed Tells if associated window is initially visible or not.\n        \\note A black background is initially displayed on the associated window.\n    **/\n    CImgDisplay(const unsigned int width, const unsigned int height,\n                const char *const title=0, const unsigned int normalization=3,\n                const bool is_fullscreen=false, const bool is_closed=false):\n      _width(0),_height(0),_normalization(0),\n      _min(0),_max(0),\n      _is_fullscreen(false),\n      _title(0),\n      _window_width(0),_window_height(0),_button(0),\n      _keys(new unsigned int[128]),_released_keys(new unsigned int[128]),\n      _window_x(0),_window_y(0),_mouse_x(-1),_mouse_y(-1),_wheel(0),\n      _is_closed(true),_is_resized(false),_is_moved(false),_is_event(false) {\n      assign(width,height,title,normalization,is_fullscreen,is_closed);\n    }\n\n    //! Construct a display from an image.\n    /** \\param img Image used as a model to create the window.\n        \\param title Window title.\n        \\param normalization Normalization type\n        (<tt>0</tt>=none, <tt>1</tt>=always, <tt>2</tt>=once, <tt>3</tt>=pixel type-dependent, see normalization()).\n        \\param is_fullscreen Tells if fullscreen mode is enabled.\n        \\param is_closed Tells if associated window is initially visible or not.\n        \\note The pixels of the input image are initially displayed on the associated window.\n    **/\n    template<typename T>\n    explicit CImgDisplay(const CImg<T>& img,\n                         const char *const title=0, const unsigned int normalization=3,\n                         const bool is_fullscreen=false, const bool is_closed=false):\n      _width(0),_height(0),_normalization(0),\n      _min(0),_max(0),\n      _is_fullscreen(false),\n      _title(0),\n      _window_width(0),_window_height(0),_button(0),\n      _keys(new unsigned int[128]),_released_keys(new unsigned int[128]),\n      _window_x(0),_window_y(0),_mouse_x(-1),_mouse_y(-1),_wheel(0),\n      _is_closed(true),_is_resized(false),_is_moved(false),_is_event(false) {\n      assign(img,title,normalization,is_fullscreen,is_closed);\n    }\n\n    //! Construct a display from an image list.\n    /** \\param list The images list to display.\n        \\param title Window title.\n        \\param normalization Normalization type\n        (<tt>0</tt>=none, <tt>1</tt>=always, <tt>2</tt>=once, <tt>3</tt>=pixel type-dependent, see normalization()).\n        \\param is_fullscreen Tells if fullscreen mode is enabled.\n        \\param is_closed Tells if associated window is initially visible or not.\n        \\note All images of the list, appended along the X-axis, are initially displayed on the associated window.\n    **/\n    template<typename T>\n    explicit CImgDisplay(const CImgList<T>& list,\n                         const char *const title=0, const unsigned int normalization=3,\n                         const bool is_fullscreen=false, const bool is_closed=false):\n      _width(0),_height(0),_normalization(0),\n      _min(0),_max(0),\n      _is_fullscreen(false),\n      _title(0),\n      _window_width(0),_window_height(0),_button(0),\n      _keys(new unsigned int[128]),_released_keys(new unsigned int[128]),\n      _window_x(0),_window_y(0),_mouse_x(-1),_mouse_y(-1),_wheel(0),\n      _is_closed(true),_is_resized(false),_is_moved(false),_is_event(false) {\n      assign(list,title,normalization,is_fullscreen,is_closed);\n    }\n\n    //! Construct a display as a copy of an existing one.\n    /**\n        \\param disp Display instance to copy.\n        \\note The pixel buffer of the input window is initially displayed on the associated window.\n    **/\n    CImgDisplay(const CImgDisplay& disp):\n      _width(0),_height(0),_normalization(0),\n      _min(0),_max(0),\n      _is_fullscreen(false),\n      _title(0),\n      _window_width(0),_window_height(0),_button(0),\n      _keys(new unsigned int[128]),_released_keys(new unsigned int[128]),\n      _window_x(0),_window_y(0),_mouse_x(-1),_mouse_y(-1),_wheel(0),\n      _is_closed(true),_is_resized(false),_is_moved(false),_is_event(false) {\n      assign(disp);\n    }\n\n    //! Take a screenshot.\n    /**\n       \\param[out] img Output screenshot. Can be empty on input\n    **/\n    template<typename T>\n    static void screenshot(CImg<T>& img) {\n      return screenshot(0,0,cimg::type<int>::max(),cimg::type<int>::max(),img);\n    }\n\n#if cimg_display==0\n\n    static void _no_display_exception() {\n      throw CImgDisplayException(\"CImgDisplay(): No display available.\");\n    }\n\n    //! Destructor - Empty constructor \\inplace.\n    /**\n       \\note Replace the current instance by an empty display.\n    **/\n    CImgDisplay& assign() {\n      return flush();\n    }\n\n    //! Construct a display with specified dimensions \\inplace.\n    /**\n    **/\n    CImgDisplay& assign(const unsigned int width, const unsigned int height,\n                        const char *const title=0, const unsigned int normalization=3,\n                        const bool is_fullscreen=false, const bool is_closed=false) {\n      cimg::unused(width,height,title,normalization,is_fullscreen,is_closed);\n      _no_display_exception();\n      return assign();\n    }\n\n    //! Construct a display from an image \\inplace.\n    /**\n    **/\n    template<typename T>\n    CImgDisplay& assign(const CImg<T>& img,\n                        const char *const title=0, const unsigned int normalization=3,\n                        const bool is_fullscreen=false, const bool is_closed=false) {\n      _no_display_exception();\n      return assign(img._width,img._height,title,normalization,is_fullscreen,is_closed);\n    }\n\n    //! Construct a display from an image list \\inplace.\n    /**\n    **/\n    template<typename T>\n    CImgDisplay& assign(const CImgList<T>& list,\n                        const char *const title=0, const unsigned int normalization=3,\n                        const bool is_fullscreen=false, const bool is_closed=false) {\n      _no_display_exception();\n      return assign(list._width,list._width,title,normalization,is_fullscreen,is_closed);\n    }\n\n    //! Construct a display as a copy of another one \\inplace.\n    /**\n    **/\n    CImgDisplay& assign(const CImgDisplay &disp) {\n      _no_display_exception();\n      return assign(disp._width,disp._height);\n    }\n\n#endif\n\n    //! Return a reference to an empty display.\n    /**\n       \\note Can be useful for writing function prototypes where one of the argument (of type CImgDisplay&)\n       must have a default value.\n       \\par Example\n       \\code\n       void foo(CImgDisplay& disp=CImgDisplay::empty());\n       \\endcode\n    **/\n    static CImgDisplay& empty() {\n      static CImgDisplay _empty;\n      return _empty.assign();\n    }\n\n    //! Return a reference to an empty display \\const.\n    static const CImgDisplay& const_empty() {\n      static const CImgDisplay _empty;\n      return _empty;\n    }\n\n#define cimg_fitscreen(dx,dy,dz) CImgDisplay::_fitscreen(dx,dy,dz,128,-85,false), \\\n                                 CImgDisplay::_fitscreen(dx,dy,dz,128,-85,true)\n    static unsigned int _fitscreen(const unsigned int dx, const unsigned int dy, const unsigned int dz,\n                                   const int dmin, const int dmax,const bool return_y) {\n      const unsigned int _nw = dx + (dz>1?dz:0), _nh = dy + (dz>1?dz:0);\n      unsigned int nw = _nw?_nw:1, nh = _nh?_nh:1;\n      const unsigned int\n        sw = (unsigned int)CImgDisplay::screen_width(),\n        sh = (unsigned int)CImgDisplay::screen_height(),\n        mw = dmin<0?(unsigned int)(sw*-dmin/100):(unsigned int)dmin,\n        mh = dmin<0?(unsigned int)(sh*-dmin/100):(unsigned int)dmin,\n        Mw = dmax<0?(unsigned int)(sw*-dmax/100):(unsigned int)dmax,\n        Mh = dmax<0?(unsigned int)(sh*-dmax/100):(unsigned int)dmax;\n      if (nw<mw) { nh = nh*mw/nw; nh+=(nh==0); nw = mw; }\n      if (nh<mh) { nw = nw*mh/nh; nw+=(nw==0); nh = mh; }\n      if (nw>Mw) { nh = nh*Mw/nw; nh+=(nh==0); nw = Mw; }\n      if (nh>Mh) { nw = nw*Mh/nh; nw+=(nw==0); nh = Mh; }\n      if (nw<mw) nw = mw;\n      if (nh<mh) nh = mh;\n      return return_y?nh:nw;\n    }\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Overloaded Operators\n    //@{\n    //------------------------------------------\n\n    //! Display image on associated window.\n    /**\n       \\note <tt>disp = img</tt> is equivalent to <tt>disp.display(img)</tt>.\n    **/\n    template<typename t>\n    CImgDisplay& operator=(const CImg<t>& img) {\n      return display(img);\n    }\n\n    //! Display list of images on associated window.\n    /**\n       \\note <tt>disp = list</tt> is equivalent to <tt>disp.display(list)</tt>.\n    **/\n    template<typename t>\n    CImgDisplay& operator=(const CImgList<t>& list) {\n      return display(list);\n    }\n\n    //! Construct a display as a copy of another one \\inplace.\n    /**\n       \\note Equivalent to assign(const CImgDisplay&).\n     **/\n    CImgDisplay& operator=(const CImgDisplay& disp) {\n      return assign(disp);\n    }\n\n    //! Return \\c false if display is empty, \\c true otherwise.\n    /**\n       \\note <tt>if (disp) { ... }</tt> is equivalent to <tt>if (!disp.is_empty()) { ... }</tt>.\n    **/\n    operator bool() const {\n      return !is_empty();\n    }\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Instance Checking\n    //@{\n    //------------------------------------------\n\n    //! Return \\c true if display is empty, \\c false otherwise.\n    /**\n    **/\n    bool is_empty() const {\n      return !(_width && _height);\n    }\n\n    //! Return \\c true if display is closed (i.e. not visible on the screen), \\c false otherwise.\n    /**\n       \\note\n       - When a user physically closes the associated window, the display is set to closed.\n       - A closed display is not destroyed. Its associated window can be show again on the screen using show().\n    **/\n    bool is_closed() const {\n      return _is_closed;\n    }\n\n    //! Return \\c true if associated window has been resized on the screen, \\c false otherwise.\n    /**\n    **/\n    bool is_resized() const {\n      return _is_resized;\n    }\n\n    //! Return \\c true if associated window has been moved on the screen, \\c false otherwise.\n    /**\n    **/\n    bool is_moved() const {\n      return _is_moved;\n    }\n\n    //! Return \\c true if any event has occured on the associated window, \\c false otherwise.\n    /**\n    **/\n    bool is_event() const {\n      return _is_event;\n    }\n\n    //! Return \\c true if current display is in fullscreen mode, \\c false otherwise.\n    /**\n    **/\n    bool is_fullscreen() const {\n      return _is_fullscreen;\n    }\n\n    //! Return \\c true if any key is being pressed on the associated window, \\c false otherwise.\n    /**\n       \\note The methods below do the same only for specific keys.\n    **/\n    bool is_key() const {\n      return _is_keyESC || _is_keyF1 || _is_keyF2 || _is_keyF3 ||\n        _is_keyF4 || _is_keyF5 || _is_keyF6 || _is_keyF7 ||\n        _is_keyF8 || _is_keyF9 || _is_keyF10 || _is_keyF11 ||\n        _is_keyF12 || _is_keyPAUSE || _is_key1 || _is_key2 ||\n        _is_key3 || _is_key4 || _is_key5 || _is_key6 ||\n        _is_key7 || _is_key8 || _is_key9 || _is_key0 ||\n        _is_keyBACKSPACE || _is_keyINSERT || _is_keyHOME ||\n        _is_keyPAGEUP || _is_keyTAB || _is_keyQ || _is_keyW ||\n        _is_keyE || _is_keyR || _is_keyT || _is_keyY ||\n        _is_keyU || _is_keyI || _is_keyO || _is_keyP ||\n        _is_keyDELETE || _is_keyEND || _is_keyPAGEDOWN ||\n        _is_keyCAPSLOCK || _is_keyA || _is_keyS || _is_keyD ||\n        _is_keyF || _is_keyG || _is_keyH || _is_keyJ ||\n        _is_keyK || _is_keyL || _is_keyENTER ||\n        _is_keySHIFTLEFT || _is_keyZ || _is_keyX || _is_keyC ||\n        _is_keyV || _is_keyB || _is_keyN || _is_keyM ||\n        _is_keySHIFTRIGHT || _is_keyARROWUP || _is_keyCTRLLEFT ||\n        _is_keyAPPLEFT || _is_keyALT || _is_keySPACE || _is_keyALTGR ||\n        _is_keyAPPRIGHT || _is_keyMENU || _is_keyCTRLRIGHT ||\n        _is_keyARROWLEFT || _is_keyARROWDOWN || _is_keyARROWRIGHT ||\n        _is_keyPAD0 || _is_keyPAD1 || _is_keyPAD2 ||\n        _is_keyPAD3 || _is_keyPAD4 || _is_keyPAD5 ||\n        _is_keyPAD6 || _is_keyPAD7 || _is_keyPAD8 ||\n        _is_keyPAD9 || _is_keyPADADD || _is_keyPADSUB ||\n        _is_keyPADMUL || _is_keyPADDIV;\n    }\n\n    //! Return \\c true if key specified by given keycode is being pressed on the associated window, \\c false otherwise.\n    /**\n       \\param keycode Keycode to test.\n       \\note Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n       \\par Example\n       \\code\n       CImgDisplay disp(400,400);\n       while (!disp.is_closed()) {\n         if (disp.key(cimg::keyTAB)) { ... }  // Equivalent to 'if (disp.is_keyTAB())'.\n         disp.wait();\n       }\n       \\endcode\n    **/\n    bool is_key(const unsigned int keycode) const {\n#define _cimg_iskey_test(k) if (keycode==cimg::key##k) return _is_key##k;\n      _cimg_iskey_test(ESC); _cimg_iskey_test(F1); _cimg_iskey_test(F2); _cimg_iskey_test(F3);\n      _cimg_iskey_test(F4); _cimg_iskey_test(F5); _cimg_iskey_test(F6); _cimg_iskey_test(F7);\n      _cimg_iskey_test(F8); _cimg_iskey_test(F9); _cimg_iskey_test(F10); _cimg_iskey_test(F11);\n      _cimg_iskey_test(F12); _cimg_iskey_test(PAUSE); _cimg_iskey_test(1); _cimg_iskey_test(2);\n      _cimg_iskey_test(3); _cimg_iskey_test(4); _cimg_iskey_test(5); _cimg_iskey_test(6);\n      _cimg_iskey_test(7); _cimg_iskey_test(8); _cimg_iskey_test(9); _cimg_iskey_test(0);\n      _cimg_iskey_test(BACKSPACE); _cimg_iskey_test(INSERT); _cimg_iskey_test(HOME);\n      _cimg_iskey_test(PAGEUP); _cimg_iskey_test(TAB); _cimg_iskey_test(Q); _cimg_iskey_test(W);\n      _cimg_iskey_test(E); _cimg_iskey_test(R); _cimg_iskey_test(T); _cimg_iskey_test(Y);\n      _cimg_iskey_test(U); _cimg_iskey_test(I); _cimg_iskey_test(O); _cimg_iskey_test(P);\n      _cimg_iskey_test(DELETE); _cimg_iskey_test(END); _cimg_iskey_test(PAGEDOWN);\n      _cimg_iskey_test(CAPSLOCK); _cimg_iskey_test(A); _cimg_iskey_test(S); _cimg_iskey_test(D);\n      _cimg_iskey_test(F); _cimg_iskey_test(G); _cimg_iskey_test(H); _cimg_iskey_test(J);\n      _cimg_iskey_test(K); _cimg_iskey_test(L); _cimg_iskey_test(ENTER);\n      _cimg_iskey_test(SHIFTLEFT); _cimg_iskey_test(Z); _cimg_iskey_test(X); _cimg_iskey_test(C);\n      _cimg_iskey_test(V); _cimg_iskey_test(B); _cimg_iskey_test(N); _cimg_iskey_test(M);\n      _cimg_iskey_test(SHIFTRIGHT); _cimg_iskey_test(ARROWUP); _cimg_iskey_test(CTRLLEFT);\n      _cimg_iskey_test(APPLEFT); _cimg_iskey_test(ALT); _cimg_iskey_test(SPACE); _cimg_iskey_test(ALTGR);\n      _cimg_iskey_test(APPRIGHT); _cimg_iskey_test(MENU); _cimg_iskey_test(CTRLRIGHT);\n      _cimg_iskey_test(ARROWLEFT); _cimg_iskey_test(ARROWDOWN); _cimg_iskey_test(ARROWRIGHT);\n      _cimg_iskey_test(PAD0); _cimg_iskey_test(PAD1); _cimg_iskey_test(PAD2);\n      _cimg_iskey_test(PAD3); _cimg_iskey_test(PAD4); _cimg_iskey_test(PAD5);\n      _cimg_iskey_test(PAD6); _cimg_iskey_test(PAD7); _cimg_iskey_test(PAD8);\n      _cimg_iskey_test(PAD9); _cimg_iskey_test(PADADD); _cimg_iskey_test(PADSUB);\n      _cimg_iskey_test(PADMUL); _cimg_iskey_test(PADDIV);\n      return false;\n    }\n\n    //! Return \\c true if key specified by given keycode is being pressed on the associated window, \\c false otherwise.\n    /**\n       \\param keycode C-string containing the keycode label of the key to test.\n       \\note Use it when the key you want to test can be dynamically set by the user.\n       \\par Example\n       \\code\n       CImgDisplay disp(400,400);\n       const char *const keycode = \"TAB\";\n       while (!disp.is_closed()) {\n         if (disp.is_key(keycode)) { ... }  // Equivalent to 'if (disp.is_keyTAB())'.\n         disp.wait();\n       }\n       \\endcode\n    **/\n    bool& is_key(const char *const keycode) {\n      static bool f = false;\n      f = false;\n#define _cimg_iskey_test2(k) if (!cimg::strcasecmp(keycode,#k)) return _is_key##k;\n      _cimg_iskey_test2(ESC); _cimg_iskey_test2(F1); _cimg_iskey_test2(F2); _cimg_iskey_test2(F3);\n      _cimg_iskey_test2(F4); _cimg_iskey_test2(F5); _cimg_iskey_test2(F6); _cimg_iskey_test2(F7);\n      _cimg_iskey_test2(F8); _cimg_iskey_test2(F9); _cimg_iskey_test2(F10); _cimg_iskey_test2(F11);\n      _cimg_iskey_test2(F12); _cimg_iskey_test2(PAUSE); _cimg_iskey_test2(1); _cimg_iskey_test2(2);\n      _cimg_iskey_test2(3); _cimg_iskey_test2(4); _cimg_iskey_test2(5); _cimg_iskey_test2(6);\n      _cimg_iskey_test2(7); _cimg_iskey_test2(8); _cimg_iskey_test2(9); _cimg_iskey_test2(0);\n      _cimg_iskey_test2(BACKSPACE); _cimg_iskey_test2(INSERT); _cimg_iskey_test2(HOME);\n      _cimg_iskey_test2(PAGEUP); _cimg_iskey_test2(TAB); _cimg_iskey_test2(Q); _cimg_iskey_test2(W);\n      _cimg_iskey_test2(E); _cimg_iskey_test2(R); _cimg_iskey_test2(T); _cimg_iskey_test2(Y);\n      _cimg_iskey_test2(U); _cimg_iskey_test2(I); _cimg_iskey_test2(O); _cimg_iskey_test2(P);\n      _cimg_iskey_test2(DELETE); _cimg_iskey_test2(END); _cimg_iskey_test2(PAGEDOWN);\n      _cimg_iskey_test2(CAPSLOCK); _cimg_iskey_test2(A); _cimg_iskey_test2(S); _cimg_iskey_test2(D);\n      _cimg_iskey_test2(F); _cimg_iskey_test2(G); _cimg_iskey_test2(H); _cimg_iskey_test2(J);\n      _cimg_iskey_test2(K); _cimg_iskey_test2(L); _cimg_iskey_test2(ENTER);\n      _cimg_iskey_test2(SHIFTLEFT); _cimg_iskey_test2(Z); _cimg_iskey_test2(X); _cimg_iskey_test2(C);\n      _cimg_iskey_test2(V); _cimg_iskey_test2(B); _cimg_iskey_test2(N); _cimg_iskey_test2(M);\n      _cimg_iskey_test2(SHIFTRIGHT); _cimg_iskey_test2(ARROWUP); _cimg_iskey_test2(CTRLLEFT);\n      _cimg_iskey_test2(APPLEFT); _cimg_iskey_test2(ALT); _cimg_iskey_test2(SPACE); _cimg_iskey_test2(ALTGR);\n      _cimg_iskey_test2(APPRIGHT); _cimg_iskey_test2(MENU); _cimg_iskey_test2(CTRLRIGHT);\n      _cimg_iskey_test2(ARROWLEFT); _cimg_iskey_test2(ARROWDOWN); _cimg_iskey_test2(ARROWRIGHT);\n      _cimg_iskey_test2(PAD0); _cimg_iskey_test2(PAD1); _cimg_iskey_test2(PAD2);\n      _cimg_iskey_test2(PAD3); _cimg_iskey_test2(PAD4); _cimg_iskey_test2(PAD5);\n      _cimg_iskey_test2(PAD6); _cimg_iskey_test2(PAD7); _cimg_iskey_test2(PAD8);\n      _cimg_iskey_test2(PAD9); _cimg_iskey_test2(PADADD); _cimg_iskey_test2(PADSUB);\n      _cimg_iskey_test2(PADMUL); _cimg_iskey_test2(PADDIV);\n      return f;\n    }\n\n    //! Return \\c true if specified key sequence has been typed on the associated window, \\c false otherwise.\n    /**\n       \\param keycodes_sequence Buffer of keycodes to test.\n       \\param length Number of keys in the \\c keycodes_sequence buffer.\n       \\param remove_sequence Tells if the key sequence must be removed from the key history, if found.\n       \\note Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n       \\par Example\n       \\code\n       CImgDisplay disp(400,400);\n       const unsigned int key_seq[] = { cimg::keyCTRLLEFT, cimg::keyD };\n       while (!disp.is_closed()) {\n         if (disp.is_key_sequence(key_seq,2)) { ... }  // Test for the 'CTRL+D' keyboard event.\n         disp.wait();\n       }\n       \\endcode\n    **/\n    bool is_key_sequence(const unsigned int *const keycodes_sequence, const unsigned int length,\n                         const bool remove_sequence=false) {\n      if (keycodes_sequence && length) {\n        const unsigned int\n          *const ps_end = keycodes_sequence + length - 1,\n          *const pk_end = (unsigned int*)_keys + 1 + 128 - length,\n          k = *ps_end;\n        for (unsigned int *pk = (unsigned int*)_keys; pk<pk_end; ) {\n          if (*(pk++)==k) {\n            bool res = true;\n            const unsigned int *ps = ps_end, *pk2 = pk;\n            for (unsigned int i = 1; i<length; ++i) res = (*(--ps)==*(pk2++));\n            if (res) {\n              if (remove_sequence) std::memset((void*)(pk - 1),0,sizeof(unsigned int)*length);\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n\n#define _cimg_iskey_def(k) \\\n    bool is_key##k() const { \\\n      return _is_key##k; \\\n    }\n\n    //! Return \\c true if the \\c ESC key is being pressed on the associated window, \\c false otherwise.\n    /**\n       \\note Similar methods exist for all keys managed by \\CImg (see cimg::keyESC).\n    **/\n    _cimg_iskey_def(ESC); _cimg_iskey_def(F1); _cimg_iskey_def(F2); _cimg_iskey_def(F3);\n    _cimg_iskey_def(F4); _cimg_iskey_def(F5); _cimg_iskey_def(F6); _cimg_iskey_def(F7);\n    _cimg_iskey_def(F8); _cimg_iskey_def(F9); _cimg_iskey_def(F10); _cimg_iskey_def(F11);\n    _cimg_iskey_def(F12); _cimg_iskey_def(PAUSE); _cimg_iskey_def(1); _cimg_iskey_def(2);\n    _cimg_iskey_def(3); _cimg_iskey_def(4); _cimg_iskey_def(5); _cimg_iskey_def(6);\n    _cimg_iskey_def(7); _cimg_iskey_def(8); _cimg_iskey_def(9); _cimg_iskey_def(0);\n    _cimg_iskey_def(BACKSPACE); _cimg_iskey_def(INSERT); _cimg_iskey_def(HOME);\n    _cimg_iskey_def(PAGEUP); _cimg_iskey_def(TAB); _cimg_iskey_def(Q); _cimg_iskey_def(W);\n    _cimg_iskey_def(E); _cimg_iskey_def(R); _cimg_iskey_def(T); _cimg_iskey_def(Y);\n    _cimg_iskey_def(U); _cimg_iskey_def(I); _cimg_iskey_def(O); _cimg_iskey_def(P);\n    _cimg_iskey_def(DELETE); _cimg_iskey_def(END); _cimg_iskey_def(PAGEDOWN);\n    _cimg_iskey_def(CAPSLOCK); _cimg_iskey_def(A); _cimg_iskey_def(S); _cimg_iskey_def(D);\n    _cimg_iskey_def(F); _cimg_iskey_def(G); _cimg_iskey_def(H); _cimg_iskey_def(J);\n    _cimg_iskey_def(K); _cimg_iskey_def(L); _cimg_iskey_def(ENTER);\n    _cimg_iskey_def(SHIFTLEFT); _cimg_iskey_def(Z); _cimg_iskey_def(X); _cimg_iskey_def(C);\n    _cimg_iskey_def(V); _cimg_iskey_def(B); _cimg_iskey_def(N); _cimg_iskey_def(M);\n    _cimg_iskey_def(SHIFTRIGHT); _cimg_iskey_def(ARROWUP); _cimg_iskey_def(CTRLLEFT);\n    _cimg_iskey_def(APPLEFT); _cimg_iskey_def(ALT); _cimg_iskey_def(SPACE); _cimg_iskey_def(ALTGR);\n    _cimg_iskey_def(APPRIGHT); _cimg_iskey_def(MENU); _cimg_iskey_def(CTRLRIGHT);\n    _cimg_iskey_def(ARROWLEFT); _cimg_iskey_def(ARROWDOWN); _cimg_iskey_def(ARROWRIGHT);\n    _cimg_iskey_def(PAD0); _cimg_iskey_def(PAD1); _cimg_iskey_def(PAD2);\n    _cimg_iskey_def(PAD3); _cimg_iskey_def(PAD4); _cimg_iskey_def(PAD5);\n    _cimg_iskey_def(PAD6); _cimg_iskey_def(PAD7); _cimg_iskey_def(PAD8);\n    _cimg_iskey_def(PAD9); _cimg_iskey_def(PADADD); _cimg_iskey_def(PADSUB);\n    _cimg_iskey_def(PADMUL); _cimg_iskey_def(PADDIV);\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Instance Characteristics\n    //@{\n    //------------------------------------------\n\n#if cimg_display==0\n\n    //! Return width of the screen (current resolution along the X-axis).\n    /**\n    **/\n    static int screen_width() {\n      _no_display_exception();\n      return 0;\n    }\n\n    //! Return height of the screen (current resolution along the Y-axis).\n    /**\n    **/\n    static int screen_height() {\n      _no_display_exception();\n      return 0;\n    }\n\n#endif\n\n    //! Return display width.\n    /**\n       \\note The width of the display (i.e. the width of the pixel data buffer associated to the CImgDisplay instance)\n       may be different from the actual width of the associated window.\n    **/\n    int width() const {\n      return (int)_width;\n    }\n\n    //! Return display height.\n    /**\n       \\note The height of the display (i.e. the height of the pixel data buffer associated to the CImgDisplay instance)\n       may be different from the actual height of the associated window.\n    **/\n    int height() const {\n      return (int)_height;\n    }\n\n    //! Return normalization type of the display.\n    /**\n       The normalization type tells about how the values of an input image are normalized by the CImgDisplay to be\n       correctly displayed. The range of values for pixels displayed on screen is <tt>[0,255]</tt>.\n       If the range of values of the data to display is different, a normalization may be required for displaying\n       the data in a correct way. The normalization type can be one of:\n       - \\c 0: Value normalization is disabled. It is then assumed that all input data to be displayed by the\n       CImgDisplay instance have values in range <tt>[0,255]</tt>.\n       - \\c 1: Value normalization is always performed (this is the default behavior).\n       Before displaying an input image, its values will be (virtually) stretched\n       in range <tt>[0,255]</tt>, so that the contrast of the displayed pixels will be maximum.\n       Use this mode for images whose minimum and maximum values are not prescribed to known values\n       (e.g. float-valued images).\n       Note that when normalized versions of images are computed for display purposes, the actual values of these\n       images are not modified.\n       - \\c 2: Value normalization is performed once (on the first image display), then the same normalization\n       coefficients are kept for next displayed frames.\n       - \\c 3: Value normalization depends on the pixel type of the data to display. For integer pixel types,\n       the normalization is done regarding the minimum/maximum values of the type (no normalization occurs then\n       for <tt>unsigned char</tt>).\n       For float-valued pixel types, the normalization is done regarding the minimum/maximum value of the image\n       data instead.\n    **/\n    unsigned int normalization() const {\n      return _normalization;\n    }\n\n    //! Return title of the associated window as a C-string.\n    /**\n       \\note Window title may be not visible, depending on the used window manager or if the current display is\n       in fullscreen mode.\n    **/\n    const char *title() const {\n      return _title?_title:\"\";\n    }\n\n    //! Return width of the associated window.\n    /**\n       \\note The width of the display (i.e. the width of the pixel data buffer associated to the CImgDisplay instance)\n       may be different from the actual width of the associated window.\n    **/\n    int window_width() const {\n      return (int)_window_width;\n    }\n\n    //! Return height of the associated window.\n    /**\n       \\note The height of the display (i.e. the height of the pixel data buffer associated to the CImgDisplay instance)\n       may be different from the actual height of the associated window.\n    **/\n    int window_height() const {\n      return (int)_window_height;\n    }\n\n    //! Return X-coordinate of the associated window.\n    /**\n       \\note The returned coordinate corresponds to the location of the upper-left corner of the associated window.\n    **/\n    int window_x() const {\n      return _window_x;\n    }\n\n    //! Return Y-coordinate of the associated window.\n    /**\n       \\note The returned coordinate corresponds to the location of the upper-left corner of the associated window.\n    **/\n    int window_y() const {\n      return _window_y;\n    }\n\n    //! Return X-coordinate of the mouse pointer.\n    /**\n       \\note\n       - If the mouse pointer is outside window area, \\c -1 is returned.\n       - Otherwise, the returned value is in the range [0,width()-1].\n    **/\n    int mouse_x() const {\n      return _mouse_x;\n    }\n\n    //! Return Y-coordinate of the mouse pointer.\n    /**\n       \\note\n       - If the mouse pointer is outside window area, \\c -1 is returned.\n       - Otherwise, the returned value is in the range [0,height()-1].\n    **/\n    int mouse_y() const {\n      return _mouse_y;\n    }\n\n    //! Return current state of the mouse buttons.\n    /**\n       \\note Three mouse buttons can be managed. If one button is pressed, its corresponding bit in the returned\n       value is set:\n       - bit \\c 0 (value \\c 0x1): State of the left mouse button.\n       - bit \\c 1 (value \\c 0x2): State of the right mouse button.\n       - bit \\c 2 (value \\c 0x4): State of the middle mouse button.\n\n       Several bits can be activated if more than one button are pressed at the same time.\n       \\par Example\n       \\code\n       CImgDisplay disp(400,400);\n       while (!disp.is_closed()) {\n         if (disp.button()&1) { // Left button clicked.\n           ...\n         }\n         if (disp.button()&2) { // Right button clicked.\n           ...\n         }\n         if (disp.button()&4) { // Middle button clicked.\n           ...\n         }\n         disp.wait();\n       }\n       \\endcode\n    **/\n    unsigned int button() const {\n      return _button;\n    }\n\n    //! Return current state of the mouse wheel.\n    /**\n       \\note\n       - The returned value can be positive or negative depending on whether the mouse wheel has been scrolled\n       forward or backward.\n       - Scrolling the wheel forward add \\c 1 to the wheel value.\n       - Scrolling the wheel backward substract \\c 1 to the wheel value.\n       - The returned value cumulates the number of forward of backward scrolls since the creation of the display,\n       or since the last reset of the wheel value (using set_wheel()). It is strongly recommended to quickly reset\n       the wheel counter when an action has been performed regarding the current wheel value.\n       Otherwise, the returned wheel value may be for instance \\c 0 despite the fact that many scrolls have been done\n       (as many in forward as in backward directions).\n       \\par Example\n       \\code\n       CImgDisplay disp(400,400);\n       while (!disp.is_closed()) {\n         if (disp.wheel()) {\n           int counter = disp.wheel();  // Read the state of the mouse wheel.\n           ...                          // Do what you want with 'counter'.\n           disp.set_wheel();            // Reset the wheel value to 0.\n         }\n         disp.wait();\n       }\n       \\endcode\n    **/\n    int wheel() const {\n      return _wheel;\n    }\n\n    //! Return one entry from the pressed keys history.\n    /**\n       \\param pos Indice to read from the pressed keys history (indice \\c 0 corresponds to latest entry).\n       \\return Keycode of a pressed key or \\c 0 for a released key.\n       \\note\n       - Each CImgDisplay stores a history of the pressed keys in a buffer of size \\c 128. When a new key is pressed,\n       its keycode is stored in the pressed keys history. When a key is released, \\c 0 is put instead.\n       This means that up to the 64 last pressed keys may be read from the pressed keys history.\n       When a new value is stored, the pressed keys history is shifted so that the latest entry is always\n       stored at position \\c 0.\n       - Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n    **/\n    unsigned int key(const unsigned int pos=0) const {\n      return pos<128?_keys[pos]:0;\n    }\n\n    //! Return one entry from the released keys history.\n    /**\n       \\param pos Indice to read from the released keys history (indice \\c 0 corresponds to latest entry).\n       \\return Keycode of a released key or \\c 0 for a pressed key.\n       \\note\n       - Each CImgDisplay stores a history of the released keys in a buffer of size \\c 128. When a new key is released,\n       its keycode is stored in the pressed keys history. When a key is pressed, \\c 0 is put instead.\n       This means that up to the 64 last released keys may be read from the released keys history.\n       When a new value is stored, the released keys history is shifted so that the latest entry is always\n       stored at position \\c 0.\n       - Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n    **/\n    unsigned int released_key(const unsigned int pos=0) const {\n      return pos<128?_released_keys[pos]:0;\n    }\n\n    //! Return keycode corresponding to the specified string.\n    /**\n       \\note Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n       \\par Example\n       \\code\n       const unsigned int keyTAB = CImgDisplay::keycode(\"TAB\");  // Return cimg::keyTAB.\n       \\endcode\n    **/\n    static unsigned int keycode(const char *const keycode) {\n#define _cimg_keycode(k) if (!cimg::strcasecmp(keycode,#k)) return cimg::key##k;\n      _cimg_keycode(ESC); _cimg_keycode(F1); _cimg_keycode(F2); _cimg_keycode(F3);\n      _cimg_keycode(F4); _cimg_keycode(F5); _cimg_keycode(F6); _cimg_keycode(F7);\n      _cimg_keycode(F8); _cimg_keycode(F9); _cimg_keycode(F10); _cimg_keycode(F11);\n      _cimg_keycode(F12); _cimg_keycode(PAUSE); _cimg_keycode(1); _cimg_keycode(2);\n      _cimg_keycode(3); _cimg_keycode(4); _cimg_keycode(5); _cimg_keycode(6);\n      _cimg_keycode(7); _cimg_keycode(8); _cimg_keycode(9); _cimg_keycode(0);\n      _cimg_keycode(BACKSPACE); _cimg_keycode(INSERT); _cimg_keycode(HOME);\n      _cimg_keycode(PAGEUP); _cimg_keycode(TAB); _cimg_keycode(Q); _cimg_keycode(W);\n      _cimg_keycode(E); _cimg_keycode(R); _cimg_keycode(T); _cimg_keycode(Y);\n      _cimg_keycode(U); _cimg_keycode(I); _cimg_keycode(O); _cimg_keycode(P);\n      _cimg_keycode(DELETE); _cimg_keycode(END); _cimg_keycode(PAGEDOWN);\n      _cimg_keycode(CAPSLOCK); _cimg_keycode(A); _cimg_keycode(S); _cimg_keycode(D);\n      _cimg_keycode(F); _cimg_keycode(G); _cimg_keycode(H); _cimg_keycode(J);\n      _cimg_keycode(K); _cimg_keycode(L); _cimg_keycode(ENTER);\n      _cimg_keycode(SHIFTLEFT); _cimg_keycode(Z); _cimg_keycode(X); _cimg_keycode(C);\n      _cimg_keycode(V); _cimg_keycode(B); _cimg_keycode(N); _cimg_keycode(M);\n      _cimg_keycode(SHIFTRIGHT); _cimg_keycode(ARROWUP); _cimg_keycode(CTRLLEFT);\n      _cimg_keycode(APPLEFT); _cimg_keycode(ALT); _cimg_keycode(SPACE); _cimg_keycode(ALTGR);\n      _cimg_keycode(APPRIGHT); _cimg_keycode(MENU); _cimg_keycode(CTRLRIGHT);\n      _cimg_keycode(ARROWLEFT); _cimg_keycode(ARROWDOWN); _cimg_keycode(ARROWRIGHT);\n      _cimg_keycode(PAD0); _cimg_keycode(PAD1); _cimg_keycode(PAD2);\n      _cimg_keycode(PAD3); _cimg_keycode(PAD4); _cimg_keycode(PAD5);\n      _cimg_keycode(PAD6); _cimg_keycode(PAD7); _cimg_keycode(PAD8);\n      _cimg_keycode(PAD9); _cimg_keycode(PADADD); _cimg_keycode(PADSUB);\n      _cimg_keycode(PADMUL); _cimg_keycode(PADDIV);\n      return 0;\n    }\n\n    //! Return the current refresh rate, in frames per second.\n    /**\n       \\note Returns a significant value when the current instance is used to display successive frames.\n       It measures the delay between successive calls to frames_per_second().\n    **/\n    float frames_per_second() {\n      if (!_fps_timer) _fps_timer = cimg::time();\n      const float delta = (cimg::time() - _fps_timer)/1000.0f;\n      ++_fps_frames;\n      if (delta>=1) {\n        _fps_fps = _fps_frames/delta;\n        _fps_frames = 0;\n        _fps_timer = cimg::time();\n      }\n      return _fps_fps;\n    }\n\n    //@}\n    //---------------------------------------\n    //\n    //! \\name Window Manipulation\n    //@{\n    //---------------------------------------\n\n#if cimg_display==0\n\n    //! Display image on associated window.\n    /**\n       \\param img Input image to display.\n       \\note This method returns immediately.\n    **/\n    template<typename T>\n    CImgDisplay& display(const CImg<T>& img) {\n      return assign(img);\n    }\n\n#endif\n\n    //! Display list of images on associated window.\n    /**\n       \\param list List of images to display.\n       \\param axis Axis used to append the images along, for the visualization (can be \\c x, \\c y, \\c z or \\c c).\n       \\param align Relative position of aligned images when displaying lists with images of different sizes\n       (\\c 0 for upper-left, \\c 0.5 for centering and \\c 1 for lower-right).\n       \\note This method returns immediately.\n    **/\n    template<typename T>\n    CImgDisplay& display(const CImgList<T>& list, const char axis='x', const float align=0) {\n      if (list._width==1) {\n        const CImg<T>& img = list[0];\n        if (img._depth==1 && (img._spectrum==1 || img._spectrum>=3) && _normalization!=1) return display(img);\n      }\n      CImgList<typename CImg<T>::ucharT> visu(list._width);\n      unsigned int dims = 0;\n      cimglist_for(list,l) {\n        const CImg<T>& img = list._data[l];\n        img.__get_select(*this,_normalization,(img._width - 1)/2,(img._height - 1)/2,\n                         (img._depth - 1)/2).move_to(visu[l]);\n        dims = std::max(dims,visu[l]._spectrum);\n      }\n      cimglist_for(list,l) if (visu[l]._spectrum<dims) visu[l].resize(-100,-100,-100,dims,1);\n      visu.get_append(axis,align).display(*this);\n      return *this;\n    }\n\n#if cimg_display==0\n\n    //! Show (closed) associated window on the screen.\n    /**\n       \\note\n       - Force the associated window of a display to be visible on the screen, even if it has been closed before.\n       - Using show() on a visible display does nothing.\n    **/\n    CImgDisplay& show() {\n      return assign();\n    }\n\n    //! Close (visible) associated window and make it disappear from the screen.\n    /**\n       \\note\n       - A closed display only means the associated window is not visible anymore. This does not mean the display has\n       been destroyed.\n       Use show() to make the associated window reappear.\n       - Using close() on a closed display does nothing.\n    **/\n    CImgDisplay& close() {\n      return assign();\n    }\n\n    //! Move associated window to a new location.\n    /**\n       \\param pos_x X-coordinate of the new window location.\n       \\param pos_y Y-coordinate of the new window location.\n       \\note Depending on the window manager behavior, this method may not succeed (no exceptions are thrown\n       nevertheless).\n    **/\n    CImgDisplay& move(const int pos_x, const int pos_y) {\n      return assign(pos_x,pos_y);\n    }\n\n#endif\n\n    //! Resize display to the size of the associated window.\n    /**\n       \\param force_redraw Tells if the previous window content must be updated and refreshed as well.\n       \\note\n       - Calling this method ensures that width() and window_width() become equal, as well as height() and\n       window_height().\n       - The associated window is also resized to specified dimensions.\n    **/\n    CImgDisplay& resize(const bool force_redraw=true) {\n      resize(window_width(),window_height(),force_redraw);\n      return *this;\n    }\n\n#if cimg_display==0\n\n    //! Resize display to the specified size.\n    /**\n       \\param width Requested display width.\n       \\param height Requested display height.\n       \\param force_redraw Tells if the previous window content must be updated and refreshed as well.\n       \\note The associated window is also resized to specified dimensions.\n    **/\n    CImgDisplay& resize(const int width, const int height, const bool force_redraw=true) {\n      return assign(width,height,0,3,force_redraw);\n    }\n\n#endif\n\n    //! Resize display to the size of an input image.\n    /**\n       \\param img Input image to take size from.\n       \\param force_redraw Tells if the previous window content must be resized and updated as well.\n       \\note\n       - Calling this method ensures that width() and <tt>img.width()</tt> become equal, as well as height() and\n       <tt>img.height()</tt>.\n       - The associated window is also resized to specified dimensions.\n    **/\n    template<typename T>\n    CImgDisplay& resize(const CImg<T>& img, const bool force_redraw=true) {\n      return resize(img._width,img._height,force_redraw);\n    }\n\n    //! Resize display to the size of another CImgDisplay instance.\n    /**\n       \\param disp Input display to take size from.\n       \\param force_redraw Tells if the previous window content must be resized and updated as well.\n       \\note\n       - Calling this method ensures that width() and <tt>disp.width()</tt> become equal, as well as height() and\n       <tt>disp.height()</tt>.\n       - The associated window is also resized to specified dimensions.\n    **/\n    CImgDisplay& resize(const CImgDisplay& disp, const bool force_redraw=true) {\n      return resize(disp.width(),disp.height(),force_redraw);\n    }\n\n    // [internal] Render pixel buffer with size (wd,hd) from source buffer of size (ws,hs).\n    template<typename t, typename T>\n    static void _render_resize(const T *ptrs, const unsigned int ws, const unsigned int hs,\n                               t *ptrd, const unsigned int wd, const unsigned int hd) {\n      unsigned int *const offx = new unsigned int[wd], *const offy = new unsigned int[hd + 1], *poffx, *poffy;\n      float s, curr, old;\n      s = (float)ws/wd;\n      poffx = offx; curr = 0; for (unsigned int x = 0; x<wd; ++x) {\n        old = curr; curr+=s; *(poffx++) = (unsigned int)curr - (unsigned int)old;\n      }\n      s = (float)hs/hd;\n      poffy = offy; curr = 0; for (unsigned int y = 0; y<hd; ++y) {\n        old = curr; curr+=s; *(poffy++) = ws*((unsigned int)curr - (unsigned int)old);\n      }\n      *poffy = 0;\n      poffy = offy;\n      for (unsigned int y = 0; y<hd; ) {\n        const T *ptr = ptrs;\n        poffx = offx;\n        for (unsigned int x = 0; x<wd; ++x) { *(ptrd++) = *ptr; ptr+=*(poffx++); }\n        ++y;\n        unsigned int dy = *(poffy++);\n        for ( ; !dy && y<hd; std::memcpy(ptrd,ptrd - wd,sizeof(t)*wd), ++y, ptrd+=wd, dy = *(poffy++)) {}\n        ptrs+=dy;\n      }\n      delete[] offx; delete[] offy;\n    }\n\n    //! Set normalization type.\n    /**\n       \\param normalization New normalization mode.\n    **/\n    CImgDisplay& set_normalization(const unsigned int normalization) {\n      _normalization = normalization;\n      _min = _max = 0;\n      return *this;\n    }\n\n#if cimg_display==0\n\n    //! Set title of the associated window.\n    /**\n       \\param format C-string containing the format of the title, as with <tt>std::printf()</tt>.\n       \\warning As the first argument is a format string, it is highly recommended to write\n       \\code\n       disp.set_title(\"%s\",window_title);\n       \\endcode\n       instead of\n       \\code\n       disp.set_title(window_title);\n       \\endcode\n       if \\c window_title can be arbitrary, to prevent nasty memory access.\n    **/\n    CImgDisplay& set_title(const char *const format, ...) {\n      return assign(0,0,format);\n    }\n\n#endif\n\n    //! Enable or disable fullscreen mode.\n    /**\n       \\param is_fullscreen Tells is the fullscreen mode must be activated or not.\n       \\param force_redraw Tells if the previous window content must be displayed as well.\n       \\note\n       - When the fullscreen mode is enabled, the associated window fills the entire screen but the size of the\n       current display is not modified.\n       - The screen resolution may be switched to fit the associated window size and ensure it appears the largest\n       as possible.\n       For X-Window (X11) users, the configuration flag \\c cimg_use_xrandr has to be set to allow the screen\n       resolution change (requires the X11 extensions to be enabled).\n    **/\n    CImgDisplay& set_fullscreen(const bool is_fullscreen, const bool force_redraw=true) {\n      if (is_empty() || _is_fullscreen==is_fullscreen) return *this;\n      return toggle_fullscreen(force_redraw);\n    }\n\n#if cimg_display==0\n\n    //! Toggle fullscreen mode.\n    /**\n       \\param force_redraw Tells if the previous window content must be displayed as well.\n       \\note Enable fullscreen mode if it was not enabled, and disable it otherwise.\n    **/\n    CImgDisplay& toggle_fullscreen(const bool force_redraw=true) {\n      return assign(_width,_height,0,3,force_redraw);\n    }\n\n    //! Show mouse pointer.\n    /**\n       \\note Depending on the window manager behavior, this method may not succeed\n       (no exceptions are thrown nevertheless).\n    **/\n    CImgDisplay& show_mouse() {\n      return assign();\n    }\n\n    //! Hide mouse pointer.\n    /**\n       \\note Depending on the window manager behavior, this method may not succeed\n       (no exceptions are thrown nevertheless).\n    **/\n    CImgDisplay& hide_mouse() {\n      return assign();\n    }\n\n    //! Move mouse pointer to a specified location.\n    /**\n       \\note Depending on the window manager behavior, this method may not succeed\n       (no exceptions are thrown nevertheless).\n    **/\n    CImgDisplay& set_mouse(const int pos_x, const int pos_y) {\n      return assign(pos_x,pos_y);\n    }\n\n#endif\n\n    //! Simulate a mouse button release event.\n    /**\n       \\note All mouse buttons are considered released at the same time.\n    **/\n    CImgDisplay& set_button() {\n      _button = 0;\n      _is_event = true;\n#if cimg_display==1\n      pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n      SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      return *this;\n    }\n\n    //! Simulate a mouse button press or release event.\n    /**\n       \\param button Buttons event code, where each button is associated to a single bit.\n       \\param is_pressed Tells if the mouse button is considered as pressed or released.\n    **/\n    CImgDisplay& set_button(const unsigned int button, const bool is_pressed=true) {\n      const unsigned int buttoncode = button==1U?1U:button==2U?2U:button==3U?4U:0U;\n      if (is_pressed) _button |= buttoncode; else _button &= ~buttoncode;\n      _is_event = buttoncode?true:false;\n      if (buttoncode) {\n#if cimg_display==1\n        pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n        SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      }\n      return *this;\n    }\n\n    //! Flush all mouse wheel events.\n    /**\n       \\note Make wheel() to return \\c 0, if called afterwards.\n    **/\n    CImgDisplay& set_wheel() {\n      _wheel = 0;\n      _is_event = true;\n#if cimg_display==1\n      pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n      SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      return *this;\n    }\n\n    //! Simulate a wheel event.\n    /**\n       \\param amplitude Amplitude of the wheel scrolling to simulate.\n       \\note Make wheel() to return \\c amplitude, if called afterwards.\n    **/\n    CImgDisplay& set_wheel(const int amplitude) {\n      _wheel+=amplitude;\n      _is_event = amplitude?true:false;\n      if (amplitude) {\n#if cimg_display==1\n        pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n        SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      }\n      return *this;\n    }\n\n    //! Flush all key events.\n    /**\n       \\note Make key() to return \\c 0, if called afterwards.\n    **/\n    CImgDisplay& set_key() {\n      std::memset((void*)_keys,0,128*sizeof(unsigned int));\n      std::memset((void*)_released_keys,0,128*sizeof(unsigned int));\n      _is_keyESC = _is_keyF1 = _is_keyF2 = _is_keyF3 = _is_keyF4 = _is_keyF5 = _is_keyF6 = _is_keyF7 = _is_keyF8 =\n        _is_keyF9 = _is_keyF10 = _is_keyF11 = _is_keyF12 = _is_keyPAUSE = _is_key1 = _is_key2 = _is_key3 = _is_key4 =\n        _is_key5 = _is_key6 = _is_key7 = _is_key8 = _is_key9 = _is_key0 = _is_keyBACKSPACE = _is_keyINSERT =\n        _is_keyHOME = _is_keyPAGEUP = _is_keyTAB = _is_keyQ = _is_keyW = _is_keyE = _is_keyR = _is_keyT = _is_keyY =\n        _is_keyU = _is_keyI = _is_keyO = _is_keyP = _is_keyDELETE = _is_keyEND = _is_keyPAGEDOWN = _is_keyCAPSLOCK =\n        _is_keyA = _is_keyS = _is_keyD = _is_keyF = _is_keyG = _is_keyH = _is_keyJ = _is_keyK = _is_keyL =\n        _is_keyENTER = _is_keySHIFTLEFT = _is_keyZ = _is_keyX = _is_keyC = _is_keyV = _is_keyB = _is_keyN =\n        _is_keyM = _is_keySHIFTRIGHT = _is_keyARROWUP = _is_keyCTRLLEFT = _is_keyAPPLEFT = _is_keyALT = _is_keySPACE =\n        _is_keyALTGR = _is_keyAPPRIGHT = _is_keyMENU = _is_keyCTRLRIGHT = _is_keyARROWLEFT = _is_keyARROWDOWN =\n        _is_keyARROWRIGHT = _is_keyPAD0 = _is_keyPAD1 = _is_keyPAD2 = _is_keyPAD3 = _is_keyPAD4 = _is_keyPAD5 =\n        _is_keyPAD6 = _is_keyPAD7 = _is_keyPAD8 = _is_keyPAD9 = _is_keyPADADD = _is_keyPADSUB = _is_keyPADMUL =\n        _is_keyPADDIV = false;\n      _is_event = true;\n#if cimg_display==1\n      pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n      SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      return *this;\n    }\n\n    //! Simulate a keyboard press/release event.\n    /**\n       \\param keycode Keycode of the associated key.\n       \\param is_pressed Tells if the key is considered as pressed or released.\n       \\note Keycode constants are defined in the cimg namespace and are architecture-dependent. Use them to ensure\n       your code stay portable (see cimg::keyESC).\n    **/\n    CImgDisplay& set_key(const unsigned int keycode, const bool is_pressed=true) {\n#define _cimg_set_key(k) if (keycode==cimg::key##k) _is_key##k = is_pressed;\n      _cimg_set_key(ESC); _cimg_set_key(F1); _cimg_set_key(F2); _cimg_set_key(F3);\n      _cimg_set_key(F4); _cimg_set_key(F5); _cimg_set_key(F6); _cimg_set_key(F7);\n      _cimg_set_key(F8); _cimg_set_key(F9); _cimg_set_key(F10); _cimg_set_key(F11);\n      _cimg_set_key(F12); _cimg_set_key(PAUSE); _cimg_set_key(1); _cimg_set_key(2);\n      _cimg_set_key(3); _cimg_set_key(4); _cimg_set_key(5); _cimg_set_key(6);\n      _cimg_set_key(7); _cimg_set_key(8); _cimg_set_key(9); _cimg_set_key(0);\n      _cimg_set_key(BACKSPACE); _cimg_set_key(INSERT); _cimg_set_key(HOME);\n      _cimg_set_key(PAGEUP); _cimg_set_key(TAB); _cimg_set_key(Q); _cimg_set_key(W);\n      _cimg_set_key(E); _cimg_set_key(R); _cimg_set_key(T); _cimg_set_key(Y);\n      _cimg_set_key(U); _cimg_set_key(I); _cimg_set_key(O); _cimg_set_key(P);\n      _cimg_set_key(DELETE); _cimg_set_key(END); _cimg_set_key(PAGEDOWN);\n      _cimg_set_key(CAPSLOCK); _cimg_set_key(A); _cimg_set_key(S); _cimg_set_key(D);\n      _cimg_set_key(F); _cimg_set_key(G); _cimg_set_key(H); _cimg_set_key(J);\n      _cimg_set_key(K); _cimg_set_key(L); _cimg_set_key(ENTER);\n      _cimg_set_key(SHIFTLEFT); _cimg_set_key(Z); _cimg_set_key(X); _cimg_set_key(C);\n      _cimg_set_key(V); _cimg_set_key(B); _cimg_set_key(N); _cimg_set_key(M);\n      _cimg_set_key(SHIFTRIGHT); _cimg_set_key(ARROWUP); _cimg_set_key(CTRLLEFT);\n      _cimg_set_key(APPLEFT); _cimg_set_key(ALT); _cimg_set_key(SPACE); _cimg_set_key(ALTGR);\n      _cimg_set_key(APPRIGHT); _cimg_set_key(MENU); _cimg_set_key(CTRLRIGHT);\n      _cimg_set_key(ARROWLEFT); _cimg_set_key(ARROWDOWN); _cimg_set_key(ARROWRIGHT);\n      _cimg_set_key(PAD0); _cimg_set_key(PAD1); _cimg_set_key(PAD2);\n      _cimg_set_key(PAD3); _cimg_set_key(PAD4); _cimg_set_key(PAD5);\n      _cimg_set_key(PAD6); _cimg_set_key(PAD7); _cimg_set_key(PAD8);\n      _cimg_set_key(PAD9); _cimg_set_key(PADADD); _cimg_set_key(PADSUB);\n      _cimg_set_key(PADMUL); _cimg_set_key(PADDIV);\n      if (is_pressed) {\n        if (*_keys)\n          std::memmove((void*)(_keys + 1),(void*)_keys,127*sizeof(unsigned int));\n        *_keys = keycode;\n        if (*_released_keys) {\n          std::memmove((void*)(_released_keys + 1),(void*)_released_keys,127*sizeof(unsigned int));\n          *_released_keys = 0;\n        }\n      } else {\n        if (*_keys) {\n          std::memmove((void*)(_keys + 1),(void*)_keys,127*sizeof(unsigned int));\n          *_keys = 0;\n        }\n        if (*_released_keys)\n          std::memmove((void*)(_released_keys + 1),(void*)_released_keys,127*sizeof(unsigned int));\n        *_released_keys = keycode;\n      }\n      _is_event = keycode?true:false;\n      if (keycode) {\n#if cimg_display==1\n        pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n#elif cimg_display==2\n        SetEvent(cimg::Win32_attr().wait_event);\n#endif\n      }\n      return *this;\n    }\n\n    //! Flush all display events.\n    /**\n       \\note Remove all passed events from the current display.\n    **/\n    CImgDisplay& flush() {\n      set_key().set_button().set_wheel();\n      _is_resized = _is_moved = _is_event = false;\n      _fps_timer = _fps_frames = _timer = 0;\n      _fps_fps = 0;\n      return *this;\n    }\n\n    //! Wait for any user event occuring on the current display.\n    CImgDisplay& wait() {\n      wait(*this);\n      return *this;\n    }\n\n    //! Wait for a given number of milliseconds since the last call to wait().\n    /**\n       \\param milliseconds Number of milliseconds to wait for.\n       \\note Similar to cimg::wait().\n    **/\n    CImgDisplay& wait(const unsigned int milliseconds) {\n      cimg::_wait(milliseconds,_timer);\n      return *this;\n    }\n\n    //! Wait for any event occuring on the display \\c disp1.\n    static void wait(CImgDisplay& disp1) {\n      disp1._is_event = false;\n      while (!disp1._is_closed && !disp1._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1 or \\c disp2.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2) {\n      disp1._is_event = disp2._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed) &&\n             !disp1._is_event && !disp2._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2 or \\c disp3.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3) {\n      disp1._is_event = disp2._is_event = disp3._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3 or \\c disp4.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4 or \\c disp5.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4,\n                     CImgDisplay& disp5) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event)\n        wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4, ... \\c disp6.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,\n                     CImgDisplay& disp6) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event =\n        disp6._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed ||\n              !disp6._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event &&\n             !disp6._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4, ... \\c disp7.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,\n                     CImgDisplay& disp6, CImgDisplay& disp7) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event =\n        disp6._is_event = disp7._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed ||\n              !disp6._is_closed || !disp7._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event &&\n             !disp6._is_event && !disp7._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4, ... \\c disp8.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,\n                     CImgDisplay& disp6, CImgDisplay& disp7, CImgDisplay& disp8) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event =\n        disp6._is_event = disp7._is_event = disp8._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed ||\n              !disp6._is_closed || !disp7._is_closed || !disp8._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event &&\n             !disp6._is_event && !disp7._is_event && !disp8._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4, ... \\c disp9.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,\n                     CImgDisplay& disp6, CImgDisplay& disp7, CImgDisplay& disp8, CImgDisplay& disp9) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event =\n        disp6._is_event = disp7._is_event = disp8._is_event = disp9._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed ||\n              !disp6._is_closed || !disp7._is_closed || !disp8._is_closed || !disp9._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event &&\n             !disp6._is_event && !disp7._is_event && !disp8._is_event && !disp9._is_event) wait_all();\n    }\n\n    //! Wait for any event occuring either on the display \\c disp1, \\c disp2, \\c disp3, \\c disp4, ... \\c disp10.\n    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,\n                     CImgDisplay& disp6, CImgDisplay& disp7, CImgDisplay& disp8, CImgDisplay& disp9,\n                     CImgDisplay& disp10) {\n      disp1._is_event = disp2._is_event = disp3._is_event = disp4._is_event = disp5._is_event =\n        disp6._is_event = disp7._is_event = disp8._is_event = disp9._is_event = disp10._is_event = false;\n      while ((!disp1._is_closed || !disp2._is_closed || !disp3._is_closed || !disp4._is_closed || !disp5._is_closed ||\n              !disp6._is_closed || !disp7._is_closed || !disp8._is_closed || !disp9._is_closed || !disp10._is_closed) &&\n             !disp1._is_event && !disp2._is_event && !disp3._is_event && !disp4._is_event && !disp5._is_event &&\n             !disp6._is_event && !disp7._is_event && !disp8._is_event && !disp9._is_event && !disp10._is_event)\n        wait_all();\n    }\n\n#if cimg_display==0\n\n    //! Wait for any window event occuring in any opened CImgDisplay.\n    static void wait_all() {\n      return _no_display_exception();\n    }\n\n    //! Render image into internal display buffer.\n    /**\n       \\param img Input image data to render.\n       \\note\n       - Convert image data representation into the internal display buffer (architecture-dependent structure).\n       - The content of the associated window is not modified, until paint() is called.\n       - Should not be used for common CImgDisplay uses, since display() is more useful.\n    **/\n    template<typename T>\n    CImgDisplay& render(const CImg<T>& img) {\n      return assign(img);\n    }\n\n    //! Paint internal display buffer on associated window.\n    /**\n       \\note\n       - Update the content of the associated window with the internal display buffer, e.g. after a render() call.\n       - Should not be used for common CImgDisplay uses, since display() is more useful.\n    **/\n    CImgDisplay& paint() {\n      return assign();\n    }\n\n\n    //! Take a snapshot of the current screen content.\n    /**\n       \\param x0 X-coordinate of the upper left corner.\n       \\param y0 Y-coordinate of the upper left corner.\n       \\param x1 X-coordinate of the lower right corner.\n       \\param y1 Y-coordinate of the lower right corner.\n       \\param[out] img Output screenshot. Can be empty on input\n    **/\n    template<typename T>\n    static void screenshot(const int x0, const int y0, const int x1, const int y1, CImg<T>& img) {\n      cimg::unused(x0,y0,x1,y1,&img);\n      _no_display_exception();\n    }\n\n    //! Take a snapshot of the associated window content.\n    /**\n       \\param[out] img Output snapshot. Can be empty on input.\n    **/\n    template<typename T>\n    const CImgDisplay& snapshot(CImg<T>& img) const {\n      cimg::unused(img);\n      _no_display_exception();\n      return *this;\n    }\n#endif\n\n    // X11-based implementation\n    //--------------------------\n#if cimg_display==1\n\n    Atom _wm_window_atom, _wm_protocol_atom;\n    Window _window, _background_window;\n    Colormap _colormap;\n    XImage *_image;\n    void *_data;\n#ifdef cimg_use_xshm\n    XShmSegmentInfo *_shminfo;\n#endif\n\n    static int screen_width() {\n      Display *const dpy = cimg::X11_attr().display;\n      int res = 0;\n      if (!dpy) {\n        Display *const _dpy = XOpenDisplay(0);\n        if (!_dpy)\n          throw CImgDisplayException(\"CImgDisplay::screen_width(): Failed to open X11 display.\");\n        res = DisplayWidth(_dpy,DefaultScreen(_dpy));\n        XCloseDisplay(_dpy);\n      } else {\n#ifdef cimg_use_xrandr\n        if (cimg::X11_attr().resolutions && cimg::X11_attr().curr_resolution)\n          res = cimg::X11_attr().resolutions[cimg::X11_attr().curr_resolution].width;\n        else res = DisplayWidth(dpy,DefaultScreen(dpy));\n#else\n        res = DisplayWidth(dpy,DefaultScreen(dpy));\n#endif\n      }\n      return res;\n    }\n\n    static int screen_height() {\n      Display *const dpy = cimg::X11_attr().display;\n      int res = 0;\n      if (!dpy) {\n        Display *const _dpy = XOpenDisplay(0);\n        if (!_dpy)\n          throw CImgDisplayException(\"CImgDisplay::screen_height(): Failed to open X11 display.\");\n        res = DisplayHeight(_dpy,DefaultScreen(_dpy));\n        XCloseDisplay(_dpy);\n      } else {\n#ifdef cimg_use_xrandr\n        if (cimg::X11_attr().resolutions && cimg::X11_attr().curr_resolution)\n          res = cimg::X11_attr().resolutions[cimg::X11_attr().curr_resolution].height;\n        else res = DisplayHeight(dpy,DefaultScreen(dpy));\n#else\n        res = DisplayHeight(dpy,DefaultScreen(dpy));\n#endif\n      }\n      return res;\n    }\n\n    static void wait_all() {\n      if (!cimg::X11_attr().display) return;\n      pthread_mutex_lock(&cimg::X11_attr().wait_event_mutex);\n      pthread_cond_wait(&cimg::X11_attr().wait_event,&cimg::X11_attr().wait_event_mutex);\n      pthread_mutex_unlock(&cimg::X11_attr().wait_event_mutex);\n    }\n\n    void _handle_events(const XEvent *const pevent) {\n      Display *const dpy = cimg::X11_attr().display;\n      XEvent event = *pevent;\n      switch (event.type) {\n      case ClientMessage : {\n        if ((int)event.xclient.message_type==(int)_wm_protocol_atom &&\n            (int)event.xclient.data.l[0]==(int)_wm_window_atom) {\n          XUnmapWindow(cimg::X11_attr().display,_window);\n          _is_closed = _is_event = true;\n          pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n        }\n      } break;\n      case ConfigureNotify : {\n        while (XCheckWindowEvent(dpy,_window,StructureNotifyMask,&event)) {}\n        const unsigned int nw = event.xconfigure.width, nh = event.xconfigure.height;\n        const int nx = event.xconfigure.x, ny = event.xconfigure.y;\n        if (nw && nh && (nw!=_window_width || nh!=_window_height)) {\n          _window_width = nw; _window_height = nh; _mouse_x = _mouse_y = -1;\n          XResizeWindow(dpy,_window,_window_width,_window_height);\n          _is_resized = _is_event = true;\n          pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n        }\n        if (nx!=_window_x || ny!=_window_y) {\n          _window_x = nx; _window_y = ny; _is_moved = _is_event = true;\n          pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n        }\n      } break;\n      case Expose : {\n        while (XCheckWindowEvent(dpy,_window,ExposureMask,&event)) {}\n        _paint(false);\n        if (_is_fullscreen) {\n          XWindowAttributes attr;\n          XGetWindowAttributes(dpy,_window,&attr);\n          while (attr.map_state!=IsViewable) XSync(dpy,0);\n          XSetInputFocus(dpy,_window,RevertToParent,CurrentTime);\n        }\n      } break;\n      case ButtonPress : {\n        do {\n          _mouse_x = event.xmotion.x; _mouse_y = event.xmotion.y;\n          if (_mouse_x<0 || _mouse_y<0 || _mouse_x>=width() || _mouse_y>=height()) _mouse_x = _mouse_y = -1;\n          switch (event.xbutton.button) {\n          case 1 : set_button(1); break;\n          case 3 : set_button(2); break;\n          case 2 : set_button(3); break;\n          }\n        } while (XCheckWindowEvent(dpy,_window,ButtonPressMask,&event));\n      } break;\n      case ButtonRelease : {\n        do {\n          _mouse_x = event.xmotion.x; _mouse_y = event.xmotion.y;\n          if (_mouse_x<0 || _mouse_y<0 || _mouse_x>=width() || _mouse_y>=height()) _mouse_x = _mouse_y = -1;\n          switch (event.xbutton.button) {\n          case 1 : set_button(1,false); break;\n          case 3 : set_button(2,false); break;\n          case 2 : set_button(3,false); break;\n          case 4 : set_wheel(1); break;\n          case 5 : set_wheel(-1); break;\n          }\n        } while (XCheckWindowEvent(dpy,_window,ButtonReleaseMask,&event));\n      } break;\n      case KeyPress : {\n        char tmp = 0; KeySym ksym;\n        XLookupString(&event.xkey,&tmp,1,&ksym,0);\n        set_key((unsigned int)ksym,true);\n      } break;\n      case KeyRelease : {\n        char keys_return[32];  // Check that the key has been physically unpressed.\n        XQueryKeymap(dpy,keys_return);\n        const unsigned int kc = event.xkey.keycode, kc1 = kc/8, kc2 = kc%8;\n        const bool is_key_pressed = kc1>=32?false:(keys_return[kc1]>>kc2)&1;\n        if (!is_key_pressed) {\n          char tmp = 0; KeySym ksym;\n          XLookupString(&event.xkey,&tmp,1,&ksym,0);\n          set_key((unsigned int)ksym,false);\n        }\n      } break;\n      case EnterNotify: {\n        while (XCheckWindowEvent(dpy,_window,EnterWindowMask,&event)) {}\n        _mouse_x = event.xmotion.x;\n        _mouse_y = event.xmotion.y;\n        if (_mouse_x<0 || _mouse_y<0 || _mouse_x>=width() || _mouse_y>=height()) _mouse_x = _mouse_y = -1;\n      } break;\n      case LeaveNotify : {\n        while (XCheckWindowEvent(dpy,_window,LeaveWindowMask,&event)) {}\n        _mouse_x = _mouse_y = -1; _is_event = true;\n        pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n      } break;\n      case MotionNotify : {\n        while (XCheckWindowEvent(dpy,_window,PointerMotionMask,&event)) {}\n        _mouse_x = event.xmotion.x;\n        _mouse_y = event.xmotion.y;\n        if (_mouse_x<0 || _mouse_y<0 || _mouse_x>=width() || _mouse_y>=height()) _mouse_x = _mouse_y = -1;\n        _is_event = true;\n        pthread_cond_broadcast(&cimg::X11_attr().wait_event);\n      } break;\n      }\n    }\n\n    static void* _events_thread(void *arg) { // Thread to manage events for all opened display windows.\n      Display *const dpy = cimg::X11_attr().display;\n      XEvent event;\n      pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED,0);\n      pthread_setcancelstate(PTHREAD_CANCEL_ENABLE,0);\n      if (!arg) for ( ; ; ) {\n        cimg_lock_display();\n        bool event_flag = XCheckTypedEvent(dpy,ClientMessage,&event);\n        if (!event_flag) event_flag = XCheckMaskEvent(dpy,\n                                                      ExposureMask | StructureNotifyMask | ButtonPressMask |\n                                                      KeyPressMask | PointerMotionMask | EnterWindowMask |\n                                                      LeaveWindowMask | ButtonReleaseMask | KeyReleaseMask,&event);\n        if (event_flag)\n          for (unsigned int i = 0; i<cimg::X11_attr().nb_wins; ++i)\n            if (!cimg::X11_attr().wins[i]->_is_closed && event.xany.window==cimg::X11_attr().wins[i]->_window)\n              cimg::X11_attr().wins[i]->_handle_events(&event);\n        cimg_unlock_display();\n        pthread_testcancel();\n        cimg::sleep(8);\n      }\n      return 0;\n    }\n\n    void _set_colormap(Colormap& _colormap, const unsigned int dim) {\n      XColor *const colormap = new XColor[256];\n      switch (dim) {\n      case 1 : { // colormap for greyscale images\n        for (unsigned int index = 0; index<256; ++index) {\n          colormap[index].pixel = index;\n          colormap[index].red = colormap[index].green = colormap[index].blue = (unsigned short)(index<<8);\n          colormap[index].flags = DoRed | DoGreen | DoBlue;\n        }\n      } break;\n      case 2 : { // colormap for RG images\n        for (unsigned int index = 0, r = 8; r<256; r+=16)\n          for (unsigned int g = 8; g<256; g+=16) {\n            colormap[index].pixel = index;\n            colormap[index].red = colormap[index].blue = (unsigned short)(r<<8);\n            colormap[index].green = (unsigned short)(g<<8);\n            colormap[index++].flags = DoRed | DoGreen | DoBlue;\n          }\n      } break;\n      default : { // colormap for RGB images\n        for (unsigned int index = 0, r = 16; r<256; r+=32)\n          for (unsigned int g = 16; g<256; g+=32)\n            for (unsigned int b = 32; b<256; b+=64) {\n              colormap[index].pixel = index;\n              colormap[index].red = (unsigned short)(r<<8);\n              colormap[index].green = (unsigned short)(g<<8);\n              colormap[index].blue = (unsigned short)(b<<8);\n              colormap[index++].flags = DoRed | DoGreen | DoBlue;\n            }\n      }\n      }\n      XStoreColors(cimg::X11_attr().display,_colormap,colormap,256);\n      delete[] colormap;\n    }\n\n    void _map_window() {\n      Display *const dpy = cimg::X11_attr().display;\n      bool is_exposed = false, is_mapped = false;\n      XWindowAttributes attr;\n      XEvent event;\n      XMapRaised(dpy,_window);\n      do { // Wait for the window to be mapped.\n        XWindowEvent(dpy,_window,StructureNotifyMask | ExposureMask,&event);\n        switch (event.type) {\n        case MapNotify : is_mapped = true; break;\n        case Expose : is_exposed = true; break;\n        }\n      } while (!is_exposed || !is_mapped);\n      do { // Wait for the window to be visible.\n        XGetWindowAttributes(dpy,_window,&attr);\n        if (attr.map_state!=IsViewable) { XSync(dpy,0); cimg::sleep(10); }\n      } while (attr.map_state!=IsViewable);\n      _window_x = attr.x;\n      _window_y = attr.y;\n    }\n\n    void _paint(const bool wait_expose=true) {\n      if (_is_closed || !_image) return;\n      Display *const dpy = cimg::X11_attr().display;\n      if (wait_expose) { // Send an expose event sticked to display window to force repaint.\n        XEvent event;\n        event.xexpose.type = Expose;\n        event.xexpose.serial = 0;\n        event.xexpose.send_event = 1;\n        event.xexpose.display = dpy;\n        event.xexpose.window = _window;\n        event.xexpose.x = 0;\n        event.xexpose.y = 0;\n        event.xexpose.width = width();\n        event.xexpose.height = height();\n        event.xexpose.count = 0;\n        XSendEvent(dpy,_window,0,0,&event);\n      } else { // Repaint directly (may be called from the expose event).\n        GC gc = DefaultGC(dpy,DefaultScreen(dpy));\n#ifdef cimg_use_xshm\n        if (_shminfo) XShmPutImage(dpy,_window,gc,_image,0,0,0,0,_width,_height,1);\n        else XPutImage(dpy,_window,gc,_image,0,0,0,0,_width,_height);\n#else\n        XPutImage(dpy,_window,gc,_image,0,0,0,0,_width,_height);\n#endif\n      }\n    }\n\n    template<typename T>\n    void _resize(T pixel_type, const unsigned int ndimx, const unsigned int ndimy, const bool force_redraw) {\n      Display *const dpy = cimg::X11_attr().display;\n      cimg::unused(pixel_type);\n\n#ifdef cimg_use_xshm\n      if (_shminfo) {\n        XShmSegmentInfo *const nshminfo = new XShmSegmentInfo;\n        XImage *const nimage = XShmCreateImage(dpy,DefaultVisual(dpy,DefaultScreen(dpy)),\n                                               cimg::X11_attr().nb_bits,ZPixmap,0,nshminfo,ndimx,ndimy);\n        if (!nimage) { delete nshminfo; return; }\n        else {\n          nshminfo->shmid = shmget(IPC_PRIVATE,ndimx*ndimy*sizeof(T),IPC_CREAT | 0777);\n          if (nshminfo->shmid==-1) { XDestroyImage(nimage); delete nshminfo; return; }\n          else {\n            nshminfo->shmaddr = nimage->data = (char*)shmat(nshminfo->shmid,0,0);\n            if (nshminfo->shmaddr==(char*)-1) {\n              shmctl(nshminfo->shmid,IPC_RMID,0); XDestroyImage(nimage); delete nshminfo; return;\n            } else {\n              nshminfo->readOnly = 0;\n              cimg::X11_attr().is_shm_enabled = true;\n              XErrorHandler oldXErrorHandler = XSetErrorHandler(_assign_xshm);\n              XShmAttach(dpy,nshminfo);\n              XFlush(dpy);\n              XSetErrorHandler(oldXErrorHandler);\n              if (!cimg::X11_attr().is_shm_enabled) {\n                shmdt(nshminfo->shmaddr);\n                shmctl(nshminfo->shmid,IPC_RMID,0);\n                XDestroyImage(nimage);\n                delete nshminfo;\n                return;\n              } else {\n                T *const ndata = (T*)nimage->data;\n                if (force_redraw) _render_resize((T*)_data,_width,_height,ndata,ndimx,ndimy);\n                else std::memset(ndata,0,sizeof(T)*ndimx*ndimy);\n                XShmDetach(dpy,_shminfo);\n                XDestroyImage(_image);\n                shmdt(_shminfo->shmaddr);\n                shmctl(_shminfo->shmid,IPC_RMID,0);\n                delete _shminfo;\n                _shminfo = nshminfo;\n                _image = nimage;\n                _data = (void*)ndata;\n              }\n            }\n          }\n        }\n      } else\n#endif\n        {\n          T *ndata = (T*)std::malloc(ndimx*ndimy*sizeof(T));\n          if (force_redraw) _render_resize((T*)_data,_width,_height,ndata,ndimx,ndimy);\n          else std::memset(ndata,0,sizeof(T)*ndimx*ndimy);\n          _data = (void*)ndata;\n          XDestroyImage(_image);\n          _image = XCreateImage(dpy,DefaultVisual(dpy,DefaultScreen(dpy)),\n                                cimg::X11_attr().nb_bits,ZPixmap,0,(char*)_data,ndimx,ndimy,8,0);\n        }\n    }\n\n    void _init_fullscreen() {\n      if (!_is_fullscreen || _is_closed) return;\n      Display *const dpy = cimg::X11_attr().display;\n      _background_window = 0;\n\n#ifdef cimg_use_xrandr\n      int foo;\n      if (XRRQueryExtension(dpy,&foo,&foo)) {\n        XRRRotations(dpy,DefaultScreen(dpy),&cimg::X11_attr().curr_rotation);\n        if (!cimg::X11_attr().resolutions) {\n          cimg::X11_attr().resolutions = XRRSizes(dpy,DefaultScreen(dpy),&foo);\n          cimg::X11_attr().nb_resolutions = (unsigned int)foo;\n        }\n        if (cimg::X11_attr().resolutions) {\n          cimg::X11_attr().curr_resolution = 0;\n          for (unsigned int i = 0; i<cimg::X11_attr().nb_resolutions; ++i) {\n            const unsigned int\n              nw = (unsigned int)(cimg::X11_attr().resolutions[i].width),\n              nh = (unsigned int)(cimg::X11_attr().resolutions[i].height);\n            if (nw>=_width && nh>=_height &&\n                nw<=(unsigned int)(cimg::X11_attr().resolutions[cimg::X11_attr().curr_resolution].width) &&\n                nh<=(unsigned int)(cimg::X11_attr().resolutions[cimg::X11_attr().curr_resolution].height))\n              cimg::X11_attr().curr_resolution = i;\n          }\n          if (cimg::X11_attr().curr_resolution>0) {\n            XRRScreenConfiguration *config = XRRGetScreenInfo(dpy,DefaultRootWindow(dpy));\n            XRRSetScreenConfig(dpy,config,DefaultRootWindow(dpy),\n                               cimg::X11_attr().curr_resolution,cimg::X11_attr().curr_rotation,CurrentTime);\n            XRRFreeScreenConfigInfo(config);\n            XSync(dpy,0);\n          }\n        }\n      }\n      if (!cimg::X11_attr().resolutions)\n        cimg::warn(_cimgdisplay_instance\n                   \"init_fullscreen(): Xrandr extension not supported by the X server.\",\n                   cimgdisplay_instance);\n#endif\n\n      const unsigned int sx = screen_width(), sy = screen_height();\n      if (sx==_width && sy==_height) return;\n      XSetWindowAttributes winattr;\n      winattr.override_redirect = 1;\n      _background_window = XCreateWindow(dpy,DefaultRootWindow(dpy),0,0,sx,sy,0,0,\n                                         InputOutput,CopyFromParent,CWOverrideRedirect,&winattr);\n      const cimg_ulong buf_size = (cimg_ulong)sx*sy*(cimg::X11_attr().nb_bits==8?1:\n                                                     (cimg::X11_attr().nb_bits==16?2:4));\n      void *background_data = std::malloc(buf_size);\n      std::memset(background_data,0,buf_size);\n      XImage *background_image = XCreateImage(dpy,DefaultVisual(dpy,DefaultScreen(dpy)),cimg::X11_attr().nb_bits,\n                                              ZPixmap,0,(char*)background_data,sx,sy,8,0);\n      XEvent event;\n      XSelectInput(dpy,_background_window,StructureNotifyMask);\n      XMapRaised(dpy,_background_window);\n      do XWindowEvent(dpy,_background_window,StructureNotifyMask,&event);\n      while (event.type!=MapNotify);\n      GC gc = DefaultGC(dpy,DefaultScreen(dpy));\n#ifdef cimg_use_xshm\n      if (_shminfo) XShmPutImage(dpy,_background_window,gc,background_image,0,0,0,0,sx,sy,0);\n      else XPutImage(dpy,_background_window,gc,background_image,0,0,0,0,sx,sy);\n#else\n      XPutImage(dpy,_background_window,gc,background_image,0,0,0,0,sx,sy);\n#endif\n      XWindowAttributes attr;\n      XGetWindowAttributes(dpy,_background_window,&attr);\n      while (attr.map_state!=IsViewable) XSync(dpy,0);\n      XDestroyImage(background_image);\n    }\n\n    void _desinit_fullscreen() {\n      if (!_is_fullscreen) return;\n      Display *const dpy = cimg::X11_attr().display;\n      XUngrabKeyboard(dpy,CurrentTime);\n#ifdef cimg_use_xrandr\n      if (cimg::X11_attr().resolutions && cimg::X11_attr().curr_resolution) {\n        XRRScreenConfiguration *config = XRRGetScreenInfo(dpy,DefaultRootWindow(dpy));\n        XRRSetScreenConfig(dpy,config,DefaultRootWindow(dpy),0,cimg::X11_attr().curr_rotation,CurrentTime);\n        XRRFreeScreenConfigInfo(config);\n        XSync(dpy,0);\n        cimg::X11_attr().curr_resolution = 0;\n      }\n#endif\n      if (_background_window) XDestroyWindow(dpy,_background_window);\n      _background_window = 0;\n      _is_fullscreen = false;\n    }\n\n    static int _assign_xshm(Display *dpy, XErrorEvent *error) {\n      cimg::unused(dpy,error);\n      cimg::X11_attr().is_shm_enabled = false;\n      return 0;\n    }\n\n    void _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,\n                 const unsigned int normalization_type=3,\n                 const bool fullscreen_flag=false, const bool closed_flag=false) {\n      cimg::mutex(14);\n\n      // Allocate space for window title\n      const char *const nptitle = ptitle?ptitle:\"\";\n      const unsigned int s = (unsigned int)std::strlen(nptitle) + 1;\n      char *const tmp_title = s?new char[s]:0;\n      if (s) std::memcpy(tmp_title,nptitle,s*sizeof(char));\n\n      // Destroy previous display window if existing\n      if (!is_empty()) assign();\n\n      // Open X11 display and retrieve graphical properties.\n      Display* &dpy = cimg::X11_attr().display;\n      if (!dpy) {\n        dpy = XOpenDisplay(0);\n        if (!dpy)\n          throw CImgDisplayException(_cimgdisplay_instance\n                                     \"assign(): Failed to open X11 display.\",\n                                     cimgdisplay_instance);\n\n        cimg::X11_attr().nb_bits = DefaultDepth(dpy,DefaultScreen(dpy));\n        if (cimg::X11_attr().nb_bits!=8 && cimg::X11_attr().nb_bits!=16 &&\n            cimg::X11_attr().nb_bits!=24 && cimg::X11_attr().nb_bits!=32)\n          throw CImgDisplayException(_cimgdisplay_instance\n                                     \"assign(): Invalid %u bits screen mode detected \"\n                                     \"(only 8, 16, 24 and 32 bits modes are managed).\",\n                                     cimgdisplay_instance,\n                                     cimg::X11_attr().nb_bits);\n        XVisualInfo vtemplate;\n        vtemplate.visualid = XVisualIDFromVisual(DefaultVisual(dpy,DefaultScreen(dpy)));\n        int nb_visuals;\n        XVisualInfo *vinfo = XGetVisualInfo(dpy,VisualIDMask,&vtemplate,&nb_visuals);\n        if (vinfo && vinfo->red_mask<vinfo->blue_mask) cimg::X11_attr().is_blue_first = true;\n        cimg::X11_attr().byte_order = ImageByteOrder(dpy);\n        XFree(vinfo);\n\n        cimg_lock_display();\n        cimg::X11_attr().events_thread = new pthread_t;\n        pthread_create(cimg::X11_attr().events_thread,0,_events_thread,0);\n      } else cimg_lock_display();\n\n      // Set display variables.\n      _width = std::min(dimw,(unsigned int)screen_width());\n      _height = std::min(dimh,(unsigned int)screen_height());\n      _normalization = normalization_type<4?normalization_type:3;\n      _is_fullscreen = fullscreen_flag;\n      _window_x = _window_y = 0;\n      _is_closed = closed_flag;\n      _title = tmp_title;\n      flush();\n\n      // Create X11 window (and LUT, if 8bits display)\n      if (_is_fullscreen) {\n        if (!_is_closed) _init_fullscreen();\n        const unsigned int sx = screen_width(), sy = screen_height();\n        XSetWindowAttributes winattr;\n        winattr.override_redirect = 1;\n        _window = XCreateWindow(dpy,DefaultRootWindow(dpy),(sx - _width)/2,(sy - _height)/2,_width,_height,0,0,\n                                InputOutput,CopyFromParent,CWOverrideRedirect,&winattr);\n      } else\n        _window = XCreateSimpleWindow(dpy,DefaultRootWindow(dpy),0,0,_width,_height,0,0L,0L);\n\n      XSelectInput(dpy,_window,\n                   ExposureMask | StructureNotifyMask | ButtonPressMask | KeyPressMask | PointerMotionMask |\n                   EnterWindowMask | LeaveWindowMask | ButtonReleaseMask | KeyReleaseMask);\n\n      XStoreName(dpy,_window,_title?_title:\" \");\n      if (cimg::X11_attr().nb_bits==8) {\n        _colormap = XCreateColormap(dpy,_window,DefaultVisual(dpy,DefaultScreen(dpy)),AllocAll);\n        _set_colormap(_colormap,3);\n        XSetWindowColormap(dpy,_window,_colormap);\n      }\n\n      static const char *const _window_class = cimg_appname;\n      XClassHint *const window_class = XAllocClassHint();\n      window_class->res_name = (char*)_window_class;\n      window_class->res_class = (char*)_window_class;\n      XSetClassHint(dpy,_window,window_class);\n      XFree(window_class);\n\n      _window_width = _width;\n      _window_height = _height;\n\n      // Create XImage\n#ifdef cimg_use_xshm\n      _shminfo = 0;\n      if (XShmQueryExtension(dpy)) {\n        _shminfo = new XShmSegmentInfo;\n        _image = XShmCreateImage(dpy,DefaultVisual(dpy,DefaultScreen(dpy)),cimg::X11_attr().nb_bits,\n                                 ZPixmap,0,_shminfo,_width,_height);\n        if (!_image) { delete _shminfo; _shminfo = 0; }\n        else {\n          _shminfo->shmid = shmget(IPC_PRIVATE,_image->bytes_per_line*_image->height,IPC_CREAT|0777);\n          if (_shminfo->shmid==-1) { XDestroyImage(_image); delete _shminfo; _shminfo = 0; }\n          else {\n            _shminfo->shmaddr = _image->data = (char*)(_data = shmat(_shminfo->shmid,0,0));\n            if (_shminfo->shmaddr==(char*)-1) {\n              shmctl(_shminfo->shmid,IPC_RMID,0); XDestroyImage(_image); delete _shminfo; _shminfo = 0;\n            } else {\n              _shminfo->readOnly = 0;\n              cimg::X11_attr().is_shm_enabled = true;\n              XErrorHandler oldXErrorHandler = XSetErrorHandler(_assign_xshm);\n              XShmAttach(dpy,_shminfo);\n              XSync(dpy,0);\n              XSetErrorHandler(oldXErrorHandler);\n              if (!cimg::X11_attr().is_shm_enabled) {\n                shmdt(_shminfo->shmaddr); shmctl(_shminfo->shmid,IPC_RMID,0); XDestroyImage(_image);\n                delete _shminfo; _shminfo = 0;\n              }\n            }\n          }\n        }\n      }\n      if (!_shminfo)\n#endif\n        {\n          const cimg_ulong buf_size = (cimg_ulong)_width*_height*(cimg::X11_attr().nb_bits==8?1:\n                                                                  (cimg::X11_attr().nb_bits==16?2:4));\n          _data = std::malloc(buf_size);\n          _image = XCreateImage(dpy,DefaultVisual(dpy,DefaultScreen(dpy)),cimg::X11_attr().nb_bits,\n                                ZPixmap,0,(char*)_data,_width,_height,8,0);\n        }\n\n      _wm_window_atom = XInternAtom(dpy,\"WM_DELETE_WINDOW\",0);\n      _wm_protocol_atom = XInternAtom(dpy,\"WM_PROTOCOLS\",0);\n      XSetWMProtocols(dpy,_window,&_wm_window_atom,1);\n\n      if (_is_fullscreen) XGrabKeyboard(dpy,_window,1,GrabModeAsync,GrabModeAsync,CurrentTime);\n      cimg::X11_attr().wins[cimg::X11_attr().nb_wins++]=this;\n      if (!_is_closed) _map_window(); else { _window_x = _window_y = cimg::type<int>::min(); }\n      cimg_unlock_display();\n      cimg::mutex(14,0);\n    }\n\n    CImgDisplay& assign() {\n      if (is_empty()) return flush();\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n\n      // Remove display window from event thread list.\n      unsigned int i;\n      for (i = 0; i<cimg::X11_attr().nb_wins && cimg::X11_attr().wins[i]!=this; ++i) {}\n      for ( ; i<cimg::X11_attr().nb_wins - 1; ++i) cimg::X11_attr().wins[i] = cimg::X11_attr().wins[i + 1];\n      --cimg::X11_attr().nb_wins;\n\n      // Destroy window, image, colormap and title.\n      if (_is_fullscreen && !_is_closed) _desinit_fullscreen();\n      XDestroyWindow(dpy,_window);\n      _window = 0;\n#ifdef cimg_use_xshm\n      if (_shminfo) {\n        XShmDetach(dpy,_shminfo);\n        XDestroyImage(_image);\n        shmdt(_shminfo->shmaddr);\n        shmctl(_shminfo->shmid,IPC_RMID,0);\n        delete _shminfo;\n        _shminfo = 0;\n      } else\n#endif\n        XDestroyImage(_image);\n      _data = 0; _image = 0;\n      if (cimg::X11_attr().nb_bits==8) XFreeColormap(dpy,_colormap);\n      _colormap = 0;\n      XSync(dpy,0);\n\n      // Reset display variables.\n      delete[] _title;\n      _width = _height = _normalization = _window_width = _window_height = 0;\n      _window_x = _window_y = 0;\n      _is_fullscreen = false;\n      _is_closed = true;\n      _min = _max = 0;\n      _title = 0;\n      flush();\n\n      cimg_unlock_display();\n      return *this;\n    }\n\n    CImgDisplay& assign(const unsigned int dimw, const unsigned int dimh, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!dimw || !dimh) return assign();\n      _assign(dimw,dimh,title,normalization_type,fullscreen_flag,closed_flag);\n      _min = _max = 0;\n      std::memset(_data,0,(cimg::X11_attr().nb_bits==8?sizeof(unsigned char):\n                           (cimg::X11_attr().nb_bits==16?sizeof(unsigned short):sizeof(unsigned int)))*\n                  (size_t)_width*_height);\n      return paint();\n    }\n\n    template<typename T>\n    CImgDisplay& assign(const CImg<T>& img, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!img) return assign();\n      CImg<T> tmp;\n      const CImg<T>& nimg = (img._depth==1)?img:(tmp=img.get_projections2d((img._width - 1)/2,\n                                                                           (img._height - 1)/2,\n                                                                           (img._depth - 1)/2));\n      _assign(nimg._width,nimg._height,title,normalization_type,fullscreen_flag,closed_flag);\n      if (_normalization==2) _min = (float)nimg.min_max(_max);\n      return render(nimg).paint();\n    }\n\n    template<typename T>\n    CImgDisplay& assign(const CImgList<T>& list, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!list) return assign();\n      CImg<T> tmp;\n      const CImg<T> img = list>'x', &nimg = (img._depth==1)?img:(tmp=img.get_projections2d((img._width - 1)/2,\n                                                                                           (img._height - 1)/2,\n                                                                                           (img._depth - 1)/2));\n      _assign(nimg._width,nimg._height,title,normalization_type,fullscreen_flag,closed_flag);\n      if (_normalization==2) _min = (float)nimg.min_max(_max);\n      return render(nimg).paint();\n    }\n\n    CImgDisplay& assign(const CImgDisplay& disp) {\n      if (!disp) return assign();\n      _assign(disp._width,disp._height,disp._title,disp._normalization,disp._is_fullscreen,disp._is_closed);\n      std::memcpy(_data,disp._data,(cimg::X11_attr().nb_bits==8?sizeof(unsigned char):\n                                    cimg::X11_attr().nb_bits==16?sizeof(unsigned short):\n                                    sizeof(unsigned int))*(size_t)_width*_height);\n      return paint();\n    }\n\n    CImgDisplay& resize(const int nwidth, const int nheight, const bool force_redraw=true) {\n      if (!nwidth || !nheight || (is_empty() && (nwidth<0 || nheight<0))) return assign();\n      if (is_empty()) return assign(nwidth,nheight);\n      Display *const dpy = cimg::X11_attr().display;\n      const unsigned int\n        tmpdimx = (nwidth>0)?nwidth:(-nwidth*width()/100),\n        tmpdimy = (nheight>0)?nheight:(-nheight*height()/100),\n        dimx = tmpdimx?tmpdimx:1,\n        dimy = tmpdimy?tmpdimy:1;\n      if (_width!=dimx || _height!=dimy || _window_width!=dimx || _window_height!=dimy) {\n        show();\n        cimg_lock_display();\n        if (_window_width!=dimx || _window_height!=dimy) {\n          XWindowAttributes attr;\n          for (unsigned int i = 0; i<10; ++i) {\n            XResizeWindow(dpy,_window,dimx,dimy);\n            XGetWindowAttributes(dpy,_window,&attr);\n            if (attr.width==(int)dimx && attr.height==(int)dimy) break;\n            cimg::wait(5);\n          }\n        }\n        if (_width!=dimx || _height!=dimy) switch (cimg::X11_attr().nb_bits) {\n          case 8 :  { unsigned char pixel_type = 0; _resize(pixel_type,dimx,dimy,force_redraw); } break;\n          case 16 : { unsigned short pixel_type = 0; _resize(pixel_type,dimx,dimy,force_redraw); } break;\n          default : { unsigned int pixel_type = 0; _resize(pixel_type,dimx,dimy,force_redraw); }\n          }\n        _window_width = _width = dimx; _window_height = _height = dimy;\n        cimg_unlock_display();\n      }\n      _is_resized = false;\n      if (_is_fullscreen) move((screen_width() - _width)/2,(screen_height() - _height)/2);\n      if (force_redraw) return paint();\n      return *this;\n    }\n\n    CImgDisplay& toggle_fullscreen(const bool force_redraw=true) {\n      if (is_empty()) return *this;\n      if (force_redraw) {\n        const cimg_ulong buf_size = (cimg_ulong)_width*_height*\n          (cimg::X11_attr().nb_bits==8?1:(cimg::X11_attr().nb_bits==16?2:4));\n        void *image_data = std::malloc(buf_size);\n        std::memcpy(image_data,_data,buf_size);\n        assign(_width,_height,_title,_normalization,!_is_fullscreen,false);\n        std::memcpy(_data,image_data,buf_size);\n        std::free(image_data);\n        return paint();\n      }\n      return assign(_width,_height,_title,_normalization,!_is_fullscreen,false);\n    }\n\n    CImgDisplay& show() {\n      if (is_empty() || !_is_closed) return *this;\n      cimg_lock_display();\n      if (_is_fullscreen) _init_fullscreen();\n      _map_window();\n      _is_closed = false;\n      cimg_unlock_display();\n      return paint();\n    }\n\n    CImgDisplay& close() {\n      if (is_empty() || _is_closed) return *this;\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      if (_is_fullscreen) _desinit_fullscreen();\n      XUnmapWindow(dpy,_window);\n      _window_x = _window_y = -1;\n      _is_closed = true;\n      cimg_unlock_display();\n      return *this;\n    }\n\n    CImgDisplay& move(const int posx, const int posy) {\n      if (is_empty()) return *this;\n      if (_window_x!=posx || _window_y!=posy) {\n        show();\n        Display *const dpy = cimg::X11_attr().display;\n        cimg_lock_display();\n        XMoveWindow(dpy,_window,posx,posy);\n        _window_x = posx; _window_y = posy;\n        cimg_unlock_display();\n      }\n      _is_moved = false;\n      return paint();\n    }\n\n    CImgDisplay& show_mouse() {\n      if (is_empty()) return *this;\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      XUndefineCursor(dpy,_window);\n      cimg_unlock_display();\n      return *this;\n    }\n\n    CImgDisplay& hide_mouse() {\n      if (is_empty()) return *this;\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      static const char pix_data[8] = { 0 };\n      XColor col;\n      col.red = col.green = col.blue = 0;\n      Pixmap pix = XCreateBitmapFromData(dpy,_window,pix_data,8,8);\n      Cursor cur = XCreatePixmapCursor(dpy,pix,pix,&col,&col,0,0);\n      XFreePixmap(dpy,pix);\n      XDefineCursor(dpy,_window,cur);\n      cimg_unlock_display();\n      return *this;\n    }\n\n    CImgDisplay& set_mouse(const int posx, const int posy) {\n      if (is_empty() || _is_closed) return *this;\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      XWarpPointer(dpy,0L,_window,0,0,0,0,posx,posy);\n      _mouse_x = posx; _mouse_y = posy;\n      _is_moved = false;\n      XSync(dpy,0);\n      cimg_unlock_display();\n      return *this;\n    }\n\n    CImgDisplay& set_title(const char *const format, ...) {\n      if (is_empty()) return *this;\n      char *const tmp = new char[1024];\n      va_list ap;\n      va_start(ap, format);\n      cimg_vsnprintf(tmp,1024,format,ap);\n      va_end(ap);\n      if (!std::strcmp(_title,tmp)) { delete[] tmp; return *this; }\n      delete[] _title;\n      const unsigned int s = (unsigned int)std::strlen(tmp) + 1;\n      _title = new char[s];\n      std::memcpy(_title,tmp,s*sizeof(char));\n      Display *const dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      XStoreName(dpy,_window,tmp);\n      cimg_unlock_display();\n      delete[] tmp;\n      return *this;\n    }\n\n    template<typename T>\n    CImgDisplay& display(const CImg<T>& img) {\n      if (!img)\n        throw CImgArgumentException(_cimgdisplay_instance\n                                    \"display(): Empty specified image.\",\n                                    cimgdisplay_instance);\n      if (is_empty()) return assign(img);\n      return render(img).paint(false);\n    }\n\n    CImgDisplay& paint(const bool wait_expose=true) {\n      if (is_empty()) return *this;\n      cimg_lock_display();\n      _paint(wait_expose);\n      cimg_unlock_display();\n      return *this;\n    }\n\n    template<typename T>\n    CImgDisplay& render(const CImg<T>& img, const bool flag8=false) {\n      if (!img)\n        throw CImgArgumentException(_cimgdisplay_instance\n                                    \"render(): Empty specified image.\",\n                                    cimgdisplay_instance);\n      if (is_empty()) return *this;\n      if (img._depth!=1) return render(img.get_projections2d((img._width - 1)/2,(img._height - 1)/2,\n                                                             (img._depth - 1)/2));\n      if (cimg::X11_attr().nb_bits==8 && (img._width!=_width || img._height!=_height))\n        return render(img.get_resize(_width,_height,1,-100,1));\n      if (cimg::X11_attr().nb_bits==8 && !flag8 && img._spectrum==3) {\n        static const CImg<typename CImg<T>::ucharT> default_colormap = CImg<typename CImg<T>::ucharT>::default_LUT256();\n        return render(img.get_index(default_colormap,1,false));\n      }\n\n      const T\n        *data1 = img._data,\n        *data2 = (img._spectrum>1)?img.data(0,0,0,1):data1,\n        *data3 = (img._spectrum>2)?img.data(0,0,0,2):data1;\n\n      if (cimg::X11_attr().is_blue_first) cimg::swap(data1,data3);\n      cimg_lock_display();\n\n      if (!_normalization || (_normalization==3 && cimg::type<T>::string()==cimg::type<unsigned char>::string())) {\n        _min = _max = 0;\n        switch (cimg::X11_attr().nb_bits) {\n        case 8 : { // 256 colormap, no normalization\n          _set_colormap(_colormap,img._spectrum);\n          unsigned char\n            *const ndata = (img._width==_width && img._height==_height)?(unsigned char*)_data:\n            new unsigned char[(size_t)img._width*img._height],\n            *ptrd = (unsigned char*)ndata;\n          switch (img._spectrum) {\n          case 1 :\n            for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n              (*ptrd++) = (unsigned char)*(data1++);\n            break;\n          case 2 : for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n              const unsigned char\n                R = (unsigned char)*(data1++),\n                G = (unsigned char)*(data2++);\n              (*ptrd++) = (R&0xf0) | (G>>4);\n            } break;\n          default : for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n              const unsigned char\n                R = (unsigned char)*(data1++),\n                G = (unsigned char)*(data2++),\n                B = (unsigned char)*(data3++);\n              (*ptrd++) = (R&0xe0) | ((G>>5)<<2) | (B>>6);\n            }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned char*)_data,_width,_height);\n            delete[] ndata;\n          }\n        } break;\n        case 16 : { // 16 bits colors, no normalization\n          unsigned short *const ndata = (img._width==_width && img._height==_height)?(unsigned short*)_data:\n            new unsigned short[(size_t)img._width*img._height];\n          unsigned char *ptrd = (unsigned char*)ndata;\n          const unsigned int M = 248;\n          switch (img._spectrum) {\n          case 1 :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char val = (unsigned char)*(data1++), G = val>>2;\n                ptrd[0] = (val&M) | (G>>3);\n                ptrd[1] = (G<<5) | (G>>1);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char val = (unsigned char)*(data1++), G = val>>2;\n                ptrd[0] = (G<<5) | (G>>1);\n                ptrd[1] = (val&M) | (G>>3);\n                ptrd+=2;\n              }\n            break;\n          case 2 :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)*(data2++)>>2;\n                ptrd[0] = ((unsigned char)*(data1++)&M) | (G>>3);\n                ptrd[1] = (G<<5);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)*(data2++)>>2;\n                ptrd[0] = (G<<5);\n                ptrd[1] = ((unsigned char)*(data1++)&M) | (G>>3);\n                ptrd+=2;\n              }\n            break;\n          default :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)*(data2++)>>2;\n                ptrd[0] = ((unsigned char)*(data1++)&M) | (G>>3);\n                ptrd[1] = (G<<5) | ((unsigned char)*(data3++)>>3);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)*(data2++)>>2;\n                ptrd[0] = (G<<5) | ((unsigned char)*(data3++)>>3);\n                ptrd[1] = ((unsigned char)*(data1++)&M) | (G>>3);\n                ptrd+=2;\n              }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned short*)_data,_width,_height);\n            delete[] ndata;\n          }\n        } break;\n        default : { // 24 bits colors, no normalization\n          unsigned int *const ndata = (img._width==_width && img._height==_height)?(unsigned int*)_data:\n            new unsigned int[(size_t)img._width*img._height];\n          if (sizeof(int)==4) { // 32 bits int uses optimized version\n            unsigned int *ptrd = ndata;\n            switch (img._spectrum) {\n            case 1 :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  const unsigned char val = (unsigned char)*(data1++);\n                  *(ptrd++) = (val<<16) | (val<<8) | val;\n                }\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                 const unsigned char val = (unsigned char)*(data1++);\n                  *(ptrd++) = (val<<16) | (val<<8) | val;\n                }\n              break;\n            case 2 :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) = ((unsigned char)*(data1++)<<16) | ((unsigned char)*(data2++)<<8);\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) = ((unsigned char)*(data2++)<<16) | ((unsigned char)*(data1++)<<8);\n              break;\n            default :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) = ((unsigned char)*(data1++)<<16) | ((unsigned char)*(data2++)<<8) |\n                    (unsigned char)*(data3++);\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) = ((unsigned char)*(data3++)<<24) | ((unsigned char)*(data2++)<<16) |\n                    ((unsigned char)*(data1++)<<8);\n            }\n          } else {\n            unsigned char *ptrd = (unsigned char*)ndata;\n            switch (img._spectrum) {\n            case 1 :\n              if (cimg::X11_attr().byte_order)\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = 0;\n                  ptrd[1] = (unsigned char)*(data1++);\n                  ptrd[2] = 0;\n                  ptrd[3] = 0;\n                  ptrd+=4;\n                } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = 0;\n                  ptrd[1] = 0;\n                  ptrd[2] = (unsigned char)*(data1++);\n                  ptrd[3] = 0;\n                  ptrd+=4;\n                }\n              break;\n            case 2 :\n              if (cimg::X11_attr().byte_order) cimg::swap(data1,data2);\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                ptrd[0] = 0;\n                ptrd[1] = (unsigned char)*(data2++);\n                ptrd[2] = (unsigned char)*(data1++);\n                ptrd[3] = 0;\n                ptrd+=4;\n              }\n              break;\n            default :\n              if (cimg::X11_attr().byte_order)\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = 0;\n                  ptrd[1] = (unsigned char)*(data1++);\n                  ptrd[2] = (unsigned char)*(data2++);\n                  ptrd[3] = (unsigned char)*(data3++);\n                  ptrd+=4;\n                } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = (unsigned char)*(data3++);\n                  ptrd[1] = (unsigned char)*(data2++);\n                  ptrd[2] = (unsigned char)*(data1++);\n                  ptrd[3] = 0;\n                  ptrd+=4;\n                }\n            }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned int*)_data,_width,_height);\n            delete[] ndata;\n          }\n        }\n        }\n      } else {\n        if (_normalization==3) {\n          if (cimg::type<T>::is_float()) _min = (float)img.min_max(_max);\n          else { _min = (float)cimg::type<T>::min(); _max = (float)cimg::type<T>::max(); }\n        } else if ((_min>_max) || _normalization==1) _min = (float)img.min_max(_max);\n        const float delta = _max - _min, mm = 255/(delta?delta:1.0f);\n        switch (cimg::X11_attr().nb_bits) {\n        case 8 : { // 256 colormap, with normalization\n          _set_colormap(_colormap,img._spectrum);\n          unsigned char *const ndata = (img._width==_width && img._height==_height)?(unsigned char*)_data:\n            new unsigned char[(size_t)img._width*img._height];\n          unsigned char *ptrd = (unsigned char*)ndata;\n          switch (img._spectrum) {\n          case 1 : for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n              const unsigned char R = (unsigned char)((*(data1++) - _min)*mm);\n              *(ptrd++) = R;\n            } break;\n          case 2 : for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n              const unsigned char\n                R = (unsigned char)((*(data1++) - _min)*mm),\n                G = (unsigned char)((*(data2++) - _min)*mm);\n            (*ptrd++) = (R&0xf0) | (G>>4);\n          } break;\n          default :\n            for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n              const unsigned char\n                R = (unsigned char)((*(data1++) - _min)*mm),\n                G = (unsigned char)((*(data2++) - _min)*mm),\n                B = (unsigned char)((*(data3++) - _min)*mm);\n              *(ptrd++) = (R&0xe0) | ((G>>5)<<2) | (B>>6);\n            }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned char*)_data,_width,_height);\n            delete[] ndata;\n          }\n        } break;\n        case 16 : { // 16 bits colors, with normalization\n          unsigned short *const ndata = (img._width==_width && img._height==_height)?(unsigned short*)_data:\n            new unsigned short[(size_t)img._width*img._height];\n          unsigned char *ptrd = (unsigned char*)ndata;\n          const unsigned int M = 248;\n          switch (img._spectrum) {\n          case 1 :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char val = (unsigned char)((*(data1++) - _min)*mm), G = val>>2;\n                ptrd[0] = (val&M) | (G>>3);\n                ptrd[1] = (G<<5) | (val>>3);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char val = (unsigned char)((*(data1++) - _min)*mm), G = val>>2;\n                ptrd[0] = (G<<5) | (val>>3);\n                ptrd[1] = (val&M) | (G>>3);\n                ptrd+=2;\n              }\n            break;\n          case 2 :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)((*(data2++) - _min)*mm)>>2;\n                ptrd[0] = ((unsigned char)((*(data1++) - _min)*mm)&M) | (G>>3);\n                ptrd[1] = (G<<5);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)((*(data2++) - _min)*mm)>>2;\n                ptrd[0] = (G<<5);\n                ptrd[1] = ((unsigned char)((*(data1++) - _min)*mm)&M) | (G>>3);\n                ptrd+=2;\n              }\n            break;\n          default :\n            if (cimg::X11_attr().byte_order)\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)((*(data2++) - _min)*mm)>>2;\n                ptrd[0] = ((unsigned char)((*(data1++) - _min)*mm)&M) | (G>>3);\n                ptrd[1] = (G<<5) | ((unsigned char)((*(data3++) - _min)*mm)>>3);\n                ptrd+=2;\n              } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                const unsigned char G = (unsigned char)((*(data2++) - _min)*mm)>>2;\n                ptrd[0] = (G<<5) | ((unsigned char)((*(data3++) - _min)*mm)>>3);\n                ptrd[1] = ((unsigned char)((*(data1++) - _min)*mm)&M) | (G>>3);\n                ptrd+=2;\n              }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned short*)_data,_width,_height);\n            delete[] ndata;\n          }\n        } break;\n        default : { // 24 bits colors, with normalization\n          unsigned int *const ndata = (img._width==_width && img._height==_height)?(unsigned int*)_data:\n            new unsigned int[(size_t)img._width*img._height];\n          if (sizeof(int)==4) { // 32 bits int uses optimized version\n            unsigned int *ptrd = ndata;\n            switch (img._spectrum) {\n            case 1 :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  const unsigned char val = (unsigned char)((*(data1++) - _min)*mm);\n                  *(ptrd++) = (val<<16) | (val<<8) | val;\n                }\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  const unsigned char val = (unsigned char)((*(data1++) - _min)*mm);\n                  *(ptrd++) = (val<<24) | (val<<16) | (val<<8);\n                }\n              break;\n            case 2 :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) =\n                    ((unsigned char)((*(data1++) - _min)*mm)<<16) |\n                    ((unsigned char)((*(data2++) - _min)*mm)<<8);\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) =\n                    ((unsigned char)((*(data2++) - _min)*mm)<<16) |\n                    ((unsigned char)((*(data1++) - _min)*mm)<<8);\n              break;\n            default :\n              if (cimg::X11_attr().byte_order==cimg::endianness())\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) =\n                    ((unsigned char)((*(data1++) - _min)*mm)<<16) |\n                    ((unsigned char)((*(data2++) - _min)*mm)<<8) |\n                    (unsigned char)((*(data3++) - _min)*mm);\n              else\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy)\n                  *(ptrd++) =\n                    ((unsigned char)((*(data3++) - _min)*mm)<<24) |\n                    ((unsigned char)((*(data2++) - _min)*mm)<<16) |\n                    ((unsigned char)((*(data1++) - _min)*mm)<<8);\n            }\n          } else {\n            unsigned char *ptrd = (unsigned char*)ndata;\n            switch (img._spectrum) {\n            case 1 :\n              if (cimg::X11_attr().byte_order)\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  const unsigned char val = (unsigned char)((*(data1++) - _min)*mm);\n                  ptrd[0] = 0;\n                  ptrd[1] = val;\n                  ptrd[2] = val;\n                  ptrd[3] = val;\n                  ptrd+=4;\n                } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  const unsigned char val = (unsigned char)((*(data1++) - _min)*mm);\n                  ptrd[0] = val;\n                  ptrd[1] = val;\n                  ptrd[2] = val;\n                  ptrd[3] = 0;\n                  ptrd+=4;\n                }\n              break;\n            case 2 :\n              if (cimg::X11_attr().byte_order) cimg::swap(data1,data2);\n              for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                ptrd[0] = 0;\n                ptrd[1] = (unsigned char)((*(data2++) - _min)*mm);\n                ptrd[2] = (unsigned char)((*(data1++) - _min)*mm);\n                ptrd[3] = 0;\n                ptrd+=4;\n              }\n              break;\n            default :\n              if (cimg::X11_attr().byte_order)\n                for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = 0;\n                  ptrd[1] = (unsigned char)((*(data1++) - _min)*mm);\n                  ptrd[2] = (unsigned char)((*(data2++) - _min)*mm);\n                  ptrd[3] = (unsigned char)((*(data3++) - _min)*mm);\n                  ptrd+=4;\n                } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n                  ptrd[0] = (unsigned char)((*(data3++) - _min)*mm);\n                  ptrd[1] = (unsigned char)((*(data2++) - _min)*mm);\n                  ptrd[2] = (unsigned char)((*(data1++) - _min)*mm);\n                  ptrd[3] = 0;\n                  ptrd+=4;\n                }\n            }\n          }\n          if (ndata!=_data) {\n            _render_resize(ndata,img._width,img._height,(unsigned int*)_data,_width,_height);\n            delete[] ndata;\n          }\n        }\n        }\n      }\n      cimg_unlock_display();\n      return *this;\n    }\n\n    template<typename T>\n    static void screenshot(const int x0, const int y0, const int x1, const int y1, CImg<T>& img) {\n      img.assign();\n      Display *dpy = cimg::X11_attr().display;\n      cimg_lock_display();\n      if (!dpy) {\n        dpy = XOpenDisplay(0);\n        if (!dpy)\n          throw CImgDisplayException(\"CImgDisplay::screenshot(): Failed to open X11 display.\");\n      }\n      Window root = DefaultRootWindow(dpy);\n      XWindowAttributes gwa;\n      XGetWindowAttributes(dpy,root,&gwa);\n      const int width = gwa.width, height = gwa.height;\n      int _x0 = x0, _y0 = y0, _x1 = x1, _y1 = y1;\n      if (_x0>_x1) cimg::swap(_x0,_x1);\n      if (_y0>_y1) cimg::swap(_y0,_y1);\n\n      XImage *image = 0;\n      if (_x1>=0 && _x0<width && _y1>=0 && _y0<height) {\n        _x0 = std::max(_x0,0);\n        _y0 = std::max(_y0,0);\n        _x1 = std::min(_x1,width - 1);\n        _y1 = std::min(_y1,height - 1);\n        image = XGetImage(dpy,root,_x0,_y0,_x1 - _x0 + 1,_y1 - _y0 + 1,AllPlanes,ZPixmap);\n\n        if (image) {\n          const unsigned long\n            red_mask = image->red_mask,\n            green_mask = image->green_mask,\n            blue_mask = image->blue_mask;\n          img.assign(image->width,image->height,1,3);\n          T *pR = img.data(0,0,0,0), *pG = img.data(0,0,0,1), *pB = img.data(0,0,0,2);\n          cimg_forXY(img,x,y) {\n            const unsigned long pixel = XGetPixel(image,x,y);\n            *(pR++) = (T)((pixel & red_mask)>>16);\n            *(pG++) = (T)((pixel & green_mask)>>8);\n            *(pB++) = (T)(pixel & blue_mask);\n          }\n          XDestroyImage(image);\n        }\n      }\n      if (!cimg::X11_attr().display) XCloseDisplay(dpy);\n      cimg_unlock_display();\n      if (img.is_empty())\n        throw CImgDisplayException(\"CImgDisplay::screenshot(): Failed to take screenshot \"\n                                   \"with coordinates (%d,%d)-(%d,%d).\",\n                                   x0,y0,x1,y1);\n    }\n\n    template<typename T>\n    const CImgDisplay& snapshot(CImg<T>& img) const {\n      if (is_empty()) { img.assign(); return *this; }\n      const unsigned char *ptrs = (unsigned char*)_data;\n      img.assign(_width,_height,1,3);\n      T\n        *data1 = img.data(0,0,0,0),\n        *data2 = img.data(0,0,0,1),\n        *data3 = img.data(0,0,0,2);\n      if (cimg::X11_attr().is_blue_first) cimg::swap(data1,data3);\n      switch (cimg::X11_attr().nb_bits) {\n      case 8 : {\n        for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n          const unsigned char val = *(ptrs++);\n          *(data1++) = (T)(val&0xe0);\n          *(data2++) = (T)((val&0x1c)<<3);\n          *(data3++) = (T)(val<<6);\n        }\n      } break;\n      case 16 : {\n        if (cimg::X11_attr().byte_order) for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n          const unsigned char\n            val0 = ptrs[0],\n            val1 = ptrs[1];\n          ptrs+=2;\n          *(data1++) = (T)(val0&0xf8);\n          *(data2++) = (T)((val0<<5) | ((val1&0xe0)>>5));\n          *(data3++) = (T)(val1<<3);\n          } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n          const unsigned short\n            val0 = ptrs[0],\n            val1 = ptrs[1];\n          ptrs+=2;\n          *(data1++) = (T)(val1&0xf8);\n          *(data2++) = (T)((val1<<5) | ((val0&0xe0)>>5));\n          *(data3++) = (T)(val0<<3);\n        }\n      } break;\n      default : {\n        if (cimg::X11_attr().byte_order) for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n          ++ptrs;\n          *(data1++) = (T)ptrs[0];\n          *(data2++) = (T)ptrs[1];\n          *(data3++) = (T)ptrs[2];\n          ptrs+=3;\n          } else for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            *(data3++) = (T)ptrs[0];\n            *(data2++) = (T)ptrs[1];\n            *(data1++) = (T)ptrs[2];\n            ptrs+=3;\n            ++ptrs;\n          }\n      }\n      }\n      return *this;\n    }\n\n    // Windows-based implementation.\n    //-------------------------------\n#elif cimg_display==2\n\n    bool _is_mouse_tracked, _is_cursor_visible;\n    HANDLE _thread, _is_created, _mutex;\n    HWND _window, _background_window;\n    CLIENTCREATESTRUCT _ccs;\n    unsigned int *_data;\n    DEVMODE _curr_mode;\n    BITMAPINFO _bmi;\n    HDC _hdc;\n\n    static int screen_width() {\n      DEVMODE mode;\n      mode.dmSize = sizeof(DEVMODE);\n      mode.dmDriverExtra = 0;\n      EnumDisplaySettings(0,ENUM_CURRENT_SETTINGS,&mode);\n      return (int)mode.dmPelsWidth;\n    }\n\n    static int screen_height() {\n      DEVMODE mode;\n      mode.dmSize = sizeof(DEVMODE);\n      mode.dmDriverExtra = 0;\n      EnumDisplaySettings(0,ENUM_CURRENT_SETTINGS,&mode);\n      return (int)mode.dmPelsHeight;\n    }\n\n    static void wait_all() {\n      WaitForSingleObject(cimg::Win32_attr().wait_event,INFINITE);\n    }\n\n    static LRESULT APIENTRY _handle_events(HWND window, UINT msg, WPARAM wParam, LPARAM lParam) {\n#ifdef _WIN64\n      CImgDisplay *const disp = (CImgDisplay*)GetWindowLongPtr(window,GWLP_USERDATA);\n#else\n      CImgDisplay *const disp = (CImgDisplay*)GetWindowLong(window,GWL_USERDATA);\n#endif\n      MSG st_msg;\n      switch (msg) {\n      case WM_CLOSE :\n        disp->_mouse_x = disp->_mouse_y = -1;\n        disp->_window_x = disp->_window_y = 0;\n        disp->set_button().set_key(0).set_key(0,false)._is_closed = true;\n        ReleaseMutex(disp->_mutex);\n        ShowWindow(disp->_window,SW_HIDE);\n        disp->_is_event = true;\n        SetEvent(cimg::Win32_attr().wait_event);\n        return 0;\n      case WM_SIZE : {\n        while (PeekMessage(&st_msg,window,WM_SIZE,WM_SIZE,PM_REMOVE)) {}\n        WaitForSingleObject(disp->_mutex,INFINITE);\n        const unsigned int nw = LOWORD(lParam),nh = HIWORD(lParam);\n        if (nw && nh && (nw!=disp->_width || nh!=disp->_height)) {\n          disp->_window_width = nw;\n          disp->_window_height = nh;\n          disp->_mouse_x = disp->_mouse_y = -1;\n          disp->_is_resized = disp->_is_event = true;\n          SetEvent(cimg::Win32_attr().wait_event);\n        }\n        ReleaseMutex(disp->_mutex);\n      } break;\n      case WM_MOVE : {\n        while (PeekMessage(&st_msg,window,WM_SIZE,WM_SIZE,PM_REMOVE)) {}\n        WaitForSingleObject(disp->_mutex,INFINITE);\n        const int nx = (int)(short)(LOWORD(lParam)), ny = (int)(short)(HIWORD(lParam));\n        if (nx!=disp->_window_x || ny!=disp->_window_y) {\n          disp->_window_x = nx;\n          disp->_window_y = ny;\n          disp->_is_moved = disp->_is_event = true;\n          SetEvent(cimg::Win32_attr().wait_event);\n        }\n        ReleaseMutex(disp->_mutex);\n      } break;\n      case WM_PAINT :\n        disp->paint();\n        cimg::mutex(15);\n        if (disp->_is_cursor_visible) while (ShowCursor(TRUE)<0); else while (ShowCursor(FALSE)>=0);\n        cimg::mutex(15,0);\n        break;\n      case WM_ERASEBKGND :\n        //        return 0;\n        break;\n      case WM_KEYDOWN :\n        disp->set_key((unsigned int)wParam);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_KEYUP :\n        disp->set_key((unsigned int)wParam,false);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_MOUSEMOVE : {\n        while (PeekMessage(&st_msg,window,WM_MOUSEMOVE,WM_MOUSEMOVE,PM_REMOVE)) {}\n        disp->_mouse_x = LOWORD(lParam);\n        disp->_mouse_y = HIWORD(lParam);\n#if (_WIN32_WINNT>=0x0400) && !defined(NOTRACKMOUSEEVENT)\n        if (!disp->_is_mouse_tracked) {\n          TRACKMOUSEEVENT tme;\n          tme.cbSize = sizeof(TRACKMOUSEEVENT);\n          tme.dwFlags = TME_LEAVE;\n          tme.hwndTrack = disp->_window;\n          if (TrackMouseEvent(&tme)) disp->_is_mouse_tracked = true;\n        }\n#endif\n        if (disp->_mouse_x<0 || disp->_mouse_y<0 || disp->_mouse_x>=disp->width() || disp->_mouse_y>=disp->height())\n          disp->_mouse_x = disp->_mouse_y = -1;\n        disp->_is_event = true;\n        SetEvent(cimg::Win32_attr().wait_event);\n        cimg::mutex(15);\n        if (disp->_is_cursor_visible) while (ShowCursor(TRUE)<0); else while (ShowCursor(FALSE)>=0);\n        cimg::mutex(15,0);\n      } break;\n      case WM_MOUSELEAVE : {\n        disp->_mouse_x = disp->_mouse_y = -1;\n        disp->_is_mouse_tracked = false;\n        cimg::mutex(15);\n        while (ShowCursor(TRUE)<0) {}\n        cimg::mutex(15,0);\n      } break;\n      case WM_LBUTTONDOWN :\n        disp->set_button(1);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_RBUTTONDOWN :\n        disp->set_button(2);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_MBUTTONDOWN :\n        disp->set_button(3);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_LBUTTONUP :\n        disp->set_button(1,false);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_RBUTTONUP :\n        disp->set_button(2,false);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case WM_MBUTTONUP :\n        disp->set_button(3,false);\n        SetEvent(cimg::Win32_attr().wait_event);\n        break;\n      case 0x020A : // WM_MOUSEWHEEL:\n        disp->set_wheel((int)((short)HIWORD(wParam))/120);\n        SetEvent(cimg::Win32_attr().wait_event);\n      }\n      return DefWindowProc(window,msg,wParam,lParam);\n    }\n\n    static DWORD WINAPI _events_thread(void* arg) {\n      CImgDisplay *const disp = (CImgDisplay*)(((void**)arg)[0]);\n      const char *const title = (const char*)(((void**)arg)[1]);\n      MSG msg;\n      delete[] (void**)arg;\n      disp->_bmi.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n      disp->_bmi.bmiHeader.biWidth = disp->width();\n      disp->_bmi.bmiHeader.biHeight = -disp->height();\n      disp->_bmi.bmiHeader.biPlanes = 1;\n      disp->_bmi.bmiHeader.biBitCount = 32;\n      disp->_bmi.bmiHeader.biCompression = BI_RGB;\n      disp->_bmi.bmiHeader.biSizeImage = 0;\n      disp->_bmi.bmiHeader.biXPelsPerMeter = 1;\n      disp->_bmi.bmiHeader.biYPelsPerMeter = 1;\n      disp->_bmi.bmiHeader.biClrUsed = 0;\n      disp->_bmi.bmiHeader.biClrImportant = 0;\n      disp->_data = new unsigned int[(size_t)disp->_width*disp->_height];\n      if (!disp->_is_fullscreen) { // Normal window\n        RECT rect;\n        rect.left = rect.top = 0; rect.right = (LONG)disp->_width - 1; rect.bottom = (LONG)disp->_height - 1;\n        AdjustWindowRect(&rect,WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX,false);\n        const int\n          border1 = (int)((rect.right - rect.left + 1 - disp->_width)/2),\n          border2 = (int)(rect.bottom - rect.top + 1 - disp->_height - border1);\n        disp->_window = CreateWindowA(\"MDICLIENT\",title?title:\" \",\n                                     WS_OVERLAPPEDWINDOW | (disp->_is_closed?0:WS_VISIBLE), CW_USEDEFAULT,CW_USEDEFAULT,\n                                     disp->_width + 2*border1, disp->_height + border1 + border2,\n                                     0,0,0,&(disp->_ccs));\n        if (!disp->_is_closed) {\n          GetWindowRect(disp->_window,&rect);\n          disp->_window_x = rect.left + border1;\n          disp->_window_y = rect.top + border2;\n        } else disp->_window_x = disp->_window_y = 0;\n      } else { // Fullscreen window\n        const unsigned int\n          sx = (unsigned int)screen_width(),\n          sy = (unsigned int)screen_height();\n        disp->_window = CreateWindowA(\"MDICLIENT\",title?title:\" \",\n                                     WS_POPUP | (disp->_is_closed?0:WS_VISIBLE),\n                                      (sx - disp->_width)/2,\n                                      (sy - disp->_height)/2,\n                                     disp->_width,disp->_height,0,0,0,&(disp->_ccs));\n        disp->_window_x = disp->_window_y = 0;\n      }\n      SetForegroundWindow(disp->_window);\n      disp->_hdc = GetDC(disp->_window);\n      disp->_window_width = disp->_width;\n      disp->_window_height = disp->_height;\n      disp->flush();\n#ifdef _WIN64\n      SetWindowLongPtr(disp->_window,GWLP_USERDATA,(LONG_PTR)disp);\n      SetWindowLongPtr(disp->_window,GWLP_WNDPROC,(LONG_PTR)_handle_events);\n#else\n      SetWindowLong(disp->_window,GWL_USERDATA,(LONG)disp);\n      SetWindowLong(disp->_window,GWL_WNDPROC,(LONG)_handle_events);\n#endif\n      SetEvent(disp->_is_created);\n      while (GetMessage(&msg,0,0,0)) DispatchMessage(&msg);\n      return 0;\n    }\n\n    CImgDisplay& _update_window_pos() {\n      if (_is_closed) _window_x = _window_y = -1;\n      else {\n        RECT rect;\n        rect.left = rect.top = 0; rect.right = (LONG)_width - 1; rect.bottom = (LONG)_height - 1;\n        AdjustWindowRect(&rect,WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX,false);\n        const int\n          border1 = (int)((rect.right - rect.left + 1 - _width)/2),\n          border2 = (int)(rect.bottom - rect.top + 1 - _height - border1);\n        GetWindowRect(_window,&rect);\n        _window_x = rect.left + border1;\n        _window_y = rect.top + border2;\n      }\n      return *this;\n    }\n\n    void _init_fullscreen() {\n      _background_window = 0;\n      if (!_is_fullscreen || _is_closed) _curr_mode.dmSize = 0;\n      else {\n        DEVMODE mode;\n        unsigned int imode = 0, ibest = 0, bestbpp = 0, bw = ~0U, bh = ~0U;\n        for (mode.dmSize = sizeof(DEVMODE), mode.dmDriverExtra = 0; EnumDisplaySettings(0,imode,&mode); ++imode) {\n          const unsigned int nw = mode.dmPelsWidth, nh = mode.dmPelsHeight;\n          if (nw>=_width && nh>=_height && mode.dmBitsPerPel>=bestbpp && nw<=bw && nh<=bh) {\n            bestbpp = mode.dmBitsPerPel;\n            ibest = imode;\n            bw = nw; bh = nh;\n          }\n        }\n        if (bestbpp) {\n          _curr_mode.dmSize = sizeof(DEVMODE); _curr_mode.dmDriverExtra = 0;\n          EnumDisplaySettings(0,ENUM_CURRENT_SETTINGS,&_curr_mode);\n          EnumDisplaySettings(0,ibest,&mode);\n          ChangeDisplaySettings(&mode,0);\n        } else _curr_mode.dmSize = 0;\n\n        const unsigned int\n          sx = (unsigned int)screen_width(),\n          sy = (unsigned int)screen_height();\n        if (sx!=_width || sy!=_height) {\n          CLIENTCREATESTRUCT background_ccs;\n          _background_window = CreateWindowA(\"MDICLIENT\",\"\",WS_POPUP | WS_VISIBLE, 0,0,sx,sy,0,0,0,&background_ccs);\n          SetForegroundWindow(_background_window);\n        }\n      }\n    }\n\n    void _desinit_fullscreen() {\n      if (!_is_fullscreen) return;\n      if (_background_window) DestroyWindow(_background_window);\n      _background_window = 0;\n      if (_curr_mode.dmSize) ChangeDisplaySettings(&_curr_mode,0);\n      _is_fullscreen = false;\n    }\n\n    CImgDisplay& _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,\n                         const unsigned int normalization_type=3,\n                         const bool fullscreen_flag=false, const bool closed_flag=false) {\n\n      // Allocate space for window title\n      const char *const nptitle = ptitle?ptitle:\"\";\n      const unsigned int s = (unsigned int)std::strlen(nptitle) + 1;\n      char *const tmp_title = s?new char[s]:0;\n      if (s) std::memcpy(tmp_title,nptitle,s*sizeof(char));\n\n      // Destroy previous window if existing\n      if (!is_empty()) assign();\n\n      // Set display variables\n      _width = std::min(dimw,(unsigned int)screen_width());\n      _height = std::min(dimh,(unsigned int)screen_height());\n      _normalization = normalization_type<4?normalization_type:3;\n      _is_fullscreen = fullscreen_flag;\n      _window_x = _window_y = 0;\n      _is_closed = closed_flag;\n      _is_cursor_visible = true;\n      _is_mouse_tracked = false;\n      _title = tmp_title;\n      flush();\n      if (_is_fullscreen) _init_fullscreen();\n\n      // Create event thread\n      void *const arg = (void*)(new void*[2]);\n      ((void**)arg)[0] = (void*)this;\n      ((void**)arg)[1] = (void*)_title;\n      _mutex = CreateMutex(0,FALSE,0);\n      _is_created = CreateEvent(0,FALSE,FALSE,0);\n      _thread = CreateThread(0,0,_events_thread,arg,0,0);\n      WaitForSingleObject(_is_created,INFINITE);\n      return *this;\n    }\n\n    CImgDisplay& assign() {\n      if (is_empty()) return flush();\n      DestroyWindow(_window);\n      TerminateThread(_thread,0);\n      delete[] _data;\n      delete[] _title;\n      _data = 0;\n      _title = 0;\n      if (_is_fullscreen) _desinit_fullscreen();\n      _width = _height = _normalization = _window_width = _window_height = 0;\n      _window_x = _window_y = 0;\n      _is_fullscreen = false;\n      _is_closed = true;\n      _min = _max = 0;\n      _title = 0;\n      flush();\n      return *this;\n    }\n\n    CImgDisplay& assign(const unsigned int dimw, const unsigned int dimh, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!dimw || !dimh) return assign();\n      _assign(dimw,dimh,title,normalization_type,fullscreen_flag,closed_flag);\n      _min = _max = 0;\n      std::memset(_data,0,sizeof(unsigned int)*_width*_height);\n      return paint();\n    }\n\n    template<typename T>\n    CImgDisplay& assign(const CImg<T>& img, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!img) return assign();\n      CImg<T> tmp;\n      const CImg<T>& nimg = (img._depth==1)?img:(tmp=img.get_projections2d((img._width - 1)/2,\n                                                                           (img._height - 1)/2,\n                                                                           (img._depth - 1)/2));\n      _assign(nimg._width,nimg._height,title,normalization_type,fullscreen_flag,closed_flag);\n      if (_normalization==2) _min = (float)nimg.min_max(_max);\n      return display(nimg);\n    }\n\n    template<typename T>\n    CImgDisplay& assign(const CImgList<T>& list, const char *const title=0,\n                        const unsigned int normalization_type=3,\n                        const bool fullscreen_flag=false, const bool closed_flag=false) {\n      if (!list) return assign();\n      CImg<T> tmp;\n      const CImg<T> img = list>'x', &nimg = (img._depth==1)?img:(tmp=img.get_projections2d((img._width - 1)/2,\n                                                                                           (img._height - 1)/2,\n                                                                                           (img._depth - 1)/2));\n      _assign(nimg._width,nimg._height,title,normalization_type,fullscreen_flag,closed_flag);\n      if (_normalization==2) _min = (float)nimg.min_max(_max);\n      return display(nimg);\n    }\n\n    CImgDisplay& assign(const CImgDisplay& disp) {\n      if (!disp) return assign();\n      _assign(disp._width,disp._height,disp._title,disp._normalization,disp._is_fullscreen,disp._is_closed);\n      std::memcpy(_data,disp._data,sizeof(unsigned int)*_width*_height);\n      return paint();\n    }\n\n    CImgDisplay& resize(const int nwidth, const int nheight, const bool force_redraw=true) {\n      if (!nwidth || !nheight || (is_empty() && (nwidth<0 || nheight<0))) return assign();\n      if (is_empty()) return assign(nwidth,nheight);\n      const unsigned int\n        tmpdimx = (nwidth>0)?nwidth:(-nwidth*_width/100),\n        tmpdimy = (nheight>0)?nheight:(-nheight*_height/100),\n        dimx = tmpdimx?tmpdimx:1,\n        dimy = tmpdimy?tmpdimy:1;\n      if (_width!=dimx || _height!=dimy || _window_width!=dimx || _window_height!=dimy) {\n        if (_window_width!=dimx || _window_height!=dimy) {\n          RECT rect; rect.left = rect.top = 0; rect.right = (LONG)dimx - 1; rect.bottom = (LONG)dimy - 1;\n          AdjustWindowRect(&rect,WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX,false);\n          const int cwidth = rect.right - rect.left + 1, cheight = rect.bottom - rect.top + 1;\n          SetWindowPos(_window,0,0,0,cwidth,cheight,SWP_NOMOVE | SWP_NOZORDER | SWP_NOCOPYBITS);\n        }\n        if (_width!=dimx || _height!=dimy) {\n          unsigned int *const ndata = new unsigned int[dimx*dimy];\n          if (force_redraw) _render_resize(_data,_width,_height,ndata,dimx,dimy);\n          else std::memset(ndata,0x80,sizeof(unsigned int)*dimx*dimy);\n          delete[] _data;\n          _data = ndata;\n          _bmi.bmiHeader.biWidth = (LONG)dimx;\n          _bmi.bmiHeader.biHeight = -(int)dimy;\n          _width = dimx;\n          _height = dimy;\n        }\n        _window_width = dimx; _window_height = dimy;\n        show();\n      }\n      _is_resized = false;\n      if (_is_fullscreen) move((screen_width() - width())/2,(screen_height() - height())/2);\n      if (force_redraw) return paint();\n      return *this;\n    }\n\n    CImgDisplay& toggle_fullscreen(const bool force_redraw=true) {\n      if (is_empty()) return *this;\n      if (force_redraw) {\n        const cimg_ulong buf_size = (cimg_ulong)_width*_height*4;\n        void *odata = std::malloc(buf_size);\n        if (odata) {\n          std::memcpy(odata,_data,buf_size);\n          assign(_width,_height,_title,_normalization,!_is_fullscreen,false);\n          std::memcpy(_data,odata,buf_size);\n          std::free(odata);\n        }\n        return paint();\n      }\n      return assign(_width,_height,_title,_normalization,!_is_fullscreen,false);\n    }\n\n    CImgDisplay& show() {\n      if (is_empty() || !_is_closed) return *this;\n      _is_closed = false;\n      if (_is_fullscreen) _init_fullscreen();\n      ShowWindow(_window,SW_SHOW);\n      _update_window_pos();\n      return paint();\n    }\n\n    CImgDisplay& close() {\n      if (is_empty() || _is_closed) return *this;\n      _is_closed = true;\n      if (_is_fullscreen) _desinit_fullscreen();\n      ShowWindow(_window,SW_HIDE);\n      _window_x = _window_y = 0;\n      return *this;\n    }\n\n    CImgDisplay& move(const int posx, const int posy) {\n      if (is_empty()) return *this;\n      if (_window_x!=posx || _window_y!=posy) {\n        if (!_is_fullscreen) {\n          RECT rect;\n          rect.left = rect.top = 0; rect.right = (LONG)_window_width - 1; rect.bottom = (LONG)_window_height - 1;\n          AdjustWindowRect(&rect,WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX,false);\n          const int\n            border1 = (int)((rect.right - rect.left + 1 -_width)/2),\n            border2 = (int)(rect.bottom - rect.top + 1 - _height - border1);\n          SetWindowPos(_window,0,posx - border1,posy - border2,0,0,SWP_NOSIZE | SWP_NOZORDER);\n        } else SetWindowPos(_window,0,posx,posy,0,0,SWP_NOSIZE | SWP_NOZORDER);\n        _window_x = posx;\n        _window_y = posy;\n        show();\n      }\n      _is_moved = false;\n      return *this;\n    }\n\n    CImgDisplay& show_mouse() {\n      if (is_empty()) return *this;\n      _is_cursor_visible = true;\n      return *this;\n    }\n\n    CImgDisplay& hide_mouse() {\n      if (is_empty()) return *this;\n      _is_cursor_visible = false;\n      return *this;\n    }\n\n    CImgDisplay& set_mouse(const int posx, const int posy) {\n      if (is_empty() || _is_closed || posx<0 || posy<0) return *this;\n      _update_window_pos();\n      const int res = (int)SetCursorPos(_window_x + posx,_window_y + posy);\n      if (res) { _mouse_x = posx; _mouse_y = posy; }\n      return *this;\n    }\n\n    CImgDisplay& set_title(const char *const format, ...) {\n      if (is_empty()) return *this;\n      char *const tmp = new char[1024];\n      va_list ap;\n      va_start(ap, format);\n      cimg_vsnprintf(tmp,1024,format,ap);\n      va_end(ap);\n      if (!std::strcmp(_title,tmp)) { delete[] tmp; return *this; }\n      delete[] _title;\n      const unsigned int s = (unsigned int)std::strlen(tmp) + 1;\n      _title = new char[s];\n      std::memcpy(_title,tmp,s*sizeof(char));\n      SetWindowTextA(_window, tmp);\n      delete[] tmp;\n      return *this;\n    }\n\n    template<typename T>\n    CImgDisplay& display(const CImg<T>& img) {\n      if (!img)\n        throw CImgArgumentException(_cimgdisplay_instance\n                                    \"display(): Empty specified image.\",\n                                    cimgdisplay_instance);\n      if (is_empty()) return assign(img);\n      return render(img).paint();\n    }\n\n    CImgDisplay& paint() {\n      if (_is_closed) return *this;\n      WaitForSingleObject(_mutex,INFINITE);\n      SetDIBitsToDevice(_hdc,0,0,_width,_height,0,0,0,_height,_data,&_bmi,DIB_RGB_COLORS);\n      ReleaseMutex(_mutex);\n      return *this;\n    }\n\n    template<typename T>\n    CImgDisplay& render(const CImg<T>& img) {\n      if (!img)\n        throw CImgArgumentException(_cimgdisplay_instance\n                                    \"render(): Empty specified image.\",\n                                    cimgdisplay_instance);\n\n      if (is_empty()) return *this;\n      if (img._depth!=1) return render(img.get_projections2d((img._width - 1)/2,(img._height - 1)/2,\n                                                             (img._depth - 1)/2));\n\n      const T\n        *data1 = img._data,\n        *data2 = (img._spectrum>=2)?img.data(0,0,0,1):data1,\n        *data3 = (img._spectrum>=3)?img.data(0,0,0,2):data1;\n\n      WaitForSingleObject(_mutex,INFINITE);\n      unsigned int\n        *const ndata = (img._width==_width && img._height==_height)?_data:\n        new unsigned int[(size_t)img._width*img._height],\n        *ptrd = ndata;\n\n      if (!_normalization || (_normalization==3 && cimg::type<T>::string()==cimg::type<unsigned char>::string())) {\n        _min = _max = 0;\n        switch (img._spectrum) {\n        case 1 : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char val = (unsigned char)*(data1++);\n            *(ptrd++) = (unsigned int)((val<<16) | (val<<8) | val);\n          }\n        } break;\n        case 2 : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char\n              R = (unsigned char)*(data1++),\n              G = (unsigned char)*(data2++);\n            *(ptrd++) = (unsigned int)((R<<16) | (G<<8));\n          }\n        } break;\n        default : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char\n              R = (unsigned char)*(data1++),\n              G = (unsigned char)*(data2++),\n              B = (unsigned char)*(data3++);\n            *(ptrd++) = (unsigned int)((R<<16) | (G<<8) | B);\n          }\n        }\n        }\n      } else {\n        if (_normalization==3) {\n          if (cimg::type<T>::is_float()) _min = (float)img.min_max(_max);\n          else { _min = (float)cimg::type<T>::min(); _max = (float)cimg::type<T>::max(); }\n        } else if ((_min>_max) || _normalization==1) _min = (float)img.min_max(_max);\n        const float delta = _max - _min, mm = 255/(delta?delta:1.0f);\n        switch (img._spectrum) {\n        case 1 : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char val = (unsigned char)((*(data1++) - _min)*mm);\n            *(ptrd++) = (unsigned int)((val<<16) | (val<<8) | val);\n          }\n        } break;\n        case 2 : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char\n              R = (unsigned char)((*(data1++) - _min)*mm),\n              G = (unsigned char)((*(data2++) - _min)*mm);\n            *(ptrd++) = (unsigned int)((R<<16) | (G<<8));\n          }\n        } break;\n        default : {\n          for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n            const unsigned char\n              R = (unsigned char)((*(data1++) - _min)*mm),\n              G = (unsigned char)((*(data2++) - _min)*mm),\n              B = (unsigned char)((*(data3++) - _min)*mm);\n            *(ptrd++) = (unsigned int)((R<<16) | (G<<8) | B);\n          }\n        }\n        }\n      }\n      if (ndata!=_data) { _render_resize(ndata,img._width,img._height,_data,_width,_height); delete[] ndata; }\n      ReleaseMutex(_mutex);\n      return *this;\n    }\n\n    template<typename T>\n    static void screenshot(const int x0, const int y0, const int x1, const int y1, CImg<T>& img) {\n      img.assign();\n      HDC hScreen = GetDC(GetDesktopWindow());\n      if (hScreen) {\n        const int\n          width = GetDeviceCaps(hScreen,HORZRES),\n          height = GetDeviceCaps(hScreen,VERTRES);\n        int _x0 = x0, _y0 = y0, _x1 = x1, _y1 = y1;\n        if (_x0>_x1) cimg::swap(_x0,_x1);\n        if (_y0>_y1) cimg::swap(_y0,_y1);\n        if (_x1>=0 && _x0<width && _y1>=0 && _y0<height) {\n          _x0 = std::max(_x0,0);\n          _y0 = std::max(_y0,0);\n          _x1 = std::min(_x1,width - 1);\n          _y1 = std::min(_y1,height - 1);\n          const int bw = _x1 - _x0 + 1, bh = _y1 - _y0 + 1;\n          HDC hdcMem = CreateCompatibleDC(hScreen);\n          if (hdcMem) {\n            HBITMAP hBitmap = CreateCompatibleBitmap(hScreen,bw,bh);\n            if (hBitmap) {\n              HGDIOBJ hOld = SelectObject(hdcMem,hBitmap);\n              if (hOld && BitBlt(hdcMem,0,0,bw,bh,hScreen,_x0,_y0,SRCCOPY) && SelectObject(hdcMem,hOld)) {\n                BITMAPINFOHEADER bmi = {0};\n                bmi.biSize = sizeof(BITMAPINFOHEADER);\n                bmi.biPlanes = 1;\n                bmi.biBitCount = 32;\n                bmi.biWidth = bw;\n                bmi.biHeight = -bh;\n                bmi.biCompression = BI_RGB;\n                bmi.biSizeImage = 0;\n\n                unsigned char *buf = new unsigned char[4*bw*bh];\n                if (GetDIBits(hdcMem,hBitmap,0,bh,buf,(BITMAPINFO*)&bmi,DIB_RGB_COLORS)) {\n                  img.assign(bw,bh,1,3);\n                  const unsigned char *ptrs = buf;\n                  T *pR = img.data(0,0,0,0), *pG = img.data(0,0,0,1), *pB = img.data(0,0,0,2);\n                  cimg_forXY(img,x,y) {\n                    *(pR++) = (T)ptrs[2];\n                    *(pG++) = (T)ptrs[1];\n                    *(pB++) = (T)ptrs[0];\n                    ptrs+=4;\n                  }\n                }\n                delete[] buf;\n              }\n              DeleteObject(hBitmap);\n            }\n            DeleteDC(hdcMem);\n          }\n        }\n        ReleaseDC(GetDesktopWindow(),hScreen);\n      }\n      if (img.is_empty())\n        throw CImgDisplayException(\"CImgDisplay::screenshot(): Failed to take screenshot \"\n                                   \"with coordinates (%d,%d)-(%d,%d).\",\n                                   x0,y0,x1,y1);\n    }\n\n    template<typename T>\n    const CImgDisplay& snapshot(CImg<T>& img) const {\n      if (is_empty()) { img.assign(); return *this; }\n      const unsigned int *ptrs = _data;\n      img.assign(_width,_height,1,3);\n      T\n        *data1 = img.data(0,0,0,0),\n        *data2 = img.data(0,0,0,1),\n        *data3 = img.data(0,0,0,2);\n      for (cimg_ulong xy = (cimg_ulong)img._width*img._height; xy>0; --xy) {\n        const unsigned int val = *(ptrs++);\n        *(data1++) = (T)(unsigned char)(val>>16);\n        *(data2++) = (T)(unsigned char)((val>>8)&0xFF);\n        *(data3++) = (T)(unsigned char)(val&0xFF);\n      }\n      return *this;\n    }\n#endif\n\n    //@}\n  };\n\n  /*\n   #--------------------------------------\n   #\n   #\n   #\n   # Definition of the CImg<T> structure\n   #\n   #\n   #\n   #--------------------------------------\n   */\n\n  //! Class representing an image (up to 4 dimensions wide), each pixel being of type \\c T.\n  /**\n     This is the main class of the %CImg Library. It declares and constructs\n     an image, allows access to its pixel values, and is able to perform various image operations.\n\n     \\par Image representation\n\n     A %CImg image is defined as an instance of the container \\c CImg<T>, which contains a regular grid of pixels,\n     each pixel value being of type \\c T. The image grid can have up to 4 dimensions: width, height, depth\n     and number of channels.\n     Usually, the three first dimensions are used to describe spatial coordinates <tt>(x,y,z)</tt>,\n     while the number of channels is rather used as a vector-valued dimension\n     (it may describe the R,G,B color channels for instance).\n     If you need a fifth dimension, you can use image lists \\c CImgList<T> rather than simple images \\c CImg<T>.\n\n     Thus, the \\c CImg<T> class is able to represent volumetric images of vector-valued pixels,\n     as well as images with less dimensions (1d scalar signal, 2d color images, ...).\n     Most member functions of the class CImg<\\c T> are designed to handle this maximum case of (3+1) dimensions.\n\n     Concerning the pixel value type \\c T:\n     fully supported template types are the basic C++ types: <tt>unsigned char, char, short, unsigned int, int,\n     unsigned long, long, float, double, ... </tt>.\n     Typically, fast image display can be done using <tt>CImg<unsigned char></tt> images,\n     while complex image processing algorithms may be rather coded using <tt>CImg<float></tt> or <tt>CImg<double></tt>\n     images that have floating-point pixel values. The default value for the template T is \\c float.\n     Using your own template types may be possible. However, you will certainly have to define the complete set\n     of arithmetic and logical operators for your class.\n\n     \\par Image structure\n\n     The \\c CImg<T> structure contains \\e six fields:\n     - \\c _width defines the number of \\a columns of the image (size along the X-axis).\n     - \\c _height defines the number of \\a rows of the image (size along the Y-axis).\n     - \\c _depth defines the number of \\a slices of the image (size along the Z-axis).\n     - \\c _spectrum defines the number of \\a channels of the image (size along the C-axis).\n     - \\c _data defines a \\a pointer to the \\a pixel \\a data (of type \\c T).\n     - \\c _is_shared is a boolean that tells if the memory buffer \\c data is shared with\n       another image.\n\n     You can access these fields publicly although it is recommended to use the dedicated functions\n     width(), height(), depth(), spectrum() and ptr() to do so.\n     Image dimensions are not limited to a specific range (as long as you got enough available memory).\n     A value of \\e 1 usually means that the corresponding dimension is \\a flat.\n     If one of the dimensions is \\e 0, or if the data pointer is null, the image is considered as \\e empty.\n     Empty images should not contain any pixel data and thus, will not be processed by CImg member functions\n     (a CImgInstanceException will be thrown instead).\n     Pixel data are stored in memory, in a non interlaced mode (See \\ref cimg_storage).\n\n     \\par Image declaration and construction\n\n     Declaring an image can be done by using one of the several available constructors.\n     Here is a list of the most used:\n\n     - Construct images from arbitrary dimensions:\n         - <tt>CImg<char> img;</tt> declares an empty image.\n         - <tt>CImg<unsigned char> img(128,128);</tt> declares a 128x128 greyscale image with\n         \\c unsigned \\c char pixel values.\n         - <tt>CImg<double> img(3,3);</tt> declares a 3x3 matrix with \\c double coefficients.\n         - <tt>CImg<unsigned char> img(256,256,1,3);</tt> declares a 256x256x1x3 (color) image\n         (colors are stored as an image with three channels).\n         - <tt>CImg<double> img(128,128,128);</tt> declares a 128x128x128 volumetric and greyscale image\n         (with \\c double pixel values).\n         - <tt>CImg<> img(128,128,128,3);</tt> declares a 128x128x128 volumetric color image\n         (with \\c float pixels, which is the default value of the template parameter \\c T).\n         - \\b Note: images pixels are <b>not automatically initialized to 0</b>. You may use the function \\c fill() to\n         do it, or use the specific constructor taking 5 parameters like this:\n         <tt>CImg<> img(128,128,128,3,0);</tt> declares a 128x128x128 volumetric color image with all pixel values to 0.\n\n     - Construct images from filenames:\n         - <tt>CImg<unsigned char> img(\"image.jpg\");</tt> reads a JPEG color image from the file \"image.jpg\".\n         - <tt>CImg<float> img(\"analyze.hdr\");</tt> reads a volumetric image (ANALYZE7.5 format) from the\n         file \"analyze.hdr\".\n         - \\b Note: You need to install <a href=\"http://www.imagemagick.org\">ImageMagick</a>\n         to be able to read common compressed image formats (JPG,PNG, ...) (See \\ref cimg_files_io).\n\n     - Construct images from C-style arrays:\n         - <tt>CImg<int> img(data_buffer,256,256);</tt> constructs a 256x256 greyscale image from a \\c int* buffer\n         \\c data_buffer (of size 256x256=65536).\n         - <tt>CImg<unsigned char> img(data_buffer,256,256,1,3);</tt> constructs a 256x256 color image\n         from a \\c unsigned \\c char* buffer \\c data_buffer (where R,G,B channels follow each others).\n\n         The complete list of constructors can be found <a href=\"#constructors\">here</a>.\n\n     \\par Most useful functions\n\n     The \\c CImg<T> class contains a lot of functions that operates on images.\n     Some of the most useful are:\n\n     - operator()(): Read or write pixel values.\n     - display(): displays the image in a new window.\n  **/\n  template<typename T>\n  struct CImg {\n\n    unsigned int _width, _height, _depth, _spectrum;\n    bool _is_shared;\n    T *_data;\n\n    //! Simple iterator type, to loop through each pixel value of an image instance.\n    /**\n       \\note\n       - The \\c CImg<T>::iterator type is defined to be a <tt>T*</tt>.\n       - You will seldom have to use iterators in %CImg, most classical operations\n         being achieved (often in a faster way) using methods of \\c CImg<T>.\n       \\par Example\n       \\code\n       CImg<float> img(\"reference.jpg\");                                         // Load image from file.\n       for (CImg<float>::iterator it = img.begin(), it<img.end(); ++it) *it = 0; // Set all pixels to '0', with a CImg iterator.\n       img.fill(0);                                                              // Do the same with a built-in method.\n       \\endcode\n   **/\n    typedef T* iterator;\n\n    //! Simple const iterator type, to loop through each pixel value of a \\c const image instance.\n    /**\n       \\note\n       - The \\c CImg<T>::const_iterator type is defined to be a \\c const \\c T*.\n       - You will seldom have to use iterators in %CImg, most classical operations\n         being achieved (often in a faster way) using methods of \\c CImg<T>.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");                                    // Load image from file.\n       float sum = 0;\n       for (CImg<float>::iterator it = img.begin(), it<img.end(); ++it) sum+=*it; // Compute sum of all pixel values, with a CImg iterator.\n       const float sum2 = img.sum();                                              // Do the same with a built-in method.\n       \\endcode\n    **/\n    typedef const T* const_iterator;\n\n    //! Pixel value type.\n    /**\n       Refer to the type of the pixel values of an image instance.\n       \\note\n       - The \\c CImg<T>::value_type type of a \\c CImg<T> is defined to be a \\c T.\n       - \\c CImg<T>::value_type is actually not used in %CImg methods. It has been mainly defined for\n         compatibility with STL naming conventions.\n    **/\n    typedef T value_type;\n\n    // Define common types related to template type T.\n    typedef typename cimg::superset<T,bool>::type Tbool;\n    typedef typename cimg::superset<T,unsigned char>::type Tuchar;\n    typedef typename cimg::superset<T,char>::type Tchar;\n    typedef typename cimg::superset<T,unsigned short>::type Tushort;\n    typedef typename cimg::superset<T,short>::type Tshort;\n    typedef typename cimg::superset<T,unsigned int>::type Tuint;\n    typedef typename cimg::superset<T,int>::type Tint;\n    typedef typename cimg::superset<T,cimg_ulong>::type Tulong;\n    typedef typename cimg::superset<T,cimg_long>::type Tlong;\n    typedef typename cimg::superset<T,float>::type Tfloat;\n    typedef typename cimg::superset<T,double>::type Tdouble;\n    typedef typename cimg::last<T,bool>::type boolT;\n    typedef typename cimg::last<T,unsigned char>::type ucharT;\n    typedef typename cimg::last<T,char>::type charT;\n    typedef typename cimg::last<T,unsigned short>::type ushortT;\n    typedef typename cimg::last<T,short>::type shortT;\n    typedef typename cimg::last<T,unsigned int>::type uintT;\n    typedef typename cimg::last<T,int>::type intT;\n    typedef typename cimg::last<T,cimg_ulong>::type ulongT;\n    typedef typename cimg::last<T,cimg_long>::type longT;\n    typedef typename cimg::last<T,cimg_uint64>::type uint64T;\n    typedef typename cimg::last<T,cimg_int64>::type int64T;\n    typedef typename cimg::last<T,float>::type floatT;\n    typedef typename cimg::last<T,double>::type doubleT;\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Plugins\n    //@{\n    //---------------------------\n#ifdef cimg_plugin\n#include cimg_plugin\n#endif\n#ifdef cimg_plugin1\n#include cimg_plugin1\n#endif\n#ifdef cimg_plugin2\n#include cimg_plugin2\n#endif\n#ifdef cimg_plugin3\n#include cimg_plugin3\n#endif\n#ifdef cimg_plugin4\n#include cimg_plugin4\n#endif\n#ifdef cimg_plugin5\n#include cimg_plugin5\n#endif\n#ifdef cimg_plugin6\n#include cimg_plugin6\n#endif\n#ifdef cimg_plugin7\n#include cimg_plugin7\n#endif\n#ifdef cimg_plugin8\n#include cimg_plugin8\n#endif\n\n    //@}\n    //---------------------------------------------------------\n    //\n    //! \\name Constructors / Destructor / Instance Management\n    //@{\n    //---------------------------------------------------------\n\n    //! Destroy image.\n    /**\n       \\note\n       - The pixel buffer data() is deallocated if necessary, e.g. for non-empty and non-shared image instances.\n       - Destroying an empty or shared image does nothing actually.\n       \\warning\n       - When destroying a non-shared image, make sure that you will \\e not operate on a remaining shared image\n         that shares its buffer with the destroyed instance, in order to avoid further invalid memory access\n         (to a deallocated buffer).\n    **/\n    ~CImg() {\n      if (!_is_shared) delete[] _data;\n    }\n\n    //! Construct empty image.\n    /**\n       \\note\n       - An empty image has no pixel data and all of its dimensions width(), height(), depth(), spectrum()\n         are set to \\c 0, as well as its pixel buffer pointer data().\n       - An empty image may be re-assigned afterwards, e.g. with the family of\n         assign(unsigned int,unsigned int,unsigned int,unsigned int) methods,\n         or by operator=(const CImg<t>&). In all cases, the type of pixels stays \\c T.\n       - An empty image is never shared.\n       \\par Example\n       \\code\n       CImg<float> img1, img2;      // Construct two empty images.\n       img1.assign(256,256,1,3);    // Re-assign 'img1' to be a 256x256x1x3 (color) image.\n       img2 = img1.get_rand(0,255); // Re-assign 'img2' to be a random-valued version of 'img1'.\n       img2.assign();               // Re-assign 'img2' to be an empty image again.\n       \\endcode\n    **/\n    CImg():_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {}\n\n    //! Construct image with specified size.\n    /**\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\note\n       - It is able to create only \\e non-shared images, and allocates thus a pixel buffer data()\n         for each constructed image instance.\n       - Setting one dimension \\c size_x,\\c size_y,\\c size_z or \\c size_c to \\c 0 leads to the construction of\n         an \\e empty image.\n       - A \\c CImgInstanceException is thrown when the pixel buffer cannot be allocated\n         (e.g. when requested size is too big for available memory).\n       \\warning\n       - The allocated pixel buffer is \\e not filled with a default value, and is likely to contain garbage values.\n         In order to initialize pixel values during construction (e.g. with \\c 0), use constructor\n         CImg(unsigned int,unsigned int,unsigned int,unsigned int,T) instead.\n       \\par Example\n       \\code\n       CImg<float> img1(256,256,1,3);   // Construct a 256x256x1x3 (color) image, filled with garbage values.\n       CImg<float> img2(256,256,1,3,0); // Construct a 256x256x1x3 (color) image, filled with value '0'.\n       \\endcode\n    **/\n    explicit CImg(const unsigned int size_x, const unsigned int size_y=1,\n                  const unsigned int size_z=1, const unsigned int size_c=1):\n      _is_shared(false) {\n      size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (siz) {\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                      size_x,size_y,size_z,size_c);\n        }\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Construct image with specified size and initialize pixel values.\n    /**\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param value Initialization value.\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int),\n         but it also fills the pixel buffer with the specified \\c value.\n       \\warning\n       - It cannot be used to construct a vector-valued image and initialize it with \\e vector-valued pixels\n         (e.g. RGB vector, for color images).\n         For this task, you may use fillC() after construction.\n    **/\n    CImg(const unsigned int size_x, const unsigned int size_y,\n         const unsigned int size_z, const unsigned int size_c, const T& value):\n      _is_shared(false) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (siz) {\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                      size_x,size_y,size_z,size_c);\n        }\n        fill(value);\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Construct image with specified size and initialize pixel values from a sequence of integers.\n    /**\n       Construct a new image instance of size \\c size_x x \\c size_y x \\c size_z x \\c size_c,\n       with pixels of type \\c T, and initialize pixel\n       values from the specified sequence of integers \\c value0,\\c value1,\\c ...\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param value0 First value of the initialization sequence (must be an \\e integer).\n       \\param value1 Second value of the initialization sequence (must be an \\e integer).\n       \\param ...\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int), but it also fills\n         the pixel buffer with a sequence of specified integer values.\n       \\warning\n       - You must specify \\e exactly \\c size_x*\\c size_y*\\c size_z*\\c size_c integers in the initialization sequence.\n         Otherwise, the constructor may crash or fill your image pixels with garbage.\n       \\par Example\n       \\code\n       const CImg<float> img(2,2,1,3,      // Construct a 2x2 color (RGB) image.\n                             0,255,0,255,  // Set the 4 values for the red component.\n                             0,0,255,255,  // Set the 4 values for the green component.\n                             64,64,64,64); // Set the 4 values for the blue component.\n       img.resize(150,150).display();\n       \\endcode\n       \\image html ref_constructor1.jpg\n     **/\n    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z, const unsigned int size_c,\n         const int value0, const int value1, ...):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n#define _CImg_stdarg(img,a0,a1,N,t) { \\\n        size_t _siz = (size_t)N; \\\n        if (_siz--) { \\\n          va_list ap; \\\n          va_start(ap,a1); \\\n          T *ptrd = (img)._data; \\\n          *(ptrd++) = (T)a0; \\\n          if (_siz--) { \\\n            *(ptrd++) = (T)a1; \\\n            for ( ; _siz; --_siz) *(ptrd++) = (T)va_arg(ap,t); \\\n          } \\\n          va_end(ap); \\\n        } \\\n      }\n      assign(size_x,size_y,size_z,size_c);\n      _CImg_stdarg(*this,value0,value1,(size_t)size_x*size_y*size_z*size_c,int);\n    }\n\n#if cimg_use_cpp11==1\n    //! Construct image with specified size and initialize pixel values from an initializer list of integers.\n    /**\n       Construct a new image instance of size \\c size_x x \\c size_y x \\c size_z x \\c size_c,\n       with pixels of type \\c T, and initialize pixel\n       values from the specified initializer list of integers { \\c value0,\\c value1,\\c ... }\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param { value0, value1, ... } Initialization list\n       \\param repeat_values Tells if the value filling process is repeated over the image.\n\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int), but it also fills\n         the pixel buffer with a sequence of specified integer values.\n       \\par Example\n       \\code\n       const CImg<float> img(2,2,1,3,      // Construct a 2x2 color (RGB) image.\n                             { 0,255,0,255,    // Set the 4 values for the red component.\n                               0,0,255,255,    // Set the 4 values for the green component.\n                               64,64,64,64 }); // Set the 4 values for the blue component.\n       img.resize(150,150).display();\n       \\endcode\n       \\image html ref_constructor1.jpg\n    **/\n    template<typename t>\n    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z, const unsigned int size_c,\n         const std::initializer_list<t> values,\n         const bool repeat_values=true):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n#define _cimg_constructor_cpp11(repeat_values) \\\n  auto it = values.begin(); \\\n  size_t siz = size(); \\\n  if (repeat_values) for (T *ptrd = _data; siz--; ) { \\\n    *(ptrd++) = (T)(*(it++)); if (it==values.end()) it = values.begin(); } \\\n  else { siz = std::min(siz,values.size()); for (T *ptrd = _data; siz--; ) *(ptrd++) = (T)(*(it++)); }\n      assign(size_x,size_y,size_z,size_c);\n      _cimg_constructor_cpp11(repeat_values);\n    }\n\n    template<typename t>\n    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z,\n         std::initializer_list<t> values,\n         const bool repeat_values=true):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(size_x,size_y,size_z);\n      _cimg_constructor_cpp11(repeat_values);\n    }\n\n    template<typename t>\n    CImg(const unsigned int size_x, const unsigned int size_y,\n         std::initializer_list<t> values,\n         const bool repeat_values=true):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(size_x,size_y);\n      _cimg_constructor_cpp11(repeat_values);\n    }\n\n    template<typename t>\n    CImg(const unsigned int size_x,\n         std::initializer_list<t> values,\n         const bool repeat_values=true):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(size_x);\n      _cimg_constructor_cpp11(repeat_values);\n    }\n\n    //! Construct single channel 1D image with pixel values and width obtained from an initializer list of integers.\n    /**\n       Construct a new image instance of size \\c width x \\c 1 x \\c 1 x \\c 1,\n       with pixels of type \\c T, and initialize pixel\n       values from the specified initializer list of integers { \\c value0,\\c value1,\\c ... }. Image width is\n       given by the size of the initializer list.\n       \\param { value0, value1, ... } Initialization list\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int) with height=1, depth=1, and spectrum=1,\n         but it also fills the pixel buffer with a sequence of specified integer values.\n       \\par Example\n       \\code\n       const CImg<float> img = {10,20,30,20,10 }; // Construct a 5x1 image with one channel, and set its pixel values.\n       img.resize(150,150).display();\n       \\endcode\n       \\image html ref_constructor1.jpg\n     **/\n    template<typename t>\n    CImg(const std::initializer_list<t> values):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(values.size(),1,1,1);\n      auto it = values.begin();\n      unsigned int siz = _width;\n      for (T *ptrd = _data; siz--; ) *(ptrd++) = (T)(*(it++));\n    }\n\n    template<typename t>\n    CImg<T> & operator=(std::initializer_list<t> values) {\n      _cimg_constructor_cpp11(siz>values.size());\n      return *this;\n    }\n#endif\n\n    //! Construct image with specified size and initialize pixel values from a sequence of doubles.\n    /**\n       Construct a new image instance of size \\c size_x x \\c size_y x \\c size_z x \\c size_c, with pixels of type \\c T,\n       and initialize pixel values from the specified sequence of doubles \\c value0,\\c value1,\\c ...\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param value0 First value of the initialization sequence (must be a \\e double).\n       \\param value1 Second value of the initialization sequence (must be a \\e double).\n       \\param ...\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int,int,int,...), but\n         takes a sequence of double values instead of integers.\n       \\warning\n       - You must specify \\e exactly \\c dx*\\c dy*\\c dz*\\c dc doubles in the initialization sequence.\n         Otherwise, the constructor may crash or fill your image with garbage.\n         For instance, the code below will probably crash on most platforms:\n         \\code\n         const CImg<float> img(2,2,1,1, 0.5,0.5,255,255); // FAIL: The two last arguments are 'int', not 'double'!\n         \\endcode\n     **/\n    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z, const unsigned int size_c,\n         const double value0, const double value1, ...):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(size_x,size_y,size_z,size_c);\n      _CImg_stdarg(*this,value0,value1,(size_t)size_x*size_y*size_z*size_c,double);\n    }\n\n    //! Construct image with specified size and initialize pixel values from a value string.\n    /**\n       Construct a new image instance of size \\c size_x x \\c size_y x \\c size_z x \\c size_c, with pixels of type \\c T,\n       and initializes pixel values from the specified string \\c values.\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param values Value string describing the way pixel values are set.\n       \\param repeat_values Tells if the value filling process is repeated over the image.\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int), but it also fills\n         the pixel buffer with values described in the value string \\c values.\n       - Value string \\c values may describe two different filling processes:\n         - Either \\c values is a sequences of values assigned to the image pixels, as in <tt>\"1,2,3,7,8,2\"</tt>.\n           In this case, set \\c repeat_values to \\c true to periodically fill the image with the value sequence.\n         - Either, \\c values is a formula, as in <tt>\"cos(x/10)*sin(y/20)\"</tt>.\n           In this case, parameter \\c repeat_values is pointless.\n       - For both cases, specifying \\c repeat_values is mandatory.\n         It disambiguates the possible overloading of constructor\n         CImg(unsigned int,unsigned int,unsigned int,unsigned int,T) with \\c T being a <tt>const char*</tt>.\n       - A \\c CImgArgumentException is thrown when an invalid value string \\c values is specified.\n       \\par Example\n       \\code\n       const CImg<float> img1(129,129,1,3,\"0,64,128,192,255\",true),                   // Construct image filled from a value sequence.\n                         img2(129,129,1,3,\"if(c==0,255*abs(cos(x/10)),1.8*y)\",false); // Construct image filled from a formula.\n       (img1,img2).display();\n       \\endcode\n       \\image html ref_constructor2.jpg\n     **/\n    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z, const unsigned int size_c,\n         const char *const values, const bool repeat_values):_is_shared(false) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (siz) {\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                      size_x,size_y,size_z,size_c);\n        }\n        fill(values,repeat_values);\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer.\n    /**\n       Construct a new image instance of size \\c size_x x \\c size_y x \\c size_z x \\c size_c, with pixels of type \\c T,\n       and initializes pixel values from the specified \\c t* memory buffer.\n       \\param values Pointer to the input memory buffer.\n       \\param size_x Image width().\n       \\param size_y Image height().\n       \\param size_z Image depth().\n       \\param size_c Image spectrum() (number of channels).\n       \\param is_shared Tells if input memory buffer must be shared by the current instance.\n       \\note\n       - If \\c is_shared is \\c false, the image instance allocates its own pixel buffer,\n         and values from the specified input buffer are copied to the instance buffer.\n         If buffer types \\c T and \\c t are different, a regular static cast is performed during buffer copy.\n       - Otherwise, the image instance does \\e not allocate a new buffer, and uses the input memory buffer as its\n         own pixel buffer. This case requires that types \\c T and \\c t are the same. Later, destroying such a shared\n         image will not deallocate the pixel buffer, this task being obviously charged to the initial buffer allocator.\n       - A \\c CImgInstanceException is thrown when the pixel buffer cannot be allocated\n         (e.g. when requested size is too big for available memory).\n       \\warning\n       - You must take care when operating on a shared image, since it may have an invalid pixel buffer pointer data()\n         (e.g. already deallocated).\n       \\par Example\n       \\code\n       unsigned char tab[256*256] = { 0 };\n       CImg<unsigned char> img1(tab,256,256,1,1,false), // Construct new non-shared image from buffer 'tab'.\n                           img2(tab,256,256,1,1,true);  // Construct new shared-image from buffer 'tab'.\n       tab[1024] = 255;                                 // Here, 'img2' is indirectly modified, but not 'img1'.\n       \\endcode\n    **/\n    template<typename t>\n    CImg(const t *const values, const unsigned int size_x, const unsigned int size_y=1,\n         const unsigned int size_z=1, const unsigned int size_c=1, const bool is_shared=false):_is_shared(false) {\n      if (is_shared) {\n        _width = _height = _depth = _spectrum = 0; _data = 0;\n        throw CImgArgumentException(_cimg_instance\n                                    \"CImg(): Invalid construction request of a (%u,%u,%u,%u) shared instance \"\n                                    \"from a (%s*) buffer (pixel types are different).\",\n                                    cimg_instance,\n                                    size_x,size_y,size_z,size_c,CImg<t>::pixel_type());\n      }\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (values && siz) {\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                      size_x,size_y,size_z,size_c);\n\n        }\n        const t *ptrs = values; cimg_for(*this,ptrd,T) *ptrd = (T)*(ptrs++);\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer \\specialization.\n    CImg(const T *const values, const unsigned int size_x, const unsigned int size_y=1,\n         const unsigned int size_z=1, const unsigned int size_c=1, const bool is_shared=false) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (values && siz) {\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c; _is_shared = is_shared;\n        if (_is_shared) _data = const_cast<T*>(values);\n        else {\n          try { _data = new T[siz]; } catch (...) {\n            _width = _height = _depth = _spectrum = 0; _data = 0;\n            throw CImgInstanceException(_cimg_instance\n                                        \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                        cimg_instance,\n                                        cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                        size_x,size_y,size_z,size_c);\n          }\n          std::memcpy(_data,values,siz*sizeof(T));\n        }\n      } else { _width = _height = _depth = _spectrum = 0; _is_shared = false; _data = 0; }\n    }\n\n    //! Construct image from reading an image file.\n    /**\n       Construct a new image instance with pixels of type \\c T, and initialize pixel values with the data read from\n       an image file.\n       \\param filename Filename, as a C-string.\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int), but it reads the image\n         dimensions and pixel values from the specified image file.\n       - The recognition of the image file format by %CImg higly depends on the tools installed on your system\n         and on the external libraries you used to link your code against.\n       - Considered pixel type \\c T should better fit the file format specification, or data loss may occur during\n         file load (e.g. constructing a \\c CImg<unsigned char> from a float-valued image file).\n       - A \\c CImgIOException is thrown when the specified \\c filename cannot be read, or if the file format is not\n         recognized.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");\n       img.display();\n       \\endcode\n       \\image html ref_image.jpg\n    **/\n    explicit CImg(const char *const filename):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(filename);\n    }\n\n    //! Construct image copy.\n    /**\n       Construct a new image instance with pixels of type \\c T, as a copy of an existing \\c CImg<t> instance.\n       \\param img Input image to copy.\n       \\note\n       - Constructed copy has the same size width() x height() x depth() x spectrum() and pixel values as the\n         input image \\c img.\n       - If input image \\c img is \\e shared and if types \\c T and \\c t are the same, the constructed copy is also\n         \\e shared, and shares its pixel buffer with \\c img.\n         Modifying a pixel value in the constructed copy will thus also modifies it in the input image \\c img.\n         This behavior is needful to allow functions to return shared images.\n       - Otherwise, the constructed copy allocates its own pixel buffer, and copies pixel values from the input\n         image \\c img into its buffer. The copied pixel values may be eventually statically casted if types \\c T and\n         \\c t are different.\n       - Constructing a copy from an image \\c img when types \\c t and \\c T are the same is significantly faster than\n         with different types.\n       - A \\c CImgInstanceException is thrown when the pixel buffer cannot be allocated\n         (e.g. not enough available memory).\n    **/\n    template<typename t>\n    CImg(const CImg<t>& img):_is_shared(false) {\n      const size_t siz = (size_t)img.size();\n      if (img._data && siz) {\n        _width = img._width; _height = img._height; _depth = img._depth; _spectrum = img._spectrum;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*img._width*img._height*img._depth*img._spectrum),\n                                      img._width,img._height,img._depth,img._spectrum);\n        }\n        const t *ptrs = img._data; cimg_for(*this,ptrd,T) *ptrd = (T)*(ptrs++);\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Construct image copy \\specialization.\n    CImg(const CImg<T>& img) {\n      const size_t siz = (size_t)img.size();\n      if (img._data && siz) {\n        _width = img._width; _height = img._height; _depth = img._depth; _spectrum = img._spectrum;\n        _is_shared = img._is_shared;\n        if (_is_shared) _data = const_cast<T*>(img._data);\n        else {\n          try { _data = new T[siz]; } catch (...) {\n            _width = _height = _depth = _spectrum = 0; _data = 0;\n            throw CImgInstanceException(_cimg_instance\n                                        \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                        cimg_instance,\n                                        cimg::strbuffersize(sizeof(T)*img._width*img._height*img._depth*img._spectrum),\n                                        img._width,img._height,img._depth,img._spectrum);\n\n          }\n          std::memcpy(_data,img._data,siz*sizeof(T));\n        }\n      } else { _width = _height = _depth = _spectrum = 0; _is_shared = false; _data = 0; }\n    }\n\n    //! Advanced copy constructor.\n    /**\n       Construct a new image instance with pixels of type \\c T, as a copy of an existing \\c CImg<t> instance,\n       while forcing the shared state of the constructed copy.\n       \\param img Input image to copy.\n       \\param is_shared Tells about the shared state of the constructed copy.\n       \\note\n       - Similar to CImg(const CImg<t>&), except that it allows to decide the shared state of\n         the constructed image, which does not depend anymore on the shared state of the input image \\c img:\n         - If \\c is_shared is \\c true, the constructed copy will share its pixel buffer with the input image \\c img.\n           For that case, the pixel types \\c T and \\c t \\e must be the same.\n         - If \\c is_shared is \\c false, the constructed copy will allocate its own pixel buffer, whether the input\n           image \\c img is shared or not.\n       - A \\c CImgArgumentException is thrown when a shared copy is requested with different pixel types \\c T and \\c t.\n    **/\n    template<typename t>\n    CImg(const CImg<t>& img, const bool is_shared):_is_shared(false) {\n      if (is_shared) {\n        _width = _height = _depth = _spectrum = 0; _data = 0;\n        throw CImgArgumentException(_cimg_instance\n                                    \"CImg(): Invalid construction request of a shared instance from a \"\n                                    \"CImg<%s> image (%u,%u,%u,%u,%p) (pixel types are different).\",\n                                    cimg_instance,\n                                    CImg<t>::pixel_type(),img._width,img._height,img._depth,img._spectrum,img._data);\n      }\n      const size_t siz = (size_t)img.size();\n      if (img._data && siz) {\n        _width = img._width; _height = img._height; _depth = img._depth; _spectrum = img._spectrum;\n        try { _data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*img._width*img._height*img._depth*img._spectrum),\n                                      img._width,img._height,img._depth,img._spectrum);\n        }\n        const t *ptrs = img._data; cimg_for(*this,ptrd,T) *ptrd = (T)*(ptrs++);\n      } else { _width = _height = _depth = _spectrum = 0; _data = 0; }\n    }\n\n    //! Advanced copy constructor \\specialization.\n    CImg(const CImg<T>& img, const bool is_shared) {\n      const size_t siz = (size_t)img.size();\n      if (img._data && siz) {\n        _width = img._width; _height = img._height; _depth = img._depth; _spectrum = img._spectrum;\n        _is_shared = is_shared;\n        if (_is_shared) _data = const_cast<T*>(img._data);\n        else {\n          try { _data = new T[siz]; } catch (...) {\n            _width = _height = _depth = _spectrum = 0; _data = 0;\n            throw CImgInstanceException(_cimg_instance\n                                        \"CImg(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                        cimg_instance,\n                                        cimg::strbuffersize(sizeof(T)*img._width*img._height*img._depth*img._spectrum),\n                                        img._width,img._height,img._depth,img._spectrum);\n          }\n          std::memcpy(_data,img._data,siz*sizeof(T));\n        }\n      } else { _width = _height = _depth = _spectrum = 0; _is_shared = false; _data = 0; }\n    }\n\n    //! Construct image with dimensions borrowed from another image.\n    /**\n       Construct a new image instance with pixels of type \\c T, and size get from some dimensions of an existing\n       \\c CImg<t> instance.\n       \\param img Input image from which dimensions are borrowed.\n       \\param dimensions C-string describing the image size along the X,Y,Z and C-dimensions.\n       \\note\n       - Similar to CImg(unsigned int,unsigned int,unsigned int,unsigned int), but it takes the image dimensions\n         (\\e not its pixel values) from an existing \\c CImg<t> instance.\n       - The allocated pixel buffer is \\e not filled with a default value, and is likely to contain garbage values.\n         In order to initialize pixel values (e.g. with \\c 0), use constructor CImg(const CImg<t>&,const char*,T)\n         instead.\n       \\par Example\n       \\code\n       const CImg<float> img1(256,128,1,3),      // 'img1' is a 256x128x1x3 image.\n                         img2(img1,\"xyzc\"),      // 'img2' is a 256x128x1x3 image.\n                         img3(img1,\"y,x,z,c\"),   // 'img3' is a 128x256x1x3 image.\n                         img4(img1,\"c,x,y,3\",0), // 'img4' is a 3x128x256x3 image (with pixels initialized to '0').\n       \\endcode\n     **/\n    template<typename t>\n    CImg(const CImg<t>& img, const char *const dimensions):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(img,dimensions);\n    }\n\n    //! Construct image with dimensions borrowed from another image and initialize pixel values.\n    /**\n       Construct a new image instance with pixels of type \\c T, and size get from the dimensions of an existing\n       \\c CImg<t> instance, and set all pixel values to specified \\c value.\n       \\param img Input image from which dimensions are borrowed.\n       \\param dimensions String describing the image size along the X,Y,Z and V-dimensions.\n       \\param value Value used for initialization.\n       \\note\n       - Similar to CImg(const CImg<t>&,const char*), but it also fills the pixel buffer with the specified \\c value.\n     **/\n    template<typename t>\n    CImg(const CImg<t>& img, const char *const dimensions, const T& value):\n      _width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      assign(img,dimensions).fill(value);\n    }\n\n    //! Construct image from a display window.\n    /**\n       Construct a new image instance with pixels of type \\c T, as a snapshot of an existing \\c CImgDisplay instance.\n       \\param disp Input display window.\n       \\note\n       - The width() and height() of the constructed image instance are the same as the specified \\c CImgDisplay.\n       - The depth() and spectrum() of the constructed image instance are respectively set to \\c 1 and \\c 3\n         (i.e. a 2d color image).\n       - The image pixels are read as 8-bits RGB values.\n     **/\n    explicit CImg(const CImgDisplay &disp):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      disp.snapshot(*this);\n    }\n\n    // Constructor and assignment operator for rvalue references (c++11).\n    // This avoids an additional image copy for methods returning new images. Can save RAM for big images !\n#if cimg_use_cpp11==1\n    CImg(CImg<T>&& img):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {\n      swap(img);\n    }\n    CImg<T>& operator=(CImg<T>&& img) {\n      if (_is_shared) return assign(img);\n      return img.swap(*this);\n    }\n#endif\n\n    //! Construct empty image \\inplace.\n    /**\n       In-place version of the default constructor CImg(). It simply resets the instance to an empty image.\n    **/\n    CImg<T>& assign() {\n      if (!_is_shared) delete[] _data;\n      _width = _height = _depth = _spectrum = 0; _is_shared = false; _data = 0;\n      return *this;\n    }\n\n    //! Construct image with specified size \\inplace.\n    /**\n       In-place version of the constructor CImg(unsigned int,unsigned int,unsigned int,unsigned int).\n    **/\n    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y=1,\n                    const unsigned int size_z=1, const unsigned int size_c=1) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (!siz) return assign();\n      const size_t curr_siz = (size_t)size();\n      if (siz!=curr_siz) {\n        if (_is_shared)\n          throw CImgArgumentException(_cimg_instance\n                                      \"assign(): Invalid assignement request of shared instance from specified \"\n                                      \"image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      size_x,size_y,size_z,size_c);\n        else {\n          delete[] _data;\n          try { _data = new T[siz]; } catch (...) {\n            _width = _height = _depth = _spectrum = 0; _data = 0;\n            throw CImgInstanceException(_cimg_instance\n                                        \"assign(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                        cimg_instance,\n                                        cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                        size_x,size_y,size_z,size_c);\n          }\n        }\n      }\n      _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n      return *this;\n    }\n\n    //! Construct image with specified size and initialize pixel values \\inplace.\n    /**\n       In-place version of the constructor CImg(unsigned int,unsigned int,unsigned int,unsigned int,T).\n    **/\n    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c, const T& value) {\n      return assign(size_x,size_y,size_z,size_c).fill(value);\n    }\n\n    //! Construct image with specified size and initialize pixel values from a sequence of integers \\inplace.\n    /**\n       In-place version of the constructor CImg(unsigned int,unsigned int,unsigned int,unsigned int,int,int,...).\n    **/\n    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c,\n                    const int value0, const int value1, ...) {\n      assign(size_x,size_y,size_z,size_c);\n      _CImg_stdarg(*this,value0,value1,(size_t)size_x*size_y*size_z*size_c,int);\n      return *this;\n    }\n\n    //! Construct image with specified size and initialize pixel values from a sequence of doubles \\inplace.\n    /**\n       In-place version of the constructor CImg(unsigned int,unsigned int,unsigned int,unsigned int,double,double,...).\n    **/\n    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c,\n                    const double value0, const double value1, ...) {\n      assign(size_x,size_y,size_z,size_c);\n      _CImg_stdarg(*this,value0,value1,(size_t)size_x*size_y*size_z*size_c,double);\n      return *this;\n    }\n\n    //! Construct image with specified size and initialize pixel values from a value string \\inplace.\n    /**\n       In-place version of the constructor CImg(unsigned int,unsigned int,unsigned int,unsigned int,const char*,bool).\n    **/\n    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c,\n                    const char *const values, const bool repeat_values) {\n      return assign(size_x,size_y,size_z,size_c).fill(values,repeat_values);\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer \\inplace.\n    /**\n       In-place version of the constructor CImg(const t*,unsigned int,unsigned int,unsigned int,unsigned int).\n    **/\n    template<typename t>\n    CImg<T>& assign(const t *const values, const unsigned int size_x, const unsigned int size_y=1,\n                    const unsigned int size_z=1, const unsigned int size_c=1) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (!values || !siz) return assign();\n      assign(size_x,size_y,size_z,size_c);\n      const t *ptrs = values; cimg_for(*this,ptrd,T) *ptrd = (T)*(ptrs++);\n      return *this;\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer \\specialization.\n    CImg<T>& assign(const T *const values, const unsigned int size_x, const unsigned int size_y=1,\n                    const unsigned int size_z=1, const unsigned int size_c=1) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (!values || !siz) return assign();\n      const size_t curr_siz = (size_t)size();\n      if (values==_data && siz==curr_siz) return assign(size_x,size_y,size_z,size_c);\n      if (_is_shared || values + siz<_data || values>=_data + size()) {\n        assign(size_x,size_y,size_z,size_c);\n        if (_is_shared) std::memmove(_data,values,siz*sizeof(T));\n        else std::memcpy(_data,values,siz*sizeof(T));\n      } else {\n        T *new_data = 0;\n        try { new_data = new T[siz]; } catch (...) {\n          _width = _height = _depth = _spectrum = 0; _data = 0;\n          throw CImgInstanceException(_cimg_instance\n                                      \"assign(): Failed to allocate memory (%s) for image (%u,%u,%u,%u).\",\n                                      cimg_instance,\n                                      cimg::strbuffersize(sizeof(T)*size_x*size_y*size_z*size_c),\n                                      size_x,size_y,size_z,size_c);\n        }\n        std::memcpy(new_data,values,siz*sizeof(T));\n        delete[] _data; _data = new_data; _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c;\n      }\n      return *this;\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer \\overloading.\n    template<typename t>\n    CImg<T>& assign(const t *const values, const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c, const bool is_shared) {\n      if (is_shared)\n        throw CImgArgumentException(_cimg_instance\n                                    \"assign(): Invalid assignment request of shared instance from (%s*) buffer\"\n                                    \"(pixel types are different).\",\n                                    cimg_instance,\n                                    CImg<t>::pixel_type());\n      return assign(values,size_x,size_y,size_z,size_c);\n    }\n\n    //! Construct image with specified size and initialize pixel values from a memory buffer \\overloading.\n    CImg<T>& assign(const T *const values, const unsigned int size_x, const unsigned int size_y,\n                    const unsigned int size_z, const unsigned int size_c, const bool is_shared) {\n      const size_t siz = (size_t)size_x*size_y*size_z*size_c;\n      if (!values || !siz) return assign();\n      if (!is_shared) { if (_is_shared) assign(); assign(values,size_x,size_y,size_z,size_c); }\n      else {\n        if (!_is_shared) {\n          if (values + siz<_data || values>=_data + size()) assign();\n          else cimg::warn(_cimg_instance\n                          \"assign(): Shared image instance has overlapping memory.\",\n                          cimg_instance);\n        }\n        _width = size_x; _height = size_y; _depth = size_z; _spectrum = size_c; _is_shared = true;\n        _data = const_cast<T*>(values);\n      }\n      return *this;\n    }\n\n    //! Construct image from reading an image file \\inplace.\n    /**\n       In-place version of the constructor CImg(const char*).\n    **/\n    CImg<T>& assign(const char *const filename) {\n      return load(filename);\n    }\n\n    //! Construct image copy \\inplace.\n    /**\n       In-place version of the constructor CImg(const CImg<t>&).\n    **/\n    template<typename t>\n    CImg<T>& assign(const CImg<t>& img) {\n      return assign(img._data,img._width,img._height,img._depth,img._spectrum);\n    }\n\n    //! In-place version of the advanced copy constructor.\n    /**\n       In-place version of the constructor CImg(const CImg<t>&,bool).\n     **/\n    template<typename t>\n    CImg<T>& assign(const CImg<t>& img, const bool is_shared) {\n      return assign(img._data,img._width,img._height,img._depth,img._spectrum,is_shared);\n    }\n\n    //! Construct image with dimensions borrowed from another image \\inplace.\n    /**\n       In-place version of the constructor CImg(const CImg<t>&,const char*).\n    **/\n    template<typename t>\n    CImg<T>& assign(const CImg<t>& img, const char *const dimensions) {\n      if (!dimensions || !*dimensions) return assign(img._width,img._height,img._depth,img._spectrum);\n      unsigned int siz[4] = { 0,1,1,1 }, k = 0;\n      CImg<charT> item(256);\n      for (const char *s = dimensions; *s && k<4; ++k) {\n        if (cimg_sscanf(s,\"%255[^0-9%xyzvwhdcXYZVWHDC]\",item._data)>0) s+=std::strlen(item);\n        if (*s) {\n          unsigned int val = 0; char sep = 0;\n          if (cimg_sscanf(s,\"%u%c\",&val,&sep)>0) {\n            if (sep=='%') siz[k] = val*(k==0?_width:k==1?_height:k==2?_depth:_spectrum)/100;\n            else siz[k] = val;\n            while (*s>='0' && *s<='9') ++s;\n            if (sep=='%') ++s;\n          } else switch (cimg::lowercase(*s)) {\n          case 'x' : case 'w' : siz[k] = img._width; ++s; break;\n          case 'y' : case 'h' : siz[k] = img._height; ++s; break;\n          case 'z' : case 'd' : siz[k] = img._depth; ++s; break;\n          case 'c' : case 's' : siz[k] = img._spectrum; ++s; break;\n          default :\n            throw CImgArgumentException(_cimg_instance\n                                        \"assign(): Invalid character '%c' detected in specified dimension string '%s'.\",\n                                        cimg_instance,\n                                        *s,dimensions);\n          }\n        }\n      }\n      return assign(siz[0],siz[1],siz[2],siz[3]);\n    }\n\n    //! Construct image with dimensions borrowed from another image and initialize pixel values \\inplace.\n    /**\n       In-place version of the constructor CImg(const CImg<t>&,const char*,T).\n    **/\n    template<typename t>\n    CImg<T>& assign(const CImg<t>& img, const char *const dimensions, const T& value) {\n      return assign(img,dimensions).fill(value);\n    }\n\n    //! Construct image from a display window \\inplace.\n    /**\n       In-place version of the constructor CImg(const CImgDisplay&).\n    **/\n    CImg<T>& assign(const CImgDisplay &disp) {\n      disp.snapshot(*this);\n      return *this;\n    }\n\n    //! Construct empty image \\inplace.\n    /**\n       Equivalent to assign().\n       \\note\n       - It has been defined for compatibility with STL naming conventions.\n    **/\n    CImg<T>& clear() {\n      return assign();\n    }\n\n    //! Transfer content of an image instance into another one.\n    /**\n       Transfer the dimensions and the pixel buffer content of an image instance into another one,\n       and replace instance by an empty image. It avoids the copy of the pixel buffer\n       when possible.\n       \\param img Destination image.\n       \\note\n       - Pixel types \\c T and \\c t of source and destination images can be different, though the process is\n         designed to be instantaneous when \\c T and \\c t are the same.\n       \\par Example\n       \\code\n       CImg<float> src(256,256,1,3,0), // Construct a 256x256x1x3 (color) image filled with value '0'.\n                   dest(16,16);        // Construct a 16x16x1x1 (scalar) image.\n       src.move_to(dest);              // Now, 'src' is empty and 'dest' is the 256x256x1x3 image.\n       \\endcode\n    **/\n    template<typename t>\n    CImg<t>& move_to(CImg<t>& img) {\n      img.assign(*this);\n      assign();\n      return img;\n    }\n\n    //! Transfer content of an image instance into another one \\specialization.\n    CImg<T>& move_to(CImg<T>& img) {\n      if (_is_shared || img._is_shared) img.assign(*this);\n      else swap(img);\n      assign();\n      return img;\n    }\n\n    //! Transfer content of an image instance into a new image in an image list.\n    /**\n       Transfer the dimensions and the pixel buffer content of an image instance\n       into a newly inserted image at position \\c pos in specified \\c CImgList<t> instance.\n       \\param list Destination list.\n       \\param pos Position of the newly inserted image in the list.\n       \\note\n       - When optional parameter \\c pos is ommited, the image instance is transfered as a new\n         image at the end of the specified \\c list.\n       - It is convenient to sequentially insert new images into image lists, with no\n         additional copies of memory buffer.\n       \\par Example\n       \\code\n       CImgList<float> list;             // Construct an empty image list.\n       CImg<float> img(\"reference.jpg\"); // Read image from filename.\n       img.move_to(list);                // Transfer image content as a new item in the list (no buffer copy).\n       \\endcode\n    **/\n    template<typename t>\n    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos=~0U) {\n      const unsigned int npos = pos>list._width?list._width:pos;\n      move_to(list.insert(1,npos)[npos]);\n      return list;\n    }\n\n    //! Swap fields of two image instances.\n    /**\n      \\param img Image to swap fields with.\n      \\note\n      - It can be used to interchange the content of two images in a very fast way. Can be convenient when dealing\n        with algorithms requiring two swapping buffers.\n      \\par Example\n      \\code\n      CImg<float> img1(\"lena.jpg\"),\n                  img2(\"milla.jpg\");\n      img1.swap(img2);               // Now, 'img1' is 'milla' and 'img2' is 'lena'.\n      \\endcode\n    **/\n    CImg<T>& swap(CImg<T>& img) {\n      cimg::swap(_width,img._width,_height,img._height,_depth,img._depth,_spectrum,img._spectrum);\n      cimg::swap(_data,img._data);\n      cimg::swap(_is_shared,img._is_shared);\n      return img;\n    }\n\n    //! Return a reference to an empty image.\n    /**\n       \\note\n       This function is useful mainly to declare optional parameters having type \\c CImg<T> in functions prototypes,\n       e.g.\n       \\code\n       void f(const int x=0, const int y=0, const CImg<float>& img=CImg<float>::empty());\n       \\endcode\n     **/\n    static CImg<T>& empty() {\n      static CImg<T> _empty;\n      return _empty.assign();\n    }\n\n    //! Return a reference to an empty image \\const.\n    static const CImg<T>& const_empty() {\n      static const CImg<T> _empty;\n      return _empty;\n    }\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Overloaded Operators\n    //@{\n    //------------------------------------------\n\n    //! Access to a pixel value.\n    /**\n       Return a reference to a located pixel value of the image instance,\n       being possibly \\e const, whether the image instance is \\e const or not.\n       This is the standard method to get/set pixel values in \\c CImg<T> images.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Range of pixel coordinates start from <tt>(0,0,0,0)</tt> to\n         <tt>(width() - 1,height() - 1,depth() - 1,spectrum() - 1)</tt>.\n       - Due to the particular arrangement of the pixel buffers defined in %CImg, you can omit one coordinate if the\n         corresponding dimension is equal to \\c 1.\n         For instance, pixels of a 2d image (depth() equal to \\c 1) can be accessed by <tt>img(x,y,c)</tt> instead of\n         <tt>img(x,y,0,c)</tt>.\n       \\warning\n       - There is \\e no boundary checking done in this operator, to make it as fast as possible.\n         You \\e must take care of out-of-bounds access by yourself, if necessary.\n         For debuging purposes, you may want to define macro \\c 'cimg_verbosity'>=3 to enable additional boundary\n         checking operations in this operator. In that case, warning messages will be printed on the error output\n         when accessing out-of-bounds pixels.\n       \\par Example\n       \\code\n       CImg<float> img(100,100,1,3,0);                   // Construct a 100x100x1x3 (color) image with pixels set to '0'.\n       const float\n          valR = img(10,10,0,0),                         // Read red value at coordinates (10,10).\n          valG = img(10,10,0,1),                         // Read green value at coordinates (10,10)\n          valB = img(10,10,2),                           // Read blue value at coordinates (10,10) (Z-coordinate can be omitted).\n          avg = (valR + valG + valB)/3;                  // Compute average pixel value.\n       img(10,10,0) = img(10,10,1) = img(10,10,2) = avg; // Replace the color pixel (10,10) by the average grey value.\n       \\endcode\n    **/\n#if cimg_verbosity>=3\n    T& operator()(const unsigned int x, const unsigned int y=0,\n                  const unsigned int z=0, const unsigned int c=0) {\n      const ulongT off = (ulongT)offset(x,y,z,c);\n      if (!_data || off>=size()) {\n        cimg::warn(_cimg_instance\n                   \"operator(): Invalid pixel request, at coordinates (%d,%d,%d,%d) [offset=%u].\",\n                   cimg_instance,\n                   (int)x,(int)y,(int)z,(int)c,off);\n        return *_data;\n      }\n      else return _data[off];\n    }\n\n    //! Access to a pixel value \\const.\n    const T& operator()(const unsigned int x, const unsigned int y=0,\n                        const unsigned int z=0, const unsigned int c=0) const {\n      return const_cast<CImg<T>*>(this)->operator()(x,y,z,c);\n    }\n\n    //! Access to a pixel value.\n    /**\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param wh Precomputed offset, must be equal to <tt>width()*\\ref height()</tt>.\n       \\param whd Precomputed offset, must be equal to <tt>width()*\\ref height()*\\ref depth()</tt>.\n       \\note\n       - Similar to (but faster than) operator()().\n         It uses precomputed offsets to optimize memory access. You may use it to optimize\n         the reading/writing of several pixel values in the same image (e.g. in a loop).\n     **/\n    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,\n                  const ulongT wh, const ulongT whd=0) {\n      cimg::unused(wh,whd);\n      return (*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value \\const.\n    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,\n                        const ulongT wh, const ulongT whd=0) const {\n      cimg::unused(wh,whd);\n      return (*this)(x,y,z,c);\n    }\n#else\n    T& operator()(const unsigned int x) {\n      return _data[x];\n    }\n\n    const T& operator()(const unsigned int x) const {\n      return _data[x];\n    }\n\n    T& operator()(const unsigned int x, const unsigned int y) {\n      return _data[x + y*_width];\n    }\n\n    const T& operator()(const unsigned int x, const unsigned int y) const {\n      return _data[x + y*_width];\n    }\n\n    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) {\n      return _data[x + y*(ulongT)_width + z*(ulongT)_width*_height];\n   }\n\n    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) const {\n      return _data[x + y*(ulongT)_width + z*(ulongT)_width*_height];\n    }\n\n    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) {\n      return _data[x + y*(ulongT)_width + z*(ulongT)_width*_height + c*(ulongT)_width*_height*_depth];\n    }\n\n    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) const {\n      return _data[x + y*(ulongT)_width + z*(ulongT)_width*_height + c*(ulongT)_width*_height*_depth];\n    }\n\n    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,\n                  const ulongT wh) {\n      return _data[x + y*_width + z*wh];\n    }\n\n    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,\n                        const ulongT wh) const {\n      return _data[x + y*_width + z*wh];\n    }\n\n    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,\n                  const ulongT wh, const ulongT whd) {\n      return _data[x + y*_width + z*wh + c*whd];\n    }\n\n    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,\n                        const ulongT wh, const ulongT whd) const {\n      return _data[x + y*_width + z*wh + c*whd];\n    }\n#endif\n\n    //! Implicitely cast an image into a \\c T*.\n    /**\n       Implicitely cast a \\c CImg<T> instance into a \\c T* or \\c const \\c T* pointer, whether the image instance\n       is \\e const or not. The returned pointer points on the first value of the image pixel buffer.\n       \\note\n       - It simply returns the pointer data() to the pixel buffer.\n       - This implicit conversion is convenient to test the empty state of images (data() being \\c 0 in this case), e.g.\n       \\code\n       CImg<float> img1(100,100), img2; // 'img1' is a 100x100 image, 'img2' is an empty image.\n       if (img1) {                      // Test succeeds, 'img1' is not an empty image.\n         if (!img2) {                   // Test succeeds, 'img2' is an empty image.\n           std::printf(\"'img1' is not empty, 'img2' is empty.\");\n         }\n       }\n       \\endcode\n       - It also allows to use brackets to access pixel values, without need for a \\c CImg<T>::operator[](), e.g.\n       \\code\n       CImg<float> img(100,100);\n       const float value = img[99]; // Access to value of the last pixel on the first row.\n       img[510] = 255;              // Set pixel value at (10,5).\n       \\endcode\n    **/\n    operator T*() {\n      return _data;\n    }\n\n    //! Implicitely cast an image into a \\c T* \\const.\n    operator const T*() const {\n      return _data;\n    }\n\n    //! Assign a value to all image pixels.\n    /**\n       Assign specified \\c value to each pixel value of the image instance.\n       \\param value Value that will be assigned to image pixels.\n       \\note\n       - The image size is never modified.\n       - The \\c value may be casted to pixel type \\c T if necessary.\n       \\par Example\n       \\code\n       CImg<char> img(100,100); // Declare image (with garbage values).\n       img = 0;                 // Set all pixel values to '0'.\n       img = 1.2;               // Set all pixel values to '1' (cast of '1.2' as a 'char').\n       \\endcode\n    **/\n    CImg<T>& operator=(const T& value) {\n      return fill(value);\n    }\n\n    //! Assign pixels values from a specified expression.\n    /**\n       Initialize all pixel values from the specified string \\c expression.\n       \\param expression Value string describing the way pixel values are set.\n       \\note\n       - String parameter \\c expression may describe different things:\n         - If \\c expression is a list of values (as in \\c \"1,2,3,8,3,2\"), or a formula (as in \\c \"(x*y)%255\"),\n           the pixel values are set from specified \\c expression and the image size is not modified.\n         - If \\c expression is a filename (as in \\c \"reference.jpg\"), the corresponding image file is loaded and\n           replace the image instance. The image size is modified if necessary.\n       \\par Example\n       \\code\n       CImg<float> img1(100,100), img2(img1), img3(img1); // Declare three 100x100 scalar images with unitialized pixel values.\n       img1 = \"0,50,100,150,200,250,200,150,100,50\";      // Set pixel values of 'img1' from a value sequence.\n       img2 = \"10*((x*y)%25)\";                            // Set pixel values of 'img2' from a formula.\n       img3 = \"reference.jpg\";                            // Set pixel values of 'img3' from a file (image size is modified).\n       (img1,img2,img3).display();\n       \\endcode\n       \\image html ref_operator_eq.jpg\n    **/\n    CImg<T>& operator=(const char *const expression) {\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      try {\n        _fill(expression,true,true,0,0,\"operator=\",0);\n      } catch (CImgException&) {\n        cimg::exception_mode(omode);\n        load(expression);\n      }\n      cimg::exception_mode(omode);\n      return *this;\n    }\n\n    //! Copy an image into the current image instance.\n    /**\n       Similar to the in-place copy constructor assign(const CImg<t>&).\n    **/\n    template<typename t>\n    CImg<T>& operator=(const CImg<t>& img) {\n      return assign(img);\n    }\n\n    //! Copy an image into the current image instance \\specialization.\n    CImg<T>& operator=(const CImg<T>& img) {\n      return assign(img);\n    }\n\n    //! Copy the content of a display window to the current image instance.\n    /**\n       Similar to assign(const CImgDisplay&).\n    **/\n    CImg<T>& operator=(const CImgDisplay& disp) {\n      disp.snapshot(*this);\n      return *this;\n    }\n\n    //! In-place addition operator.\n    /**\n       Add specified \\c value to all pixels of an image instance.\n       \\param value Value to add.\n       \\note\n       - Resulting pixel values are casted to fit the pixel type \\c T.\n         For instance, adding \\c 0.2 to a \\c CImg<char> is possible but does nothing indeed.\n       - Overflow values are treated as with standard C++ numeric types. For instance,\n       \\code\n       CImg<unsigned char> img(100,100,1,1,255); // Construct a 100x100 image with pixel values '255'.\n       img+=1;                                   // Add '1' to each pixels -> Overflow.\n       // here all pixels of image 'img' are equal to '0'.\n       \\endcode\n       - To prevent value overflow, you may want to consider pixel type \\c T as \\c float or \\c double,\n         and use cut() after addition.\n       \\par Example\n       \\code\n       CImg<unsigned char> img1(\"reference.jpg\");          // Load a 8-bits RGB image (values in [0,255]).\n       CImg<float> img2(img1);                             // Construct a float-valued copy of 'img1'.\n       img2+=100;                                          // Add '100' to pixel values -> goes out of [0,255] but no problems with floats.\n       img2.cut(0,255);                                    // Cut values in [0,255] to fit the 'unsigned char' constraint.\n       img1 = img2;                                        // Rewrite safe result in 'unsigned char' version 'img1'.\n       const CImg<unsigned char> img3 = (img1 + 100).cut(0,255); // Do the same in a more simple and elegant way.\n       (img1,img2,img3).display();\n       \\endcode\n       \\image html ref_operator_plus.jpg\n     **/\n    template<typename t>\n    CImg<T>& operator+=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(*ptrd + value);\n      return *this;\n    }\n\n    //! In-place addition operator.\n    /**\n       Add values to image pixels, according to the specified string \\c expression.\n       \\param expression Value string describing the way pixel values are added.\n       \\note\n       - Similar to operator=(const char*), except that it adds values to the pixels of the current image instance,\n         instead of assigning them.\n    **/\n    CImg<T>& operator+=(const char *const expression) {\n      return *this+=(+*this)._fill(expression,true,true,0,0,\"operator+=\",this);\n    }\n\n    //! In-place addition operator.\n    /**\n       Add values to image pixels, according to the values of the input image \\c img.\n       \\param img Input image to add.\n       \\note\n       - The size of the image instance is never modified.\n       - It is not mandatory that input image \\c img has the same size as the image instance.\n         If less values are available in \\c img, then the values are added periodically. For instance, adding one\n         WxH scalar image (spectrum() equal to \\c 1) to one WxH color image (spectrum() equal to \\c 3)\n         means each color channel will be incremented with the same values at the same locations.\n       \\par Example\n       \\code\n       CImg<float> img1(\"reference.jpg\");                                   // Load a RGB color image (img1.spectrum()==3)\n       const CImg<float> img2(img1.width(),img.height(),1,1,\"255*(x/w)^2\"); // Construct a scalar shading (img2.spectrum()==1).\n       img1+=img2;                                                          // Add shading to each channel of 'img1'.\n       img1.cut(0,255);                                                     // Prevent [0,255] overflow.\n       (img2,img1).display();\n       \\endcode\n       \\image html ref_operator_plus1.jpg\n    **/\n    template<typename t>\n    CImg<T>& operator+=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this+=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)(*ptrd + *(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)(*ptrd + *(ptrs++));\n      }\n      return *this;\n    }\n\n    //! In-place increment operator (prefix).\n    /**\n       Add \\c 1 to all image pixels, and return a reference to the current incremented image instance.\n       \\note\n       - Writing \\c ++img is equivalent to \\c img+=1.\n     **/\n    CImg<T>& operator++() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) ++*ptrd;\n      return *this;\n    }\n\n    //! In-place increment operator (postfix).\n    /**\n       Add \\c 1 to all image pixels, and return a new copy of the initial (pre-incremented) image instance.\n       \\note\n       - Use the prefixed version operator++() if you don't need a copy of the initial\n         (pre-incremented) image instance, since a useless image copy may be expensive in terms of memory usage.\n     **/\n    CImg<T> operator++(int) {\n      const CImg<T> copy(*this,false);\n      ++*this;\n      return copy;\n    }\n\n    //! Return a non-shared copy of the image instance.\n    /**\n       \\note\n       - Use this operator to ensure you get a non-shared copy of an image instance with same pixel type \\c T.\n         Indeed, the usual copy constructor CImg<T>(const CImg<T>&) returns a shared copy of a shared input image,\n         and it may be not desirable to work on a regular copy (e.g. for a resize operation) if you have no\n         information about the shared state of the input image.\n       - Writing \\c (+img) is equivalent to \\c CImg<T>(img,false).\n    **/\n    CImg<T> operator+() const {\n      return CImg<T>(*this,false);\n    }\n\n    //! Addition operator.\n    /**\n       Similar to operator+=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n     **/\n    template<typename t>\n    CImg<_cimg_Tt> operator+(const t value) const {\n      return CImg<_cimg_Tt>(*this,false)+=value;\n    }\n\n    //! Addition operator.\n    /**\n       Similar to operator+=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n     **/\n    CImg<Tfloat> operator+(const char *const expression) const {\n      return CImg<Tfloat>(*this,false)+=expression;\n    }\n\n    //! Addition operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n     **/\n    template<typename t>\n    CImg<_cimg_Tt> operator+(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false)+=img;\n    }\n\n    //! In-place substraction operator.\n    /**\n       Similar to operator+=(const t), except that it performs a substraction instead of an addition.\n     **/\n    template<typename t>\n    CImg<T>& operator-=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(*ptrd - value);\n      return *this;\n    }\n\n    //! In-place substraction operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a substraction instead of an addition.\n     **/\n    CImg<T>& operator-=(const char *const expression) {\n      return *this-=(+*this)._fill(expression,true,true,0,0,\"operator-=\",this);\n    }\n\n    //! In-place substraction operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a substraction instead of an addition.\n     **/\n    template<typename t>\n    CImg<T>& operator-=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this-=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)(*ptrd - *(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)(*ptrd - *(ptrs++));\n      }\n      return *this;\n    }\n\n    //! In-place decrement operator (prefix).\n    /**\n       Similar to operator++(), except that it performs a decrement instead of an increment.\n    **/\n    CImg<T>& operator--() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) *ptrd = *ptrd - (T)1;\n      return *this;\n    }\n\n    //! In-place decrement operator (postfix).\n    /**\n       Similar to operator++(int), except that it performs a decrement instead of an increment.\n    **/\n    CImg<T> operator--(int) {\n      const CImg<T> copy(*this,false);\n      --*this;\n      return copy;\n    }\n\n    //! Replace each pixel by its opposite value.\n    /**\n       \\note\n       - If the computed opposite values are out-of-range, they are treated as with standard C++ numeric types.\n         For instance, the \\c unsigned \\c char opposite of \\c 1 is \\c 255.\n       \\par Example\n       \\code\n       const CImg<unsigned char>\n         img1(\"reference.jpg\"),   // Load a RGB color image.\n         img2 = -img1;            // Compute its opposite (in 'unsigned char').\n       (img1,img2).display();\n       \\endcode\n       \\image html ref_operator_minus.jpg\n     **/\n    CImg<T> operator-() const {\n      return CImg<T>(_width,_height,_depth,_spectrum,(T)0)-=*this;\n    }\n\n    //! Substraction operator.\n    /**\n       Similar to operator-=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator-(const t value) const {\n      return CImg<_cimg_Tt>(*this,false)-=value;\n    }\n\n    //! Substraction operator.\n    /**\n       Similar to operator-=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    CImg<Tfloat> operator-(const char *const expression) const {\n      return CImg<Tfloat>(*this,false)-=expression;\n    }\n\n    //! Substraction operator.\n    /**\n       Similar to operator-=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator-(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false)-=img;\n    }\n\n    //! In-place multiplication operator.\n    /**\n       Similar to operator+=(const t), except that it performs a multiplication instead of an addition.\n     **/\n    template<typename t>\n    CImg<T>& operator*=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=262144))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(*ptrd * value);\n      return *this;\n    }\n\n    //! In-place multiplication operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a multiplication instead of an addition.\n     **/\n    CImg<T>& operator*=(const char *const expression) {\n      return mul((+*this)._fill(expression,true,true,0,0,\"operator*=\",this));\n    }\n\n    //! In-place multiplication operator.\n    /**\n       Replace the image instance by the matrix multiplication between the image instance and the specified matrix\n       \\c img.\n       \\param img Second operand of the matrix multiplication.\n       \\note\n       - It does \\e not compute a pointwise multiplication between two images. For this purpose, use\n         mul(const CImg<t>&) instead.\n       - The size of the image instance can be modified by this operator.\n       \\par Example\n       \\code\n       CImg<float> A(2,2,1,1, 1,2,3,4);   // Construct 2x2 matrix A = [1,2;3,4].\n       const CImg<float> X(1,2,1,1, 1,2); // Construct 1x2 vector X = [1;2].\n       A*=X;                              // Assign matrix multiplication A*X to 'A'.\n       // 'A' is now a 1x2 vector whose values are [5;11].\n       \\endcode\n    **/\n    template<typename t>\n    CImg<T>& operator*=(const CImg<t>& img) {\n      return ((*this)*img).move_to(*this);\n    }\n\n    //! Multiplication operator.\n    /**\n       Similar to operator*=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator*(const t value) const {\n      return CImg<_cimg_Tt>(*this,false)*=value;\n    }\n\n    //! Multiplication operator.\n    /**\n       Similar to operator*=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    CImg<Tfloat> operator*(const char *const expression) const {\n      return CImg<Tfloat>(*this,false)*=expression;\n    }\n\n    //! Multiplication operator.\n    /**\n       Similar to operator*=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator*(const CImg<t>& img) const {\n      if (_width!=img._height || _depth!=1 || _spectrum!=1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"operator*(): Invalid multiplication of instance by specified \"\n                                    \"matrix (%u,%u,%u,%u,%p)\",\n                                    cimg_instance,\n                                    img._width,img._height,img._depth,img._spectrum,img._data);\n      CImg<_cimg_Tt> res(img._width,_height);\n#ifdef cimg_use_openmp\n      cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(size()>1024 && img.size()>1024))\n      cimg_forXY(res,i,j) {\n        _cimg_Ttdouble value = 0; cimg_forX(*this,k) value+=(*this)(k,j)*img(i,k); res(i,j) = (_cimg_Tt)value;\n      }\n#else\n      _cimg_Tt *ptrd = res._data;\n      cimg_forXY(res,i,j) {\n        _cimg_Ttdouble value = 0; cimg_forX(*this,k) value+=(*this)(k,j)*img(i,k); *(ptrd++) = (_cimg_Tt)value;\n      }\n#endif\n      return res;\n    }\n\n    //! In-place division operator.\n    /**\n       Similar to operator+=(const t), except that it performs a division instead of an addition.\n     **/\n    template<typename t>\n    CImg<T>& operator/=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(*ptrd / value);\n      return *this;\n    }\n\n    //! In-place division operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a division instead of an addition.\n     **/\n    CImg<T>& operator/=(const char *const expression) {\n      return div((+*this)._fill(expression,true,true,0,0,\"operator/=\",this));\n    }\n\n    //! In-place division operator.\n    /**\n       Replace the image instance by the (right) matrix division between the image instance and the specified\n       matrix \\c img.\n       \\param img Second operand of the matrix division.\n       \\note\n       - It does \\e not compute a pointwise division between two images. For this purpose, use\n         div(const CImg<t>&) instead.\n       - It returns the matrix operation \\c A*inverse(img).\n       - The size of the image instance can be modified by this operator.\n     **/\n    template<typename t>\n    CImg<T>& operator/=(const CImg<t>& img) {\n      return (*this*img.get_invert()).move_to(*this);\n    }\n\n    //! Division operator.\n    /**\n       Similar to operator/=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator/(const t value) const {\n      return CImg<_cimg_Tt>(*this,false)/=value;\n    }\n\n    //! Division operator.\n    /**\n       Similar to operator/=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    CImg<Tfloat> operator/(const char *const expression) const {\n      return CImg<Tfloat>(*this,false)/=expression;\n    }\n\n    //! Division operator.\n    /**\n       Similar to operator/=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator/(const CImg<t>& img) const {\n      return (*this)*img.get_invert();\n    }\n\n    //! In-place modulo operator.\n    /**\n       Similar to operator+=(const t), except that it performs a modulo operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator%=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=16384))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::mod(*ptrd,(T)value);\n      return *this;\n    }\n\n    //! In-place modulo operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a modulo operation instead of an addition.\n    **/\n    CImg<T>& operator%=(const char *const expression) {\n      return *this%=(+*this)._fill(expression,true,true,0,0,\"operator%=\",this);\n    }\n\n    //! In-place modulo operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a modulo operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator%=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this%=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = cimg::mod(*ptrd,(T)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = cimg::mod(*ptrd,(T)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Modulo operator.\n    /**\n       Similar to operator%=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator%(const t value) const {\n      return CImg<_cimg_Tt>(*this,false)%=value;\n    }\n\n    //! Modulo operator.\n    /**\n       Similar to operator%=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    CImg<Tfloat> operator%(const char *const expression) const {\n      return CImg<Tfloat>(*this,false)%=expression;\n    }\n\n    //! Modulo operator.\n    /**\n       Similar to operator%=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image may be a superset of the initial pixel type \\c T, if necessary.\n    **/\n    template<typename t>\n    CImg<_cimg_Tt> operator%(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false)%=img;\n    }\n\n    //! In-place bitwise AND operator.\n    /**\n       Similar to operator+=(const t), except that it performs a bitwise AND operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator&=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)((ulongT)*ptrd & (ulongT)value);\n      return *this;\n    }\n\n    //! In-place bitwise AND operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a bitwise AND operation instead of an addition.\n    **/\n    CImg<T>& operator&=(const char *const expression) {\n      return *this&=(+*this)._fill(expression,true,true,0,0,\"operator&=\",this);\n    }\n\n    //! In-place bitwise AND operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a bitwise AND operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator&=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this&=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)((ulongT)*ptrd & (ulongT)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)((ulongT)*ptrd & (ulongT)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Bitwise AND operator.\n    /**\n       Similar to operator&=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator&(const t value) const {\n      return (+*this)&=value;\n    }\n\n    //! Bitwise AND operator.\n    /**\n       Similar to operator&=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    CImg<T> operator&(const char *const expression) const {\n      return (+*this)&=expression;\n    }\n\n    //! Bitwise AND operator.\n    /**\n       Similar to operator&=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator&(const CImg<t>& img) const {\n      return (+*this)&=img;\n    }\n\n    //! In-place bitwise OR operator.\n    /**\n       Similar to operator+=(const t), except that it performs a bitwise OR operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator|=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)((ulongT)*ptrd | (ulongT)value);\n      return *this;\n    }\n\n    //! In-place bitwise OR operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a bitwise OR operation instead of an addition.\n    **/\n    CImg<T>& operator|=(const char *const expression) {\n      return *this|=(+*this)._fill(expression,true,true,0,0,\"operator|=\",this);\n    }\n\n    //! In-place bitwise OR operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a bitwise OR operation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator|=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this|=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)((ulongT)*ptrd | (ulongT)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)((ulongT)*ptrd | (ulongT)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Bitwise OR operator.\n    /**\n       Similar to operator|=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator|(const t value) const {\n      return (+*this)|=value;\n    }\n\n    //! Bitwise OR operator.\n    /**\n       Similar to operator|=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    CImg<T> operator|(const char *const expression) const {\n      return (+*this)|=expression;\n    }\n\n    //! Bitwise OR operator.\n    /**\n       Similar to operator|=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator|(const CImg<t>& img) const {\n      return (+*this)|=img;\n    }\n\n    //! In-place bitwise XOR operator.\n    /**\n       Similar to operator+=(const t), except that it performs a bitwise XOR operation instead of an addition.\n       \\warning\n       - It does \\e not compute the \\e power of pixel values. For this purpose, use pow(const t) instead.\n    **/\n    template<typename t>\n    CImg<T>& operator^=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)((ulongT)*ptrd ^ (ulongT)value);\n      return *this;\n    }\n\n    //! In-place bitwise XOR operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a bitwise XOR operation instead of an addition.\n       \\warning\n       - It does \\e not compute the \\e power of pixel values. For this purpose, use pow(const char*) instead.\n    **/\n    CImg<T>& operator^=(const char *const expression) {\n      return *this^=(+*this)._fill(expression,true,true,0,0,\"operator^=\",this);\n    }\n\n    //! In-place bitwise XOR operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a bitwise XOR operation instead of an addition.\n       \\warning\n       - It does \\e not compute the \\e power of pixel values. For this purpose, use pow(const CImg<t>&) instead.\n    **/\n    template<typename t>\n    CImg<T>& operator^=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this^=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)((ulongT)*ptrd ^ (ulongT)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)((ulongT)*ptrd ^ (ulongT)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Bitwise XOR operator.\n    /**\n       Similar to operator^=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator^(const t value) const {\n      return (+*this)^=value;\n    }\n\n    //! Bitwise XOR operator.\n    /**\n       Similar to operator^=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    CImg<T> operator^(const char *const expression) const {\n      return (+*this)^=expression;\n    }\n\n    //! Bitwise XOR operator.\n    /**\n       Similar to operator^=(const CImg<t>&), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator^(const CImg<t>& img) const {\n      return (+*this)^=img;\n    }\n\n    //! In-place bitwise left shift operator.\n    /**\n       Similar to operator+=(const t), except that it performs a bitwise left shift instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator<<=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(((longT)*ptrd) << (int)value);\n      return *this;\n    }\n\n    //! In-place bitwise left shift operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a bitwise left shift instead of an addition.\n    **/\n    CImg<T>& operator<<=(const char *const expression) {\n      return *this<<=(+*this)._fill(expression,true,true,0,0,\"operator<<=\",this);\n    }\n\n    //! In-place bitwise left shift operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a bitwise left shift instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator<<=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this^=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)((longT)*ptrd << (int)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)((longT)*ptrd << (int)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Bitwise left shift operator.\n    /**\n       Similar to operator<<=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator<<(const t value) const {\n      return (+*this)<<=value;\n    }\n\n    //! Bitwise left shift operator.\n    /**\n       Similar to operator<<=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    CImg<T> operator<<(const char *const expression) const {\n      return (+*this)<<=expression;\n    }\n\n    //! Bitwise left shift operator.\n    /**\n       Similar to operator<<=(const CImg<t>&), except that it returns a new image instance instead of\n       operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator<<(const CImg<t>& img) const {\n      return (+*this)<<=img;\n    }\n\n    //! In-place bitwise right shift operator.\n    /**\n       Similar to operator+=(const t), except that it performs a bitwise right shift instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator>>=(const t value) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)(((longT)*ptrd) >> (int)value);\n      return *this;\n    }\n\n    //! In-place bitwise right shift operator.\n    /**\n       Similar to operator+=(const char*), except that it performs a bitwise right shift instead of an addition.\n    **/\n    CImg<T>& operator>>=(const char *const expression) {\n      return *this>>=(+*this)._fill(expression,true,true,0,0,\"operator>>=\",this);\n    }\n\n    //! In-place bitwise right shift operator.\n    /**\n       Similar to operator+=(const CImg<t>&), except that it performs a bitwise right shift instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& operator>>=(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return *this^=+img;\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)((longT)*ptrd >> (int)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)((longT)*ptrd >> (int)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Bitwise right shift operator.\n    /**\n       Similar to operator>>=(const t), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator>>(const t value) const {\n      return (+*this)>>=value;\n    }\n\n    //! Bitwise right shift operator.\n    /**\n       Similar to operator>>=(const char*), except that it returns a new image instance instead of operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    CImg<T> operator>>(const char *const expression) const {\n      return (+*this)>>=expression;\n    }\n\n    //! Bitwise right shift operator.\n    /**\n       Similar to operator>>=(const CImg<t>&), except that it returns a new image instance instead of\n       operating in-place.\n       The pixel type of the returned image is \\c T.\n    **/\n    template<typename t>\n    CImg<T> operator>>(const CImg<t>& img) const {\n      return (+*this)>>=img;\n    }\n\n    //! Bitwise inversion operator.\n    /**\n       Similar to operator-(), except that it compute the bitwise inverse instead of the opposite value.\n    **/\n    CImg<T> operator~() const {\n      CImg<T> res(_width,_height,_depth,_spectrum);\n      const T *ptrs = _data;\n      cimg_for(res,ptrd,T) { const ulongT value = (ulongT)*(ptrs++); *ptrd = (T)~value; }\n      return res;\n    }\n\n    //! Test if all pixels of an image have the same value.\n    /**\n       Return \\c true is all pixels of the image instance are equal to the specified \\c value.\n       \\param value Reference value to compare with.\n    **/\n    template<typename t>\n    bool operator==(const t value) const {\n      if (is_empty()) return false;\n      typedef _cimg_Tt Tt;\n      bool is_equal = true;\n      for (T *ptrd = _data + size(); is_equal && ptrd>_data; is_equal = ((Tt)*(--ptrd)==(Tt)value)) {}\n      return is_equal;\n    }\n\n    //! Test if all pixel values of an image follow a specified expression.\n    /**\n       Return \\c true is all pixels of the image instance are equal to the specified \\c expression.\n       \\param expression Value string describing the way pixel values are compared.\n    **/\n    bool operator==(const char *const expression) const {\n      return *this==(+*this)._fill(expression,true,true,0,0,\"operator==\",this);\n    }\n\n    //! Test if two images have the same size and values.\n    /**\n       Return \\c true if the image instance and the input image \\c img have the same dimensions and pixel values,\n       and \\c false otherwise.\n       \\param img Input image to compare with.\n       \\note\n       - The pixel buffer pointers data() of the two compared images do not have to be the same for operator==()\n         to return \\c true.\n         Only the dimensions and the pixel values matter. Thus, the comparison can be \\c true even for different\n         pixel types \\c T and \\c t.\n       \\par Example\n       \\code\n       const CImg<float> img1(1,3,1,1, 0,1,2); // Construct a 1x3 vector [0;1;2] (with 'float' pixel values).\n       const CImg<char> img2(1,3,1,1, 0,1,2);  // Construct a 1x3 vector [0;1;2] (with 'char' pixel values).\n       if (img1==img2) {                       // Test succeeds, image dimensions and values are the same.\n         std::printf(\"'img1' and 'img2' have same dimensions and values.\");\n       }\n       \\endcode\n    **/\n    template<typename t>\n    bool operator==(const CImg<t>& img) const {\n      typedef _cimg_Tt Tt;\n      const ulongT siz = size();\n      bool is_equal = true;\n      if (siz!=img.size()) return false;\n      t *ptrs = img._data + siz;\n      for (T *ptrd = _data + siz; is_equal && ptrd>_data; is_equal = ((Tt)*(--ptrd)==(Tt)*(--ptrs))) {}\n      return is_equal;\n    }\n\n    //! Test if pixels of an image are all different from a value.\n    /**\n       Return \\c true is all pixels of the image instance are different than the specified \\c value.\n       \\param value Reference value to compare with.\n    **/\n    template<typename t>\n    bool operator!=(const t value) const {\n      return !((*this)==value);\n    }\n\n    //! Test if all pixel values of an image are different from a specified expression.\n    /**\n       Return \\c true is all pixels of the image instance are different to the specified \\c expression.\n       \\param expression Value string describing the way pixel values are compared.\n    **/\n    bool operator!=(const char *const expression) const {\n      return !((*this)==expression);\n    }\n\n    //! Test if two images have different sizes or values.\n    /**\n       Return \\c true if the image instance and the input image \\c img have different dimensions or pixel values,\n       and \\c false otherwise.\n       \\param img Input image to compare with.\n       \\note\n       - Writing \\c img1!=img2 is equivalent to \\c !(img1==img2).\n    **/\n    template<typename t>\n    bool operator!=(const CImg<t>& img) const {\n      return !((*this)==img);\n    }\n\n    //! Construct an image list from two images.\n    /**\n       Return a new list of image (\\c CImgList instance) containing exactly two elements:\n         - A copy of the image instance, at position [\\c 0].\n         - A copy of the specified image \\c img, at position [\\c 1].\n\n       \\param img Input image that will be the second image of the resulting list.\n       \\note\n       - The family of operator,() is convenient to easily create list of images, but it is also \\e quite \\e slow\n         in practice (see warning below).\n       - Constructed lists contain no shared images. If image instance or input image \\c img are shared, they are\n         inserted as new non-shared copies in the resulting list.\n       - The pixel type of the returned list may be a superset of the initial pixel type \\c T, if necessary.\n       \\warning\n       - Pipelining operator,() \\c N times will perform \\c N copies of the entire content of a (growing) image list.\n         This may become very expensive in terms of speed and used memory. You should avoid using this technique to\n         build a new CImgList instance from several images, if you are seeking for performance.\n         Fast insertions of images in an image list are possible with\n         CImgList<T>::insert(const CImg<t>&,unsigned int,bool) or move_to(CImgList<t>&,unsigned int).\n       \\par Example\n       \\code\n       const CImg<float>\n          img1(\"reference.jpg\"),\n          img2 = img1.get_mirror('x'),\n          img3 = img2.get_blur(5);\n       const CImgList<float> list = (img1,img2); // Create list of two elements from 'img1' and 'img2'.\n       (list,img3).display();                    // Display image list containing copies of 'img1','img2' and 'img3'.\n       \\endcode\n       \\image html ref_operator_comma.jpg\n    **/\n    template<typename t>\n    CImgList<_cimg_Tt> operator,(const CImg<t>& img) const {\n      return CImgList<_cimg_Tt>(*this,img);\n    }\n\n    //! Construct an image list from image instance and an input image list.\n    /**\n       Return a new list of images (\\c CImgList instance) containing exactly \\c list.size() \\c + \\c 1 elements:\n         - A copy of the image instance, at position [\\c 0].\n         - A copy of the specified image list \\c list, from positions [\\c 1] to [\\c list.size()].\n\n       \\param list Input image list that will be appended to the image instance.\n       \\note\n       - Similar to operator,(const CImg<t>&) const, except that it takes an image list as an argument.\n    **/\n    template<typename t>\n    CImgList<_cimg_Tt> operator,(const CImgList<t>& list) const {\n      return CImgList<_cimg_Tt>(list,false).insert(*this,0);\n    }\n\n    //! Split image along specified axis.\n    /**\n       Return a new list of images (\\c CImgList instance) containing the splitted components\n       of the instance image along the specified axis.\n       \\param axis Splitting axis (can be '\\c x','\\c y','\\c z' or '\\c c')\n       \\note\n       - Similar to get_split(char,int) const, with default second argument.\n       \\par Example\n       \\code\n       const CImg<unsigned char> img(\"reference.jpg\"); // Load a RGB color image.\n       const CImgList<unsigned char> list = (img<'c'); // Get a list of its three R,G,B channels.\n       (img,list).display();\n       \\endcode\n       \\image html ref_operator_less.jpg\n    **/\n    CImgList<T> operator<(const char axis) const {\n      return get_split(axis);\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Instance Characteristics\n    //@{\n    //-------------------------------------\n\n    //! Return the type of image pixel values as a C string.\n    /**\n       Return a \\c char* string containing the usual type name of the image pixel values\n       (i.e. a stringified version of the template parameter \\c T).\n       \\note\n       - The returned string may contain spaces (as in \\c \"unsigned char\").\n       - If the pixel type \\c T does not correspond to a registered type, the string <tt>\"unknown\"</tt> is returned.\n    **/\n    static const char* pixel_type() {\n      return cimg::type<T>::string();\n    }\n\n    //! Return the number of image columns.\n    /**\n       Return the image width, i.e. the image dimension along the X-axis.\n       \\note\n       - The width() of an empty image is equal to \\c 0.\n       - width() is typically equal to \\c 1 when considering images as \\e vectors for matrix calculations.\n       - width() returns an \\c int, although the image width is internally stored as an \\c unsigned \\c int.\n         Using an \\c int is safer and prevents arithmetic traps possibly encountered when doing calculations involving\n         \\c unsigned \\c int variables.\n         Access to the initial \\c unsigned \\c int variable is possible (though not recommended) by\n         <tt>(*this)._width</tt>.\n    **/\n    int width() const {\n      return (int)_width;\n    }\n\n    //! Return the number of image rows.\n    /**\n       Return the image height, i.e. the image dimension along the Y-axis.\n       \\note\n       - The height() of an empty image is equal to \\c 0.\n       - height() returns an \\c int, although the image height is internally stored as an \\c unsigned \\c int.\n         Using an \\c int is safer and prevents arithmetic traps possibly encountered when doing calculations involving\n         \\c unsigned \\c int variables.\n         Access to the initial \\c unsigned \\c int variable is possible (though not recommended) by\n         <tt>(*this)._height</tt>.\n    **/\n    int height() const {\n      return (int)_height;\n    }\n\n    //! Return the number of image slices.\n    /**\n       Return the image depth, i.e. the image dimension along the Z-axis.\n       \\note\n       - The depth() of an empty image is equal to \\c 0.\n       - depth() is typically equal to \\c 1 when considering usual 2d images. When depth()\\c > \\c 1, the image\n         is said to be \\e volumetric.\n       - depth() returns an \\c int, although the image depth is internally stored as an \\c unsigned \\c int.\n         Using an \\c int is safer and prevents arithmetic traps possibly encountered when doing calculations involving\n         \\c unsigned \\c int variables.\n         Access to the initial \\c unsigned \\c int variable is possible (though not recommended) by\n         <tt>(*this)._depth</tt>.\n    **/\n    int depth() const {\n      return (int)_depth;\n    }\n\n    //! Return the number of image channels.\n    /**\n       Return the number of image channels, i.e. the image dimension along the C-axis.\n       \\note\n       - The spectrum() of an empty image is equal to \\c 0.\n       - spectrum() is typically equal to \\c 1 when considering scalar-valued images, to \\c 3\n         for RGB-coded color images, and to \\c 4 for RGBA-coded color images (with alpha-channel).\n         The number of channels of an image instance is not limited. The meaning of the pixel values is not linked\n         up to the number of channels (e.g. a 4-channel image may indifferently stands for a RGBA or CMYK color image).\n       - spectrum() returns an \\c int, although the image spectrum is internally stored as an \\c unsigned \\c int.\n         Using an \\c int is safer and prevents arithmetic traps possibly encountered when doing calculations involving\n         \\c unsigned \\c int variables.\n         Access to the initial \\c unsigned \\c int variable is possible (though not recommended) by\n         <tt>(*this)._spectrum</tt>.\n    **/\n    int spectrum() const {\n      return (int)_spectrum;\n    }\n\n    //! Return the total number of pixel values.\n    /**\n       Return <tt>width()*\\ref height()*\\ref depth()*\\ref spectrum()</tt>,\n       i.e. the total number of values of type \\c T in the pixel buffer of the image instance.\n       \\note\n       - The size() of an empty image is equal to \\c 0.\n       - The allocated memory size for a pixel buffer of a non-shared \\c CImg<T> instance is equal to\n         <tt>size()*sizeof(T)</tt>.\n       \\par Example\n       \\code\n       const CImg<float> img(100,100,1,3);               // Construct new 100x100 color image.\n       if (img.size()==30000)                            // Test succeeds.\n         std::printf(\"Pixel buffer uses %lu bytes\",\n                     img.size()*sizeof(float));\n       \\endcode\n    **/\n    ulongT size() const {\n      return (ulongT)_width*_height*_depth*_spectrum;\n    }\n\n    //! Return a pointer to the first pixel value.\n    /**\n       Return a \\c T*, or a \\c const \\c T* pointer to the first value in the pixel buffer of the image instance,\n       whether the instance is \\c const or not.\n       \\note\n       - The data() of an empty image is equal to \\c 0 (null pointer).\n       - The allocated pixel buffer for the image instance starts from \\c data()\n         and goes to <tt>data()+\\ref size() - 1</tt> (included).\n       - To get the pointer to one particular location of the pixel buffer, use\n         data(unsigned int,unsigned int,unsigned int,unsigned int) instead.\n    **/\n    T* data() {\n      return _data;\n    }\n\n    //! Return a pointer to the first pixel value \\const.\n    const T* data() const {\n      return _data;\n    }\n\n    //! Return a pointer to a located pixel value.\n    /**\n       Return a \\c T*, or a \\c const \\c T* pointer to the value located at (\\c x,\\c y,\\c z,\\c c) in the pixel buffer\n       of the image instance,\n       whether the instance is \\c const or not.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Writing \\c img.data(x,y,z,c) is equivalent to <tt>&(img(x,y,z,c))</tt>. Thus, this method has the same\n         properties as operator()(unsigned int,unsigned int,unsigned int,unsigned int).\n     **/\n#if cimg_verbosity>=3\n    T *data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {\n      const ulongT off = (ulongT)offset(x,y,z,c);\n      if (off>=size())\n        cimg::warn(_cimg_instance\n                   \"data(): Invalid pointer request, at coordinates (%u,%u,%u,%u) [offset=%u].\",\n                   cimg_instance,\n                   x,y,z,c,off);\n      return _data + off;\n    }\n\n    //! Return a pointer to a located pixel value \\const.\n    const T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) const {\n      return const_cast<CImg<T>*>(this)->data(x,y,z,c);\n    }\n#else\n    T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {\n      return _data + x + (ulongT)y*_width + (ulongT)z*_width*_height + (ulongT)c*_width*_height*_depth;\n    }\n\n    const T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) const {\n      return _data + x + (ulongT)y*_width + (ulongT)z*_width*_height + (ulongT)c*_width*_height*_depth;\n    }\n#endif\n\n    //! Return the offset to a located pixel value, with respect to the beginning of the pixel buffer.\n    /**\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Writing \\c img.data(x,y,z,c) is equivalent to <tt>&(img(x,y,z,c)) - img.data()</tt>.\n         Thus, this method has the same properties as operator()(unsigned int,unsigned int,unsigned int,unsigned int).\n       \\par Example\n       \\code\n       const CImg<float> img(100,100,1,3);      // Define a 100x100 RGB-color image.\n       const long off = img.offset(10,10,0,2);  // Get the offset of the blue value of the pixel located at (10,10).\n       const float val = img[off];              // Get the blue value of this pixel.\n       \\endcode\n    **/\n    longT offset(const int x, const int y=0, const int z=0, const int c=0) const {\n      return x + (longT)y*_width + (longT)z*_width*_height + (longT)c*_width*_height*_depth;\n    }\n\n    //! Return a CImg<T>::iterator pointing to the first pixel value.\n    /**\n       \\note\n       - Equivalent to data().\n       - It has been mainly defined for compatibility with STL naming conventions.\n     **/\n    iterator begin() {\n      return _data;\n    }\n\n    //! Return a CImg<T>::iterator pointing to the first value of the pixel buffer \\const.\n    const_iterator begin() const {\n      return _data;\n    }\n\n    //! Return a CImg<T>::iterator pointing next to the last pixel value.\n    /**\n       \\note\n       - Writing \\c img.end() is equivalent to <tt>img.data() + img.size()</tt>.\n       - It has been mainly defined for compatibility with STL naming conventions.\n       \\warning\n       - The returned iterator actually points to a value located \\e outside the acceptable bounds of the pixel buffer.\n         Trying to read or write the content of the returned iterator will probably result in a crash.\n         Use it mainly as a strict upper bound for a CImg<T>::iterator.\n       \\par Example\n       \\code\n       CImg<float> img(100,100,1,3);                                     // Define a 100x100 RGB color image.\n       for (CImg<float>::iterator it = img.begin(); it<img.end(); ++it)  // 'img.end()' used here as an upper bound for the iterator.\n         *it = 0;\n       \\endcode\n    **/\n    iterator end() {\n      return _data + size();\n    }\n\n    //! Return a CImg<T>::iterator pointing next to the last pixel value \\const.\n    const_iterator end() const {\n      return _data + size();\n    }\n\n    //! Return a reference to the first pixel value.\n    /**\n       \\note\n       - Writing \\c img.front() is equivalent to <tt>img[0]</tt>, or <tt>img(0,0,0,0)</tt>.\n       - It has been mainly defined for compatibility with STL naming conventions.\n    **/\n    T& front() {\n      return *_data;\n    }\n\n    //! Return a reference to the first pixel value \\const.\n    const T& front() const {\n      return *_data;\n    }\n\n    //! Return a reference to the last pixel value.\n    /**\n       \\note\n       - Writing \\c img.end() is equivalent to <tt>img[img.size() - 1]</tt>, or\n         <tt>img(img.width() - 1,img.height() - 1,img.depth() - 1,img.spectrum() - 1)</tt>.\n       - It has been mainly defined for compatibility with STL naming conventions.\n    **/\n    T& back() {\n      return *(_data + size() - 1);\n    }\n\n    //! Return a reference to the last pixel value \\const.\n    const T& back() const {\n      return *(_data + size() - 1);\n    }\n\n    //! Access to a pixel value at a specified offset, using Dirichlet boundary conditions.\n    /**\n       Return a reference to the pixel value of the image instance located at a specified \\c offset,\n       or to a specified default value in case of out-of-bounds access.\n       \\param offset Offset to the desired pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note\n       - Writing \\c img.at(offset,out_value) is similar to <tt>img[offset]</tt>, except that if \\c offset\n         is outside bounds (e.g. \\c offset<0 or \\c offset>=img.size()), a reference to a value \\c out_value\n         is safely returned instead.\n       - Due to the additional boundary checking operation, this method is slower than operator()(). Use it when\n         you are \\e not sure about the validity of the specified pixel offset.\n    **/\n    T& at(const int offset, const T& out_value) {\n      return (offset<0 || offset>=(int)size())?(cimg::temporary(out_value)=out_value):(*this)[offset];\n    }\n\n    //! Access to a pixel value at a specified offset, using Dirichlet boundary conditions \\const.\n    T at(const int offset, const T& out_value) const {\n      return (offset<0 || offset>=(int)size())?out_value:(*this)[offset];\n    }\n\n    //! Access to a pixel value at a specified offset, using Neumann boundary conditions.\n    /**\n       Return a reference to the pixel value of the image instance located at a specified \\c offset,\n       or to the nearest pixel location in the image instance in case of out-of-bounds access.\n       \\param offset Offset to the desired pixel value.\n       \\note\n       - Similar to at(int,const T), except that an out-of-bounds access returns the value of the\n         nearest pixel in the image instance, regarding the specified offset, i.e.\n         - If \\c offset<0, then \\c img[0] is returned.\n         - If \\c offset>=img.size(), then \\c img[img.size() - 1] is returned.\n       - Due to the additional boundary checking operation, this method is slower than operator()(). Use it when\n         you are \\e not sure about the validity of the specified pixel offset.\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method \\c _at(int).\n     **/\n    T& at(const int offset) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"at(): Empty instance.\",\n                                    cimg_instance);\n      return _at(offset);\n    }\n\n    T& _at(const int offset) {\n      const unsigned int siz = (unsigned int)size();\n      return (*this)[offset<0?0:(unsigned int)offset>=siz?siz - 1:offset];\n    }\n\n    //! Access to a pixel value at a specified offset, using Neumann boundary conditions \\const.\n    const T& at(const int offset) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"at(): Empty instance.\",\n                                    cimg_instance);\n      return _at(offset);\n    }\n\n    const T& _at(const int offset) const {\n      const unsigned int siz = (unsigned int)size();\n      return (*this)[offset<0?0:(unsigned int)offset>=siz?siz - 1:offset];\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X-coordinate.\n    /**\n       Return a reference to the pixel value of the image instance located at (\\c x,\\c y,\\c z,\\c c),\n       or to a specified default value in case of out-of-bounds access along the X-axis.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c (\\c x,\\c y,\\c z,\\c c) is outside image bounds.\n       \\note\n       - Similar to operator()(), except that an out-of-bounds access along the X-axis returns the specified value\n         \\c out_value.\n       - Due to the additional boundary checking operation, this method is slower than operator()(). Use it when\n         you are \\e not sure about the validity of the specified pixel coordinates.\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n    **/\n    T& atX(const int x, const int y, const int z, const int c, const T& out_value) {\n      return (x<0 || x>=width())?(cimg::temporary(out_value)=out_value):(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X-coordinate \\const.\n    T atX(const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (x<0 || x>=width())?out_value:(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X-coordinate.\n    /**\n       Return a reference to the pixel value of the image instance located at (\\c x,\\c y,\\c z,\\c c),\n       or to the nearest pixel location in the image instance in case of out-of-bounds access along the X-axis.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Similar to at(int,int,int,int,const T), except that an out-of-bounds access returns the value of the\n         nearest pixel in the image instance, regarding the specified X-coordinate.\n       - Due to the additional boundary checking operation, this method is slower than operator()(). Use it when\n         you are \\e not sure about the validity of the specified pixel coordinates.\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _at(int,int,int,int).\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n     **/\n    T& atX(const int x, const int y=0, const int z=0, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atX(): Empty instance.\",\n                                    cimg_instance);\n      return _atX(x,y,z,c);\n    }\n\n    T& _atX(const int x, const int y=0, const int z=0, const int c=0) {\n      return (*this)(x<0?0:(x>=width()?width() - 1:x),y,z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X-coordinate \\const.\n    const T& atX(const int x, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atX(): Empty instance.\",\n                                    cimg_instance);\n      return _atX(x,y,z,c);\n    }\n\n    const T& _atX(const int x, const int y=0, const int z=0, const int c=0) const {\n      return (*this)(x<0?0:(x>=width()?width() - 1:x),y,z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to atX(int,int,int,int,const T), except that boundary checking is performed both on X and Y-coordinates.\n    **/\n    T& atXY(const int x, const int y, const int z, const int c, const T& out_value) {\n      return (x<0 || y<0 || x>=width() || y>=height())?(cimg::temporary(out_value)=out_value):(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X and Y coordinates \\const.\n    T atXY(const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (x<0 || y<0 || x>=width() || y>=height())?out_value:(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to atX(int,int,int,int), except that boundary checking is performed both on X and Y-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _atXY(int,int,int,int).\n     **/\n    T& atXY(const int x, const int y, const int z=0, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXY(): Empty instance.\",\n                                    cimg_instance);\n      return _atXY(x,y,z,c);\n    }\n\n    T& _atXY(const int x, const int y, const int z=0, const int c=0) {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X and Y-coordinates \\const.\n    const T& atXY(const int x, const int y, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXY(): Empty instance.\",\n                                    cimg_instance);\n      return _atXY(x,y,z,c);\n    }\n\n    const T& _atXY(const int x, const int y, const int z=0, const int c=0) const {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to atX(int,int,int,int,const T), except that boundary checking is performed both on\n       X,Y and Z-coordinates.\n    **/\n    T& atXYZ(const int x, const int y, const int z, const int c, const T& out_value) {\n      return (x<0 || y<0 || z<0 || x>=width() || y>=height() || z>=depth())?\n        (cimg::temporary(out_value)=out_value):(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions for the X,Y and Z-coordinates \\const.\n    T atXYZ(const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (x<0 || y<0 || z<0 || x>=width() || y>=height() || z>=depth())?out_value:(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to atX(int,int,int,int), except that boundary checking is performed both on X,Y and Z-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _atXYZ(int,int,int,int).\n    **/\n    T& atXYZ(const int x, const int y, const int z, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXYZ(): Empty instance.\",\n                                    cimg_instance);\n      return _atXYZ(x,y,z,c);\n    }\n\n    T& _atXYZ(const int x, const int y, const int z, const int c=0) {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),\n                     cimg::cut(z,0,depth() - 1),c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions for the X,Y and Z-coordinates \\const.\n    const T& atXYZ(const int x, const int y, const int z, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXYZ(): Empty instance.\",\n                                    cimg_instance);\n      return _atXYZ(x,y,z,c);\n    }\n\n    const T& _atXYZ(const int x, const int y, const int z, const int c=0) const {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),\n                     cimg::cut(z,0,depth() - 1),c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions.\n    /**\n       Similar to atX(int,int,int,int,const T), except that boundary checking is performed on all\n       X,Y,Z and C-coordinates.\n    **/\n    T& atXYZC(const int x, const int y, const int z, const int c, const T& out_value) {\n      return (x<0 || y<0 || z<0 || c<0 || x>=width() || y>=height() || z>=depth() || c>=spectrum())?\n        (cimg::temporary(out_value)=out_value):(*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Dirichlet boundary conditions \\const.\n    T atXYZC(const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (x<0 || y<0 || z<0 || c<0 || x>=width() || y>=height() || z>=depth() || c>=spectrum())?out_value:\n        (*this)(x,y,z,c);\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions.\n    /**\n       Similar to atX(int,int,int,int), except that boundary checking is performed on all X,Y,Z and C-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _atXYZC(int,int,int,int).\n    **/\n    T& atXYZC(const int x, const int y, const int z, const int c) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXYZC(): Empty instance.\",\n                                    cimg_instance);\n      return _atXYZC(x,y,z,c);\n    }\n\n    T& _atXYZC(const int x, const int y, const int z, const int c) {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),\n                     cimg::cut(z,0,depth() - 1),\n                     cimg::cut(c,0,spectrum() - 1));\n    }\n\n    //! Access to a pixel value, using Neumann boundary conditions \\const.\n    const T& atXYZC(const int x, const int y, const int z, const int c) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"atXYZC(): Empty instance.\",\n                                    cimg_instance);\n      return _atXYZC(x,y,z,c);\n    }\n\n    const T& _atXYZC(const int x, const int y, const int z, const int c) const {\n      return (*this)(cimg::cut(x,0,width() - 1),\n                     cimg::cut(y,0,height() - 1),\n                     cimg::cut(z,0,depth() - 1),\n                     cimg::cut(c,0,spectrum() - 1));\n    }\n\n    //! Return pixel value, using linear interpolation and Dirichlet boundary conditions for the X-coordinate.\n    /**\n       Return a linearly-interpolated pixel value of the image instance located at (\\c fx,\\c y,\\c z,\\c c),\n       or a specified default value in case of out-of-bounds access along the X-axis.\n       \\param fx X-coordinate of the pixel value (float-valued).\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c (\\c fx,\\c y,\\c z,\\c c) is outside image bounds.\n       \\note\n       - Similar to atX(int,int,int,int,const T), except that the returned pixel value is approximated by\n         a linear interpolation along the X-axis, if corresponding coordinates are not integers.\n       - The type of the returned pixel value is extended to \\c float, if the pixel type \\c T is not float-valued.\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n    **/\n    Tfloat linear_atX(const float fx, const int y, const int z, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1;\n      const float\n        dx = fx - x;\n      const Tfloat\n        Ic = (Tfloat)atX(x,y,z,c,out_value), In = (Tfloat)atXY(nx,y,z,c,out_value);\n      return Ic + dx*(In - Ic);\n    }\n\n    //! Return pixel value, using linear interpolation and Neumann boundary conditions for the X-coordinate.\n    /**\n       Return a linearly-interpolated pixel value of the image instance located at (\\c fx,\\c y,\\c z,\\c c),\n       or the value of the nearest pixel location in the image instance in case of out-of-bounds access along\n       the X-axis.\n       \\param fx X-coordinate of the pixel value (float-valued).\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Similar to linear_atX(float,int,int,int,const T) const, except that an out-of-bounds access returns\n         the value of the nearest pixel in the image instance, regarding the specified X-coordinate.\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _linear_atX(float,int,int,int).\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n    **/\n    Tfloat linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"linear_atX(): Empty instance.\",\n                                    cimg_instance);\n\n      return _linear_atX(fx,y,z,c);\n    }\n\n    Tfloat _linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1);\n      const unsigned int\n        x = (unsigned int)nfx;\n      const float\n        dx = nfx - x;\n      const unsigned int\n        nx = dx>0?x + 1:x;\n      const Tfloat\n        Ic = (Tfloat)(*this)(x,y,z,c), In = (Tfloat)(*this)(nx,y,z,c);\n      return Ic + dx*(In - Ic);\n    }\n\n    //! Return pixel value, using linear interpolation and Dirichlet boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int,const T) const, except that the linear interpolation and the\n       boundary checking are achieved both for X and Y-coordinates.\n    **/\n    Tfloat linear_atXY(const float fx, const float fy, const int z, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1,\n        y = (int)fy - (fy>=0?0:1), ny = y + 1;\n      const float\n        dx = fx - x,\n        dy = fy - y;\n      const Tfloat\n        Icc = (Tfloat)atXY(x,y,z,c,out_value),  Inc = (Tfloat)atXY(nx,y,z,c,out_value),\n        Icn = (Tfloat)atXY(x,ny,z,c,out_value), Inn = (Tfloat)atXY(nx,ny,z,c,out_value);\n      return Icc + dx*(Inc - Icc + dy*(Icc + Inn - Icn - Inc)) + dy*(Icn - Icc);\n    }\n\n    //! Return pixel value, using linear interpolation and Neumann boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int) const, except that the linear interpolation and the boundary checking\n       are achieved both for X and Y-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _linear_atXY(float,float,int,int).\n    **/\n    Tfloat linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"linear_atXY(): Empty instance.\",\n                                    cimg_instance);\n\n      return _linear_atXY(fx,fy,z,c);\n    }\n\n    Tfloat _linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1),\n        nfy = cimg::cut(fy,0,height() - 1);\n      const unsigned int\n        x = (unsigned int)nfx,\n        y = (unsigned int)nfy;\n      const float\n        dx = nfx - x,\n        dy = nfy - y;\n      const unsigned int\n        nx = dx>0?x + 1:x,\n        ny = dy>0?y + 1:y;\n      const Tfloat\n        Icc = (Tfloat)(*this)(x,y,z,c),  Inc = (Tfloat)(*this)(nx,y,z,c),\n        Icn = (Tfloat)(*this)(x,ny,z,c), Inn = (Tfloat)(*this)(nx,ny,z,c);\n      return Icc + dx*(Inc - Icc + dy*(Icc + Inn - Icn - Inc)) + dy*(Icn - Icc);\n    }\n\n    //! Return pixel value, using linear interpolation and Dirichlet boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int,const T) const, except that the linear interpolation and the\n       boundary checking are achieved both for X,Y and Z-coordinates.\n    **/\n    Tfloat linear_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1,\n        y = (int)fy - (fy>=0?0:1), ny = y + 1,\n        z = (int)fz - (fz>=0?0:1), nz = z + 1;\n      const float\n        dx = fx - x,\n        dy = fy - y,\n        dz = fz - z;\n      const Tfloat\n        Iccc = (Tfloat)atXYZ(x,y,z,c,out_value), Incc = (Tfloat)atXYZ(nx,y,z,c,out_value),\n        Icnc = (Tfloat)atXYZ(x,ny,z,c,out_value), Innc = (Tfloat)atXYZ(nx,ny,z,c,out_value),\n        Iccn = (Tfloat)atXYZ(x,y,nz,c,out_value), Incn = (Tfloat)atXYZ(nx,y,nz,c,out_value),\n        Icnn = (Tfloat)atXYZ(x,ny,nz,c,out_value), Innn = (Tfloat)atXYZ(nx,ny,nz,c,out_value);\n      return Iccc +\n        dx*(Incc - Iccc +\n            dy*(Iccc + Innc - Icnc - Incc +\n                dz*(Iccn + Innn + Icnc + Incc - Icnn - Incn - Iccc - Innc)) +\n            dz*(Iccc + Incn - Iccn - Incc)) +\n        dy*(Icnc - Iccc +\n            dz*(Iccc + Icnn - Iccn - Icnc)) +\n        dz*(Iccn - Iccc);\n    }\n\n    //! Return pixel value, using linear interpolation and Neumann boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int) const, except that the linear interpolation and the boundary checking\n       are achieved both for X,Y and Z-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _linear_atXYZ(float,float,float,int).\n    **/\n    Tfloat linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"linear_atXYZ(): Empty instance.\",\n                                    cimg_instance);\n\n      return _linear_atXYZ(fx,fy,fz,c);\n    }\n\n    Tfloat _linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1),\n        nfy = cimg::cut(fy,0,height() - 1),\n        nfz = cimg::cut(fz,0,depth() - 1);\n      const unsigned int\n        x = (unsigned int)nfx,\n        y = (unsigned int)nfy,\n        z = (unsigned int)nfz;\n      const float\n        dx = nfx - x,\n        dy = nfy - y,\n        dz = nfz - z;\n      const unsigned int\n        nx = dx>0?x + 1:x,\n        ny = dy>0?y + 1:y,\n        nz = dz>0?z + 1:z;\n      const Tfloat\n        Iccc = (Tfloat)(*this)(x,y,z,c), Incc = (Tfloat)(*this)(nx,y,z,c),\n        Icnc = (Tfloat)(*this)(x,ny,z,c), Innc = (Tfloat)(*this)(nx,ny,z,c),\n        Iccn = (Tfloat)(*this)(x,y,nz,c), Incn = (Tfloat)(*this)(nx,y,nz,c),\n        Icnn = (Tfloat)(*this)(x,ny,nz,c), Innn = (Tfloat)(*this)(nx,ny,nz,c);\n      return Iccc +\n        dx*(Incc - Iccc +\n            dy*(Iccc + Innc - Icnc - Incc +\n                dz*(Iccn + Innn + Icnc + Incc - Icnn - Incn - Iccc - Innc)) +\n            dz*(Iccc + Incn - Iccn - Incc)) +\n        dy*(Icnc - Iccc +\n            dz*(Iccc + Icnn - Iccn - Icnc)) +\n        dz*(Iccn - Iccc);\n    }\n\n    //! Return pixel value, using linear interpolation and Dirichlet boundary conditions for all X,Y,Z,C-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int,const T) const, except that the linear interpolation and the\n       boundary checking are achieved for all X,Y,Z and C-coordinates.\n    **/\n    Tfloat linear_atXYZC(const float fx, const float fy, const float fz, const float fc, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1,\n        y = (int)fy - (fy>=0?0:1), ny = y + 1,\n        z = (int)fz - (fz>=0?0:1), nz = z + 1,\n        c = (int)fc - (fc>=0?0:1), nc = c + 1;\n      const float\n        dx = fx - x,\n        dy = fy - y,\n        dz = fz - z,\n        dc = fc - c;\n      const Tfloat\n        Icccc = (Tfloat)atXYZC(x,y,z,c,out_value), Inccc = (Tfloat)atXYZC(nx,y,z,c,out_value),\n        Icncc = (Tfloat)atXYZC(x,ny,z,c,out_value), Inncc = (Tfloat)atXYZC(nx,ny,z,c,out_value),\n        Iccnc = (Tfloat)atXYZC(x,y,nz,c,out_value), Incnc = (Tfloat)atXYZC(nx,y,nz,c,out_value),\n        Icnnc = (Tfloat)atXYZC(x,ny,nz,c,out_value), Innnc = (Tfloat)atXYZC(nx,ny,nz,c,out_value),\n        Icccn = (Tfloat)atXYZC(x,y,z,nc,out_value), Inccn = (Tfloat)atXYZC(nx,y,z,nc,out_value),\n        Icncn = (Tfloat)atXYZC(x,ny,z,nc,out_value), Inncn = (Tfloat)atXYZC(nx,ny,z,nc,out_value),\n        Iccnn = (Tfloat)atXYZC(x,y,nz,nc,out_value), Incnn = (Tfloat)atXYZC(nx,y,nz,nc,out_value),\n        Icnnn = (Tfloat)atXYZC(x,ny,nz,nc,out_value), Innnn = (Tfloat)atXYZC(nx,ny,nz,nc,out_value);\n      return Icccc +\n        dx*(Inccc - Icccc +\n            dy*(Icccc + Inncc - Icncc - Inccc +\n                dz*(Iccnc + Innnc + Icncc + Inccc - Icnnc - Incnc - Icccc - Inncc +\n                    dc*(Iccnn + Innnn + Icncn + Inccn + Icnnc + Incnc + Icccc + Inncc -\n                        Icnnn - Incnn - Icccn - Inncn - Iccnc - Innnc - Icncc - Inccc)) +\n                dc*(Icccn + Inncn + Icncc + Inccc - Icncn - Inccn - Icccc - Inncc)) +\n            dz*(Icccc + Incnc - Iccnc - Inccc +\n                dc*(Icccn + Incnn + Iccnc + Inccc - Iccnn - Inccn - Icccc - Incnc)) +\n            dc*(Icccc + Inccn - Inccc - Icccn)) +\n        dy*(Icncc - Icccc +\n            dz*(Icccc + Icnnc - Iccnc - Icncc +\n                dc*(Icccn + Icnnn + Iccnc + Icncc - Iccnn - Icncn - Icccc - Icnnc)) +\n            dc*(Icccc + Icncn - Icncc - Icccn)) +\n        dz*(Iccnc - Icccc +\n            dc*(Icccc + Iccnn - Iccnc - Icccn)) +\n        dc*(Icccn  -Icccc);\n    }\n\n    //! Return pixel value, using linear interpolation and Neumann boundary conditions for all X,Y,Z and C-coordinates.\n    /**\n       Similar to linear_atX(float,int,int,int) const, except that the linear interpolation and the boundary checking\n       are achieved for all X,Y,Z and C-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _linear_atXYZC(float,float,float,float).\n    **/\n    Tfloat linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"linear_atXYZC(): Empty instance.\",\n                                    cimg_instance);\n\n      return _linear_atXYZC(fx,fy,fz,fc);\n    }\n\n    Tfloat _linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1),\n        nfy = cimg::cut(fy,0,height() - 1),\n        nfz = cimg::cut(fz,0,depth() - 1),\n        nfc = cimg::cut(fc,0,spectrum() - 1);\n      const unsigned int\n        x = (unsigned int)nfx,\n        y = (unsigned int)nfy,\n        z = (unsigned int)nfz,\n        c = (unsigned int)nfc;\n      const float\n        dx = nfx - x,\n        dy = nfy - y,\n        dz = nfz - z,\n        dc = nfc - c;\n      const unsigned int\n        nx = dx>0?x + 1:x,\n        ny = dy>0?y + 1:y,\n        nz = dz>0?z + 1:z,\n        nc = dc>0?c + 1:c;\n      const Tfloat\n        Icccc = (Tfloat)(*this)(x,y,z,c), Inccc = (Tfloat)(*this)(nx,y,z,c),\n        Icncc = (Tfloat)(*this)(x,ny,z,c), Inncc = (Tfloat)(*this)(nx,ny,z,c),\n        Iccnc = (Tfloat)(*this)(x,y,nz,c), Incnc = (Tfloat)(*this)(nx,y,nz,c),\n        Icnnc = (Tfloat)(*this)(x,ny,nz,c), Innnc = (Tfloat)(*this)(nx,ny,nz,c),\n        Icccn = (Tfloat)(*this)(x,y,z,nc), Inccn = (Tfloat)(*this)(nx,y,z,nc),\n        Icncn = (Tfloat)(*this)(x,ny,z,nc), Inncn = (Tfloat)(*this)(nx,ny,z,nc),\n        Iccnn = (Tfloat)(*this)(x,y,nz,nc), Incnn = (Tfloat)(*this)(nx,y,nz,nc),\n        Icnnn = (Tfloat)(*this)(x,ny,nz,nc), Innnn = (Tfloat)(*this)(nx,ny,nz,nc);\n      return Icccc +\n        dx*(Inccc - Icccc +\n            dy*(Icccc + Inncc - Icncc - Inccc +\n                dz*(Iccnc + Innnc + Icncc + Inccc - Icnnc - Incnc - Icccc - Inncc +\n                    dc*(Iccnn + Innnn + Icncn + Inccn + Icnnc + Incnc + Icccc + Inncc -\n                        Icnnn - Incnn - Icccn - Inncn - Iccnc - Innnc - Icncc - Inccc)) +\n                dc*(Icccn + Inncn + Icncc + Inccc - Icncn - Inccn - Icccc - Inncc)) +\n            dz*(Icccc + Incnc - Iccnc - Inccc +\n                dc*(Icccn + Incnn + Iccnc + Inccc - Iccnn - Inccn - Icccc - Incnc)) +\n            dc*(Icccc + Inccn - Inccc - Icccn)) +\n        dy*(Icncc - Icccc +\n            dz*(Icccc + Icnnc - Iccnc - Icncc +\n                dc*(Icccn + Icnnn + Iccnc + Icncc - Iccnn - Icncn - Icccc - Icnnc)) +\n            dc*(Icccc + Icncn - Icncc - Icccn)) +\n        dz*(Iccnc - Icccc +\n            dc*(Icccc + Iccnn - Iccnc - Icccn)) +\n        dc*(Icccn - Icccc);\n    }\n\n    //! Return pixel value, using cubic interpolation and Dirichlet boundary conditions for the X-coordinate.\n    /**\n       Return a cubicly-interpolated pixel value of the image instance located at (\\c fx,\\c y,\\c z,\\c c),\n       or a specified default value in case of out-of-bounds access along the X-axis.\n       The cubic interpolation uses Hermite splines.\n       \\param fx d X-coordinate of the pixel value (float-valued).\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c (\\c fx,\\c y,\\c z,\\c c) is outside image bounds.\n       \\note\n       - Similar to linear_atX(float,int,int,int,const T) const, except that the returned pixel value is\n         approximated by a \\e cubic interpolation along the X-axis.\n       - The type of the returned pixel value is extended to \\c float, if the pixel type \\c T is not float-valued.\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n    **/\n    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), px = x - 1, nx = x + 1, ax = x + 2;\n      const float\n        dx = fx - x;\n      const Tfloat\n        Ip = (Tfloat)atX(px,y,z,c,out_value), Ic = (Tfloat)atX(x,y,z,c,out_value),\n        In = (Tfloat)atX(nx,y,z,c,out_value), Ia = (Tfloat)atX(ax,y,z,c,out_value);\n      return Ic + 0.5f*(dx*(-Ip + In) + dx*dx*(2*Ip - 5*Ic + 4*In - Ia) + dx*dx*dx*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Dirichlet boundary conditions for the X-coordinate.\n    /**\n       Similar to cubic_atX(float,int,int,int,const T) const, except that you can specify the authorized minimum\n       and maximum of the returned value.\n    **/\n    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T& out_value,\n                     const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atX(fx,y,z,c,out_value);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Return pixel value, using cubic interpolation and Neumann boundary conditions for the X-coordinate.\n    /**\n       Return a cubicly-interpolated pixel value of the image instance located at (\\c fx,\\c y,\\c z,\\c c),\n       or the value of the nearest pixel location in the image instance in case of out-of-bounds access\n       along the X-axis. The cubic interpolation uses Hermite splines.\n       \\param fx X-coordinate of the pixel value (float-valued).\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Similar to cubic_atX(float,int,int,int,const T) const, except that the returned pixel value is\n         approximated by a cubic interpolation along the X-axis.\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _cubic_atX(float,int,int,int).\n       \\warning\n       - There is \\e no boundary checking performed for the Y,Z and C-coordinates, so they must be inside image bounds.\n    **/\n    Tfloat cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"cubic_atX(): Empty instance.\",\n                                    cimg_instance);\n      return _cubic_atX(fx,y,z,c);\n    }\n\n    Tfloat _cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1);\n      const int\n        x = (int)nfx;\n      const float\n        dx = nfx - x;\n      const int\n        px = x - 1<0?0:x - 1, nx = dx>0?x + 1:x, ax = x + 2>=width()?width() - 1:x + 2;\n      const Tfloat\n        Ip = (Tfloat)(*this)(px,y,z,c), Ic = (Tfloat)(*this)(x,y,z,c),\n        In = (Tfloat)(*this)(nx,y,z,c), Ia = (Tfloat)(*this)(ax,y,z,c);\n      return Ic + 0.5f*(dx*(-Ip + In) + dx*dx*(2*Ip - 5*Ic + 4*In - Ia) + dx*dx*dx*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Neumann boundary conditions for the X-coordinate.\n    /**\n       Similar to cubic_atX(float,int,int,int) const, except that you can specify the authorized minimum and maximum\n       of the returned value.\n    **/\n    Tfloat cubic_atX(const float fx, const int y, const int z, const int c,\n                     const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atX(fx,y,z,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    Tfloat _cubic_atX(const float fx, const int y, const int z, const int c,\n                      const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = _cubic_atX(fx,y,z,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Return pixel value, using cubic interpolation and Dirichlet boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to cubic_atX(float,int,int,int,const T) const, except that the cubic interpolation and boundary checking\n       are achieved both for X and Y-coordinates.\n    **/\n    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), px = x - 1, nx = x + 1, ax = x + 2,\n        y = (int)fy - (fy>=0?0:1), py = y - 1, ny = y + 1, ay = y + 2;\n      const float dx = fx - x, dy = fy - y;\n      const Tfloat\n        Ipp = (Tfloat)atXY(px,py,z,c,out_value), Icp = (Tfloat)atXY(x,py,z,c,out_value),\n        Inp = (Tfloat)atXY(nx,py,z,c,out_value), Iap = (Tfloat)atXY(ax,py,z,c,out_value),\n        Ip = Icp + 0.5f*(dx*(-Ipp + Inp) + dx*dx*(2*Ipp - 5*Icp + 4*Inp - Iap) + dx*dx*dx*(-Ipp + 3*Icp - 3*Inp + Iap)),\n        Ipc = (Tfloat)atXY(px,y,z,c,out_value),  Icc = (Tfloat)atXY(x, y,z,c,out_value),\n        Inc = (Tfloat)atXY(nx,y,z,c,out_value),  Iac = (Tfloat)atXY(ax,y,z,c,out_value),\n        Ic = Icc + 0.5f*(dx*(-Ipc + Inc) + dx*dx*(2*Ipc - 5*Icc + 4*Inc - Iac) + dx*dx*dx*(-Ipc + 3*Icc - 3*Inc + Iac)),\n        Ipn = (Tfloat)atXY(px,ny,z,c,out_value), Icn = (Tfloat)atXY(x,ny,z,c,out_value),\n        Inn = (Tfloat)atXY(nx,ny,z,c,out_value), Ian = (Tfloat)atXY(ax,ny,z,c,out_value),\n        In = Icn + 0.5f*(dx*(-Ipn + Inn) + dx*dx*(2*Ipn - 5*Icn + 4*Inn - Ian) + dx*dx*dx*(-Ipn + 3*Icn - 3*Inn + Ian)),\n        Ipa = (Tfloat)atXY(px,ay,z,c,out_value), Ica = (Tfloat)atXY(x,ay,z,c,out_value),\n        Ina = (Tfloat)atXY(nx,ay,z,c,out_value), Iaa = (Tfloat)atXY(ax,ay,z,c,out_value),\n        Ia = Ica + 0.5f*(dx*(-Ipa + Ina) + dx*dx*(2*Ipa - 5*Ica + 4*Ina - Iaa) + dx*dx*dx*(-Ipa + 3*Ica - 3*Ina + Iaa));\n      return Ic + 0.5f*(dy*(-Ip + In) + dy*dy*(2*Ip - 5*Ic + 4*In - Ia) + dy*dy*dy*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Dirichlet boundary conditions for the X,Y-coordinates.\n    /**\n       Similar to cubic_atXY(float,float,int,int,const T) const, except that you can specify the authorized\n       minimum and maximum of the returned value.\n    **/\n    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T& out_value,\n                      const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atXY(fx,fy,z,c,out_value);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Return pixel value, using cubic interpolation and Neumann boundary conditions for the X and Y-coordinates.\n    /**\n       Similar to cubic_atX(float,int,int,int) const, except that the cubic interpolation and boundary checking\n       are achieved for both X and Y-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n       \\c _cubic_atXY(float,float,int,int).\n    **/\n    Tfloat cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"cubic_atXY(): Empty instance.\",\n                                    cimg_instance);\n      return _cubic_atXY(fx,fy,z,c);\n    }\n\n    Tfloat _cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1),\n        nfy = cimg::cut(fy,0,height() - 1);\n      const int x = (int)nfx, y = (int)nfy;\n      const float dx = nfx - x, dy = nfy - y;\n      const int\n        px = x - 1<0?0:x - 1, nx = dx>0?x + 1:x, ax = x + 2>=width()?width() - 1:x + 2,\n        py = y - 1<0?0:y - 1, ny = dy>0?y + 1:y, ay = y + 2>=height()?height() - 1:y + 2;\n      const Tfloat\n        Ipp = (Tfloat)(*this)(px,py,z,c), Icp = (Tfloat)(*this)(x,py,z,c), Inp = (Tfloat)(*this)(nx,py,z,c),\n        Iap = (Tfloat)(*this)(ax,py,z,c),\n        Ip = Icp + 0.5f*(dx*(-Ipp + Inp) + dx*dx*(2*Ipp - 5*Icp + 4*Inp - Iap) + dx*dx*dx*(-Ipp + 3*Icp - 3*Inp + Iap)),\n        Ipc = (Tfloat)(*this)(px,y,z,c),  Icc = (Tfloat)(*this)(x, y,z,c), Inc = (Tfloat)(*this)(nx,y,z,c),\n        Iac = (Tfloat)(*this)(ax,y,z,c),\n        Ic = Icc + 0.5f*(dx*(-Ipc + Inc) + dx*dx*(2*Ipc - 5*Icc + 4*Inc - Iac) + dx*dx*dx*(-Ipc + 3*Icc - 3*Inc + Iac)),\n        Ipn = (Tfloat)(*this)(px,ny,z,c), Icn = (Tfloat)(*this)(x,ny,z,c), Inn = (Tfloat)(*this)(nx,ny,z,c),\n        Ian = (Tfloat)(*this)(ax,ny,z,c),\n        In = Icn + 0.5f*(dx*(-Ipn + Inn) + dx*dx*(2*Ipn - 5*Icn + 4*Inn - Ian) + dx*dx*dx*(-Ipn + 3*Icn - 3*Inn + Ian)),\n        Ipa = (Tfloat)(*this)(px,ay,z,c), Ica = (Tfloat)(*this)(x,ay,z,c), Ina = (Tfloat)(*this)(nx,ay,z,c),\n        Iaa = (Tfloat)(*this)(ax,ay,z,c),\n        Ia = Ica + 0.5f*(dx*(-Ipa + Ina) + dx*dx*(2*Ipa - 5*Ica + 4*Ina - Iaa) + dx*dx*dx*(-Ipa + 3*Ica - 3*Ina + Iaa));\n      return Ic + 0.5f*(dy*(-Ip + In) + dy*dy*(2*Ip - 5*Ic + 4*In - Ia) + dy*dy*dy*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Neumann boundary conditions for the X,Y-coordinates.\n    /**\n       Similar to cubic_atXY(float,float,int,int) const, except that you can specify the authorized minimum and\n       maximum of the returned value.\n    **/\n    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c,\n                      const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atXY(fx,fy,z,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    Tfloat _cubic_atXY(const float fx, const float fy, const int z, const int c,\n                       const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = _cubic_atXY(fx,fy,z,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Return pixel value, using cubic interpolation and Dirichlet boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to cubic_atX(float,int,int,int,const T) const, except that the cubic interpolation and boundary checking\n       are achieved both for X,Y and Z-coordinates.\n    **/\n    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value) const {\n      const int\n        x = (int)fx - (fx>=0?0:1), px = x - 1, nx = x + 1, ax = x + 2,\n        y = (int)fy - (fy>=0?0:1), py = y - 1, ny = y + 1, ay = y + 2,\n        z = (int)fz - (fz>=0?0:1), pz = z - 1, nz = z + 1, az = z + 2;\n      const float dx = fx - x, dy = fy - y, dz = fz - z;\n      const Tfloat\n        Ippp = (Tfloat)atXYZ(px,py,pz,c,out_value), Icpp = (Tfloat)atXYZ(x,py,pz,c,out_value),\n        Inpp = (Tfloat)atXYZ(nx,py,pz,c,out_value), Iapp = (Tfloat)atXYZ(ax,py,pz,c,out_value),\n        Ipp = Icpp + 0.5f*(dx*(-Ippp + Inpp) + dx*dx*(2*Ippp - 5*Icpp + 4*Inpp - Iapp) +\n                           dx*dx*dx*(-Ippp + 3*Icpp - 3*Inpp + Iapp)),\n        Ipcp = (Tfloat)atXYZ(px,y,pz,c,out_value),  Iccp = (Tfloat)atXYZ(x, y,pz,c,out_value),\n        Incp = (Tfloat)atXYZ(nx,y,pz,c,out_value),  Iacp = (Tfloat)atXYZ(ax,y,pz,c,out_value),\n        Icp = Iccp + 0.5f*(dx*(-Ipcp + Incp) + dx*dx*(2*Ipcp - 5*Iccp + 4*Incp - Iacp) +\n                           dx*dx*dx*(-Ipcp + 3*Iccp - 3*Incp + Iacp)),\n        Ipnp = (Tfloat)atXYZ(px,ny,pz,c,out_value), Icnp = (Tfloat)atXYZ(x,ny,pz,c,out_value),\n        Innp = (Tfloat)atXYZ(nx,ny,pz,c,out_value), Ianp = (Tfloat)atXYZ(ax,ny,pz,c,out_value),\n        Inp = Icnp + 0.5f*(dx*(-Ipnp + Innp) + dx*dx*(2*Ipnp - 5*Icnp + 4*Innp - Ianp) +\n                           dx*dx*dx*(-Ipnp + 3*Icnp - 3*Innp + Ianp)),\n        Ipap = (Tfloat)atXYZ(px,ay,pz,c,out_value), Icap = (Tfloat)atXYZ(x,ay,pz,c,out_value),\n        Inap = (Tfloat)atXYZ(nx,ay,pz,c,out_value), Iaap = (Tfloat)atXYZ(ax,ay,pz,c,out_value),\n        Iap = Icap + 0.5f*(dx*(-Ipap + Inap) + dx*dx*(2*Ipap - 5*Icap + 4*Inap - Iaap) +\n                           dx*dx*dx*(-Ipap + 3*Icap - 3*Inap + Iaap)),\n        Ip = Icp + 0.5f*(dy*(-Ipp + Inp) + dy*dy*(2*Ipp - 5*Icp + 4*Inp - Iap) +\n                         dy*dy*dy*(-Ipp + 3*Icp - 3*Inp + Iap)),\n        Ippc = (Tfloat)atXYZ(px,py,z,c,out_value), Icpc = (Tfloat)atXYZ(x,py,z,c,out_value),\n        Inpc = (Tfloat)atXYZ(nx,py,z,c,out_value), Iapc = (Tfloat)atXYZ(ax,py,z,c,out_value),\n        Ipc = Icpc + 0.5f*(dx*(-Ippc + Inpc) + dx*dx*(2*Ippc - 5*Icpc + 4*Inpc - Iapc) +\n                           dx*dx*dx*(-Ippc + 3*Icpc - 3*Inpc + Iapc)),\n        Ipcc = (Tfloat)atXYZ(px,y,z,c,out_value),  Iccc = (Tfloat)atXYZ(x, y,z,c,out_value),\n        Incc = (Tfloat)atXYZ(nx,y,z,c,out_value),  Iacc = (Tfloat)atXYZ(ax,y,z,c,out_value),\n        Icc = Iccc + 0.5f*(dx*(-Ipcc + Incc) + dx*dx*(2*Ipcc - 5*Iccc + 4*Incc - Iacc) +\n                           dx*dx*dx*(-Ipcc + 3*Iccc - 3*Incc + Iacc)),\n        Ipnc = (Tfloat)atXYZ(px,ny,z,c,out_value), Icnc = (Tfloat)atXYZ(x,ny,z,c,out_value),\n        Innc = (Tfloat)atXYZ(nx,ny,z,c,out_value), Ianc = (Tfloat)atXYZ(ax,ny,z,c,out_value),\n        Inc = Icnc + 0.5f*(dx*(-Ipnc + Innc) + dx*dx*(2*Ipnc - 5*Icnc + 4*Innc - Ianc) +\n                           dx*dx*dx*(-Ipnc + 3*Icnc - 3*Innc + Ianc)),\n        Ipac = (Tfloat)atXYZ(px,ay,z,c,out_value), Icac = (Tfloat)atXYZ(x,ay,z,c,out_value),\n        Inac = (Tfloat)atXYZ(nx,ay,z,c,out_value), Iaac = (Tfloat)atXYZ(ax,ay,z,c,out_value),\n        Iac = Icac + 0.5f*(dx*(-Ipac + Inac) + dx*dx*(2*Ipac - 5*Icac + 4*Inac - Iaac) +\n                           dx*dx*dx*(-Ipac + 3*Icac - 3*Inac + Iaac)),\n        Ic = Icc + 0.5f*(dy*(-Ipc + Inc) + dy*dy*(2*Ipc - 5*Icc + 4*Inc - Iac) +\n                         dy*dy*dy*(-Ipc + 3*Icc - 3*Inc + Iac)),\n        Ippn = (Tfloat)atXYZ(px,py,nz,c,out_value), Icpn = (Tfloat)atXYZ(x,py,nz,c,out_value),\n        Inpn = (Tfloat)atXYZ(nx,py,nz,c,out_value), Iapn = (Tfloat)atXYZ(ax,py,nz,c,out_value),\n        Ipn = Icpn + 0.5f*(dx*(-Ippn + Inpn) + dx*dx*(2*Ippn - 5*Icpn + 4*Inpn - Iapn) +\n                           dx*dx*dx*(-Ippn + 3*Icpn - 3*Inpn + Iapn)),\n        Ipcn = (Tfloat)atXYZ(px,y,nz,c,out_value),  Iccn = (Tfloat)atXYZ(x, y,nz,c,out_value),\n        Incn = (Tfloat)atXYZ(nx,y,nz,c,out_value),  Iacn = (Tfloat)atXYZ(ax,y,nz,c,out_value),\n        Icn = Iccn + 0.5f*(dx*(-Ipcn + Incn) + dx*dx*(2*Ipcn - 5*Iccn + 4*Incn - Iacn) +\n                           dx*dx*dx*(-Ipcn + 3*Iccn - 3*Incn + Iacn)),\n        Ipnn = (Tfloat)atXYZ(px,ny,nz,c,out_value), Icnn = (Tfloat)atXYZ(x,ny,nz,c,out_value),\n        Innn = (Tfloat)atXYZ(nx,ny,nz,c,out_value), Iann = (Tfloat)atXYZ(ax,ny,nz,c,out_value),\n        Inn = Icnn + 0.5f*(dx*(-Ipnn + Innn) + dx*dx*(2*Ipnn - 5*Icnn + 4*Innn - Iann) +\n                           dx*dx*dx*(-Ipnn + 3*Icnn - 3*Innn + Iann)),\n        Ipan = (Tfloat)atXYZ(px,ay,nz,c,out_value), Ican = (Tfloat)atXYZ(x,ay,nz,c,out_value),\n        Inan = (Tfloat)atXYZ(nx,ay,nz,c,out_value), Iaan = (Tfloat)atXYZ(ax,ay,nz,c,out_value),\n        Ian = Ican + 0.5f*(dx*(-Ipan + Inan) + dx*dx*(2*Ipan - 5*Ican + 4*Inan - Iaan) +\n                           dx*dx*dx*(-Ipan + 3*Ican - 3*Inan + Iaan)),\n        In = Icn + 0.5f*(dy*(-Ipn + Inn) + dy*dy*(2*Ipn - 5*Icn + 4*Inn - Ian) +\n                         dy*dy*dy*(-Ipn + 3*Icn - 3*Inn + Ian)),\n        Ippa = (Tfloat)atXYZ(px,py,az,c,out_value), Icpa = (Tfloat)atXYZ(x,py,az,c,out_value),\n        Inpa = (Tfloat)atXYZ(nx,py,az,c,out_value), Iapa = (Tfloat)atXYZ(ax,py,az,c,out_value),\n        Ipa = Icpa + 0.5f*(dx*(-Ippa + Inpa) + dx*dx*(2*Ippa - 5*Icpa + 4*Inpa - Iapa) +\n                           dx*dx*dx*(-Ippa + 3*Icpa - 3*Inpa + Iapa)),\n        Ipca = (Tfloat)atXYZ(px,y,az,c,out_value),  Icca = (Tfloat)atXYZ(x, y,az,c,out_value),\n        Inca = (Tfloat)atXYZ(nx,y,az,c,out_value),  Iaca = (Tfloat)atXYZ(ax,y,az,c,out_value),\n        Ica = Icca + 0.5f*(dx*(-Ipca + Inca) + dx*dx*(2*Ipca - 5*Icca + 4*Inca - Iaca) +\n                           dx*dx*dx*(-Ipca + 3*Icca - 3*Inca + Iaca)),\n        Ipna = (Tfloat)atXYZ(px,ny,az,c,out_value), Icna = (Tfloat)atXYZ(x,ny,az,c,out_value),\n        Inna = (Tfloat)atXYZ(nx,ny,az,c,out_value), Iana = (Tfloat)atXYZ(ax,ny,az,c,out_value),\n        Ina = Icna + 0.5f*(dx*(-Ipna + Inna) + dx*dx*(2*Ipna - 5*Icna + 4*Inna - Iana) +\n                           dx*dx*dx*(-Ipna + 3*Icna - 3*Inna + Iana)),\n        Ipaa = (Tfloat)atXYZ(px,ay,az,c,out_value), Icaa = (Tfloat)atXYZ(x,ay,az,c,out_value),\n        Inaa = (Tfloat)atXYZ(nx,ay,az,c,out_value), Iaaa = (Tfloat)atXYZ(ax,ay,az,c,out_value),\n        Iaa = Icaa + 0.5f*(dx*(-Ipaa + Inaa) + dx*dx*(2*Ipaa - 5*Icaa + 4*Inaa - Iaaa) +\n                           dx*dx*dx*(-Ipaa + 3*Icaa - 3*Inaa + Iaaa)),\n        Ia = Ica + 0.5f*(dy*(-Ipa + Ina) + dy*dy*(2*Ipa - 5*Ica + 4*Ina - Iaa) +\n                         dy*dy*dy*(-Ipa + 3*Ica - 3*Ina + Iaa));\n      return Ic + 0.5f*(dz*(-Ip + In) + dz*dz*(2*Ip - 5*Ic + 4*In - Ia) + dz*dz*dz*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Dirichlet boundary conditions for the XYZ-coordinates.\n    /**\n       Similar to cubic_atXYZ(float,float,float,int,const T) const, except that you can specify the authorized\n       minimum and maximum of the returned value.\n    **/\n    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value,\n                       const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atXYZ(fx,fy,fz,c,out_value);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Return pixel value, using cubic interpolation and Neumann boundary conditions for the X,Y and Z-coordinates.\n    /**\n       Similar to cubic_atX(float,int,int,int) const, except that the cubic interpolation and boundary checking\n       are achieved both for X,Y and Z-coordinates.\n       \\note\n       - If you know your image instance is \\e not empty, you may rather use the slightly faster method\n         \\c _cubic_atXYZ(float,float,float,int).\n    **/\n    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"cubic_atXYZ(): Empty instance.\",\n                                    cimg_instance);\n      return _cubic_atXYZ(fx,fy,fz,c);\n    }\n\n    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {\n      const float\n        nfx = cimg::cut(fx,0,width() - 1),\n        nfy = cimg::cut(fy,0,height() - 1),\n        nfz = cimg::cut(fz,0,depth() - 1);\n      const int x = (int)nfx, y = (int)nfy, z = (int)nfz;\n      const float dx = nfx - x, dy = nfy - y, dz = nfz - z;\n      const int\n        px = x - 1<0?0:x - 1, nx = dx>0?x + 1:x, ax = x + 2>=width()?width() - 1:x + 2,\n        py = y - 1<0?0:y - 1, ny = dy>0?y + 1:y, ay = y + 2>=height()?height() - 1:y + 2,\n        pz = z - 1<0?0:z - 1, nz = dz>0?z + 1:z, az = z + 2>=depth()?depth() - 1:z + 2;\n      const Tfloat\n        Ippp = (Tfloat)(*this)(px,py,pz,c), Icpp = (Tfloat)(*this)(x,py,pz,c),\n        Inpp = (Tfloat)(*this)(nx,py,pz,c), Iapp = (Tfloat)(*this)(ax,py,pz,c),\n        Ipp = Icpp + 0.5f*(dx*(-Ippp + Inpp) + dx*dx*(2*Ippp - 5*Icpp + 4*Inpp - Iapp) +\n                           dx*dx*dx*(-Ippp + 3*Icpp - 3*Inpp + Iapp)),\n        Ipcp = (Tfloat)(*this)(px,y,pz,c),  Iccp = (Tfloat)(*this)(x, y,pz,c),\n        Incp = (Tfloat)(*this)(nx,y,pz,c),  Iacp = (Tfloat)(*this)(ax,y,pz,c),\n        Icp = Iccp + 0.5f*(dx*(-Ipcp + Incp) + dx*dx*(2*Ipcp - 5*Iccp + 4*Incp - Iacp) +\n                           dx*dx*dx*(-Ipcp + 3*Iccp - 3*Incp + Iacp)),\n        Ipnp = (Tfloat)(*this)(px,ny,pz,c), Icnp = (Tfloat)(*this)(x,ny,pz,c),\n        Innp = (Tfloat)(*this)(nx,ny,pz,c), Ianp = (Tfloat)(*this)(ax,ny,pz,c),\n        Inp = Icnp + 0.5f*(dx*(-Ipnp + Innp) + dx*dx*(2*Ipnp - 5*Icnp + 4*Innp - Ianp) +\n                           dx*dx*dx*(-Ipnp + 3*Icnp - 3*Innp + Ianp)),\n        Ipap = (Tfloat)(*this)(px,ay,pz,c), Icap = (Tfloat)(*this)(x,ay,pz,c),\n        Inap = (Tfloat)(*this)(nx,ay,pz,c), Iaap = (Tfloat)(*this)(ax,ay,pz,c),\n        Iap = Icap + 0.5f*(dx*(-Ipap + Inap) + dx*dx*(2*Ipap - 5*Icap + 4*Inap - Iaap) +\n                           dx*dx*dx*(-Ipap + 3*Icap - 3*Inap + Iaap)),\n        Ip = Icp + 0.5f*(dy*(-Ipp + Inp) + dy*dy*(2*Ipp - 5*Icp + 4*Inp - Iap) +\n                         dy*dy*dy*(-Ipp + 3*Icp - 3*Inp + Iap)),\n        Ippc = (Tfloat)(*this)(px,py,z,c), Icpc = (Tfloat)(*this)(x,py,z,c),\n        Inpc = (Tfloat)(*this)(nx,py,z,c), Iapc = (Tfloat)(*this)(ax,py,z,c),\n        Ipc = Icpc + 0.5f*(dx*(-Ippc + Inpc) + dx*dx*(2*Ippc - 5*Icpc + 4*Inpc - Iapc) +\n                           dx*dx*dx*(-Ippc + 3*Icpc - 3*Inpc + Iapc)),\n        Ipcc = (Tfloat)(*this)(px,y,z,c),  Iccc = (Tfloat)(*this)(x, y,z,c),\n        Incc = (Tfloat)(*this)(nx,y,z,c),  Iacc = (Tfloat)(*this)(ax,y,z,c),\n        Icc = Iccc + 0.5f*(dx*(-Ipcc + Incc) + dx*dx*(2*Ipcc - 5*Iccc + 4*Incc - Iacc) +\n                           dx*dx*dx*(-Ipcc + 3*Iccc - 3*Incc + Iacc)),\n        Ipnc = (Tfloat)(*this)(px,ny,z,c), Icnc = (Tfloat)(*this)(x,ny,z,c),\n        Innc = (Tfloat)(*this)(nx,ny,z,c), Ianc = (Tfloat)(*this)(ax,ny,z,c),\n        Inc = Icnc + 0.5f*(dx*(-Ipnc + Innc) + dx*dx*(2*Ipnc - 5*Icnc + 4*Innc - Ianc) +\n                           dx*dx*dx*(-Ipnc + 3*Icnc - 3*Innc + Ianc)),\n        Ipac = (Tfloat)(*this)(px,ay,z,c), Icac = (Tfloat)(*this)(x,ay,z,c),\n        Inac = (Tfloat)(*this)(nx,ay,z,c), Iaac = (Tfloat)(*this)(ax,ay,z,c),\n        Iac = Icac + 0.5f*(dx*(-Ipac + Inac) + dx*dx*(2*Ipac - 5*Icac + 4*Inac - Iaac) +\n                           dx*dx*dx*(-Ipac + 3*Icac - 3*Inac + Iaac)),\n        Ic = Icc + 0.5f*(dy*(-Ipc + Inc) + dy*dy*(2*Ipc - 5*Icc + 4*Inc - Iac) +\n                         dy*dy*dy*(-Ipc + 3*Icc - 3*Inc + Iac)),\n        Ippn = (Tfloat)(*this)(px,py,nz,c), Icpn = (Tfloat)(*this)(x,py,nz,c),\n        Inpn = (Tfloat)(*this)(nx,py,nz,c), Iapn = (Tfloat)(*this)(ax,py,nz,c),\n        Ipn = Icpn + 0.5f*(dx*(-Ippn + Inpn) + dx*dx*(2*Ippn - 5*Icpn + 4*Inpn - Iapn) +\n                           dx*dx*dx*(-Ippn + 3*Icpn - 3*Inpn + Iapn)),\n        Ipcn = (Tfloat)(*this)(px,y,nz,c),  Iccn = (Tfloat)(*this)(x, y,nz,c),\n        Incn = (Tfloat)(*this)(nx,y,nz,c),  Iacn = (Tfloat)(*this)(ax,y,nz,c),\n        Icn = Iccn + 0.5f*(dx*(-Ipcn + Incn) + dx*dx*(2*Ipcn - 5*Iccn + 4*Incn - Iacn) +\n                           dx*dx*dx*(-Ipcn + 3*Iccn - 3*Incn + Iacn)),\n        Ipnn = (Tfloat)(*this)(px,ny,nz,c), Icnn = (Tfloat)(*this)(x,ny,nz,c),\n        Innn = (Tfloat)(*this)(nx,ny,nz,c), Iann = (Tfloat)(*this)(ax,ny,nz,c),\n        Inn = Icnn + 0.5f*(dx*(-Ipnn + Innn) + dx*dx*(2*Ipnn - 5*Icnn + 4*Innn - Iann) +\n                           dx*dx*dx*(-Ipnn + 3*Icnn - 3*Innn + Iann)),\n        Ipan = (Tfloat)(*this)(px,ay,nz,c), Ican = (Tfloat)(*this)(x,ay,nz,c),\n        Inan = (Tfloat)(*this)(nx,ay,nz,c), Iaan = (Tfloat)(*this)(ax,ay,nz,c),\n        Ian = Ican + 0.5f*(dx*(-Ipan + Inan) + dx*dx*(2*Ipan - 5*Ican + 4*Inan - Iaan) +\n                           dx*dx*dx*(-Ipan + 3*Ican - 3*Inan + Iaan)),\n        In = Icn + 0.5f*(dy*(-Ipn + Inn) + dy*dy*(2*Ipn - 5*Icn + 4*Inn - Ian) +\n                         dy*dy*dy*(-Ipn + 3*Icn - 3*Inn + Ian)),\n        Ippa = (Tfloat)(*this)(px,py,az,c), Icpa = (Tfloat)(*this)(x,py,az,c),\n        Inpa = (Tfloat)(*this)(nx,py,az,c), Iapa = (Tfloat)(*this)(ax,py,az,c),\n        Ipa = Icpa + 0.5f*(dx*(-Ippa + Inpa) + dx*dx*(2*Ippa - 5*Icpa + 4*Inpa - Iapa) +\n                           dx*dx*dx*(-Ippa + 3*Icpa - 3*Inpa + Iapa)),\n        Ipca = (Tfloat)(*this)(px,y,az,c),  Icca = (Tfloat)(*this)(x, y,az,c),\n        Inca = (Tfloat)(*this)(nx,y,az,c),  Iaca = (Tfloat)(*this)(ax,y,az,c),\n        Ica = Icca + 0.5f*(dx*(-Ipca + Inca) + dx*dx*(2*Ipca - 5*Icca + 4*Inca - Iaca) +\n                           dx*dx*dx*(-Ipca + 3*Icca - 3*Inca + Iaca)),\n        Ipna = (Tfloat)(*this)(px,ny,az,c), Icna = (Tfloat)(*this)(x,ny,az,c),\n        Inna = (Tfloat)(*this)(nx,ny,az,c), Iana = (Tfloat)(*this)(ax,ny,az,c),\n        Ina = Icna + 0.5f*(dx*(-Ipna + Inna) + dx*dx*(2*Ipna - 5*Icna + 4*Inna - Iana) +\n                           dx*dx*dx*(-Ipna + 3*Icna - 3*Inna + Iana)),\n        Ipaa = (Tfloat)(*this)(px,ay,az,c), Icaa = (Tfloat)(*this)(x,ay,az,c),\n        Inaa = (Tfloat)(*this)(nx,ay,az,c), Iaaa = (Tfloat)(*this)(ax,ay,az,c),\n        Iaa = Icaa + 0.5f*(dx*(-Ipaa + Inaa) + dx*dx*(2*Ipaa - 5*Icaa + 4*Inaa - Iaaa) +\n                           dx*dx*dx*(-Ipaa + 3*Icaa - 3*Inaa + Iaaa)),\n        Ia = Ica + 0.5f*(dy*(-Ipa + Ina) + dy*dy*(2*Ipa - 5*Ica + 4*Ina - Iaa) +\n                         dy*dy*dy*(-Ipa + 3*Ica - 3*Ina + Iaa));\n      return Ic + 0.5f*(dz*(-Ip + In) + dz*dz*(2*Ip - 5*Ic + 4*In - Ia) + dz*dz*dz*(-Ip + 3*Ic - 3*In + Ia));\n    }\n\n    //! Return damped pixel value, using cubic interpolation and Neumann boundary conditions for the XYZ-coordinates.\n    /**\n       Similar to cubic_atXYZ(float,float,float,int) const, except that you can specify the authorized minimum and\n       maximum of the returned value.\n    **/\n    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c,\n                       const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = cubic_atXYZ(fx,fy,fz,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c,\n                        const Tfloat min_value, const Tfloat max_value) const {\n      const Tfloat val = _cubic_atXYZ(fx,fy,fz,c);\n      return val<min_value?min_value:val>max_value?max_value:val;\n    }\n\n    //! Set pixel value, using linear interpolation for the X-coordinates.\n    /**\n       Set pixel value at specified coordinates (\\c fx,\\c y,\\c z,\\c c) in the image instance, in a way that\n       the value is spread amongst several neighbors if the pixel coordinates are float-valued.\n       \\param value Pixel value to set.\n       \\param fx X-coordinate of the pixel value (float-valued).\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param is_added Tells if the pixel value is added to (\\c true), or simply replace (\\c false) the current image\n         pixel(s).\n       \\return A reference to the current image instance.\n       \\note\n       - Calling this method with out-of-bounds coordinates does nothing.\n    **/\n    CImg<T>& set_linear_atX(const T& value, const float fx, const int y=0, const int z=0, const int c=0,\n                            const bool is_added=false) {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1;\n      const float\n        dx = fx - x;\n      if (y>=0 && y<height() && z>=0 && z<depth() && c>=0 && c<spectrum()) {\n        if (x>=0 && x<width()) {\n          const float w1 = 1 - dx, w2 = is_added?1:(1 - w1);\n          (*this)(x,y,z,c) = (T)(w1*value + w2*(*this)(x,y,z,c));\n        }\n        if (nx>=0 && nx<width()) {\n          const float w1 = dx, w2 = is_added?1:(1 - w1);\n          (*this)(nx,y,z,c) = (T)(w1*value + w2*(*this)(nx,y,z,c));\n        }\n      }\n      return *this;\n    }\n\n    //! Set pixel value, using linear interpolation for the X and Y-coordinates.\n    /**\n       Similar to set_linear_atX(const T&,float,int,int,int,bool), except that the linear interpolation\n       is achieved both for X and Y-coordinates.\n    **/\n    CImg<T>& set_linear_atXY(const T& value, const float fx, const float fy=0, const int z=0, const int c=0,\n                             const bool is_added=false) {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1,\n        y = (int)fy - (fy>=0?0:1), ny = y + 1;\n      const float\n        dx = fx - x,\n        dy = fy - y;\n      if (z>=0 && z<depth() && c>=0 && c<spectrum()) {\n        if (y>=0 && y<height()) {\n          if (x>=0 && x<width()) {\n            const float w1 = (1 - dx)*(1 - dy), w2 = is_added?1:(1 - w1);\n            (*this)(x,y,z,c) = (T)(w1*value + w2*(*this)(x,y,z,c));\n          }\n          if (nx>=0 && nx<width()) {\n            const float w1 = dx*(1 - dy), w2 = is_added?1:(1 - w1);\n            (*this)(nx,y,z,c) = (T)(w1*value + w2*(*this)(nx,y,z,c));\n          }\n        }\n        if (ny>=0 && ny<height()) {\n          if (x>=0 && x<width()) {\n            const float w1 = (1 - dx)*dy, w2 = is_added?1:(1 - w1);\n            (*this)(x,ny,z,c) = (T)(w1*value + w2*(*this)(x,ny,z,c));\n          }\n          if (nx>=0 && nx<width()) {\n            const float w1 = dx*dy, w2 = is_added?1:(1 - w1);\n            (*this)(nx,ny,z,c) = (T)(w1*value + w2*(*this)(nx,ny,z,c));\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Set pixel value, using linear interpolation for the X,Y and Z-coordinates.\n    /**\n       Similar to set_linear_atXY(const T&,float,float,int,int,bool), except that the linear interpolation\n       is achieved both for X,Y and Z-coordinates.\n    **/\n    CImg<T>& set_linear_atXYZ(const T& value, const float fx, const float fy=0, const float fz=0, const int c=0,\n                              const bool is_added=false) {\n      const int\n        x = (int)fx - (fx>=0?0:1), nx = x + 1,\n        y = (int)fy - (fy>=0?0:1), ny = y + 1,\n        z = (int)fz - (fz>=0?0:1), nz = z + 1;\n      const float\n        dx = fx - x,\n        dy = fy - y,\n        dz = fz - z;\n      if (c>=0 && c<spectrum()) {\n        if (z>=0 && z<depth()) {\n          if (y>=0 && y<height()) {\n            if (x>=0 && x<width()) {\n              const float w1 = (1 - dx)*(1 - dy)*(1 - dz), w2 = is_added?1:(1 - w1);\n              (*this)(x,y,z,c) = (T)(w1*value + w2*(*this)(x,y,z,c));\n            }\n            if (nx>=0 && nx<width()) {\n              const float w1 = dx*(1 - dy)*(1 - dz), w2 = is_added?1:(1 - w1);\n              (*this)(nx,y,z,c) = (T)(w1*value + w2*(*this)(nx,y,z,c));\n            }\n          }\n          if (ny>=0 && ny<height()) {\n            if (x>=0 && x<width()) {\n              const float w1 = (1 - dx)*dy*(1 - dz), w2 = is_added?1:(1 - w1);\n              (*this)(x,ny,z,c) = (T)(w1*value + w2*(*this)(x,ny,z,c));\n            }\n            if (nx>=0 && nx<width()) {\n              const float w1 = dx*dy*(1 - dz), w2 = is_added?1:(1 - w1);\n              (*this)(nx,ny,z,c) = (T)(w1*value + w2*(*this)(nx,ny,z,c));\n            }\n          }\n        }\n        if (nz>=0 && nz<depth()) {\n          if (y>=0 && y<height()) {\n            if (x>=0 && x<width()) {\n              const float w1 = (1 - dx)*(1 - dy)*dz, w2 = is_added?1:(1 - w1);\n              (*this)(x,y,nz,c) = (T)(w1*value + w2*(*this)(x,y,nz,c));\n            }\n            if (nx>=0 && nx<width()) {\n              const float w1 = dx*(1 - dy)*dz, w2 = is_added?1:(1 - w1);\n              (*this)(nx,y,nz,c) = (T)(w1*value + w2*(*this)(nx,y,nz,c));\n            }\n          }\n          if (ny>=0 && ny<height()) {\n            if (x>=0 && x<width()) {\n              const float w1 = (1 - dx)*dy*dz, w2 = is_added?1:(1 - w1);\n              (*this)(x,ny,nz,c) = (T)(w1*value + w2*(*this)(x,ny,nz,c));\n            }\n            if (nx>=0 && nx<width()) {\n              const float w1 = dx*dy*dz, w2 = is_added?1:(1 - w1);\n              (*this)(nx,ny,nz,c) = (T)(w1*value + w2*(*this)(nx,ny,nz,c));\n            }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Return a C-string containing a list of all values of the image instance.\n    /**\n       Return a new \\c CImg<char> image whose buffer data() is a \\c char* string describing the list of all pixel values\n       of the image instance (written in base 10), separated by specified \\c separator character.\n       \\param separator A \\c char character which specifies the separator between values in the returned C-string.\n       \\param max_size Maximum size of the returned image.\n       \\param format For float-values, tell the printf format used to generate the ascii representation of the numbers.\n         (or \\c 0 for default representation).\n       \\note\n       - The returned image is never empty.\n       - For an empty image instance, the returned string is <tt>\"\"</tt>.\n       - If \\c max_size is equal to \\c 0, there are no limits on the size of the returned string.\n       - Otherwise, if the maximum number of string characters is exceeded, the value string is cut off\n         and terminated by character \\c '\\0'. In that case, the returned image size is <tt>max_size + 1</tt>.\n    **/\n    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0,\n                             const char *const format=0) const {\n      if (is_empty()) return CImg<charT>::string(\"\");\n      CImgList<charT> items;\n      CImg<charT> s_item(256); *s_item = 0;\n      const T *ptrs = _data;\n      unsigned int string_size = 0;\n      const char *const _format = format?format:cimg::type<T>::format();\n      for (ulongT off = 0, siz = size(); off<siz && string_size<=max_size; ++off) {\n        const unsigned int printed_size = 1U + cimg_snprintf(s_item,s_item._width,_format,\n                                                             cimg::type<T>::format(*(ptrs++)));\n        CImg<charT> item(s_item._data,printed_size);\n        item[printed_size - 1] = separator;\n        item.move_to(items);\n        if (max_size) string_size+=printed_size;\n      }\n      CImg<charT> res;\n      (items>'x').move_to(res);\n      if (max_size && res._width>max_size) res.crop(0,max_size);\n      res.back() = 0;\n      return res;\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Instance Checking\n    //@{\n    //-------------------------------------\n\n    //! Test shared state of the pixel buffer.\n    /**\n       Return \\c true if image instance has a shared memory buffer, and \\c false otherwise.\n       \\note\n       - A shared image do not own his pixel buffer data() and will not deallocate it on destruction.\n       - Most of the time, a \\c CImg<T> image instance will \\e not be shared.\n       - A shared image can only be obtained by a limited set of constructors and methods (see list below).\n    **/\n    bool is_shared() const {\n      return _is_shared;\n    }\n\n    //! Test if image instance is empty.\n    /**\n       Return \\c true, if image instance is empty, i.e. does \\e not contain any pixel values, has dimensions\n       \\c 0 x \\c 0 x \\c 0 x \\c 0 and a pixel buffer pointer set to \\c 0 (null pointer), and \\c false otherwise.\n    **/\n    bool is_empty() const {\n      return !(_data && _width && _height && _depth && _spectrum);\n    }\n\n    //! Test if image instance contains a 'inf' value.\n    /**\n       Return \\c true, if image instance contains a 'inf' value, and \\c false otherwise.\n    **/\n    bool is_inf() const {\n      if (cimg::type<T>::is_float()) cimg_for(*this,p,T) if (cimg::type<T>::is_inf((float)*p)) return true;\n      return false;\n    }\n\n    //! Test if image instance contains a NaN value.\n    /**\n       Return \\c true, if image instance contains a NaN value, and \\c false otherwise.\n    **/\n    bool is_nan() const {\n      if (cimg::type<T>::is_float()) cimg_for(*this,p,T) if (cimg::type<T>::is_nan((float)*p)) return true;\n      return false;\n    }\n\n    //! Test if image width is equal to specified value.\n    bool is_sameX(const unsigned int size_x) const {\n      return _width==size_x;\n    }\n\n    //! Test if image width is equal to specified value.\n    template<typename t>\n    bool is_sameX(const CImg<t>& img) const {\n      return is_sameX(img._width);\n    }\n\n    //! Test if image width is equal to specified value.\n    bool is_sameX(const CImgDisplay& disp) const {\n      return is_sameX(disp._width);\n    }\n\n    //! Test if image height is equal to specified value.\n    bool is_sameY(const unsigned int size_y) const {\n      return _height==size_y;\n    }\n\n    //! Test if image height is equal to specified value.\n    template<typename t>\n    bool is_sameY(const CImg<t>& img) const {\n      return is_sameY(img._height);\n    }\n\n    //! Test if image height is equal to specified value.\n    bool is_sameY(const CImgDisplay& disp) const {\n      return is_sameY(disp._height);\n    }\n\n    //! Test if image depth is equal to specified value.\n    bool is_sameZ(const unsigned int size_z) const {\n      return _depth==size_z;\n    }\n\n    //! Test if image depth is equal to specified value.\n    template<typename t>\n    bool is_sameZ(const CImg<t>& img) const {\n      return is_sameZ(img._depth);\n    }\n\n    //! Test if image spectrum is equal to specified value.\n    bool is_sameC(const unsigned int size_c) const {\n      return _spectrum==size_c;\n    }\n\n    //! Test if image spectrum is equal to specified value.\n    template<typename t>\n    bool is_sameC(const CImg<t>& img) const {\n      return is_sameC(img._spectrum);\n    }\n\n    //! Test if image width and height are equal to specified values.\n    /**\n       Test if is_sameX(unsigned int) const and is_sameY(unsigned int) const are both verified.\n    **/\n    bool is_sameXY(const unsigned int size_x, const unsigned int size_y) const {\n      return _width==size_x && _height==size_y;\n    }\n\n    //! Test if image width and height are the same as that of another image.\n    /**\n       Test if is_sameX(const CImg<t>&) const and is_sameY(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXY(const CImg<t>& img) const {\n      return is_sameXY(img._width,img._height);\n    }\n\n    //! Test if image width and height are the same as that of an existing display window.\n    /**\n       Test if is_sameX(const CImgDisplay&) const and is_sameY(const CImgDisplay&) const are both verified.\n    **/\n    bool is_sameXY(const CImgDisplay& disp) const {\n      return is_sameXY(disp._width,disp._height);\n    }\n\n    //! Test if image width and depth are equal to specified values.\n    /**\n       Test if is_sameX(unsigned int) const and is_sameZ(unsigned int) const are both verified.\n    **/\n    bool is_sameXZ(const unsigned int size_x, const unsigned int size_z) const {\n      return _width==size_x && _depth==size_z;\n    }\n\n    //! Test if image width and depth are the same as that of another image.\n    /**\n       Test if is_sameX(const CImg<t>&) const and is_sameZ(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXZ(const CImg<t>& img) const {\n      return is_sameXZ(img._width,img._depth);\n    }\n\n    //! Test if image width and spectrum are equal to specified values.\n    /**\n       Test if is_sameX(unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameXC(const unsigned int size_x, const unsigned int size_c) const {\n      return _width==size_x && _spectrum==size_c;\n    }\n\n    //! Test if image width and spectrum are the same as that of another image.\n    /**\n       Test if is_sameX(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXC(const CImg<t>& img) const {\n      return is_sameXC(img._width,img._spectrum);\n    }\n\n    //! Test if image height and depth are equal to specified values.\n    /**\n       Test if is_sameY(unsigned int) const and is_sameZ(unsigned int) const are both verified.\n    **/\n    bool is_sameYZ(const unsigned int size_y, const unsigned int size_z) const {\n      return _height==size_y && _depth==size_z;\n    }\n\n    //! Test if image height and depth are the same as that of another image.\n    /**\n       Test if is_sameY(const CImg<t>&) const and is_sameZ(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameYZ(const CImg<t>& img) const {\n      return is_sameYZ(img._height,img._depth);\n    }\n\n    //! Test if image height and spectrum are equal to specified values.\n    /**\n       Test if is_sameY(unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameYC(const unsigned int size_y, const unsigned int size_c) const {\n      return _height==size_y && _spectrum==size_c;\n    }\n\n    //! Test if image height and spectrum are the same as that of another image.\n    /**\n       Test if is_sameY(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameYC(const CImg<t>& img) const {\n      return is_sameYC(img._height,img._spectrum);\n    }\n\n    //! Test if image depth and spectrum are equal to specified values.\n    /**\n       Test if is_sameZ(unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameZC(const unsigned int size_z, const unsigned int size_c) const {\n      return _depth==size_z && _spectrum==size_c;\n    }\n\n    //! Test if image depth and spectrum are the same as that of another image.\n    /**\n       Test if is_sameZ(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameZC(const CImg<t>& img) const {\n      return is_sameZC(img._depth,img._spectrum);\n    }\n\n    //! Test if image width, height and depth are equal to specified values.\n    /**\n       Test if is_sameXY(unsigned int,unsigned int) const and is_sameZ(unsigned int) const are both verified.\n    **/\n    bool is_sameXYZ(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z) const {\n      return is_sameXY(size_x,size_y) && _depth==size_z;\n    }\n\n    //! Test if image width, height and depth are the same as that of another image.\n    /**\n       Test if is_sameXY(const CImg<t>&) const and is_sameZ(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXYZ(const CImg<t>& img) const {\n      return is_sameXYZ(img._width,img._height,img._depth);\n    }\n\n    //! Test if image width, height and spectrum are equal to specified values.\n    /**\n       Test if is_sameXY(unsigned int,unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameXYC(const unsigned int size_x, const unsigned int size_y, const unsigned int size_c) const {\n      return is_sameXY(size_x,size_y) && _spectrum==size_c;\n    }\n\n    //! Test if image width, height and spectrum are the same as that of another image.\n    /**\n       Test if is_sameXY(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXYC(const CImg<t>& img) const {\n      return is_sameXYC(img._width,img._height,img._spectrum);\n    }\n\n    //! Test if image width, depth and spectrum are equal to specified values.\n    /**\n       Test if is_sameXZ(unsigned int,unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameXZC(const unsigned int size_x, const unsigned int size_z, const unsigned int size_c) const {\n      return is_sameXZ(size_x,size_z) && _spectrum==size_c;\n    }\n\n    //! Test if image width, depth and spectrum are the same as that of another image.\n    /**\n       Test if is_sameXZ(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXZC(const CImg<t>& img) const {\n      return is_sameXZC(img._width,img._depth,img._spectrum);\n    }\n\n    //! Test if image height, depth and spectrum are equal to specified values.\n    /**\n       Test if is_sameYZ(unsigned int,unsigned int) const and is_sameC(unsigned int) const are both verified.\n    **/\n    bool is_sameYZC(const unsigned int size_y, const unsigned int size_z, const unsigned int size_c) const {\n      return is_sameYZ(size_y,size_z) && _spectrum==size_c;\n    }\n\n    //! Test if image height, depth and spectrum are the same as that of another image.\n    /**\n       Test if is_sameYZ(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameYZC(const CImg<t>& img) const {\n      return is_sameYZC(img._height,img._depth,img._spectrum);\n    }\n\n    //! Test if image width, height, depth and spectrum are equal to specified values.\n    /**\n       Test if is_sameXYZ(unsigned int,unsigned int,unsigned int) const and is_sameC(unsigned int) const are both\n       verified.\n    **/\n    bool is_sameXYZC(const unsigned int size_x, const unsigned int size_y,\n                     const unsigned int size_z, const unsigned int size_c) const {\n      return is_sameXYZ(size_x,size_y,size_z) && _spectrum==size_c;\n    }\n\n    //! Test if image width, height, depth and spectrum are the same as that of another image.\n    /**\n       Test if is_sameXYZ(const CImg<t>&) const and is_sameC(const CImg<t>&) const are both verified.\n    **/\n    template<typename t>\n    bool is_sameXYZC(const CImg<t>& img) const {\n      return is_sameXYZC(img._width,img._height,img._depth,img._spectrum);\n    }\n\n    //! Test if specified coordinates are inside image bounds.\n    /**\n       Return \\c true if pixel located at (\\c x,\\c y,\\c z,\\c c) is inside bounds of the image instance,\n       and \\c false otherwise.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note\n       - Return \\c true only if all these conditions are verified:\n         - The image instance is \\e not empty.\n         - <tt>0<=x<=\\ref width() - 1</tt>.\n         - <tt>0<=y<=\\ref height() - 1</tt>.\n         - <tt>0<=z<=\\ref depth() - 1</tt>.\n         - <tt>0<=c<=\\ref spectrum() - 1</tt>.\n    **/\n    bool containsXYZC(const int x, const int y=0, const int z=0, const int c=0) const {\n      return !is_empty() && x>=0 && x<width() && y>=0 && y<height() && z>=0 && z<depth() && c>=0 && c<spectrum();\n    }\n\n    //! Test if pixel value is inside image bounds and get its X,Y,Z and C-coordinates.\n    /**\n       Return \\c true, if specified reference refers to a pixel value inside bounds of the image instance,\n       and \\c false otherwise.\n       \\param pixel Reference to pixel value to test.\n       \\param[out] x X-coordinate of the pixel value, if test succeeds.\n       \\param[out] y Y-coordinate of the pixel value, if test succeeds.\n       \\param[out] z Z-coordinate of the pixel value, if test succeeds.\n       \\param[out] c C-coordinate of the pixel value, if test succeeds.\n       \\note\n       - Useful to convert an offset to a buffer value into pixel value coordinates:\n       \\code\n       const CImg<float> img(100,100,1,3);      // Construct a 100x100 RGB color image.\n       const unsigned long offset = 1249;       // Offset to the pixel (49,12,0,0).\n       unsigned int x,y,z,c;\n       if (img.contains(img[offset],x,y,z,c)) { // Convert offset to (x,y,z,c) coordinates.\n         std::printf(\"Offset %u refers to pixel located at (%u,%u,%u,%u).\\n\",\n                     offset,x,y,z,c);\n       }\n       \\endcode\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& x, t& y, t& z, t& c) const {\n      const ulongT wh = (ulongT)_width*_height, whd = wh*_depth, siz = whd*_spectrum;\n      const T *const ppixel = &pixel;\n      if (is_empty() || ppixel<_data || ppixel>=_data + siz) return false;\n      ulongT off = (ulongT)(ppixel - _data);\n      const ulongT nc = off/whd;\n      off%=whd;\n      const ulongT nz = off/wh;\n      off%=wh;\n      const ulongT ny = off/_width, nx = off%_width;\n      x = (t)nx; y = (t)ny; z = (t)nz; c = (t)nc;\n      return true;\n    }\n\n    //! Test if pixel value is inside image bounds and get its X,Y and Z-coordinates.\n    /**\n       Similar to contains(const T&,t&,t&,t&,t&) const, except that only the X,Y and Z-coordinates are set.\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& x, t& y, t& z) const {\n      const ulongT wh = (ulongT)_width*_height, whd = wh*_depth, siz = whd*_spectrum;\n      const T *const ppixel = &pixel;\n      if (is_empty() || ppixel<_data || ppixel>=_data + siz) return false;\n      ulongT off = ((ulongT)(ppixel - _data))%whd;\n      const ulongT nz = off/wh;\n      off%=wh;\n      const ulongT ny = off/_width, nx = off%_width;\n      x = (t)nx; y = (t)ny; z = (t)nz;\n      return true;\n    }\n\n    //! Test if pixel value is inside image bounds and get its X and Y-coordinates.\n    /**\n       Similar to contains(const T&,t&,t&,t&,t&) const, except that only the X and Y-coordinates are set.\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& x, t& y) const {\n      const ulongT wh = (ulongT)_width*_height, siz = wh*_depth*_spectrum;\n      const T *const ppixel = &pixel;\n      if (is_empty() || ppixel<_data || ppixel>=_data + siz) return false;\n      ulongT off = ((unsigned int)(ppixel - _data))%wh;\n      const ulongT ny = off/_width, nx = off%_width;\n      x = (t)nx; y = (t)ny;\n      return true;\n    }\n\n    //! Test if pixel value is inside image bounds and get its X-coordinate.\n    /**\n       Similar to contains(const T&,t&,t&,t&,t&) const, except that only the X-coordinate is set.\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& x) const {\n      const T *const ppixel = &pixel;\n      if (is_empty() || ppixel<_data || ppixel>=_data + size()) return false;\n      x = (t)(((ulongT)(ppixel - _data))%_width);\n      return true;\n    }\n\n    //! Test if pixel value is inside image bounds.\n    /**\n       Similar to contains(const T&,t&,t&,t&,t&) const, except that no pixel coordinates are set.\n    **/\n    bool contains(const T& pixel) const {\n      const T *const ppixel = &pixel;\n      return !is_empty() && ppixel>=_data && ppixel<_data + size();\n    }\n\n    //! Test if pixel buffers of instance and input images overlap.\n    /**\n       Return \\c true, if pixel buffers attached to image instance and input image \\c img overlap,\n       and \\c false otherwise.\n       \\param img Input image to compare with.\n       \\note\n       - Buffer overlapping may happen when manipulating \\e shared images.\n       - If two image buffers overlap, operating on one of the image will probably modify the other one.\n       - Most of the time, \\c CImg<T> instances are \\e non-shared and do not overlap between each others.\n       \\par Example\n       \\code\n       const CImg<float>\n         img1(\"reference.jpg\"),             // Load RGB-color image.\n         img2 = img1.get_shared_channel(1); // Get shared version of the green channel.\n       if (img1.is_overlapped(img2)) {      // Test succeeds, 'img1' and 'img2' overlaps.\n         std::printf(\"Buffers overlap!\\n\");\n       }\n       \\endcode\n    **/\n    template<typename t>\n    bool is_overlapped(const CImg<t>& img) const {\n      const ulongT csiz = size(), isiz = img.size();\n      return !((void*)(_data + csiz)<=(void*)img._data || (void*)_data>=(void*)(img._data + isiz));\n    }\n\n    //! Test if the set {\\c *this,\\c primitives,\\c colors,\\c opacities} defines a valid 3d object.\n    /**\n       Return \\c true is the 3d object represented by the set {\\c *this,\\c primitives,\\c colors,\\c opacities} defines a\n       valid 3d object, and \\c false otherwise. The vertex coordinates are defined by the instance image.\n       \\param primitives List of primitives of the 3d object.\n       \\param colors List of colors of the 3d object.\n       \\param opacities List (or image) of opacities of the 3d object.\n       \\param full_check Tells if full checking of the 3d object must be performed.\n       \\param[out] error_message C-string to contain the error message, if the test does not succeed.\n       \\note\n       - Set \\c full_checking to \\c false to speed-up the 3d object checking. In this case, only the size of\n         each 3d object component is checked.\n       - Size of the string \\c error_message should be at least 128-bytes long, to be able to contain the error message.\n    **/\n    template<typename tp, typename tc, typename to>\n    bool is_object3d(const CImgList<tp>& primitives,\n                     const CImgList<tc>& colors,\n                     const to& opacities,\n                     const bool full_check=true,\n                     char *const error_message=0) const {\n      if (error_message) *error_message = 0;\n\n      // Check consistency for the particular case of an empty 3d object.\n      if (is_empty()) {\n        if (primitives || colors || opacities) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"3d object (%u,%u) defines no vertices but %u primitives, \"\n                                          \"%u colors and %lu opacities\",\n                                          _width,primitives._width,primitives._width,\n                                          colors._width,(unsigned long)opacities.size());\n          return false;\n        }\n        return true;\n      }\n\n      // Check consistency of vertices.\n      if (_height!=3 || _depth>1 || _spectrum>1) { // Check vertices dimensions.\n        if (error_message) cimg_sprintf(error_message,\n                                        \"3d object (%u,%u) has invalid vertex dimensions (%u,%u,%u,%u)\",\n                                        _width,primitives._width,_width,_height,_depth,_spectrum);\n        return false;\n      }\n      if (colors._width>primitives._width + 1) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"3d object (%u,%u) defines %u colors\",\n                                        _width,primitives._width,colors._width);\n        return false;\n      }\n      if (opacities.size()>primitives._width) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"3d object (%u,%u) defines %lu opacities\",\n                                        _width,primitives._width,(unsigned long)opacities.size());\n        return false;\n      }\n      if (!full_check) return true;\n\n      // Check consistency of primitives.\n      cimglist_for(primitives,l) {\n        const CImg<tp>& primitive = primitives[l];\n        const unsigned int psiz = (unsigned int)primitive.size();\n        switch (psiz) {\n        case 1 : { // Point.\n          const unsigned int i0 = (unsigned int)primitive(0);\n          if (i0>=_width) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"3d object (%u,%u) refers to invalid vertex indice %u in \"\n                                            \"point primitive [%u]\",\n                                            _width,primitives._width,i0,l);\n            return false;\n          }\n        } break;\n        case 5 : { // Sphere.\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1);\n          if (i0>=_width || i1>=_width) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"3d object (%u,%u) refers to invalid vertex indices (%u,%u) in \"\n                                            \"sphere primitive [%u]\",\n                                            _width,primitives._width,i0,i1,l);\n            return false;\n          }\n        } break;\n        case 2 : // Segment.\n        case 6 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1);\n          if (i0>=_width || i1>=_width) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"3d object (%u,%u) refers to invalid vertex indices (%u,%u) in \"\n                                            \"segment primitive [%u]\",\n                                            _width,primitives._width,i0,i1,l);\n            return false;\n          }\n        } break;\n        case 3 : // Triangle.\n        case 9 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1),\n            i2 = (unsigned int)primitive(2);\n          if (i0>=_width || i1>=_width || i2>=_width) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"3d object (%u,%u) refers to invalid vertex indices (%u,%u,%u) in \"\n                                            \"triangle primitive [%u]\",\n                                            _width,primitives._width,i0,i1,i2,l);\n            return false;\n          }\n        } break;\n        case 4 : // Quadrangle.\n        case 12 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1),\n            i2 = (unsigned int)primitive(2),\n            i3 = (unsigned int)primitive(3);\n          if (i0>=_width || i1>=_width || i2>=_width || i3>=_width) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"3d object (%u,%u) refers to invalid vertex indices (%u,%u,%u,%u) in \"\n                                            \"quadrangle primitive [%u]\",\n                                            _width,primitives._width,i0,i1,i2,i3,l);\n            return false;\n          }\n        } break;\n        default :\n          if (error_message) cimg_sprintf(error_message,\n                                          \"3d object (%u,%u) defines an invalid primitive [%u] of size %u\",\n                                          _width,primitives._width,l,(unsigned int)psiz);\n          return false;\n        }\n      }\n\n      // Check consistency of colors.\n      cimglist_for(colors,c) {\n        const CImg<tc>& color = colors[c];\n        if (!color) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"3d object (%u,%u) defines no color for primitive [%u]\",\n                                          _width,primitives._width,c);\n          return false;\n        }\n      }\n\n      // Check consistency of light texture.\n      if (colors._width>primitives._width) {\n        const CImg<tc> &light = colors.back();\n        if (!light || light._depth>1) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"3d object (%u,%u) defines an invalid light texture (%u,%u,%u,%u)\",\n                                          _width,primitives._width,light._width,\n                                          light._height,light._depth,light._spectrum);\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    //! Test if image instance represents a valid serialization of a 3d object.\n    /**\n       Return \\c true if the image instance represents a valid serialization of a 3d object, and \\c false otherwise.\n       \\param full_check Tells if full checking of the instance must be performed.\n       \\param[out] error_message C-string to contain the error message, if the test does not succeed.\n       \\note\n       - Set \\c full_check to \\c false to speed-up the 3d object checking. In this case, only the size of\n         each 3d object component is checked.\n       - Size of the string \\c error_message should be at least 128-bytes long, to be able to contain the error message.\n    **/\n    bool is_CImg3d(const bool full_check=true, char *const error_message=0) const {\n      if (error_message) *error_message = 0;\n\n      // Check instance dimension and header.\n      if (_width!=1 || _height<8 || _depth!=1 || _spectrum!=1) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d has invalid dimensions (%u,%u,%u,%u)\",\n                                        _width,_height,_depth,_spectrum);\n        return false;\n      }\n      const T *ptrs = _data, *const ptre = end();\n      if (!_is_CImg3d(*(ptrs++),'C') || !_is_CImg3d(*(ptrs++),'I') || !_is_CImg3d(*(ptrs++),'m') ||\n          !_is_CImg3d(*(ptrs++),'g') || !_is_CImg3d(*(ptrs++),'3') || !_is_CImg3d(*(ptrs++),'d')) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d header not found\");\n        return false;\n      }\n      const unsigned int\n        nb_points = cimg::float2uint((float)*(ptrs++)),\n        nb_primitives = cimg::float2uint((float)*(ptrs++));\n\n      // Check consistency of number of vertices / primitives.\n      if (!full_check) {\n        const ulongT minimal_size = 8UL + 3*nb_points + 6*nb_primitives;\n        if (_data + minimal_size>ptre) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) has only %lu values, while at least %lu values were expected\",\n                                          nb_points,nb_primitives,size(),minimal_size);\n          return false;\n        }\n      }\n\n      // Check consistency of vertex data.\n      if (!nb_points) {\n        if (nb_primitives) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) defines no vertices but %u primitives\",\n                                          nb_points,nb_primitives,nb_primitives);\n          return false;\n        }\n        if (ptrs!=ptre) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) is an empty object but contains %u value%s \"\n                                          \"more than expected\",\n                                          nb_points,nb_primitives,(unsigned int)(ptre - ptrs),(ptre - ptrs)>1?\"s\":\"\");\n          return false;\n        }\n        return true;\n      }\n      if (ptrs + 3*nb_points>ptre) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d (%u,%u) defines only %u vertices data\",\n                                        nb_points,nb_primitives,(unsigned int)(ptre - ptrs)/3);\n        return false;\n      }\n      ptrs+=3*nb_points;\n\n      // Check consistency of primitive data.\n      if (ptrs==ptre) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d (%u,%u) defines %u vertices but no primitive\",\n                                        nb_points,nb_primitives,nb_points);\n        return false;\n      }\n\n      if (!full_check) return true;\n\n      for (unsigned int p = 0; p<nb_primitives; ++p) {\n        const unsigned int nb_inds = (unsigned int)*(ptrs++);\n        switch (nb_inds) {\n        case 1 : { // Point.\n          const unsigned int i0 = cimg::float2uint((float)*(ptrs++));\n          if (i0>=nb_points) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"CImg3d (%u,%u) refers to invalid vertex indice %u in point primitive [%u]\",\n                                            nb_points,nb_primitives,i0,p);\n            return false;\n          }\n        } break;\n        case 5 : { // Sphere.\n          const unsigned int\n            i0 = cimg::float2uint((float)*(ptrs++)),\n            i1 = cimg::float2uint((float)*(ptrs++));\n          ptrs+=3;\n          if (i0>=nb_points || i1>=nb_points) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"CImg3d (%u,%u) refers to invalid vertex indices (%u,%u) in \"\n                                            \"sphere primitive [%u]\",\n                                            nb_points,nb_primitives,i0,i1,p);\n            return false;\n          }\n        } break;\n        case 2 : case 6 : { // Segment.\n          const unsigned int\n            i0 = cimg::float2uint((float)*(ptrs++)),\n            i1 = cimg::float2uint((float)*(ptrs++));\n          if (nb_inds==6) ptrs+=4;\n          if (i0>=nb_points || i1>=nb_points) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"CImg3d (%u,%u) refers to invalid vertex indices (%u,%u) in \"\n                                            \"segment primitive [%u]\",\n                                            nb_points,nb_primitives,i0,i1,p);\n            return false;\n          }\n        } break;\n        case 3 : case 9 : { // Triangle.\n          const unsigned int\n            i0 = cimg::float2uint((float)*(ptrs++)),\n            i1 = cimg::float2uint((float)*(ptrs++)),\n            i2 = cimg::float2uint((float)*(ptrs++));\n          if (nb_inds==9) ptrs+=6;\n          if (i0>=nb_points || i1>=nb_points || i2>=nb_points) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"CImg3d (%u,%u) refers to invalid vertex indices (%u,%u,%u) in \"\n                                            \"triangle primitive [%u]\",\n                                            nb_points,nb_primitives,i0,i1,i2,p);\n            return false;\n          }\n        } break;\n        case 4 : case 12 : { // Quadrangle.\n          const unsigned int\n            i0 = cimg::float2uint((float)*(ptrs++)),\n            i1 = cimg::float2uint((float)*(ptrs++)),\n            i2 = cimg::float2uint((float)*(ptrs++)),\n            i3 = cimg::float2uint((float)*(ptrs++));\n          if (nb_inds==12) ptrs+=8;\n          if (i0>=nb_points || i1>=nb_points || i2>=nb_points || i3>=nb_points) {\n            if (error_message) cimg_sprintf(error_message,\n                                            \"CImg3d (%u,%u) refers to invalid vertex indices (%u,%u,%u,%u) in \"\n                                            \"quadrangle primitive [%u]\",\n                                            nb_points,nb_primitives,i0,i1,i2,i3,p);\n            return false;\n          }\n        } break;\n        default :\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) defines an invalid primitive [%u] of size %u\",\n                                          nb_points,nb_primitives,p,nb_inds);\n          return false;\n        }\n        if (ptrs>ptre) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) has incomplete primitive data for primitive [%u], \"\n                                          \"%u values missing\",\n                                          nb_points,nb_primitives,p,(unsigned int)(ptrs - ptre));\n          return false;\n        }\n      }\n\n      // Check consistency of color data.\n      if (ptrs==ptre) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d (%u,%u) defines no color/texture data\",\n                                        nb_points,nb_primitives);\n        return false;\n      }\n      for (unsigned int c = 0; c<nb_primitives; ++c) {\n        if (*(ptrs++)!=(T)-128) ptrs+=2;\n        else if ((ptrs+=3)<ptre) {\n          const unsigned int\n            w = (unsigned int)*(ptrs - 3),\n            h = (unsigned int)*(ptrs - 2),\n            s = (unsigned int)*(ptrs - 1);\n          if (!h && !s) {\n            if (w>=c) {\n              if (error_message) cimg_sprintf(error_message,\n                                              \"CImg3d (%u,%u) refers to invalid shared sprite/texture indice %u \"\n                                              \"for primitive [%u]\",\n                                              nb_points,nb_primitives,w,c);\n              return false;\n            }\n          } else ptrs+=w*h*s;\n        }\n        if (ptrs>ptre) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) has incomplete color/texture data for primitive [%u], \"\n                                          \"%u values missing\",\n                                          nb_points,nb_primitives,c,(unsigned int)(ptrs - ptre));\n          return false;\n        }\n      }\n\n      // Check consistency of opacity data.\n      if (ptrs==ptre) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d (%u,%u) defines no opacity data\",\n                                        nb_points,nb_primitives);\n        return false;\n      }\n      for (unsigned int o = 0; o<nb_primitives; ++o) {\n        if (*(ptrs++)==(T)-128 && (ptrs+=3)<ptre) {\n          const unsigned int\n            w = (unsigned int)*(ptrs - 3),\n            h = (unsigned int)*(ptrs - 2),\n            s = (unsigned int)*(ptrs - 1);\n          if (!h && !s) {\n            if (w>=o) {\n              if (error_message) cimg_sprintf(error_message,\n                                              \"CImg3d (%u,%u) refers to invalid shared opacity indice %u \"\n                                              \"for primitive [%u]\",\n                                              nb_points,nb_primitives,w,o);\n              return false;\n            }\n          } else ptrs+=w*h*s;\n        }\n        if (ptrs>ptre) {\n          if (error_message) cimg_sprintf(error_message,\n                                          \"CImg3d (%u,%u) has incomplete opacity data for primitive [%u]\",\n                                          nb_points,nb_primitives,o);\n          return false;\n        }\n      }\n\n      // Check end of data.\n      if (ptrs<ptre) {\n        if (error_message) cimg_sprintf(error_message,\n                                        \"CImg3d (%u,%u) contains %u value%s more than expected\",\n                                        nb_points,nb_primitives,(unsigned int)(ptre - ptrs),(ptre - ptrs)>1?\"s\":\"\");\n        return false;\n      }\n      return true;\n    }\n\n    static bool _is_CImg3d(const T val, const char c) {\n      return val>=(T)c && val<(T)(c + 1);\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Mathematical Functions\n    //@{\n    //-------------------------------------\n\n    // Define the math formula parser/compiler and expression evaluator.\n    struct _cimg_math_parser {\n      CImg<doubleT> mem;\n      CImg<intT> memtype;\n      CImgList<ulongT> _code, &code, code_init, code_end;\n      CImg<ulongT> opcode;\n      const CImg<ulongT> *p_code_end, *p_code;\n      const CImg<ulongT> *const p_break;\n\n      CImg<charT> expr, pexpr;\n      const CImg<T>& imgin;\n      const CImgList<T>& listin;\n      CImg<T> &imgout;\n      CImgList<T>& listout;\n\n      CImg<doubleT> _img_stats, &img_stats, constcache_vals;\n      CImgList<doubleT> _list_stats, &list_stats, _list_median, &list_median;\n      CImg<uintT> mem_img_stats, constcache_inds;\n\n      CImg<uintT> level, variable_pos, reserved_label;\n      CImgList<charT> variable_def, macro_def, macro_body;\n      CImgList<boolT> macro_body_is_string;\n      char *user_macro;\n\n      unsigned int mempos, mem_img_median, debug_indent, result_dim, break_type, constcache_size;\n      bool is_parallelizable, is_fill, need_input_copy;\n      double *result;\n      const char *const calling_function, *s_op, *ss_op;\n      typedef double (*mp_func)(_cimg_math_parser&);\n\n#define _cimg_mp_is_constant(arg) (memtype[arg]==1) // Is constant value?\n#define _cimg_mp_is_scalar(arg) (memtype[arg]<2) // Is scalar value?\n#define _cimg_mp_is_comp(arg) (!memtype[arg]) // Is computation value?\n#define _cimg_mp_is_variable(arg) (memtype[arg]==-1) // Is scalar variable?\n#define _cimg_mp_is_vector(arg) (memtype[arg]>1) // Is vector?\n#define _cimg_mp_vector_size(arg) (_cimg_mp_is_scalar(arg)?0U:(unsigned int)memtype[arg] - 1) // Vector size\n#define _cimg_mp_calling_function calling_function_s()._data\n#define _cimg_mp_op(s) s_op = s; ss_op = ss\n#define _cimg_mp_check_type(arg,n_arg,mode,N) check_type(arg,n_arg,mode,N,ss,se,saved_char)\n#define _cimg_mp_check_constant(arg,n_arg,mode) check_constant(arg,n_arg,mode,ss,se,saved_char)\n#define _cimg_mp_check_matrix_square(arg,n_arg) check_matrix_square(arg,n_arg,ss,se,saved_char)\n#define _cimg_mp_check_vector0(dim) check_vector0(dim,ss,se,saved_char)\n#define _cimg_mp_check_list(is_out) check_list(is_out,ss,se,saved_char)\n#define _cimg_mp_defunc(mp) (*(mp_func)(*(mp).opcode))(mp)\n#define _cimg_mp_return(x) { *se = saved_char; s_op = previous_s_op; ss_op = previous_ss_op; return x; }\n#define _cimg_mp_constant(val) _cimg_mp_return(constant((double)(val)))\n#define _cimg_mp_scalar0(op) _cimg_mp_return(scalar0(op))\n#define _cimg_mp_scalar1(op,i1) _cimg_mp_return(scalar1(op,i1))\n#define _cimg_mp_scalar2(op,i1,i2) _cimg_mp_return(scalar2(op,i1,i2))\n#define _cimg_mp_scalar3(op,i1,i2,i3) _cimg_mp_return(scalar3(op,i1,i2,i3))\n#define _cimg_mp_scalar4(op,i1,i2,i3,i4) _cimg_mp_return(scalar4(op,i1,i2,i3,i4))\n#define _cimg_mp_scalar5(op,i1,i2,i3,i4,i5) _cimg_mp_return(scalar5(op,i1,i2,i3,i4,i5))\n#define _cimg_mp_scalar6(op,i1,i2,i3,i4,i5,i6) _cimg_mp_return(scalar6(op,i1,i2,i3,i4,i5,i6))\n#define _cimg_mp_scalar7(op,i1,i2,i3,i4,i5,i6,i7) _cimg_mp_return(scalar7(op,i1,i2,i3,i4,i5,i6,i7))\n#define _cimg_mp_vector1_v(op,i1) _cimg_mp_return(vector1_v(op,i1))\n#define _cimg_mp_vector2_sv(op,i1,i2) _cimg_mp_return(vector2_sv(op,i1,i2))\n#define _cimg_mp_vector2_vs(op,i1,i2) _cimg_mp_return(vector2_vs(op,i1,i2))\n#define _cimg_mp_vector2_vv(op,i1,i2) _cimg_mp_return(vector2_vv(op,i1,i2))\n#define _cimg_mp_vector3_vss(op,i1,i2,i3) _cimg_mp_return(vector3_vss(op,i1,i2,i3))\n\n      // Constructors.\n      _cimg_math_parser(const char *const expression, const char *const funcname=0,\n                        const CImg<T>& img_input=CImg<T>::const_empty(), CImg<T> *const img_output=0,\n                        const CImgList<T> *const list_input=0, CImgList<T> *const list_output=0,\n                        const bool _is_fill=false):\n        code(_code),p_break((CImg<ulongT>*)0 - 2),\n        imgin(img_input),listin(list_input?*list_input:CImgList<T>::const_empty()),\n        imgout(img_output?*img_output:CImg<T>::empty()),listout(list_output?*list_output:CImgList<T>::empty()),\n        img_stats(_img_stats),list_stats(_list_stats),list_median(_list_median),user_macro(0),\n        mem_img_median(~0U),debug_indent(0),result_dim(0),break_type(0),constcache_size(0),\n        is_parallelizable(true),is_fill(_is_fill),need_input_copy(false),\n        calling_function(funcname?funcname:\"cimg_math_parser\") {\n        if (!expression || !*expression)\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: Empty expression.\",\n                                      pixel_type(),_cimg_mp_calling_function);\n        const char *_expression = expression;\n        while (*_expression && ((signed char)*_expression<=' ' || *_expression==';')) ++_expression;\n        CImg<charT>::string(_expression).move_to(expr);\n        char *ps = &expr.back() - 1;\n        while (ps>expr._data && ((signed char)*ps<=' ' || *ps==';')) --ps;\n        *(++ps) = 0; expr._width = (unsigned int)(ps - expr._data + 1);\n\n        // Ease the retrieval of previous non-space characters afterwards.\n        pexpr.assign(expr._width);\n        char c, *pe = pexpr._data;\n        for (ps = expr._data, c = ' '; *ps; ++ps) {\n          if ((signed char)*ps>' ') c = *ps; else *ps = ' ';\n          *(pe++) = c;\n        }\n        *pe = 0;\n        level = get_level(expr);\n\n        // Init constant values.\n#define _cimg_mp_interpolation (reserved_label[29]!=~0U?reserved_label[29]:0)\n#define _cimg_mp_boundary (reserved_label[30]!=~0U?reserved_label[30]:0)\n#define _cimg_mp_slot_nan 29\n#define _cimg_mp_slot_x 30\n#define _cimg_mp_slot_y 31\n#define _cimg_mp_slot_z 32\n#define _cimg_mp_slot_c 33\n\n        mem.assign(96);\n        for (unsigned int i = 0; i<=10; ++i) mem[i] = (double)i; // mem[0-10] = 0...10\n        for (unsigned int i = 1; i<=5; ++i) mem[i + 10] = -(double)i; // mem[11-15] = -1...-5\n        mem[16] = 0.5;\n        mem[17] = 0; // thread_id\n        mem[18] = (double)imgin._width; // w\n        mem[19] = (double)imgin._height; // h\n        mem[20] = (double)imgin._depth; // d\n        mem[21] = (double)imgin._spectrum; // s\n        mem[22] = (double)imgin._is_shared; // r\n        mem[23] = (double)imgin._width*imgin._height; // wh\n        mem[24] = (double)imgin._width*imgin._height*imgin._depth; // whd\n        mem[25] = (double)imgin._width*imgin._height*imgin._depth*imgin._spectrum; // whds\n        mem[26] = (double)listin._width; // l\n        mem[27] = std::exp(1.0); // e\n        mem[28] = cimg::PI; // pi\n        mem[_cimg_mp_slot_nan] = cimg::type<double>::nan(); // nan\n\n        // Set value property :\n        // { -2 = other | -1 = variable | 0 = computation value |\n        //    1 = compile-time constant | N>1 = constant ptr to vector[N-1] }.\n        memtype.assign(mem._width,1,1,1,0);\n        for (unsigned int i = 0; i<_cimg_mp_slot_x; ++i) memtype[i] = 1;\n        memtype[17] = 0;\n        mempos = _cimg_mp_slot_c + 1;\n        variable_pos.assign(8);\n\n        reserved_label.assign(128,1,1,1,~0U);\n        // reserved_label[4-28] are used to store these two-char variables:\n        // [0] = wh, [1] = whd, [2] = whds, [3] = pi, [4] = im, [5] = iM, [6] = ia, [7] = iv,\n        // [8] = is, [9] = ip, [10] = ic, [11] = xm, [12] = ym, [13] = zm, [14] = cm, [15] = xM,\n        // [16] = yM, [17] = zM, [18]=cM, [19]=i0...[28]=i9, [29] = interpolation, [30] = boundary\n\n        // Compile expression into a serie of opcodes.\n        s_op = \"\"; ss_op = expr._data;\n        const unsigned int ind_result = compile(expr._data,expr._data + expr._width - 1,0,0);\n        if (!_cimg_mp_is_constant(ind_result)) {\n          if (_cimg_mp_is_vector(ind_result))\n            CImg<doubleT>(&mem[ind_result] + 1,_cimg_mp_vector_size(ind_result),1,1,1,true).\n              fill(cimg::type<double>::nan());\n          else mem[ind_result] = cimg::type<double>::nan();\n        }\n\n        // Free resources used for compiling expression and prepare evaluation.\n        result_dim = _cimg_mp_vector_size(ind_result);\n        mem.resize(mempos,1,1,1,-1);\n        result = mem._data + ind_result;\n        memtype.assign();\n        constcache_vals.assign();\n        constcache_inds.assign();\n        level.assign();\n        variable_pos.assign();\n        reserved_label.assign();\n        expr.assign();\n        pexpr.assign();\n        opcode.assign();\n        opcode._is_shared = true;\n\n        // Execute init() bloc if any specified.\n        if (code_init) {\n          mem[_cimg_mp_slot_x] = mem[_cimg_mp_slot_y] = mem[_cimg_mp_slot_z] = mem[_cimg_mp_slot_c] = 0;\n          p_code_end = code_init.end();\n          for (p_code = code_init; p_code<p_code_end; ++p_code) {\n            const CImg<ulongT> &op = *p_code;\n            opcode._data = op._data;\n            const ulongT target = opcode[1];\n            mem[target] = _cimg_mp_defunc(*this);\n          }\n        }\n\n        p_code_end = code.end();\n      }\n\n      _cimg_math_parser():\n        code(_code),p_code_end(0),p_break((CImg<ulongT>*)0 - 2),\n        imgin(CImg<T>::const_empty()),listin(CImgList<T>::const_empty()),\n        imgout(CImg<T>::empty()),listout(CImgList<T>::empty()),\n        img_stats(_img_stats),list_stats(_list_stats),list_median(_list_median),debug_indent(0),\n        result_dim(0),break_type(0),constcache_size(0),is_parallelizable(true),is_fill(false),need_input_copy(false),\n        calling_function(0) {\n        mem.assign(1 + _cimg_mp_slot_c,1,1,1,0); // Allow to skip 'is_empty?' test in operator()()\n        result = mem._data;\n      }\n\n      _cimg_math_parser(const _cimg_math_parser& mp):\n        mem(mp.mem),code(mp.code),p_code_end(mp.p_code_end),p_break(mp.p_break),\n        imgin(mp.imgin),listin(mp.listin),imgout(mp.imgout),listout(mp.listout),img_stats(mp.img_stats),\n        list_stats(mp.list_stats),list_median(mp.list_median),debug_indent(0),result_dim(mp.result_dim),\n        break_type(0),constcache_size(0),is_parallelizable(mp.is_parallelizable),is_fill(mp.is_fill),\n        need_input_copy(mp.need_input_copy), result(mem._data + (mp.result - mp.mem._data)),calling_function(0) {\n#ifdef cimg_use_openmp\n        mem[17] = omp_get_thread_num();\n#endif\n        opcode.assign();\n        opcode._is_shared = true;\n      }\n\n      // Count parentheses/brackets level of each character of the expression.\n      CImg<uintT> get_level(CImg<charT>& expr) const {\n        bool is_escaped = false, next_is_escaped = false;\n        unsigned int mode = 0, next_mode = 0; // { 0=normal | 1=char-string | 2=vector-string\n        CImg<uintT> res(expr._width - 1);\n        unsigned int *pd = res._data;\n        int level = 0;\n        for (const char *ps = expr._data; *ps && level>=0; ++ps) {\n          if (!next_is_escaped && *ps=='\\\\') next_is_escaped = true;\n          if (!is_escaped && *ps=='\\'') { // Non-escaped character\n            if (!mode && ps>expr._data && *(ps - 1)=='[') next_mode = mode = 2; // Start vector-string\n            else if (mode==2 && *(ps + 1)==']') next_mode = !mode; // End vector-string\n            else if (mode<2) next_mode = mode?(mode = 0):1; // Start/end char-string\n          }\n          *(pd++) = (unsigned int)(mode>=1 || is_escaped?level + (mode==1):\n                                   *ps=='(' || *ps=='['?level++:\n                                   *ps==')' || *ps==']'?--level:\n                                   level);\n          mode = next_mode;\n          is_escaped = next_is_escaped;\n          next_is_escaped = false;\n        }\n        if (mode) {\n          cimg::strellipsize(expr,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: Unterminated string literal, in expression '%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,\n                                      expr._data);\n        }\n        if (level) {\n          cimg::strellipsize(expr,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: Unbalanced parentheses/brackets, in expression '%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,\n                                      expr._data);\n        }\n        return res;\n      }\n\n      // Tell for each character of an expression if it is inside a string or not.\n      CImg<boolT> is_inside_string(CImg<charT>& expr) const {\n        bool is_escaped = false, next_is_escaped = false;\n        unsigned int mode = 0, next_mode = 0; // { 0=normal | 1=char-string | 2=vector-string\n        CImg<boolT> res = CImg<charT>::string(expr);\n        bool *pd = res._data;\n        for (const char *ps = expr._data; *ps; ++ps) {\n          if (!next_is_escaped && *ps=='\\\\') next_is_escaped = true;\n          if (!is_escaped && *ps=='\\'') { // Non-escaped character\n            if (!mode && ps>expr._data && *(ps - 1)=='[') next_mode = mode = 2; // Start vector-string\n            else if (mode==2 && *(ps + 1)==']') next_mode = !mode; // End vector-string\n            else if (mode<2) next_mode = mode?(mode = 0):1; // Start/end char-string\n          }\n          *(pd++) = mode>=1 || is_escaped;\n          mode = next_mode;\n          is_escaped = next_is_escaped;\n          next_is_escaped = false;\n        }\n        return res;\n      }\n\n      // Compilation procedure.\n      unsigned int compile(char *ss, char *se, const unsigned int depth, unsigned int *const p_ref) {\n        if (depth>256) {\n          cimg::strellipsize(expr,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: Call stack overflow (infinite recursion?), \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,\n                                      (ss - 4)>expr._data?\"...\":\"\",\n                                      (ss - 4)>expr._data?ss - 4:expr._data,\n                                      se<&expr.back()?\"...\":\"\");\n        }\n        char c1, c2, c3, c4;\n\n        // Simplify expression when possible.\n        do {\n          c2 = 0;\n          if (ss<se) {\n            while (*ss && ((signed char)*ss<=' ' || *ss==';')) ++ss;\n            while (se>ss && ((signed char)(c1 = *(se - 1))<=' ' || c1==';')) --se;\n          }\n          while (*ss=='(' && *(se - 1)==')' && std::strchr(ss,')')==se - 1) {\n            ++ss; --se; c2 = 1;\n          }\n        } while (c2 && ss<se);\n\n        if (se<=ss || !*ss) {\n          cimg::strellipsize(expr,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s Missing %s, in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      *s_op=='F'?\"argument\":\"item\",\n                                      (ss_op - 4)>expr._data?\"...\":\"\",\n                                      (ss_op - 4)>expr._data?ss_op - 4:expr._data,\n                                      ss_op + std::strlen(ss_op)<&expr.back()?\"...\":\"\");\n        }\n\n        const char *const previous_s_op = s_op, *const previous_ss_op = ss_op;\n        const unsigned int depth1 = depth + 1;\n        unsigned int pos, p1, p2, p3, arg1, arg2, arg3, arg4, arg5, arg6;\n        char\n          *const se1 = se - 1, *const se2 = se - 2, *const se3 = se - 3,\n          *const ss1 = ss + 1, *const ss2 = ss + 2, *const ss3 = ss + 3, *const ss4 = ss + 4,\n          *const ss5 = ss + 5, *const ss6 = ss + 6, *const ss7 = ss + 7, *const ss8 = ss + 8,\n          *s, *ps, *ns, *s0, *s1, *s2, *s3, sep = 0, end = 0;\n        double val, val1, val2;\n        mp_func op;\n\n        // 'p_ref' is a 'unsigned int[7]' used to return a reference to an image or vector value\n        // linked to the returned memory slot (reference that cannot be determined at compile time).\n        // p_ref[0] can be { 0 = scalar (unlinked) | 1 = vector value | 2 = image value (offset) |\n        //                   3 = image value (coordinates) | 4 = image value as a vector (offsets) |\n        //                   5 = image value as a vector (coordinates) }.\n        // Depending on p_ref[0], the remaining p_ref[k] have the following meaning:\n        // When p_ref[0]==0, p_ref is actually unlinked.\n        // When p_ref[0]==1, p_ref = [ 1, vector_ind, offset ].\n        // When p_ref[0]==2, p_ref = [ 2, image_ind (or ~0U), is_relative, offset ].\n        // When p_ref[0]==3, p_ref = [ 3, image_ind (or ~0U), is_relative, x, y, z, c ].\n        // When p_ref[0]==4, p_ref = [ 4, image_ind (or ~0U), is_relative, offset ].\n        // When p_ref[0]==5, p_ref = [ 5, image_ind (or ~0U), is_relative, x, y, z ].\n        if (p_ref) { *p_ref = 0; p_ref[1] = p_ref[2] = p_ref[3] = p_ref[4] = p_ref[5] = p_ref[6] = ~0U; }\n\n        const char saved_char = *se; *se = 0;\n        const unsigned int clevel = level[ss - expr._data], clevel1 = clevel + 1;\n        bool is_sth, is_relative;\n        CImg<uintT> ref;\n        CImgList<ulongT> _opcode;\n        CImg<charT> variable_name;\n\n        // Look for a single value or a pre-defined variable.\n        int nb = cimg_sscanf(ss,\"%lf%c%c\",&val,&(sep=0),&(end=0));\n\n#if cimg_OS==2\n        // Check for +/-NaN and +/-inf as Microsoft's sscanf() version is not able\n        // to read those particular values.\n        if (!nb && (*ss=='+' || *ss=='-' || *ss=='i' || *ss=='I' || *ss=='n' || *ss=='N')) {\n          is_sth = true;\n          s = ss;\n          if (*s=='+') ++s; else if (*s=='-') { ++s; is_sth = false; }\n          if (!cimg::strcasecmp(s,\"inf\")) { val = cimg::type<double>::inf(); nb = 1; }\n          else if (!cimg::strcasecmp(s,\"nan\")) { val = cimg::type<double>::nan(); nb = 1; }\n          if (nb==1 && !is_sth) val = -val;\n        }\n#endif\n        if (nb==1) _cimg_mp_constant(val);\n        if (nb==2 && sep=='%') _cimg_mp_constant(val/100);\n\n        if (ss1==se) switch (*ss) { // One-char reserved variable\n          case 'c' : _cimg_mp_return(reserved_label['c']!=~0U?reserved_label['c']:_cimg_mp_slot_c);\n          case 'd' : _cimg_mp_return(reserved_label['d']!=~0U?reserved_label['d']:20);\n          case 'e' : _cimg_mp_return(reserved_label['e']!=~0U?reserved_label['e']:27);\n          case 'h' : _cimg_mp_return(reserved_label['h']!=~0U?reserved_label['h']:19);\n          case 'l' : _cimg_mp_return(reserved_label['l']!=~0U?reserved_label['l']:26);\n          case 'r' : _cimg_mp_return(reserved_label['r']!=~0U?reserved_label['r']:22);\n          case 's' : _cimg_mp_return(reserved_label['s']!=~0U?reserved_label['s']:21);\n          case 't' : _cimg_mp_return(reserved_label['t']!=~0U?reserved_label['t']:17);\n          case 'w' : _cimg_mp_return(reserved_label['w']!=~0U?reserved_label['w']:18);\n          case 'x' : _cimg_mp_return(reserved_label['x']!=~0U?reserved_label['x']:_cimg_mp_slot_x);\n          case 'y' : _cimg_mp_return(reserved_label['y']!=~0U?reserved_label['y']:_cimg_mp_slot_y);\n          case 'z' : _cimg_mp_return(reserved_label['z']!=~0U?reserved_label['z']:_cimg_mp_slot_z);\n          case 'u' :\n            if (reserved_label['u']!=~0U) _cimg_mp_return(reserved_label['u']);\n            _cimg_mp_scalar2(mp_u,0,1);\n          case 'g' :\n            if (reserved_label['g']!=~0U) _cimg_mp_return(reserved_label['g']);\n            _cimg_mp_scalar0(mp_g);\n          case 'i' :\n            if (reserved_label['i']!=~0U) _cimg_mp_return(reserved_label['i']);\n            _cimg_mp_scalar0(mp_i);\n          case 'I' :\n            _cimg_mp_op(\"Variable 'I'\");\n            if (reserved_label['I']!=~0U) _cimg_mp_return(reserved_label['I']);\n            _cimg_mp_check_vector0(imgin._spectrum);\n            need_input_copy = true;\n            pos = vector(imgin._spectrum);\n            CImg<ulongT>::vector((ulongT)mp_Joff,pos,0,0,imgin._spectrum).move_to(code);\n            _cimg_mp_return(pos);\n          case 'R' :\n            if (reserved_label['R']!=~0U) _cimg_mp_return(reserved_label['R']);\n            need_input_copy = true;\n            _cimg_mp_scalar6(mp_ixyzc,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,0,0,0);\n          case 'G' :\n            if (reserved_label['G']!=~0U) _cimg_mp_return(reserved_label['G']);\n            need_input_copy = true;\n            _cimg_mp_scalar6(mp_ixyzc,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,1,0,0);\n          case 'B' :\n            if (reserved_label['B']!=~0U) _cimg_mp_return(reserved_label['B']);\n            need_input_copy = true;\n            _cimg_mp_scalar6(mp_ixyzc,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,2,0,0);\n          case 'A' :\n            if (reserved_label['A']!=~0U) _cimg_mp_return(reserved_label['A']);\n            need_input_copy = true;\n            _cimg_mp_scalar6(mp_ixyzc,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,3,0,0);\n          }\n        else if (ss2==se) { // Two-chars reserved variable\n          arg1 = arg2 = ~0U;\n          if (*ss=='w' && *ss1=='h') // wh\n            _cimg_mp_return(reserved_label[0]!=~0U?reserved_label[0]:23);\n          if (*ss=='p' && *ss1=='i') // pi\n            _cimg_mp_return(reserved_label[3]!=~0U?reserved_label[3]:28);\n          if (*ss=='i') {\n            if (*ss1>='0' && *ss1<='9') { // i0...i9\n              pos = 19 + *ss1 - '0';\n              if (reserved_label[pos]!=~0U) _cimg_mp_return(reserved_label[pos]);\n              need_input_copy = true;\n              _cimg_mp_scalar6(mp_ixyzc,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,pos - 19,0,0);\n            }\n            switch (*ss1) {\n            case 'm' : arg1 = 4; arg2 = 0; break; // im\n            case 'M' : arg1 = 5; arg2 = 1; break; // iM\n            case 'a' : arg1 = 6; arg2 = 2; break; // ia\n            case 'v' : arg1 = 7; arg2 = 3; break; // iv\n            case 's' : arg1 = 8; arg2 = 12; break; // is\n            case 'p' : arg1 = 9; arg2 = 13; break; // is\n            case 'c' : // ic\n              if (reserved_label[10]!=~0U) _cimg_mp_return(reserved_label[10]);\n              if (mem_img_median==~0U) mem_img_median = imgin?constant(imgin.median()):0;\n              _cimg_mp_return(mem_img_median);\n              break;\n            }\n          }\n          else if (*ss1=='m') switch (*ss) {\n            case 'x' : arg1 = 11; arg2 = 4; break; // xm\n            case 'y' : arg1 = 12; arg2 = 5; break; // ym\n            case 'z' : arg1 = 13; arg2 = 6; break; // zm\n            case 'c' : arg1 = 14; arg2 = 7; break; // cm\n            }\n          else if (*ss1=='M') switch (*ss) {\n            case 'x' : arg1 = 15; arg2 = 8; break; // xM\n            case 'y' : arg1 = 16; arg2 = 9; break; // yM\n            case 'z' : arg1 = 17; arg2 = 10; break; // zM\n            case 'c' : arg1 = 18; arg2 = 11; break; // cM\n            }\n          if (arg1!=~0U) {\n            if (reserved_label[arg1]!=~0U) _cimg_mp_return(reserved_label[arg1]);\n            if (!img_stats) {\n              img_stats.assign(1,14,1,1,0).fill(imgin.get_stats(),false);\n              mem_img_stats.assign(1,14,1,1,~0U);\n            }\n            if (mem_img_stats[arg2]==~0U) mem_img_stats[arg2] = constant(img_stats[arg2]);\n            _cimg_mp_return(mem_img_stats[arg2]);\n          }\n        } else if (ss3==se) { // Three-chars reserved variable\n          if (*ss=='w' && *ss1=='h' && *ss2=='d') // whd\n            _cimg_mp_return(reserved_label[1]!=~0U?reserved_label[1]:24);\n        } else if (ss4==se) { // Four-chars reserved variable\n          if (*ss=='w' && *ss1=='h' && *ss2=='d' && *ss3=='s') // whds\n            _cimg_mp_return(reserved_label[2]!=~0U?reserved_label[2]:25);\n        }\n\n        pos = ~0U;\n        for (s0 = ss, s = ss1; s<se1; ++s)\n          if (*s==';' && level[s - expr._data]==clevel) { // Separator ';'\n            pos = compile(s0,s++,depth,0);\n            while (*s && ((signed char)*s<=' ' || *s==';')) ++s;\n            s0 = s;\n          }\n        if (pos!=~0U) _cimg_mp_return(compile(s0,se,depth,p_ref));\n\n        // Declare / assign variable, vector value or image value.\n        for (s = ss1, ps = ss, ns = ss2; s<se1; ++s, ++ps, ++ns)\n          if (*s=='=' && *ns!='=' && *ps!='=' && *ps!='>' && *ps!='<' && *ps!='!' &&\n              *ps!='+' && *ps!='-' && *ps!='*' && *ps!='/' && *ps!='%' &&\n              *ps!='>' && *ps!='<' && *ps!='&' && *ps!='|' && *ps!='^' &&\n              level[s - expr._data]==clevel) {\n            variable_name.assign(ss,(unsigned int)(s + 1 - ss)).back() = 0;\n            cimg::strpare(variable_name,false,true);\n            const unsigned int l_variable_name = (unsigned int)std::strlen(variable_name);\n            char *const ve1 = ss + l_variable_name - 1;\n            _cimg_mp_op(\"Operator '='\");\n\n            // Assign image value (direct).\n            if (l_variable_name>2 && (*ss=='i' || *ss=='j' || *ss=='I' || *ss=='J') && (*ss1=='(' || *ss1=='[') &&\n                (reserved_label[*ss]==~0U || *ss1=='(' || !_cimg_mp_is_vector(reserved_label[*ss]))) {\n              is_relative = *ss=='j' || *ss=='J';\n\n              if (*ss1=='[' && *ve1==']') { // i/j/I/J[_#ind,offset] = value\n                is_parallelizable = false;\n                if (*ss2=='#') { // Index specified\n                  s0 = ss3; while (s0<ve1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                  p1 = compile(ss3,s0++,depth1,0);\n                  _cimg_mp_check_list(true);\n                } else { p1 = ~0U; s0 = ss2; }\n                arg1 = compile(s0,ve1,depth1,0); // Offset\n                _cimg_mp_check_type(arg1,0,1,0);\n                arg2 = compile(s + 1,se,depth1,0); // Value to assign\n                if (_cimg_mp_is_vector(arg2)) {\n                  p2 = ~0U; // 'p2' must be the dimension of the vector-valued operand if any\n                  if (p1==~0U) p2 = imgin._spectrum;\n                  else if (_cimg_mp_is_constant(p1)) {\n                    p3 = (unsigned int)cimg::mod((int)mem[p1],listin.width());\n                    p2 = listin[p3]._spectrum;\n                  }\n                  _cimg_mp_check_vector0(p2);\n                } else p2 = 0;\n                _cimg_mp_check_type(arg2,2,*ss>='i'?1:3,p2);\n\n                if (p_ref) {\n                  *p_ref = _cimg_mp_is_vector(arg2)?4:2;\n                  p_ref[1] = p1;\n                  p_ref[2] = (unsigned int)is_relative;\n                  p_ref[3] = arg1;\n                  if (_cimg_mp_is_vector(arg2))\n                    set_variable_vector(arg2); // Prevent from being used in further optimization\n                  else if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2;\n                  if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2;\n                  if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n                }\n\n\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg2);\n                  if (*ss>='i')\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_joff:mp_list_set_ioff),\n                                        arg2,p1,arg1).move_to(code);\n                  else if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_s:mp_list_set_Ioff_s),\n                                        arg2,p1,arg1).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_v:mp_list_set_Ioff_v),\n                                        arg2,p1,arg1,_cimg_mp_vector_size(arg2)).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg2);\n                  if (*ss>='i')\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_joff:mp_set_ioff),\n                                        arg2,arg1).move_to(code);\n                  else if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_s:mp_set_Ioff_s),\n                                        arg2,arg1).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_v:mp_set_Ioff_v),\n                                        arg2,arg1,_cimg_mp_vector_size(arg2)).move_to(code);\n                }\n                _cimg_mp_return(arg2);\n              }\n\n              if (*ss1=='(' && *ve1==')') { // i/j/I/J(_#ind,_x,_y,_z,_c) = value\n                is_parallelizable = false;\n                if (*ss2=='#') { // Index specified\n                  s0 = ss3; while (s0<ve1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                  p1 = compile(ss3,s0++,depth1,0);\n                  _cimg_mp_check_list(true);\n                } else { p1 = ~0U; s0 = ss2; }\n                arg1 = is_relative?0U:(unsigned int)_cimg_mp_slot_x;\n                arg2 = is_relative?0U:(unsigned int)_cimg_mp_slot_y;\n                arg3 = is_relative?0U:(unsigned int)_cimg_mp_slot_z;\n                arg4 = is_relative?0U:(unsigned int)_cimg_mp_slot_c;\n                arg5 = compile(s + 1,se,depth1,0); // Value to assign\n                if (s0<ve1) { // X or [ X,_Y,_Z,_C ]\n                  s1 = s0; while (s1<ve1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                  arg1 = compile(s0,s1,depth1,0);\n                  if (_cimg_mp_is_vector(arg1)) { // Coordinates specified as a vector\n                    p2 = _cimg_mp_vector_size(arg1); // Vector size\n                    ++arg1;\n                    if (p2>1) {\n                      arg2 = arg1 + 1;\n                      if (p2>2) {\n                        arg3 = arg2 + 1;\n                        if (p2>3) arg4 = arg3 + 1;\n                      }\n                    }\n                  } else if (s1<ve1) { // Y\n                    s2 = ++s1; while (s2<ve1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                    arg2 = compile(s1,s2,depth1,0);\n                    if (s2<ve1) { // Z\n                      s3 = ++s2; while (s3<ve1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                      arg3 = compile(s2,s3,depth1,0);\n                      if (s3<ve1) arg4 = compile(++s3,ve1,depth1,0); // C\n                    }\n                  }\n                }\n\n                if (_cimg_mp_is_vector(arg5)) {\n                  p2 = ~0U; // 'p2' must be the dimension of the vector-valued operand if any\n                  if (p1==~0U) p2 = imgin._spectrum;\n                  else if (_cimg_mp_is_constant(p1)) {\n                    p3 = (unsigned int)cimg::mod((int)mem[p1],listin.width());\n                    p2 = listin[p3]._spectrum;\n                  }\n                  _cimg_mp_check_vector0(p2);\n                } else p2 = 0;\n                _cimg_mp_check_type(arg5,2,*ss>='i'?1:3,p2);\n\n                if (p_ref) {\n                  *p_ref = _cimg_mp_is_vector(arg5)?5:3;\n                  p_ref[1] = p1;\n                  p_ref[2] = (unsigned int)is_relative;\n                  p_ref[3] = arg1;\n                  p_ref[4] = arg2;\n                  p_ref[5] = arg3;\n                  p_ref[6] = arg4;\n                  if (_cimg_mp_is_vector(arg5))\n                    set_variable_vector(arg5); // Prevent from being used in further optimization\n                  else if (_cimg_mp_is_comp(arg5)) memtype[arg5] = -2;\n                  if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2;\n                  if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n                  if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2;\n                  if (_cimg_mp_is_comp(arg3)) memtype[arg3] = -2;\n                  if (_cimg_mp_is_comp(arg4)) memtype[arg4] = -2;\n                }\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg5);\n                  if (*ss>='i')\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_jxyzc:mp_list_set_ixyzc),\n                                        arg5,p1,arg1,arg2,arg3,arg4).move_to(code);\n                  else if (_cimg_mp_is_scalar(arg5))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_s:mp_list_set_Ixyz_s),\n                                        arg5,p1,arg1,arg2,arg3).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_v:mp_list_set_Ixyz_v),\n                                        arg5,p1,arg1,arg2,arg3,_cimg_mp_vector_size(arg5)).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg5);\n                  if (*ss>='i')\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_jxyzc:mp_set_ixyzc),\n                                        arg5,arg1,arg2,arg3,arg4).move_to(code);\n                  else if (_cimg_mp_is_scalar(arg5))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_s:mp_set_Ixyz_s),\n                                        arg5,arg1,arg2,arg3).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_v:mp_set_Ixyz_v),\n                                        arg5,arg1,arg2,arg3,_cimg_mp_vector_size(arg5)).move_to(code);\n                }\n                _cimg_mp_return(arg5);\n              }\n            }\n\n            // Assign vector value (direct).\n            if (l_variable_name>3 && *ve1==']' && *ss!='[') {\n              s0 = ve1; while (s0>ss && (*s0!='[' || level[s0 - expr._data]!=clevel)) --s0;\n              is_sth = true; // is_valid_variable_name?\n              if (*ss>='0' && *ss<='9') is_sth = false;\n              else for (ns = ss; ns<s0; ++ns)\n                     if (!is_varchar(*ns)) { is_sth = false; break; }\n              if (is_sth && s0>ss) {\n                variable_name[s0 - ss] = 0; // Remove brackets in variable name\n                arg1 = ~0U; // Vector slot\n                arg2 = compile(++s0,ve1,depth1,0); // Index\n                arg3 = compile(s + 1,se,depth1,0); // Value to assign\n                _cimg_mp_check_type(arg3,2,1,0);\n\n                if (variable_name[1]) { // Multi-char variable\n                  cimglist_for(variable_def,i) if (!std::strcmp(variable_name,variable_def[i])) {\n                    arg1 = variable_pos[i]; break;\n                  }\n                } else arg1 = reserved_label[*variable_name]; // Single-char variable\n                if (arg1==~0U) compile(ss,s0 - 1,depth1,0); // Variable does not exist -> error\n                else { // Variable already exists\n                  if (_cimg_mp_is_scalar(arg1)) compile(ss,s,depth1,0); // Variable is not a vector -> error\n                  if (_cimg_mp_is_constant(arg2)) { // Constant index -> return corresponding variable slot directly\n                    nb = (int)mem[arg2];\n                    if (nb>=0 && nb<(int)_cimg_mp_vector_size(arg1)) {\n                      arg1+=nb + 1;\n                      CImg<ulongT>::vector((ulongT)mp_copy,arg1,arg3).move_to(code);\n                      _cimg_mp_return(arg1);\n                    }\n                    compile(ss,s,depth1,0); // Out-of-bounds reference -> error\n                  }\n\n                  // Case of non-constant index -> return assigned value + linked reference\n                  if (p_ref) {\n                    *p_ref = 1;\n                    p_ref[1] = arg1;\n                    p_ref[2] = arg2;\n                    if (_cimg_mp_is_comp(arg3)) memtype[arg3] = -2; // Prevent from being used in further optimization\n                    if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2;\n                  }\n                  CImg<ulongT>::vector((ulongT)mp_vector_set_off,arg3,arg1,(ulongT)_cimg_mp_vector_size(arg1),\n                                       arg2,arg3).\n                    move_to(code);\n                  _cimg_mp_return(arg3);\n                }\n              }\n            }\n\n            // Assign user-defined macro.\n            if (l_variable_name>2 && *ve1==')' && *ss!='(') {\n              s0 = ve1; while (s0>ss && *s0!='(') --s0;\n              is_sth = std::strncmp(variable_name,\"debug(\",6) &&\n                std::strncmp(variable_name,\"print(\",6); // is_valid_function_name?\n              if (*ss>='0' && *ss<='9') is_sth = false;\n              else for (ns = ss; ns<s0; ++ns)\n                     if (!is_varchar(*ns)) { is_sth = false; break; }\n\n              if (is_sth && s0>ss) { // Looks like a valid function declaration\n                s0 = variable_name._data + (s0 - ss);\n                *s0 = 0;\n                s1 = variable_name._data + l_variable_name - 1; // Pointer to closing parenthesis\n                CImg<charT>(variable_name._data,(unsigned int)(s0 - variable_name._data + 1)).move_to(macro_def,0);\n                ++s; while (*s && (signed char)*s<=' ') ++s;\n                CImg<charT>(s,(unsigned int)(se - s + 1)).move_to(macro_body,0);\n\n                p1 = 1; // Indice of current parsed argument\n                for (s = s0 + 1; s<=s1; ++p1, s = ns + 1) { // Parse function arguments\n                  if (p1>24) {\n                    *se = saved_char;\n                    cimg::strellipsize(variable_name,64);\n                    s0 = ss - 4>expr._data?ss - 4:expr._data;\n                    cimg::strellipsize(s0,64);\n                    throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                                \"CImg<%s>::%s: %s: Too much specified arguments (>24) in macro \"\n                                                \"definition '%s()', in expression '%s%s%s'.\",\n                                                pixel_type(),_cimg_mp_calling_function,s_op,\n                                                variable_name._data,\n                                                s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n                  }\n                  while (*s && (signed char)*s<=' ') ++s;\n                  if (*s==')' && p1==1) break; // Function has no arguments\n\n                  s2 = s; // Start of the argument name\n                  is_sth = true; // is_valid_argument_name?\n                  if (*s>='0' && *s<='9') is_sth = false;\n                  else for (ns = s; ns<s1 && *ns!=',' && (signed char)*ns>' '; ++ns)\n                         if (!is_varchar(*ns)) { is_sth = false; break; }\n                  s3 = ns; // End of the argument name\n                  while (*ns && (signed char)*ns<=' ') ++ns;\n                  if (!is_sth || s2==s3 || (*ns!=',' && ns!=s1)) {\n                    *se = saved_char;\n                    cimg::strellipsize(variable_name,64);\n                    s0 = ss - 4>expr._data?ss - 4:expr._data;\n                    cimg::strellipsize(s0,64);\n                    throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                                \"CImg<%s>::%s: %s: %s name specified for argument %u when defining \"\n                                                \"macro '%s()', in expression '%s%s%s'.\",\n                                                pixel_type(),_cimg_mp_calling_function,s_op,\n                                                is_sth?\"Empty\":\"Invalid\",p1,\n                                                variable_name._data,\n                                                s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n                  }\n                  if (ns==s1 || *ns==',') { // New argument found\n                    *s3 = 0;\n                    p2 = (unsigned int)(s3 - s2); // Argument length\n                    for (ps = std::strstr(macro_body[0],s2); ps; ps = std::strstr(ps,s2)) { // Replace by arg number\n                      if (!((ps>macro_body[0]._data && is_varchar(*(ps - 1))) ||\n                            (ps + p2<macro_body[0].end() && is_varchar(*(ps + p2))))) {\n                        if (ps>macro_body[0]._data && *(ps - 1)=='#') { // Remove pre-number sign\n                          *(ps - 1) = (char)p1;\n                          if (ps + p2<macro_body[0].end() && *(ps + p2)=='#') { // Has pre & post number signs\n                            std::memmove(ps,ps + p2 + 1,macro_body[0].end() - ps - p2 - 1);\n                            macro_body[0]._width-=p2 + 1;\n                          } else { // Has pre number sign only\n                            std::memmove(ps,ps + p2,macro_body[0].end() - ps - p2);\n                            macro_body[0]._width-=p2;\n                          }\n                        } else if (ps + p2<macro_body[0].end() && *(ps + p2)=='#') { // Remove post-number sign\n                          *(ps++) = (char)p1;\n                          std::memmove(ps,ps + p2,macro_body[0].end() - ps - p2);\n                          macro_body[0]._width-=p2;\n                        } else { // Not near a number sign\n                          if (p2<3) {\n                            ps-=(ulongT)macro_body[0]._data;\n                            macro_body[0].resize(macro_body[0]._width - p2 + 3,1,1,1,0);\n                            ps+=(ulongT)macro_body[0]._data;\n                          } else macro_body[0]._width-=p2 - 3;\n                          std::memmove(ps + 3,ps + p2,macro_body[0].end() - ps - 3);\n                          *(ps++) = '(';\n                          *(ps++) = (char)p1;\n                          *(ps++) = ')';\n                        }\n                      } else ++ps;\n                    }\n                  }\n                }\n\n                // Store number of arguments.\n                macro_def[0].resize(macro_def[0]._width + 1,1,1,1,0).back() = (char)(p1 - 1);\n\n                // Detect parts of function body inside a string.\n                is_inside_string(macro_body[0]).move_to(macro_body_is_string,0);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n            }\n\n            // Check if the variable name could be valid. If not, this is probably an lvalue assignment.\n            is_sth = true; // is_valid_variable_name?\n            const bool is_const = l_variable_name>6 && !std::strncmp(variable_name,\"const \",6);\n\n            s0 = variable_name._data;\n            if (is_const) {\n              s0+=6; while ((signed char)*s0<=' ') ++s0;\n              variable_name.resize(variable_name.end() - s0,1,1,1,0,0,1);\n            }\n\n            if (*variable_name>='0' && *variable_name<='9') is_sth = false;\n            else for (ns = variable_name._data; *ns; ++ns)\n                   if (!is_varchar(*ns)) { is_sth = false; break; }\n\n            // Assign variable (direct).\n            if (is_sth) {\n              arg3 = variable_name[1]?~0U:*variable_name; // One-char variable\n              if (variable_name[1] && !variable_name[2]) { // Two-chars variable\n                c1 = variable_name[0];\n                c2 = variable_name[1];\n                if (c1=='w' && c2=='h') arg3 = 0; // wh\n                else if (c1=='p' && c2=='i') arg3 = 3; // pi\n                else if (c1=='i') {\n                  if (c2>='0' && c2<='9') arg3 = 19 + c2 - '0'; // i0...i9\n                  else if (c2=='m') arg3 = 4; // im\n                  else if (c2=='M') arg3 = 5; // iM\n                  else if (c2=='a') arg3 = 6; // ia\n                  else if (c2=='v') arg3 = 7; // iv\n                  else if (c2=='s') arg3 = 8; // is\n                  else if (c2=='p') arg3 = 9; // ip\n                  else if (c2=='c') arg3 = 10; // ic\n                } else if (c2=='m') {\n                  if (c1=='x') arg3 = 11; // xm\n                  else if (c1=='y') arg3 = 12; // ym\n                  else if (c1=='z') arg3 = 13; // zm\n                  else if (c1=='c') arg3 = 14; // cm\n                } else if (c2=='M') {\n                  if (c1=='x') arg3 = 15; // xM\n                  else if (c1=='y') arg3 = 16; // yM\n                  else if (c1=='z') arg3 = 17; // zM\n                  else if (c1=='c') arg3 = 18; // cM\n                }\n              } else if (variable_name[1] && variable_name[2] && !variable_name[3]) { // Three-chars variable\n                c1 = variable_name[0];\n                c2 = variable_name[1];\n                c3 = variable_name[2];\n                if (c1=='w' && c2=='h' && c3=='d') arg3 = 1; // whd\n              } else if (variable_name[1] && variable_name[2] && variable_name[3] &&\n                         !variable_name[4]) { // Four-chars variable\n                c1 = variable_name[0];\n                c2 = variable_name[1];\n                c3 = variable_name[2];\n                c4 = variable_name[3];\n                if (c1=='w' && c2=='h' && c3=='d' && c4=='s') arg3 = 2; // whds\n              } else if (!std::strcmp(variable_name,\"interpolation\")) arg3 = 29; // interpolation\n              else if (!std::strcmp(variable_name,\"boundary\")) arg3 = 30; // boundary\n\n              arg1 = ~0U;\n              arg2 = compile(s + 1,se,depth1,0);\n              if (is_const) _cimg_mp_check_constant(arg2,2,0);\n\n              if (arg3!=~0U) // One-char variable, or variable in reserved_labels\n                arg1 = reserved_label[arg3];\n              else // Multi-char variable name : check for existing variable with same name\n                cimglist_for(variable_def,i)\n                  if (!std::strcmp(variable_name,variable_def[i])) { arg1 = variable_pos[i]; break; }\n\n              if (arg1==~0U) { // Create new variable\n                if (_cimg_mp_is_vector(arg2)) { // Vector variable\n                  arg1 = is_comp_vector(arg2)?arg2:vector_copy(arg2);\n                  set_variable_vector(arg1);\n                } else { // Scalar variable\n                  if (is_const) arg1 = arg2;\n                  else {\n                    arg1 = _cimg_mp_is_comp(arg2)?arg2:scalar1(mp_copy,arg2);\n                    memtype[arg1] = -1;\n                  }\n                }\n\n                if (arg3!=~0U) reserved_label[arg3] = arg1;\n                else {\n                  if (variable_def._width>=variable_pos._width) variable_pos.resize(-200,1,1,1,0);\n                  variable_pos[variable_def._width] = arg1;\n                  variable_name.move_to(variable_def);\n                }\n\n              } else { // Variable already exists -> assign a new value\n                if (is_const || _cimg_mp_is_constant(arg1)) {\n                  *se = saved_char;\n                  cimg::strellipsize(variable_name,64);\n                  s0 = ss - 4>expr._data?ss - 4:expr._data;\n                  cimg::strellipsize(s0,64);\n                  throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                              \"CImg<%s>::%s: %s: Invalid assignment of %sconst variable '%s'%s, \"\n                                              \"in expression '%s%s%s'.\",\n                                              pixel_type(),_cimg_mp_calling_function,s_op,\n                                              _cimg_mp_is_constant(arg1)?\"already-defined \":\"non-\",\n                                              variable_name._data,\n                                              !_cimg_mp_is_constant(arg1) && is_const?\" as a new const variable\":\"\",\n                                              s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n                }\n                _cimg_mp_check_type(arg2,2,_cimg_mp_is_vector(arg1)?3:1,_cimg_mp_vector_size(arg1));\n                if (_cimg_mp_is_vector(arg1)) { // Vector\n                  if (_cimg_mp_is_vector(arg2)) // From vector\n                    CImg<ulongT>::vector((ulongT)mp_vector_copy,arg1,arg2,(ulongT)_cimg_mp_vector_size(arg1)).\n                      move_to(code);\n                  else // From scalar\n                    CImg<ulongT>::vector((ulongT)mp_vector_init,arg1,1,(ulongT)_cimg_mp_vector_size(arg1),arg2).\n                      move_to(code);\n                } else // Scalar\n                  CImg<ulongT>::vector((ulongT)mp_copy,arg1,arg2).move_to(code);\n              }\n              _cimg_mp_return(arg1);\n            }\n\n            // Assign lvalue (variable name was not valid for a direct assignment).\n            arg1 = ~0U;\n            is_sth = (bool)std::strchr(variable_name,'?'); // Contains_ternary_operator?\n            if (is_sth) break; // Do nothing and make ternary operator prioritary over assignment\n\n            if (l_variable_name>2 && (std::strchr(variable_name,'(') || std::strchr(variable_name,'['))) {\n              ref.assign(7);\n              arg1 = compile(ss,s,depth1,ref); // Lvalue slot\n              arg2 = compile(s + 1,se,depth1,0); // Value to assign\n\n              if (*ref==1) { // Vector value (scalar): V[k] = scalar\n                _cimg_mp_check_type(arg2,2,1,0);\n                arg3 = ref[1]; // Vector slot\n                arg4 = ref[2]; // Index\n                if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n                CImg<ulongT>::vector((ulongT)mp_vector_set_off,arg2,arg3,(ulongT)_cimg_mp_vector_size(arg3),arg4,arg2).\n                  move_to(code);\n                _cimg_mp_return(arg2);\n              }\n\n              if (*ref==2) { // Image value (scalar): i/j[_#ind,off] = scalar\n                is_parallelizable = false;\n                _cimg_mp_check_type(arg2,2,1,0);\n                p1 = ref[1]; // Index\n                is_relative = (bool)ref[2];\n                arg3 = ref[3]; // Offset\n                if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg2);\n                  CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_joff:mp_list_set_ioff),\n                                      arg2,p1,arg3).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg2);\n                  CImg<ulongT>::vector((ulongT)(is_relative?mp_set_joff:mp_set_ioff),\n                                      arg2,arg3).move_to(code);\n                }\n                _cimg_mp_return(arg2);\n              }\n\n              if (*ref==3) { // Image value (scalar): i/j(_#ind,_x,_y,_z,_c) = scalar\n                is_parallelizable = false;\n                _cimg_mp_check_type(arg2,2,1,0);\n                p1 = ref[1]; // Index\n                is_relative = (bool)ref[2];\n                arg3 = ref[3]; // X\n                arg4 = ref[4]; // Y\n                arg5 = ref[5]; // Z\n                arg6 = ref[6]; // C\n                if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg2);\n                  CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_jxyzc:mp_list_set_ixyzc),\n                                      arg2,p1,arg3,arg4,arg5,arg6).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg2);\n                  CImg<ulongT>::vector((ulongT)(is_relative?mp_set_jxyzc:mp_set_ixyzc),\n                                      arg2,arg3,arg4,arg5,arg6).move_to(code);\n                }\n                _cimg_mp_return(arg2);\n              }\n\n              if (*ref==4) { // Image value (vector): I/J[_#ind,off] = value\n                is_parallelizable = false;\n                _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n                p1 = ref[1]; // Index\n                is_relative = (bool)ref[2];\n                arg3 = ref[3]; // Offset\n                if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg2);\n                  if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_s:mp_list_set_Ioff_s),\n                                        arg2,p1,arg3).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_v:mp_list_set_Ioff_v),\n                                        arg2,p1,arg3,_cimg_mp_vector_size(arg2)).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg2);\n                  if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_s:mp_set_Ioff_s),\n                                        arg2,arg3).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_v:mp_set_Ioff_v),\n                                        arg2,arg3,_cimg_mp_vector_size(arg2)).move_to(code);\n                }\n                _cimg_mp_return(arg2);\n              }\n\n              if (*ref==5) { // Image value (vector): I/J(_#ind,_x,_y,_z,_c) = value\n                is_parallelizable = false;\n                _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n                p1 = ref[1]; // Index\n                is_relative = (bool)ref[2];\n                arg3 = ref[3]; // X\n                arg4 = ref[4]; // Y\n                arg5 = ref[5]; // Z\n                if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n                if (p1!=~0U) {\n                  if (!listout) _cimg_mp_return(arg2);\n                  if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_s:mp_list_set_Ixyz_s),\n                                        arg2,p1,arg3,arg4,arg5).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_v:mp_list_set_Ixyz_v),\n                                        arg2,p1,arg3,arg4,arg5,_cimg_mp_vector_size(arg2)).move_to(code);\n                } else {\n                  if (!imgout) _cimg_mp_return(arg2);\n                  if (_cimg_mp_is_scalar(arg2))\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_s:mp_set_Ixyz_s),\n                                        arg2,arg3,arg4,arg5).move_to(code);\n                  else\n                    CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_v:mp_set_Ixyz_v),\n                                        arg2,arg3,arg4,arg5,_cimg_mp_vector_size(arg2)).move_to(code);\n                }\n                _cimg_mp_return(arg2);\n              }\n\n              if (_cimg_mp_is_vector(arg1)) { // Vector variable: V = value\n                _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n                if (_cimg_mp_is_vector(arg2)) // From vector\n                  CImg<ulongT>::vector((ulongT)mp_vector_copy,arg1,arg2,(ulongT)_cimg_mp_vector_size(arg1)).\n                    move_to(code);\n                else // From scalar\n                  CImg<ulongT>::vector((ulongT)mp_vector_init,arg1,1,(ulongT)_cimg_mp_vector_size(arg1),arg2).\n                    move_to(code);\n                _cimg_mp_return(arg1);\n              }\n\n              if (_cimg_mp_is_variable(arg1)) { // Scalar variable: s = scalar\n                _cimg_mp_check_type(arg2,2,1,0);\n                CImg<ulongT>::vector((ulongT)mp_copy,arg1,arg2).move_to(code);\n                _cimg_mp_return(arg1);\n              }\n            }\n\n            // No assignment expressions match -> error\n            *se = saved_char;\n            cimg::strellipsize(variable_name,64);\n            s0 = ss - 4>expr._data?ss - 4:expr._data;\n            cimg::strellipsize(s0,64);\n            throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                        \"CImg<%s>::%s: %s: Invalid %slvalue '%s', \"\n                                        \"in expression '%s%s%s'.\",\n                                        pixel_type(),_cimg_mp_calling_function,s_op,\n                                        arg1!=~0U && _cimg_mp_is_constant(arg1)?\"const \":\"\",\n                                        variable_name._data,\n                                        s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n          }\n\n        // Apply unary/binary/ternary operators. The operator precedences should be the same as in C++.\n        for (s = se2, ps = se3, ns = ps - 1; s>ss1; --s, --ps, --ns) // Here, ns = ps - 1\n          if (*s=='=' && (*ps=='*' || *ps=='/' || *ps=='^') && *ns==*ps &&\n              level[s - expr._data]==clevel) { // Self-operators for complex numbers only (**=,//=,^^=)\n            _cimg_mp_op(*ps=='*'?\"Operator '**='\":*ps=='/'?\"Operator '//='\":\"Operator '^^='\");\n\n            ref.assign(7);\n            arg1 = compile(ss,ns,depth1,ref); // Vector slot\n            arg2 = compile(s + 1,se,depth1,0); // Right operand\n            _cimg_mp_check_type(arg1,1,2,2);\n            _cimg_mp_check_type(arg2,2,3,2);\n            if (_cimg_mp_is_vector(arg2)) { // Complex **= complex\n              if (*ps=='*')\n                CImg<ulongT>::vector((ulongT)mp_complex_mul,arg1,arg1,arg2).move_to(code);\n              else if (*ps=='/')\n                CImg<ulongT>::vector((ulongT)mp_complex_div_vv,arg1,arg1,arg2).move_to(code);\n              else\n                CImg<ulongT>::vector((ulongT)mp_complex_pow_vv,arg1,arg1,arg2).move_to(code);\n            } else { // Complex **= scalar\n              if (*ps=='*') {\n                if (arg2==1) _cimg_mp_return(arg1);\n                self_vector_s(arg1,mp_self_mul,arg2);\n              } else if (*ps=='/') {\n                if (arg2==1) _cimg_mp_return(arg1);\n                self_vector_s(arg1,mp_self_div,arg2);\n              } else {\n                if (arg2==1) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)mp_complex_pow_vs,arg1,arg1,arg2).move_to(code);\n              }\n            }\n\n            // Write computed value back in image if necessary.\n            if (*ref==4) { // Image value (vector): I/J[_#ind,off] **= value\n              is_parallelizable = false;\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // Offset\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_v:mp_list_set_Ioff_v),\n                                    arg1,p1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_v:mp_set_Ioff_v),\n                                    arg1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n              }\n\n            } else if (*ref==5) { // Image value (vector): I/J(_#ind,_x,_y,_z,_c) **= value\n              is_parallelizable = false;\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // X\n              arg4 = ref[4]; // Y\n              arg5 = ref[5]; // Z\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_v:mp_list_set_Ixyz_v),\n                                    arg1,p1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_v:mp_set_Ixyz_v),\n                                    arg1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n              }\n            }\n\n            _cimg_mp_return(arg1);\n          }\n\n        for (s = se2, ps = se3, ns = ps - 1; s>ss1; --s, --ps, --ns) // Here, ns = ps - 1\n          if (*s=='=' && (*ps=='+' || *ps=='-' || *ps=='*' || *ps=='/' || *ps=='%' ||\n                          *ps=='&' || *ps=='^' || *ps=='|' ||\n                          (*ps=='>' && *ns=='>') || (*ps=='<' && *ns=='<')) &&\n              level[s - expr._data]==clevel) { // Self-operators (+=,-=,*=,/=,%=,>>=,<<=,&=,^=,|=)\n            switch (*ps) {\n            case '+' : op = mp_self_add; _cimg_mp_op(\"Operator '+='\"); break;\n            case '-' : op = mp_self_sub; _cimg_mp_op(\"Operator '-='\"); break;\n            case '*' : op = mp_self_mul; _cimg_mp_op(\"Operator '*='\"); break;\n            case '/' : op = mp_self_div; _cimg_mp_op(\"Operator '/='\"); break;\n            case '%' : op = mp_self_modulo; _cimg_mp_op(\"Operator '%='\"); break;\n            case '<' : op = mp_self_bitwise_left_shift; _cimg_mp_op(\"Operator '<<='\"); break;\n            case '>' : op = mp_self_bitwise_right_shift; _cimg_mp_op(\"Operator '>>='\"); break;\n            case '&' : op = mp_self_bitwise_and; _cimg_mp_op(\"Operator '&='\"); break;\n            case '|' : op = mp_self_bitwise_or; _cimg_mp_op(\"Operator '|='\"); break;\n            default : op = mp_self_pow; _cimg_mp_op(\"Operator '^='\"); break;\n            }\n            s1 = *ps=='>' || *ps=='<'?ns:ps;\n\n            ref.assign(7);\n            arg1 = compile(ss,s1,depth1,ref); // Variable slot\n            arg2 = compile(s + 1,se,depth1,0); // Value to apply\n\n            // Check for particular case to be simplified.\n            if ((op==mp_self_add || op==mp_self_sub) && !arg2) _cimg_mp_return(arg1);\n            if ((op==mp_self_mul || op==mp_self_div) && arg2==1) _cimg_mp_return(arg1);\n\n            // Apply operator on a copy to prevent modifying a constant or a variable.\n            if (*ref && (_cimg_mp_is_constant(arg1) || _cimg_mp_is_vector(arg1) || _cimg_mp_is_variable(arg1))) {\n              if (_cimg_mp_is_vector(arg1)) arg1 = vector_copy(arg1);\n              else arg1 = scalar1(mp_copy,arg1);\n            }\n\n            if (*ref==1) { // Vector value (scalar): V[k] += scalar\n              _cimg_mp_check_type(arg2,2,1,0);\n              arg3 = ref[1]; // Vector slot\n              arg4 = ref[2]; // Index\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              CImg<ulongT>::vector((ulongT)op,arg1,arg2).move_to(code);\n              CImg<ulongT>::vector((ulongT)mp_vector_set_off,arg1,arg3,(ulongT)_cimg_mp_vector_size(arg3),arg4,arg1).\n                move_to(code);\n              _cimg_mp_return(arg1);\n            }\n\n            if (*ref==2) { // Image value (scalar): i/j[_#ind,off] += scalar\n              is_parallelizable = false;\n              _cimg_mp_check_type(arg2,2,1,0);\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // Offset\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              CImg<ulongT>::vector((ulongT)op,arg1,arg2).move_to(code);\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_joff:mp_list_set_ioff),\n                                    arg1,p1,arg3).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_joff:mp_set_ioff),\n                                    arg1,arg3).move_to(code);\n              }\n              _cimg_mp_return(arg1);\n            }\n\n            if (*ref==3) { // Image value (scalar): i/j(_#ind,_x,_y,_z,_c) += scalar\n              is_parallelizable = false;\n              _cimg_mp_check_type(arg2,2,1,0);\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // X\n              arg4 = ref[4]; // Y\n              arg5 = ref[5]; // Z\n              arg6 = ref[6]; // C\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              CImg<ulongT>::vector((ulongT)op,arg1,arg2).move_to(code);\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_jxyzc:mp_list_set_ixyzc),\n                                    arg1,p1,arg3,arg4,arg5,arg6).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_jxyzc:mp_set_ixyzc),\n                                    arg1,arg3,arg4,arg5,arg6).move_to(code);\n              }\n              _cimg_mp_return(arg1);\n            }\n\n            if (*ref==4) { // Image value (vector): I/J[_#ind,off] += value\n              is_parallelizable = false;\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // Offset\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              if (_cimg_mp_is_scalar(arg2)) self_vector_s(arg1,op,arg2); else self_vector_v(arg1,op,arg2);\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_v:mp_list_set_Ioff_v),\n                                    arg1,p1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_v:mp_set_Ioff_v),\n                                    arg1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n              }\n              _cimg_mp_return(arg1);\n            }\n\n            if (*ref==5) { // Image value (vector): I/J(_#ind,_x,_y,_z,_c) += value\n              is_parallelizable = false;\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              p1 = ref[1]; // Index\n              is_relative = (bool)ref[2];\n              arg3 = ref[3]; // X\n              arg4 = ref[4]; // Y\n              arg5 = ref[5]; // Z\n              if (p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n              if (_cimg_mp_is_scalar(arg2)) self_vector_s(arg1,op,arg2); else self_vector_v(arg1,op,arg2);\n              if (p1!=~0U) {\n                if (!listout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_v:mp_list_set_Ixyz_v),\n                                    arg1,p1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n              } else {\n                if (!imgout) _cimg_mp_return(arg1);\n                CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_v:mp_set_Ixyz_v),\n                                    arg1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n              }\n              _cimg_mp_return(arg1);\n            }\n\n            if (_cimg_mp_is_vector(arg1)) { // Vector variable: V += value\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              if (_cimg_mp_is_vector(arg2)) self_vector_v(arg1,op,arg2); // Vector += vector\n              else self_vector_s(arg1,op,arg2); // Vector += scalar\n              _cimg_mp_return(arg1);\n            }\n\n            if (_cimg_mp_is_variable(arg1)) { // Scalar variable: s += scalar\n              _cimg_mp_check_type(arg2,2,1,0);\n              CImg<ulongT>::vector((ulongT)op,arg1,arg2).move_to(code);\n              _cimg_mp_return(arg1);\n            }\n\n            variable_name.assign(ss,(unsigned int)(s - ss)).back() = 0;\n            cimg::strpare(variable_name,false,true);\n            *se = saved_char;\n            s0 = ss - 4>expr._data?ss - 4:expr._data;\n            cimg::strellipsize(s0,64);\n            throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                        \"CImg<%s>::%s: %s: Invalid %slvalue '%s', \"\n                                        \"in expression '%s%s%s'.\",\n                                        pixel_type(),_cimg_mp_calling_function,s_op,\n                                        _cimg_mp_is_constant(arg1)?\"const \":\"\",\n                                        variable_name._data,\n                                        s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n          }\n\n        for (s = ss1; s<se1; ++s)\n          if (*s=='?' && level[s - expr._data]==clevel) { // Ternary operator 'cond?expr1:expr2'\n            _cimg_mp_op(\"Operator '?:'\");\n            s1 = s + 1; while (s1<se1 && (*s1!=':' || level[s1 - expr._data]!=clevel)) ++s1;\n            arg1 = compile(ss,s,depth1,0);\n            _cimg_mp_check_type(arg1,1,1,0);\n            if (_cimg_mp_is_constant(arg1)) {\n              if ((bool)mem[arg1]) return compile(s + 1,*s1!=':'?se:s1,depth1,0);\n              else return *s1!=':'?0:compile(++s1,se,depth1,0);\n            }\n            p2 = code._width;\n            arg2 = compile(s + 1,*s1!=':'?se:s1,depth1,0);\n            p3 = code._width;\n            arg3 = *s1==':'?compile(++s1,se,depth1,0):_cimg_mp_is_vector(arg2)?vector(_cimg_mp_vector_size(arg2),0):0;\n            _cimg_mp_check_type(arg3,3,_cimg_mp_is_vector(arg2)?2:1,_cimg_mp_vector_size(arg2));\n            arg4 = _cimg_mp_vector_size(arg2);\n            if (arg4) pos = vector(arg4); else pos = scalar();\n            CImg<ulongT>::vector((ulongT)mp_if,pos,arg1,arg2,arg3,\n                                p3 - p2,code._width - p3,arg4).move_to(code,p2);\n            _cimg_mp_return(pos);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='|' && *ns=='|' && level[s - expr._data]==clevel) { // Logical or ('||')\n            _cimg_mp_op(\"Operator '||'\");\n            arg1 = compile(ss,s,depth1,0);\n            _cimg_mp_check_type(arg1,1,1,0);\n            if (arg1>0 && arg1<=16) _cimg_mp_return(1);\n            p2 = code._width;\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,1,0);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant(mem[arg1] || mem[arg2]);\n            if (!arg1) _cimg_mp_return(arg2);\n            pos = scalar();\n            CImg<ulongT>::vector((ulongT)mp_logical_or,pos,arg1,arg2,code._width - p2).\n              move_to(code,p2);\n            _cimg_mp_return(pos);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='&' && *ns=='&' && level[s - expr._data]==clevel) { // Logical and ('&&')\n            _cimg_mp_op(\"Operator '&&'\");\n            arg1 = compile(ss,s,depth1,0);\n            _cimg_mp_check_type(arg1,1,1,0);\n            if (!arg1) _cimg_mp_return(0);\n            p2 = code._width;\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,1,0);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant(mem[arg1] && mem[arg2]);\n            if (arg1>0 && arg1<=16) _cimg_mp_return(arg2);\n            pos = scalar();\n            CImg<ulongT>::vector((ulongT)mp_logical_and,pos,arg1,arg2,code._width - p2).\n              move_to(code,p2);\n            _cimg_mp_return(pos);\n          }\n\n        for (s = se2; s>ss; --s)\n          if (*s=='|' && level[s - expr._data]==clevel) { // Bitwise or ('|')\n            _cimg_mp_op(\"Operator '|'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_bitwise_or,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) {\n              if (!arg2) _cimg_mp_return(arg1);\n              _cimg_mp_vector2_vs(mp_bitwise_or,arg1,arg2);\n            }\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) {\n              if (!arg1) _cimg_mp_return(arg2);\n              _cimg_mp_vector2_sv(mp_bitwise_or,arg1,arg2);\n            }\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant((longT)mem[arg1] | (longT)mem[arg2]);\n            if (!arg2) _cimg_mp_return(arg1);\n            if (!arg1) _cimg_mp_return(arg2);\n            _cimg_mp_scalar2(mp_bitwise_or,arg1,arg2);\n          }\n\n        for (s = se2; s>ss; --s)\n          if (*s=='&' && level[s - expr._data]==clevel) { // Bitwise and ('&')\n            _cimg_mp_op(\"Operator '&'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_bitwise_and,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_bitwise_and,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_bitwise_and,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant((longT)mem[arg1] & (longT)mem[arg2]);\n            if (!arg1 || !arg2) _cimg_mp_return(0);\n            _cimg_mp_scalar2(mp_bitwise_and,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='!' && *ns=='=' && level[s - expr._data]==clevel) { // Not equal to ('!=')\n            _cimg_mp_op(\"Operator '!='\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            p1 = _cimg_mp_vector_size(arg1);\n            p2 = _cimg_mp_vector_size(arg2);\n            if (p1 || p2) {\n              if (p1 && p2 && p1!=p2) _cimg_mp_return(1);\n              _cimg_mp_scalar6(mp_vector_neq,arg1,p1,arg2,p2,11,1);\n            }\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]!=mem[arg2]);\n            _cimg_mp_scalar2(mp_neq,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='=' && *ns=='=' && level[s - expr._data]==clevel) { // Equal to ('==')\n            _cimg_mp_op(\"Operator '=='\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            p1 = _cimg_mp_vector_size(arg1);\n            p2 = _cimg_mp_vector_size(arg2);\n            if (p1 || p2) {\n              if (p1 && p2 && p1!=p2) _cimg_mp_return(0);\n              _cimg_mp_scalar6(mp_vector_eq,arg1,p1,arg2,p2,11,1);\n            }\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]==mem[arg2]);\n            _cimg_mp_scalar2(mp_eq,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='<' && *ns=='=' && level[s - expr._data]==clevel) { // Less or equal than ('<=')\n            _cimg_mp_op(\"Operator '<='\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_lte,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_lte,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_lte,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]<=mem[arg2]);\n            _cimg_mp_scalar2(mp_lte,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='>' && *ns=='=' && level[s - expr._data]==clevel) { // Greater or equal than ('>=')\n            _cimg_mp_op(\"Operator '>='\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_gte,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_gte,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_gte,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]>=mem[arg2]);\n            _cimg_mp_scalar2(mp_gte,arg1,arg2);\n          }\n\n        for (s = se2, ns = se1, ps = se3; s>ss; --s, --ns, --ps)\n          if (*s=='<' && *ns!='<' && *ps!='<' && level[s - expr._data]==clevel) { // Less than ('<')\n            _cimg_mp_op(\"Operator '<'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_lt,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_lt,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_lt,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]<mem[arg2]);\n            _cimg_mp_scalar2(mp_lt,arg1,arg2);\n          }\n\n        for (s = se2, ns = se1, ps = se3; s>ss; --s, --ns, --ps)\n          if (*s=='>' && *ns!='>' && *ps!='>' && level[s - expr._data]==clevel) { // Greather than ('>')\n            _cimg_mp_op(\"Operator '>'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_gt,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_gt,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_gt,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]>mem[arg2]);\n            _cimg_mp_scalar2(mp_gt,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='<' && *ns=='<' && level[s - expr._data]==clevel) { // Left bit shift ('<<')\n            _cimg_mp_op(\"Operator '<<'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2))\n              _cimg_mp_vector2_vv(mp_bitwise_left_shift,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) {\n              if (!arg2) _cimg_mp_return(arg1);\n              _cimg_mp_vector2_vs(mp_bitwise_left_shift,arg1,arg2);\n            }\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2))\n              _cimg_mp_vector2_sv(mp_bitwise_left_shift,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant((longT)mem[arg1]<<(unsigned int)mem[arg2]);\n            if (!arg1) _cimg_mp_return(0);\n            if (!arg2) _cimg_mp_return(arg1);\n            _cimg_mp_scalar2(mp_bitwise_left_shift,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='>' && *ns=='>' && level[s - expr._data]==clevel) { // Right bit shift ('>>')\n            _cimg_mp_op(\"Operator '>>'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2))\n              _cimg_mp_vector2_vv(mp_bitwise_right_shift,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) {\n              if (!arg2) _cimg_mp_return(arg1);\n              _cimg_mp_vector2_vs(mp_bitwise_right_shift,arg1,arg2);\n            }\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2))\n              _cimg_mp_vector2_sv(mp_bitwise_right_shift,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant((longT)mem[arg1]>>(unsigned int)mem[arg2]);\n            if (!arg1) _cimg_mp_return(0);\n            if (!arg2) _cimg_mp_return(arg1);\n            _cimg_mp_scalar2(mp_bitwise_right_shift,arg1,arg2);\n          }\n\n        for (ns = se1, s = se2, ps = pexpr._data + (se3 - expr._data); s>ss; --ns, --s, --ps)\n          if (*s=='+' && (*ns!='+' || ns!=se1) && *ps!='-' && *ps!='+' && *ps!='*' && *ps!='/' && *ps!='%' &&\n              *ps!='&' && *ps!='|' && *ps!='^' && *ps!='!' && *ps!='~' && *ps!='#' &&\n              (*ps!='e' || !(ps - pexpr._data>ss - expr._data && (*(ps - 1)=='.' || (*(ps - 1)>='0' &&\n                                                                                     *(ps - 1)<='9')))) &&\n              level[s - expr._data]==clevel) { // Addition ('+')\n            _cimg_mp_op(\"Operator '+'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (!arg2) _cimg_mp_return(arg1);\n            if (!arg1) _cimg_mp_return(arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_add,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_add,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_add,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1] + mem[arg2]);\n            if (code) { // Try to spot linear case 'a*b + c'.\n              CImg<ulongT> &pop = code.back();\n              if (pop[0]==(ulongT)mp_mul && _cimg_mp_is_comp(pop[1]) && (pop[1]==arg1 || pop[1]==arg2)) {\n                arg3 = (unsigned int)pop[1];\n                arg4 = (unsigned int)pop[2];\n                arg5 = (unsigned int)pop[3];\n                code.remove();\n                CImg<ulongT>::vector((ulongT)mp_linear_add,arg3,arg4,arg5,arg3==arg2?arg1:arg2).move_to(code);\n                _cimg_mp_return(arg3);\n              }\n            }\n            if (arg2==1) _cimg_mp_scalar1(mp_increment,arg1);\n            if (arg1==1) _cimg_mp_scalar1(mp_increment,arg2);\n            _cimg_mp_scalar2(mp_add,arg1,arg2);\n          }\n\n        for (ns = se1, s = se2, ps = pexpr._data + (se3 - expr._data); s>ss; --ns, --s, --ps)\n          if (*s=='-' && (*ns!='-' || ns!=se1) && *ps!='-' && *ps!='+' && *ps!='*' && *ps!='/' && *ps!='%' &&\n              *ps!='&' && *ps!='|' && *ps!='^' && *ps!='!' && *ps!='~' && *ps!='#' &&\n              (*ps!='e' || !(ps - pexpr._data>ss - expr._data && (*(ps - 1)=='.' || (*(ps - 1)>='0' &&\n                                                                                     *(ps - 1)<='9')))) &&\n              level[s - expr._data]==clevel) { // Subtraction ('-')\n            _cimg_mp_op(\"Operator '-'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (!arg2) _cimg_mp_return(arg1);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_sub,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_sub,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) {\n              if (!arg1) _cimg_mp_vector1_v(mp_minus,arg2);\n              _cimg_mp_vector2_sv(mp_sub,arg1,arg2);\n            }\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1] - mem[arg2]);\n            if (!arg1) _cimg_mp_scalar1(mp_minus,arg2);\n            if (code) { // Try to spot linear cases 'a*b - c' and 'c - a*b'.\n              CImg<ulongT> &pop = code.back();\n              if (pop[0]==(ulongT)mp_mul && _cimg_mp_is_comp(pop[1]) && (pop[1]==arg1 || pop[1]==arg2)) {\n                arg3 = (unsigned int)pop[1];\n                arg4 = (unsigned int)pop[2];\n                arg5 = (unsigned int)pop[3];\n                code.remove();\n                CImg<ulongT>::vector((ulongT)(arg3==arg1?mp_linear_sub_left:mp_linear_sub_right),\n                                     arg3,arg4,arg5,arg3==arg1?arg2:arg1).move_to(code);\n                _cimg_mp_return(arg3);\n              }\n            }\n            if (arg2==1) _cimg_mp_scalar1(mp_decrement,arg1);\n            _cimg_mp_scalar2(mp_sub,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='*' && *ns=='*' && level[s - expr._data]==clevel) { // Complex multiplication ('**')\n            _cimg_mp_op(\"Operator '**'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg1,1,3,2);\n            _cimg_mp_check_type(arg2,2,3,2);\n            if (arg2==1) _cimg_mp_return(arg1);\n            if (arg1==1) _cimg_mp_return(arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) {\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_mul,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_mul,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_mul,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]*mem[arg2]);\n            if (!arg1 || !arg2) _cimg_mp_return(0);\n            _cimg_mp_scalar2(mp_mul,arg1,arg2);\n          }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='/' && *ns=='/' && level[s - expr._data]==clevel) { // Complex division ('//')\n            _cimg_mp_op(\"Operator '//'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg1,1,3,2);\n            _cimg_mp_check_type(arg2,2,3,2);\n            if (arg2==1) _cimg_mp_return(arg1);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) {\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_div_vv,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_div,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) {\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_div_sv,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]/mem[arg2]);\n            if (!arg1) _cimg_mp_return(0);\n            _cimg_mp_scalar2(mp_div,arg1,arg2);\n          }\n\n        for (s = se2; s>ss; --s) if (*s=='*' && level[s - expr._data]==clevel) { // Multiplication ('*')\n            _cimg_mp_op(\"Operator '*'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            p2 = _cimg_mp_vector_size(arg2);\n            if (p2>0 && _cimg_mp_vector_size(arg1)==p2*p2) { // Particular case of matrix multiplication\n              pos = vector(p2);\n              CImg<ulongT>::vector((ulongT)mp_matrix_mul,pos,arg1,arg2,p2,p2,1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (arg2==1) _cimg_mp_return(arg1);\n            if (arg1==1) _cimg_mp_return(arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_mul,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_mul,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_mul,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]*mem[arg2]);\n\n            if (code) { // Try to spot double multiplication 'a*b*c'.\n              CImg<ulongT> &pop = code.back();\n              if (pop[0]==(ulongT)mp_mul && _cimg_mp_is_comp(pop[1]) && (pop[1]==arg1 || pop[1]==arg2)) {\n                arg3 = (unsigned int)pop[1];\n                arg4 = (unsigned int)pop[2];\n                arg5 = (unsigned int)pop[3];\n                code.remove();\n                CImg<ulongT>::vector((ulongT)mp_mul2,arg3,arg4,arg5,arg3==arg2?arg1:arg2).move_to(code);\n                _cimg_mp_return(arg3);\n              }\n            }\n            if (!arg1 || !arg2) _cimg_mp_return(0);\n            _cimg_mp_scalar2(mp_mul,arg1,arg2);\n          }\n\n        for (s = se2; s>ss; --s) if (*s=='/' && level[s - expr._data]==clevel) { // Division ('/')\n            _cimg_mp_op(\"Operator '/'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (arg2==1) _cimg_mp_return(arg1);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_div,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_div,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_div,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) _cimg_mp_constant(mem[arg1]/mem[arg2]);\n            if (!arg1) _cimg_mp_return(0);\n            _cimg_mp_scalar2(mp_div,arg1,arg2);\n          }\n\n        for (s = se2, ns = se1; s>ss; --s, --ns)\n          if (*s=='%' && *ns!='^' && level[s - expr._data]==clevel) { // Modulo ('%')\n            _cimg_mp_op(\"Operator '%'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_modulo,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_modulo,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_modulo,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant(cimg::mod(mem[arg1],mem[arg2]));\n            _cimg_mp_scalar2(mp_modulo,arg1,arg2);\n          }\n\n        if (se1>ss) {\n          if (*ss=='+' && (*ss1!='+' || (ss2<se && *ss2>='0' && *ss2<='9'))) { // Unary plus ('+')\n            _cimg_mp_op(\"Operator '+'\");\n            _cimg_mp_return(compile(ss1,se,depth1,0));\n          }\n\n          if (*ss=='-' && (*ss1!='-' || (ss2<se && *ss2>='0' && *ss2<='9'))) { // Unary minus ('-')\n            _cimg_mp_op(\"Operator '-'\");\n            arg1 = compile(ss1,se,depth1,0);\n            if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_minus,arg1);\n            if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(-mem[arg1]);\n            _cimg_mp_scalar1(mp_minus,arg1);\n          }\n\n          if (*ss=='!') { // Logical not ('!')\n            _cimg_mp_op(\"Operator '!'\");\n            if (*ss1=='!') { // '!!expr' optimized as 'bool(expr)'\n              arg1 = compile(ss2,se,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_bool,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant((bool)mem[arg1]);\n              _cimg_mp_scalar1(mp_bool,arg1);\n            }\n            arg1 = compile(ss1,se,depth1,0);\n            if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_logical_not,arg1);\n            if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(!mem[arg1]);\n            _cimg_mp_scalar1(mp_logical_not,arg1);\n          }\n\n          if (*ss=='~') { // Bitwise not ('~')\n            _cimg_mp_op(\"Operator '~'\");\n            arg1 = compile(ss1,se,depth1,0);\n            if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_bitwise_not,arg1);\n            if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(~(unsigned int)mem[arg1]);\n            _cimg_mp_scalar1(mp_bitwise_not,arg1);\n          }\n        }\n\n        for (s = se3, ns = se2; s>ss; --s, --ns)\n          if (*s=='^' && *ns=='^' && level[s - expr._data]==clevel) { // Complex power ('^^')\n            _cimg_mp_op(\"Operator '^^'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 2,se,depth1,0);\n            _cimg_mp_check_type(arg1,1,3,2);\n            _cimg_mp_check_type(arg2,2,3,2);\n            pos = vector(2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) {\n              CImg<ulongT>::vector((ulongT)mp_complex_pow_vv,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) {\n              CImg<ulongT>::vector((ulongT)mp_complex_pow_vs,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) {\n              CImg<ulongT>::vector((ulongT)mp_complex_pow_sv,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            CImg<ulongT>::vector((ulongT)mp_complex_pow_ss,pos,arg1,arg2).move_to(code);\n            _cimg_mp_return(pos);\n          }\n\n        for (s = se2; s>ss; --s)\n          if (*s=='^' && level[s - expr._data]==clevel) { // Power ('^')\n            _cimg_mp_op(\"Operator '^'\");\n            arg1 = compile(ss,s,depth1,0);\n            arg2 = compile(s + 1,se,depth1,0);\n            _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n            if (arg2==1) _cimg_mp_return(arg1);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_pow,arg1,arg2);\n            if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_pow,arg1,arg2);\n            if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_pow,arg1,arg2);\n            if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n              _cimg_mp_constant(std::pow(mem[arg1],mem[arg2]));\n            switch (arg2) {\n            case 0 : _cimg_mp_return(1);\n            case 2 : _cimg_mp_scalar1(mp_sqr,arg1);\n            case 3 : _cimg_mp_scalar1(mp_pow3,arg1);\n            case 4 : _cimg_mp_scalar1(mp_pow4,arg1);\n            default :\n              if (_cimg_mp_is_constant(arg2)) {\n                if (mem[arg2]==0.5) { _cimg_mp_scalar1(mp_sqrt,arg1); }\n                else if (mem[arg2]==0.25) { _cimg_mp_scalar1(mp_pow0_25,arg1); }\n              }\n              _cimg_mp_scalar2(mp_pow,arg1,arg2);\n            }\n          }\n\n        // Percentage computation.\n        if (*se1=='%') {\n          arg1 = compile(ss,se1,depth1,0);\n          arg2 = _cimg_mp_is_constant(arg1)?0:constant(100);\n          if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector2_vs(mp_div,arg1,arg2);\n          if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(mem[arg1]/100);\n          _cimg_mp_scalar2(mp_div,arg1,arg2);\n        }\n\n        is_sth = ss1<se1 && (*ss=='+' || *ss=='-') && *ss1==*ss; // is pre-?\n        if (is_sth || (se2>ss && (*se1=='+' || *se1=='-') && *se2==*se1)) { // Pre/post-decrement and increment\n          if ((is_sth && *ss=='+') || (!is_sth && *se1=='+')) {\n            _cimg_mp_op(\"Operator '++'\");\n            op = mp_self_increment;\n          } else {\n            _cimg_mp_op(\"Operator '--'\");\n            op = mp_self_decrement;\n          }\n          ref.assign(7);\n          arg1 = is_sth?compile(ss2,se,depth1,ref):compile(ss,se2,depth1,ref); // Variable slot\n\n          // Apply operator on a copy to prevent modifying a constant or a variable.\n          if (*ref && (_cimg_mp_is_constant(arg1) || _cimg_mp_is_vector(arg1) || _cimg_mp_is_variable(arg1))) {\n            if (_cimg_mp_is_vector(arg1)) arg1 = vector_copy(arg1);\n            else arg1 = scalar1(mp_copy,arg1);\n          }\n\n          if (is_sth) pos = arg1; // Determine return indice, depending on pre/post action\n          else {\n            if (_cimg_mp_is_vector(arg1)) pos = vector_copy(arg1);\n            else pos = scalar1(mp_copy,arg1);\n          }\n\n          if (*ref==1) { // Vector value (scalar): V[k]++\n            arg3 = ref[1]; // Vector slot\n            arg4 = ref[2]; // Index\n            if (is_sth && p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n            CImg<ulongT>::vector((ulongT)op,arg1,1).move_to(code);\n            CImg<ulongT>::vector((ulongT)mp_vector_set_off,arg1,arg3,(ulongT)_cimg_mp_vector_size(arg3),arg4,arg1).\n              move_to(code);\n            _cimg_mp_return(pos);\n          }\n\n          if (*ref==2) { // Image value (scalar): i/j[_#ind,off]++\n            is_parallelizable = false;\n            p1 = ref[1]; // Index\n            is_relative = (bool)ref[2];\n            arg3 = ref[3]; // Offset\n            if (is_sth && p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n            CImg<ulongT>::vector((ulongT)op,arg1).move_to(code);\n            if (p1!=~0U) {\n              if (!listout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_joff:mp_list_set_ioff),\n                                  arg1,p1,arg3).move_to(code);\n            } else {\n              if (!imgout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_set_joff:mp_set_ioff),\n                                  arg1,arg3).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          if (*ref==3) { // Image value (scalar): i/j(_#ind,_x,_y,_z,_c)++\n            is_parallelizable = false;\n            p1 = ref[1]; // Index\n            is_relative = (bool)ref[2];\n            arg3 = ref[3]; // X\n            arg4 = ref[4]; // Y\n            arg5 = ref[5]; // Z\n            arg6 = ref[6]; // C\n            if (is_sth && p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n            CImg<ulongT>::vector((ulongT)op,arg1).move_to(code);\n            if (p1!=~0U) {\n              if (!listout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_jxyzc:mp_list_set_ixyzc),\n                                  arg1,p1,arg3,arg4,arg5,arg6).move_to(code);\n            } else {\n              if (!imgout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_set_jxyzc:mp_set_ixyzc),\n                                  arg1,arg3,arg4,arg5,arg6).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          if (*ref==4) { // Image value (vector): I/J[_#ind,off]++\n            is_parallelizable = false;\n            p1 = ref[1]; // Index\n            is_relative = (bool)ref[2];\n            arg3 = ref[3]; // Offset\n            if (is_sth && p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n            self_vector_s(arg1,op==mp_self_increment?mp_self_add:mp_self_sub,1);\n            if (p1!=~0U) {\n              if (!listout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Joff_v:mp_list_set_Ioff_v),\n                                  arg1,p1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n            } else {\n              if (!imgout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Joff_v:mp_set_Ioff_v),\n                                  arg1,arg3,_cimg_mp_vector_size(arg1)).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          if (*ref==5) { // Image value (vector): I/J(_#ind,_x,_y,_z,_c)++\n            is_parallelizable = false;\n            p1 = ref[1]; // Index\n            is_relative = (bool)ref[2];\n            arg3 = ref[3]; // X\n            arg4 = ref[4]; // Y\n            arg5 = ref[5]; // Z\n            if (is_sth && p_ref) std::memcpy(p_ref,ref,ref._width*sizeof(unsigned int));\n            self_vector_s(arg1,op==mp_self_increment?mp_self_add:mp_self_sub,1);\n            if (p1!=~0U) {\n              if (!listout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_set_Jxyz_v:mp_list_set_Ixyz_v),\n                                  arg1,p1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n            } else {\n              if (!imgout) _cimg_mp_return(pos);\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_set_Jxyz_v:mp_set_Ixyz_v),\n                                  arg1,arg3,arg4,arg5,_cimg_mp_vector_size(arg1)).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          if (_cimg_mp_is_vector(arg1)) { // Vector variable: V++\n            self_vector_s(arg1,op==mp_self_increment?mp_self_add:mp_self_sub,1);\n            _cimg_mp_return(pos);\n          }\n\n          if (_cimg_mp_is_variable(arg1)) { // Scalar variable: s++\n            CImg<ulongT>::vector((ulongT)op,arg1).move_to(code);\n            _cimg_mp_return(pos);\n          }\n\n          if (is_sth) variable_name.assign(ss2,(unsigned int)(se - ss1));\n          else variable_name.assign(ss,(unsigned int)(se1 - ss));\n          variable_name.back() = 0;\n          cimg::strpare(variable_name,false,true);\n          *se = saved_char;\n          cimg::strellipsize(variable_name,64);\n          s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s: Invalid %slvalue '%s', \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,\n                                      _cimg_mp_is_constant(arg1)?\"const \":\"\",\n                                      variable_name._data,\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n\n        // Array-like access to vectors and  image values 'i/j/I/J[_#ind,offset,_boundary]' and 'vector[offset]'.\n        if (*se1==']' && *ss!='[') {\n          _cimg_mp_op(\"Value accessor '[]'\");\n          is_relative = *ss=='j' || *ss=='J';\n          s0 = s1 = std::strchr(ss,'['); do { --s1; } while ((signed char)*s1<=' '); cimg::swap(*s0,*++s1);\n\n          if ((*ss=='I' || *ss=='J') && *ss1=='[' &&\n              (reserved_label[*ss]==~0U || !_cimg_mp_is_vector(reserved_label[*ss]))) { // Image value as a vector\n            if (*ss2=='#') { // Index specified\n              s0 = ss3; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n              p1 = compile(ss3,s0++,depth1,0);\n              _cimg_mp_check_list(false);\n            } else { p1 = ~0U; s0 = ss2; }\n            s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n            p2 = 1 + (p1!=~0U);\n            arg1 = compile(s0,s1,depth1,0); // Offset\n            _cimg_mp_check_type(arg1,p2,1,0);\n            arg2 = ~0U;\n            if (s1<se1) {\n              arg2 = compile(++s1,se1,depth1,0); // Boundary\n              _cimg_mp_check_type(arg2,p2 + 1,1,0);\n            }\n            if (p_ref && arg2==~0U) {\n              *p_ref = 4;\n              p_ref[1] = p1;\n              p_ref[2] = (unsigned int)is_relative;\n              p_ref[3] = arg1;\n              if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2; // Prevent from being used in further optimization\n              if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n            }\n            p2 = ~0U; // 'p2' must be the dimension of the vector-valued operand if any\n            if (p1==~0U) p2 = imgin._spectrum;\n            else if (_cimg_mp_is_constant(p1)) {\n              p3 = (unsigned int)cimg::mod((int)mem[p1],listin.width());\n              p2 = listin[p3]._spectrum;\n            }\n            _cimg_mp_check_vector0(p2);\n            pos = vector(p2);\n            if (p1!=~0U) {\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_Joff:mp_list_Ioff),\n                                  pos,p1,arg1,arg2==~0U?_cimg_mp_boundary:arg2,p2).move_to(code);\n            } else {\n              need_input_copy = true;\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_Joff:mp_Ioff),\n                                  pos,arg1,arg2==~0U?_cimg_mp_boundary:arg2,p2).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          if ((*ss=='i' || *ss=='j') && *ss1=='[' &&\n              (reserved_label[*ss]==~0U || !_cimg_mp_is_vector(reserved_label[*ss]))) { // Image value as a scalar\n            if (*ss2=='#') { // Index specified\n              s0 = ss3; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n              p1 = compile(ss3,s0++,depth1,0);\n            } else { p1 = ~0U; s0 = ss2; }\n            s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n            arg1 = compile(s0,s1,depth1,0); // Offset\n            arg2 = s1<se1?compile(++s1,se1,depth1,0):~0U; // Boundary\n            if (p_ref && arg2==~0U) {\n              *p_ref = 2;\n              p_ref[1] = p1;\n              p_ref[2] = (unsigned int)is_relative;\n              p_ref[3] = arg1;\n              if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2; // Prevent from being used in further optimization\n              if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n            }\n            if (p1!=~0U) {\n              if (!listin) _cimg_mp_return(0);\n              pos = scalar3(is_relative?mp_list_joff:mp_list_ioff,p1,arg1,arg2==~0U?_cimg_mp_boundary:arg2);\n            } else {\n              if (!imgin) _cimg_mp_return(0);\n              need_input_copy = true;\n              pos = scalar2(is_relative?mp_joff:mp_ioff,arg1,arg2==~0U?_cimg_mp_boundary:arg2);\n            }\n            memtype[pos] = -2; // Prevent from being used in further optimization\n            _cimg_mp_return(pos);\n          }\n\n          s0 = se1; while (s0>ss && (*s0!='[' || level[s0 - expr._data]!=clevel)) --s0;\n          if (s0>ss) { // Vector value\n            arg1 = compile(ss,s0,depth1,0);\n            if (_cimg_mp_is_scalar(arg1)) {\n              variable_name.assign(ss,(unsigned int)(s0 - ss + 1)).back() = 0;\n              *se = saved_char;\n              cimg::strellipsize(variable_name,64);\n              s0 = ss - 4>expr._data?ss - 4:expr._data;\n              cimg::strellipsize(s0,64);\n              throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                          \"CImg<%s>::%s: %s: Array brackets used on non-vector variable '%s', \"\n                                          \"in expression '%s%s%s'.\",\n                                          pixel_type(),_cimg_mp_calling_function,s_op,\n                                          variable_name._data,\n                                          s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n\n            }\n            s1 = s0 + 1; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n\n            if (s1<se1) { // Two arguments -> sub-vector extraction\n              p1 = _cimg_mp_vector_size(arg1);\n              arg2 = compile(++s0,s1,depth1,0); // Starting indice\n              arg3 = compile(++s1,se1,depth1,0); // Length\n              _cimg_mp_check_constant(arg3,2,3);\n              arg3 = (unsigned int)mem[arg3];\n              pos = vector(arg3);\n              CImg<ulongT>::vector((ulongT)mp_vector_crop,pos,arg1,p1,arg2,arg3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            // One argument -> vector value reference\n            arg2 = compile(++s0,se1,depth1,0);\n            if (_cimg_mp_is_constant(arg2)) { // Constant index\n              nb = (int)mem[arg2];\n              if (nb>=0 && nb<(int)_cimg_mp_vector_size(arg1)) _cimg_mp_return(arg1 + 1 + nb);\n              variable_name.assign(ss,(unsigned int)(s0 - ss)).back() = 0;\n              *se = saved_char;\n              cimg::strellipsize(variable_name,64);\n              s0 = ss - 4>expr._data?ss - 4:expr._data;\n              cimg::strellipsize(s0,64);\n              throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                          \"CImg<%s>::%s: Out-of-bounds reference '%s[%d]' \"\n                                          \"(vector '%s' has dimension %u), \"\n                                          \"in expression '%s%s%s'.\",\n                                          pixel_type(),_cimg_mp_calling_function,\n                                          variable_name._data,nb,\n                                          variable_name._data,_cimg_mp_vector_size(arg1),\n                                          s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n            }\n            if (p_ref) {\n              *p_ref = 1;\n              p_ref[1] = arg1;\n              p_ref[2] = arg2;\n              if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2; // Prevent from being used in further optimization\n            }\n            pos = scalar3(mp_vector_off,arg1,_cimg_mp_vector_size(arg1),arg2);\n            memtype[pos] = -2; // Prevent from being used in further optimization\n            _cimg_mp_return(pos);\n          }\n        }\n\n        // Look for a function call, an access to image value, or a parenthesis.\n        if (*se1==')') {\n          if (*ss=='(') _cimg_mp_return(compile(ss1,se1,depth1,p_ref)); // Simple parentheses\n          _cimg_mp_op(\"Value accessor '()'\");\n          is_relative = *ss=='j' || *ss=='J';\n          s0 = s1 = std::strchr(ss,'('); do { --s1; } while ((signed char)*s1<=' '); cimg::swap(*s0,*++s1);\n\n          // I/J(_#ind,_x,_y,_z,_interpolation,_boundary)\n          if ((*ss=='I' || *ss=='J') && *ss1=='(') { // Image value as scalar\n            if (*ss2=='#') { // Index specified\n              s0 = ss3; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n              p1 = compile(ss3,s0++,depth1,0);\n              _cimg_mp_check_list(false);\n            } else { p1 = ~0U; s0 = ss2; }\n            arg1 = is_relative?0U:(unsigned int)_cimg_mp_slot_x;\n            arg2 = is_relative?0U:(unsigned int)_cimg_mp_slot_y;\n            arg3 = is_relative?0U:(unsigned int)_cimg_mp_slot_z;\n            arg4 = arg5 = ~0U;\n            if (s0<se1) {\n              s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(s0,s1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) { // Coordinates specified as a vector\n                p2 = _cimg_mp_vector_size(arg1);\n                ++arg1;\n                if (p2>1) {\n                  arg2 = arg1 + 1;\n                  if (p2>2) arg3 = arg2 + 1;\n                }\n                if (s1<se1) {\n                  s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                  arg4 = compile(s1,s2,depth1,0);\n                  arg5 = s2<se1?compile(++s2,se1,depth1,0):~0U;\n                }\n              } else if (s1<se1) {\n                s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                arg2 = compile(s1,s2,depth1,0);\n                if (s2<se1) {\n                  s3 = ++s2; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                  arg3 = compile(s2,s3,depth1,0);\n                  if (s3<se1) {\n                    s2 = ++s3; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                    arg4 = compile(s3,s2,depth1,0);\n                    arg5 = s2<se1?compile(++s2,se1,depth1,0):~0U;\n                  }\n                }\n              }\n            }\n            if (p_ref && arg4==~0U && arg5==~0U) {\n              *p_ref = 5;\n              p_ref[1] = p1;\n              p_ref[2] = (unsigned int)is_relative;\n              p_ref[3] = arg1;\n              p_ref[4] = arg2;\n              p_ref[5] = arg3;\n              if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2; // Prevent from being used in further optimization\n              if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n              if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2;\n              if (_cimg_mp_is_comp(arg3)) memtype[arg3] = -2;\n            }\n            p2 = ~0U; // 'p2' must be the dimension of the vector-valued operand if any\n            if (p1==~0U) p2 = imgin._spectrum;\n            else if (_cimg_mp_is_constant(p1)) {\n              p3 = (unsigned int)cimg::mod((int)mem[p1],listin.width());\n              p2 = listin[p3]._spectrum;\n            }\n            _cimg_mp_check_vector0(p2);\n            pos = vector(p2);\n            if (p1!=~0U)\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_list_Jxyz:mp_list_Ixyz),\n                                   pos,p1,arg1,arg2,arg3,\n                                   arg4==~0U?_cimg_mp_interpolation:arg4,\n                                   arg5==~0U?_cimg_mp_boundary:arg5,p2).move_to(code);\n            else {\n              need_input_copy = true;\n              CImg<ulongT>::vector((ulongT)(is_relative?mp_Jxyz:mp_Ixyz),\n                                  pos,arg1,arg2,arg3,\n                                  arg4==~0U?_cimg_mp_interpolation:arg4,\n                                  arg5==~0U?_cimg_mp_boundary:arg5,p2).move_to(code);\n            }\n            _cimg_mp_return(pos);\n          }\n\n          // i/j(_#ind,_x,_y,_z,_c,_interpolation,_boundary)\n          if ((*ss=='i' || *ss=='j') && *ss1=='(') { // Image value as scalar\n            if (*ss2=='#') { // Index specified\n              s0 = ss3; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n              p1 = compile(ss3,s0++,depth1,0);\n            } else { p1 = ~0U; s0 = ss2; }\n            arg1 = is_relative?0U:(unsigned int)_cimg_mp_slot_x;\n            arg2 = is_relative?0U:(unsigned int)_cimg_mp_slot_y;\n            arg3 = is_relative?0U:(unsigned int)_cimg_mp_slot_z;\n            arg4 = is_relative?0U:(unsigned int)_cimg_mp_slot_c;\n            arg5 = arg6 = ~0U;\n            if (s0<se1) {\n              s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(s0,s1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) { // Coordinates specified as a vector\n                p2 = _cimg_mp_vector_size(arg1);\n                ++arg1;\n                if (p2>1) {\n                  arg2 = arg1 + 1;\n                  if (p2>2) {\n                    arg3 = arg2 + 1;\n                    if (p2>3) arg4 = arg3 + 1;\n                  }\n                }\n                if (s1<se1) {\n                  s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                  arg5 = compile(s1,s2,depth1,0);\n                  arg6 = s2<se1?compile(++s2,se1,depth1,0):~0U;\n                }\n              } else if (s1<se1) {\n                s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                arg2 = compile(s1,s2,depth1,0);\n                if (s2<se1) {\n                  s3 = ++s2; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                  arg3 = compile(s2,s3,depth1,0);\n                  if (s3<se1) {\n                    s2 = ++s3; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                    arg4 = compile(s3,s2,depth1,0);\n                    if (s2<se1) {\n                      s3 = ++s2; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                      arg5 = compile(s2,s3,depth1,0);\n                      arg6 = s3<se1?compile(++s3,se1,depth1,0):~0U;\n                    }\n                  }\n                }\n              }\n            }\n            if (p_ref && arg5==~0U && arg6==~0U) {\n              *p_ref = 3;\n              p_ref[1] = p1;\n              p_ref[2] = (unsigned int)is_relative;\n              p_ref[3] = arg1;\n              p_ref[4] = arg2;\n              p_ref[5] = arg3;\n              p_ref[6] = arg4;\n              if (p1!=~0U && _cimg_mp_is_comp(p1)) memtype[p1] = -2; // Prevent from being used in further optimization\n              if (_cimg_mp_is_comp(arg1)) memtype[arg1] = -2;\n              if (_cimg_mp_is_comp(arg2)) memtype[arg2] = -2;\n              if (_cimg_mp_is_comp(arg3)) memtype[arg3] = -2;\n              if (_cimg_mp_is_comp(arg4)) memtype[arg4] = -2;\n            }\n\n            if (p1!=~0U) {\n              if (!listin) _cimg_mp_return(0);\n              pos = scalar7(is_relative?mp_list_jxyzc:mp_list_ixyzc,\n                            p1,arg1,arg2,arg3,arg4,\n                            arg5==~0U?_cimg_mp_interpolation:arg5,\n                            arg6==~0U?_cimg_mp_boundary:arg6);\n            } else {\n              if (!imgin) _cimg_mp_return(0);\n              need_input_copy = true;\n              pos = scalar6(is_relative?mp_jxyzc:mp_ixyzc,\n                            arg1,arg2,arg3,arg4,\n                            arg5==~0U?_cimg_mp_interpolation:arg5,\n                            arg6==~0U?_cimg_mp_boundary:arg6);\n            }\n            memtype[pos] = -2; // Prevent from being used in further optimization\n            _cimg_mp_return(pos);\n          }\n\n          // Mathematical functions.\n          switch (*ss) {\n\n          case '_' :\n            if (*ss1=='(') // Skip arguments\n              _cimg_mp_return(_cimg_mp_slot_nan);\n            break;\n\n          case 'a' :\n            if (!std::strncmp(ss,\"abs(\",4)) { // Absolute value\n              _cimg_mp_op(\"Function 'abs()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_abs,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::abs(mem[arg1]));\n              _cimg_mp_scalar1(mp_abs,arg1);\n            }\n\n            if (!std::strncmp(ss,\"acos(\",5)) { // Arccos\n              _cimg_mp_op(\"Function 'acos()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_acos,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::acos(mem[arg1]));\n              _cimg_mp_scalar1(mp_acos,arg1);\n            }\n\n            if (!std::strncmp(ss,\"arg(\",4)) { // Nth argument\n              _cimg_mp_op(\"Function 'arg()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              _cimg_mp_check_type(arg1,1,1,0);\n              s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(s1,s2,depth1,0);\n              p2 = _cimg_mp_vector_size(arg2);\n              p3 = 3;\n              CImg<ulongT>::vector((ulongT)mp_arg,0,0,p2,arg1,arg2).move_to(_opcode);\n              for (s = ++s2; s<se; ++s) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                arg3 = compile(s,ns,depth1,0);\n                _cimg_mp_check_type(arg3,p3,p2?2:1,p2);\n                CImg<ulongT>::vector(arg3).move_to(_opcode);\n                ++p3;\n                s = ns;\n              }\n              (_opcode>'y').move_to(opcode);\n              opcode[2] = opcode._height;\n              if (_cimg_mp_is_constant(arg1)) {\n                p3-=1; // Number of args\n                arg1 = (unsigned int)(mem[arg1]<0?mem[arg1] + p3:mem[arg1]);\n                if (arg1<p3) _cimg_mp_return(opcode[4 + arg1]);\n                if (p2) {\n                  pos = vector(p2);\n                  std::memset(&mem[pos] + 1,0,p2*sizeof(double));\n                  _cimg_mp_return(pos);\n                } else _cimg_mp_return(0);\n              }\n              pos = opcode[1] = p2?vector(p2):scalar();\n              opcode.move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"asin(\",5)) { // Arcsin\n              _cimg_mp_op(\"Function 'asin()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_asin,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::asin(mem[arg1]));\n              _cimg_mp_scalar1(mp_asin,arg1);\n            }\n\n            if (!std::strncmp(ss,\"atan(\",5)) { // Arctan\n              _cimg_mp_op(\"Function 'atan()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_atan,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::atan(mem[arg1]));\n              _cimg_mp_scalar1(mp_atan,arg1);\n            }\n\n            if (!std::strncmp(ss,\"atan2(\",6)) { // Arctan2\n              _cimg_mp_op(\"Function 'atan2()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss6,s1,depth1,0);\n              arg2 = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_atan2,arg1,arg2);\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_atan2,arg1,arg2);\n              if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_atan2,arg1,arg2);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n                _cimg_mp_constant(std::atan2(mem[arg1],mem[arg2]));\n              _cimg_mp_scalar2(mp_atan2,arg1,arg2);\n            }\n            break;\n\n          case 'b' :\n            if (!std::strncmp(ss,\"bool(\",5)) { // Boolean cast\n              _cimg_mp_op(\"Function 'bool()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_bool,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant((bool)mem[arg1]);\n              _cimg_mp_scalar1(mp_bool,arg1);\n            }\n\n            if (!std::strncmp(ss,\"break(\",6)) { // Complex absolute value\n              if (pexpr[se2 - expr._data]=='(') { // no arguments?\n                CImg<ulongT>::vector((ulongT)mp_break,_cimg_mp_slot_nan).move_to(code);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n            }\n\n            if (!std::strncmp(ss,\"breakpoint(\",11)) { // Break point (for abort test)\n              _cimg_mp_op(\"Function 'breakpoint()'\");\n              if (pexpr[se2 - expr._data]=='(') { // no arguments?\n                CImg<ulongT>::vector((ulongT)mp_breakpoint,_cimg_mp_slot_nan).move_to(code);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n            }\n            break;\n\n          case 'c' :\n            if (!std::strncmp(ss,\"cabs(\",5)) { // Complex absolute value\n              _cimg_mp_op(\"Function 'cabs()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_check_type(arg1,0,2,2);\n              _cimg_mp_scalar2(mp_complex_abs,arg1 + 1,arg1 + 2);\n            }\n\n            if (!std::strncmp(ss,\"carg(\",5)) { // Complex argument\n              _cimg_mp_op(\"Function 'carg()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_check_type(arg1,0,2,2);\n              _cimg_mp_scalar2(mp_atan2,arg1 + 2,arg1 + 1);\n            }\n\n            if (!std::strncmp(ss,\"cbrt(\",5)) { // Cubic root\n              _cimg_mp_op(\"Function 'cbrt()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_cbrt,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::cbrt(mem[arg1]));\n              _cimg_mp_scalar1(mp_cbrt,arg1);\n            }\n\n            if (!std::strncmp(ss,\"cconj(\",6)) { // Complex conjugate\n              _cimg_mp_op(\"Function 'cconj()'\");\n              arg1 = compile(ss6,se1,depth1,0);\n              _cimg_mp_check_type(arg1,0,2,2);\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_conj,pos,arg1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"cexp(\",5)) { // Complex exponential\n              _cimg_mp_op(\"Function 'cexp()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_check_type(arg1,0,2,2);\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_exp,pos,arg1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"clog(\",5)) { // Complex logarithm\n              _cimg_mp_op(\"Function 'clog()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_check_type(arg1,0,2,2);\n              pos = vector(2);\n              CImg<ulongT>::vector((ulongT)mp_complex_log,pos,arg1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"continue(\",9)) { // Complex absolute value\n              if (pexpr[se2 - expr._data]=='(') { // no arguments?\n                CImg<ulongT>::vector((ulongT)mp_continue,_cimg_mp_slot_nan).move_to(code);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n            }\n\n            if (!std::strncmp(ss,\"copy(\",5)) { // Memory copy\n              _cimg_mp_op(\"Function 'copy()'\");\n              ref.assign(14);\n              s1 = ss5; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = p1 = compile(ss5,s1,depth1,ref);\n              s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(s1,s2,depth1,ref._data + 7);\n              arg3 = ~0U; arg4 = arg5 = arg6 = 1;\n              if (s2<se1) {\n                s3 = ++s2; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                arg3 = compile(s2,s3,depth1,0);\n                if (s3<se1) {\n                  s1 = ++s3; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                  arg4 = compile(s3,s1,depth1,0);\n                  if (s1<se1) {\n                    s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                    arg5 = compile(s1,s2,depth1,0);\n                    arg6 = s2<se1?compile(++s2,se1,depth1,0):1;\n                  }\n                }\n              }\n              if (_cimg_mp_is_vector(arg1) && !ref[0]) ++arg1;\n              if (_cimg_mp_is_vector(arg2)) {\n                if (arg3==~0U) arg3 = _cimg_mp_vector_size(arg2);\n                if (!ref[7]) ++arg2;\n              }\n              if (arg3==~0U) arg3 = 1;\n              _cimg_mp_check_type(arg3,3,1,0);\n              _cimg_mp_check_type(arg4,4,1,0);\n              _cimg_mp_check_type(arg5,5,1,0);\n              _cimg_mp_check_type(arg6,5,1,0);\n              CImg<ulongT>(1,22).move_to(code);\n              code.back().get_shared_rows(0,7).fill((ulongT)mp_memcopy,p1,arg1,arg2,arg3,arg4,arg5,arg6);\n              code.back().get_shared_rows(8,21).fill(ref);\n              _cimg_mp_return(p1);\n            }\n\n            if (!std::strncmp(ss,\"cos(\",4)) { // Cosine\n              _cimg_mp_op(\"Function 'cos()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_cos,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::cos(mem[arg1]));\n              _cimg_mp_scalar1(mp_cos,arg1);\n            }\n\n            if (!std::strncmp(ss,\"cosh(\",5)) { // Hyperbolic cosine\n              _cimg_mp_op(\"Function 'cosh()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_cosh,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::cosh(mem[arg1]));\n              _cimg_mp_scalar1(mp_cosh,arg1);\n            }\n\n            if (!std::strncmp(ss,\"crop(\",5)) { // Image crop\n              _cimg_mp_op(\"Function 'crop()'\");\n              if (*ss5=='#') { // Index specified\n                s0 = ss6; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                p1 = compile(ss6,s0++,depth1,0);\n                _cimg_mp_check_list(false);\n              } else { p1 = ~0U; s0 = ss5; need_input_copy = true; }\n              pos = 0;\n              is_sth = false; // Coordinates specified as a vector?\n              if (ss5<se1) for (s = s0; s<se; ++s, ++pos) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                arg1 = compile(s,ns,depth1,0);\n                if (!pos && _cimg_mp_is_vector(arg1)) { // Coordinates specified as a vector\n                  opcode = CImg<ulongT>::sequence(_cimg_mp_vector_size(arg1),arg1 + 1,\n                                                  arg1 + (ulongT)_cimg_mp_vector_size(arg1));\n                  opcode.resize(1,std::min(opcode._height,4U),1,1,0).move_to(_opcode);\n                  is_sth = true;\n                } else {\n                  _cimg_mp_check_type(arg1,pos + 1,1,0);\n                  CImg<ulongT>::vector(arg1).move_to(_opcode);\n                }\n                s = ns;\n              }\n              (_opcode>'y').move_to(opcode);\n\n              arg1 = 0; arg2 = (p1!=~0U);\n              switch (opcode._height) {\n              case 0 : case 1 :\n                CImg<ulongT>::vector(0,0,0,0,~0U,~0U,~0U,~0U,0).move_to(opcode);\n                break;\n              case 2 :\n                CImg<ulongT>::vector(*opcode,0,0,0,opcode[1],~0U,~0U,~0U,_cimg_mp_boundary).move_to(opcode);\n                arg1 = arg2?3:2;\n                break;\n              case 3 :\n                CImg<ulongT>::vector(*opcode,0,0,0,opcode[1],~0U,~0U,~0U,opcode[2]).move_to(opcode);\n                arg1 = arg2?3:2;\n                break;\n              case 4 :\n                CImg<ulongT>::vector(*opcode,opcode[1],0,0,opcode[2],opcode[3],~0U,~0U,_cimg_mp_boundary).\n                  move_to(opcode);\n                arg1 = (is_sth?2:1) + arg2;\n                break;\n              case 5 :\n                CImg<ulongT>::vector(*opcode,opcode[1],0,0,opcode[2],opcode[3],~0U,~0U,opcode[4]).\n                  move_to(opcode);\n                arg1 = (is_sth?2:1) + arg2;\n                break;\n              case 6 :\n                CImg<ulongT>::vector(*opcode,opcode[1],opcode[2],0,opcode[3],opcode[4],opcode[5],~0U,\n                                    _cimg_mp_boundary).move_to(opcode);\n                arg1 = (is_sth?2:4) + arg2;\n                break;\n              case 7 :\n                CImg<ulongT>::vector(*opcode,opcode[1],opcode[2],0,opcode[3],opcode[4],opcode[5],~0U,\n                                    opcode[6]).move_to(opcode);\n                arg1 = (is_sth?2:4) + arg2;\n                break;\n              case 8 :\n                CImg<ulongT>::vector(*opcode,opcode[1],opcode[2],opcode[3],opcode[4],opcode[5],opcode[6],\n                                    opcode[7],_cimg_mp_boundary).move_to(opcode);\n                arg1 = (is_sth?2:5) + arg2;\n                break;\n              case 9 :\n                arg1 = (is_sth?2:5) + arg2;\n                break;\n              default : // Error -> too much arguments\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Too much arguments specified, \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n\n              _cimg_mp_check_type((unsigned int)*opcode,arg2 + 1,1,0);\n              _cimg_mp_check_type((unsigned int)opcode[1],arg2 + 1 + (is_sth?0:1),1,0);\n              _cimg_mp_check_type((unsigned int)opcode[2],arg2 + 1 + (is_sth?0:2),1,0);\n              _cimg_mp_check_type((unsigned int)opcode[3],arg2 + 1 + (is_sth?0:3),1,0);\n              if (opcode[4]!=(ulongT)~0U) {\n                _cimg_mp_check_constant((unsigned int)opcode[4],arg1,3);\n                opcode[4] = (ulongT)mem[opcode[4]];\n              }\n              if (opcode[5]!=(ulongT)~0U) {\n                _cimg_mp_check_constant((unsigned int)opcode[5],arg1 + 1,3);\n                opcode[5] = (ulongT)mem[opcode[5]];\n              }\n              if (opcode[6]!=(ulongT)~0U) {\n                _cimg_mp_check_constant((unsigned int)opcode[6],arg1 + 2,3);\n                opcode[6] = (ulongT)mem[opcode[6]];\n              }\n              if (opcode[7]!=(ulongT)~0U) {\n                _cimg_mp_check_constant((unsigned int)opcode[7],arg1 + 3,3);\n                opcode[7] = (ulongT)mem[opcode[7]];\n              }\n              _cimg_mp_check_type((unsigned int)opcode[8],arg1 + 4,1,0);\n\n              if (opcode[4]==(ulongT)~0U || opcode[5]==(ulongT)~0U ||\n                  opcode[6]==(ulongT)~0U || opcode[7]==(ulongT)~0U) {\n                if (p1!=~0U) {\n                  _cimg_mp_check_constant(p1,1,1);\n                  p1 = (unsigned int)cimg::mod((int)mem[p1],listin.width());\n                }\n                const CImg<T> &img = p1!=~0U?listin[p1]:imgin;\n                if (!img) {\n                  *se = saved_char;\n                  s0 = ss - 4>expr._data?ss - 4:expr._data;\n                  cimg::strellipsize(s0,64);\n                  throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                              \"CImg<%s>::%s: %s: Cannot crop empty image when \"\n                                              \"some xyzc-coordinates are unspecified, in expression '%s%s%s'.\",\n                                              pixel_type(),_cimg_mp_calling_function,s_op,\n                                              s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n                }\n                if (opcode[4]==(ulongT)~0U) opcode[4] = (ulongT)img._width;\n                if (opcode[5]==(ulongT)~0U) opcode[5] = (ulongT)img._height;\n                if (opcode[6]==(ulongT)~0U) opcode[6] = (ulongT)img._depth;\n                if (opcode[7]==(ulongT)~0U) opcode[7] = (ulongT)img._spectrum;\n              }\n\n              pos = vector((unsigned int)(opcode[4]*opcode[5]*opcode[6]*opcode[7]));\n              CImg<ulongT>::vector((ulongT)mp_image_crop,\n                                  pos,p1,\n                                  *opcode,opcode[1],opcode[2],opcode[3],\n                                  opcode[4],opcode[5],opcode[6],opcode[7],\n                                  opcode[8]).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"cross(\",6)) { // Cross product\n              _cimg_mp_op(\"Function 'cross()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss6,s1,depth1,0);\n              arg2 = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,2,3);\n              _cimg_mp_check_type(arg2,2,2,3);\n              pos = vector(3);\n              CImg<ulongT>::vector((ulongT)mp_cross,pos,arg1,arg2).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"cut(\",4)) { // Cut\n              _cimg_mp_op(\"Function 'cut()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(++s1,s2,depth1,0);\n              arg3 = compile(++s2,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector3_vss(mp_cut,arg1,arg2,arg3);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2) && _cimg_mp_is_constant(arg3)) {\n                val = mem[arg1];\n                val1 = mem[arg2];\n                val2 = mem[arg3];\n                _cimg_mp_constant(val<val1?val1:val>val2?val2:val);\n              }\n              _cimg_mp_scalar3(mp_cut,arg1,arg2,arg3);\n            }\n            break;\n\n          case 'd' :\n            if (!std::strncmp(ss,\"d(\",2)) { // Image depth\n              _cimg_mp_op(\"Function 'd()'\");\n              if (*ss2=='#') { p1 = compile(ss3,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss2!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_d,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"date(\",5)) { // Date and file date\n              _cimg_mp_op(\"Function 'date()'\");\n              s1 = ss5; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = 0;\n              is_sth = s1!=se1; // is_fdate\n              if (s1==se1 && ss5!=se1 && // Exactly one argument\n                  (cimg_sscanf(ss5,\"%u%c\",&arg1,&sep)!=2 || sep!=')')) is_sth = true;\n              if (is_sth) {\n                if (cimg_sscanf(ss5,\"%u%c\",&arg1,&sep)!=2 || sep!=',') { arg1 = 0; s1 = ss4; }\n                *se1 = 0; val = (double)cimg::fdate(++s1,arg1); *se1 = ')';\n              } else val = (double)cimg::date(arg1);\n              _cimg_mp_constant(val);\n            }\n\n            if (!std::strncmp(ss,\"debug(\",6)) { // Print debug info\n              _cimg_mp_op(\"Function 'debug()'\");\n              p1 = code._width;\n              arg1 = compile(ss6,se1,depth1,p_ref);\n              *se1 = 0;\n              variable_name.assign(CImg<charT>::string(ss6,true,true).unroll('y'),true);\n              cimg::strpare(variable_name,false,true);\n              ((CImg<ulongT>::vector((ulongT)mp_debug,arg1,0,code._width - p1),\n                variable_name)>'y').move_to(opcode);\n              opcode[2] = opcode._height;\n              opcode.move_to(code,p1);\n              *se1 = ')';\n              _cimg_mp_return(arg1);\n            }\n\n            if (!std::strncmp(ss,\"display(\",8)) { // Display memory\n              _cimg_mp_op(\"Function 'display()'\");\n              if (pexpr[se2 - expr._data]=='(') { // no arguments?\n                CImg<ulongT>::vector((ulongT)mp_display_memory,_cimg_mp_slot_nan).move_to(code);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n              s1 = ss8; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss8,s1,depth1,0);\n              arg2 = 0; arg3 = arg4 = arg5 = 1;\n              if (s1<se1) {\n                s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                arg2 = compile(s1 + 1,s2,depth1,0);\n                if (s2<se1) {\n                  s3 = ++s2; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                  arg3 = compile(s2,s3,depth1,0);\n                  if (s3<se1) {\n                    s2 = ++s3; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                    arg4 = compile(s3,s2,depth1,0);\n                    arg5 = s2<se1?compile(++s2,se1,depth1,0):0;\n                  }\n                }\n              }\n              _cimg_mp_check_type(arg2,2,1,0);\n              _cimg_mp_check_type(arg3,3,1,0);\n              _cimg_mp_check_type(arg4,4,1,0);\n              _cimg_mp_check_type(arg5,5,1,0);\n\n              c1 = *s1; *s1 = 0;\n              variable_name.assign(CImg<charT>::string(ss8,true,true).unroll('y'),true);\n              cimg::strpare(variable_name,false,true);\n              if (_cimg_mp_is_vector(arg1))\n                ((CImg<ulongT>::vector((ulongT)mp_vector_print,arg1,0,(ulongT)_cimg_mp_vector_size(arg1)),\n                  variable_name)>'y').move_to(opcode);\n              else\n                ((CImg<ulongT>::vector((ulongT)mp_print,arg1,0),\n                  variable_name)>'y').move_to(opcode);\n              opcode[2] = opcode._height;\n              opcode.move_to(code);\n\n              ((CImg<ulongT>::vector((ulongT)mp_display,arg1,0,(ulongT)_cimg_mp_vector_size(arg1),\n                                     arg2,arg3,arg4,arg5),\n                variable_name)>'y').move_to(opcode);\n              opcode[2] = opcode._height;\n              opcode.move_to(code);\n              *s1 = c1;\n              _cimg_mp_return(arg1);\n            }\n\n            if (!std::strncmp(ss,\"det(\",4)) { // Matrix determinant\n              _cimg_mp_op(\"Function 'det()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              _cimg_mp_check_matrix_square(arg1,1);\n              p1 = (unsigned int)std::sqrt((float)_cimg_mp_vector_size(arg1));\n              _cimg_mp_scalar2(mp_det,arg1,p1);\n            }\n\n            if (!std::strncmp(ss,\"diag(\",5)) { // Diagonal matrix\n              _cimg_mp_op(\"Function 'diag()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,2,0);\n              p1 = _cimg_mp_vector_size(arg1);\n              pos = vector(p1*p1);\n              CImg<ulongT>::vector((ulongT)mp_diag,pos,arg1,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"dot(\",4)) { // Dot product\n              _cimg_mp_op(\"Function 'dot()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              arg2 = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_type(arg2,2,2,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_scalar3(mp_dot,arg1,arg2,_cimg_mp_vector_size(arg1));\n              _cimg_mp_scalar2(mp_mul,arg1,arg2);\n            }\n\n            if (!std::strncmp(ss,\"do(\",3) || !std::strncmp(ss,\"dowhile(\",8)) { // Do..while\n              _cimg_mp_op(\"Function 'dowhile()'\");\n              s0 = *ss2=='('?ss3:ss8;\n              s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = code._width;\n              arg6 = mempos;\n              p1 = compile(s0,s1,depth1,0); // Body\n              arg2 = code._width;\n              p2 = s1<se1?compile(++s1,se1,depth1,0):p1; // Condition\n              _cimg_mp_check_type(p2,2,1,0);\n              CImg<ulongT>::vector((ulongT)mp_dowhile,p1,p2,arg2 - arg1,code._width - arg2,_cimg_mp_vector_size(p1),\n                                   p1>=arg6 && !_cimg_mp_is_constant(p1),\n                                   p2>=arg6 && !_cimg_mp_is_constant(p2)).move_to(code,arg1);\n              _cimg_mp_return(p1);\n            }\n\n            if (!std::strncmp(ss,\"draw(\",5)) { // Draw image\n              is_parallelizable = false;\n              _cimg_mp_op(\"Function 'draw()'\");\n              if (*ss5=='#') { // Index specified\n                s0 = ss6; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                p1 = compile(ss6,s0++,depth1,0);\n                _cimg_mp_check_list(true);\n              } else { p1 = ~0U; s0 = ss5; }\n              s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(s0,s1,depth1,0);\n              arg2 = is_relative?0U:(unsigned int)_cimg_mp_slot_x;\n              arg3 = is_relative?0U:(unsigned int)_cimg_mp_slot_y;\n              arg4 = is_relative?0U:(unsigned int)_cimg_mp_slot_z;\n              arg5 = is_relative?0U:(unsigned int)_cimg_mp_slot_c;\n              s0 = se1;\n              if (s1<se1) {\n                s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                arg2 = compile(++s1,s0,depth1,0);\n                if (_cimg_mp_is_vector(arg2)) { // Coordinates specified as a vector\n                  p2 = _cimg_mp_vector_size(arg2);\n                  ++arg2;\n                  if (p2>1) {\n                    arg3 = arg2 + 1;\n                    if (p2>2) {\n                      arg4 = arg3 + 1;\n                      if (p2>3) arg5 = arg4 + 1;\n                    }\n                  }\n                  ++s0;\n                  is_sth = true;\n                } else {\n                  if (s0<se1) {\n                    is_sth = p1!=~0U;\n                    s1 = s0 + 1; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                    arg3 = compile(++s0,s1,depth1,0);\n                    _cimg_mp_check_type(arg3,is_sth?4:3,1,0);\n                    if (s1<se1) {\n                      s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                      arg4 = compile(++s1,s0,depth1,0);\n                      _cimg_mp_check_type(arg4,is_sth?5:4,1,0);\n                      if (s0<se1) {\n                        s1 = s0 + 1; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                        arg5 = compile(++s0,s1,depth1,0);\n                        _cimg_mp_check_type(arg5,is_sth?6:5,1,0);\n                        s0 = ++s1;\n                      }\n                    }\n                  }\n                  is_sth = false;\n                }\n              }\n\n              CImg<ulongT>::vector((ulongT)mp_image_draw,arg1,(ulongT)_cimg_mp_vector_size(arg1),p1,arg2,arg3,arg4,arg5,\n                                   0,0,0,0,1,(ulongT)~0U,0,1).move_to(opcode);\n\n              arg2 = arg3 = arg4 = arg5 = ~0U;\n              p2 = p1!=~0U?0:1;\n              if (s0<se1) {\n                s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                arg2 = compile(s0,s1,depth1,0);\n                _cimg_mp_check_type(arg2,p2 + (is_sth?3:6),1,0);\n                if (s1<se1) {\n                  s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                  arg3 = compile(++s1,s0,depth1,0);\n                  _cimg_mp_check_type(arg3,p2 + (is_sth?4:7),1,0);\n                  if (s0<se1) {\n                    s1 = s0 + 1; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                    arg4 = compile(++s0,s1,depth1,0);\n                    _cimg_mp_check_type(arg4,p2 + (is_sth?5:8),1,0);\n                    if (s1<se1) {\n                      s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                      arg5 = compile(++s1,s0,depth1,0);\n                      _cimg_mp_check_type(arg5,p2 + (is_sth?6:9),1,0);\n                    }\n                  }\n                }\n              }\n              if (s0<s1) s0 = s1;\n\n              opcode[8] = (ulongT)arg2;\n              opcode[9] = (ulongT)arg3;\n              opcode[10] = (ulongT)arg4;\n              opcode[11] = (ulongT)arg5;\n\n              if (s0<se1) {\n                s1 = s0 + 1; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                arg6 = compile(++s0,s1,depth1,0);\n                _cimg_mp_check_type(arg6,0,1,0);\n                opcode[12] = arg6;\n                if (s1<se1) {\n                  s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                  p2 = compile(++s1,s0,depth1,0);\n                  _cimg_mp_check_type(p2,0,2,0);\n                  opcode[13] = p2;\n                  opcode[14] = _cimg_mp_vector_size(p2);\n                  p3 = s0<se1?compile(++s0,se1,depth1,0):1;\n                  _cimg_mp_check_type(p3,0,1,0);\n                  opcode[15] = p3;\n                }\n              }\n              opcode.move_to(code);\n              _cimg_mp_return(arg1);\n            }\n            break;\n\n          case 'e' :\n            if (!std::strncmp(ss,\"eig(\",4)) { // Matrix eigenvalues/eigenvector\n              _cimg_mp_op(\"Function 'eig()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              _cimg_mp_check_matrix_square(arg1,1);\n              p1 = (unsigned int)std::sqrt((float)_cimg_mp_vector_size(arg1));\n              pos = vector((p1 + 1)*p1);\n              CImg<ulongT>::vector((ulongT)mp_matrix_eig,pos,arg1,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"end(\",4)) { // End\n              _cimg_mp_op(\"Function 'end()'\");\n              code.swap(code_end);\n              arg1 = compile(ss4,se1,depth1,p_ref);\n              code.swap(code_end);\n              _cimg_mp_return(arg1);\n            }\n\n            if (!std::strncmp(ss,\"exp(\",4)) { // Exponential\n              _cimg_mp_op(\"Function 'exp()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_exp,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::exp(mem[arg1]));\n              _cimg_mp_scalar1(mp_exp,arg1);\n            }\n\n            if (!std::strncmp(ss,\"eye(\",4)) { // Identity matrix\n              _cimg_mp_op(\"Function 'eye()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              _cimg_mp_check_constant(arg1,1,3);\n              p1 = (unsigned int)mem[arg1];\n              pos = vector(p1*p1);\n              CImg<ulongT>::vector((ulongT)mp_eye,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'f' :\n            if (!std::strncmp(ss,\"fact(\",5)) { // Factorial\n              _cimg_mp_op(\"Function 'fact()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_factorial,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::factorial(mem[arg1]));\n              _cimg_mp_scalar1(mp_factorial,arg1);\n            }\n\n            if (!std::strncmp(ss,\"fibo(\",5)) { // Fibonacci\n              _cimg_mp_op(\"Function 'fibo()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_fibonacci,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::fibonacci(mem[arg1]));\n              _cimg_mp_scalar1(mp_fibonacci,arg1);\n            }\n\n            if (!std::strncmp(ss,\"find(\",5)) { // Find\n              _cimg_mp_op(\"Function 'find()'\");\n\n              // First argument: data to look at.\n              s0 = ss5; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n              if (*ss5=='#') { // Index specified\n                p1 = compile(ss6,s0,depth1,0);\n                _cimg_mp_check_list(false);\n                arg1 = ~0U;\n              } else { // Vector specified\n                arg1 = compile(ss5,s0,depth1,0);\n                _cimg_mp_check_type(arg1,1,2,0);\n                p1 = ~0U;\n              }\n\n              // Second argument: data to find.\n              s1 = ++s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg2 = compile(s0,s1,depth1,0);\n\n              // Third and fourth arguments: search direction and starting index.\n              arg3 = 1; arg4 = _cimg_mp_slot_nan;\n              if (s1<se1) {\n                s0 = s1 + 1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                arg3 = compile(++s1,s0,depth1,0);\n                _cimg_mp_check_type(arg3,3,1,0);\n                if (s0<se1) {\n                  arg4 = compile(++s0,se1,depth1,0);\n                  _cimg_mp_check_type(arg4,4,1,0);\n                }\n              }\n              if (p1!=~0U) {\n                if (_cimg_mp_is_vector(arg2))\n                  _cimg_mp_scalar5(mp_list_find_seq,p1,arg2,_cimg_mp_vector_size(arg2),arg3,arg4);\n                _cimg_mp_scalar4(mp_list_find,p1,arg2,arg3,arg4);\n              }\n              if (_cimg_mp_is_vector(arg2))\n                _cimg_mp_scalar6(mp_find_seq,arg1,_cimg_mp_vector_size(arg1),arg2,_cimg_mp_vector_size(arg2),arg3,arg4);\n              _cimg_mp_scalar5(mp_find,arg1,_cimg_mp_vector_size(arg1),arg2,arg3,arg4);\n            }\n\n            if (*ss1=='o' && *ss2=='r' && *ss3=='(') { // For loop\n              _cimg_mp_op(\"Function 'for()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              s3 = s2 + 1; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n              arg1 = code._width;\n              p1 = compile(ss4,s1,depth1,0); // Init\n              arg2 = code._width;\n              p2 = compile(++s1,s2,depth1,0); // Cond\n              arg3 = code._width;\n              arg6 = mempos;\n              if (s3<se1) { // Body + post\n                p3 = compile(s3 + 1,se1,depth1,0); // Body\n                arg4 = code._width;\n                pos = compile(++s2,s3,depth1,0); // Post\n              } else {\n                p3 = compile(++s2,se1,depth1,0); // Body only\n                arg4 = pos = code._width;\n              }\n              _cimg_mp_check_type(p2,2,1,0);\n              arg5 = _cimg_mp_vector_size(pos);\n              CImg<ulongT>::vector((ulongT)mp_for,p3,(ulongT)_cimg_mp_vector_size(p3),p2,arg2 - arg1,arg3 - arg2,\n                                   arg4 - arg3,code._width - arg4,\n                                   p3>=arg6 && !_cimg_mp_is_constant(p3),\n                                   p2>=arg6 && !_cimg_mp_is_constant(p2)).move_to(code,arg1);\n              _cimg_mp_return(p3);\n            }\n            break;\n\n          case 'g' :\n            if (!std::strncmp(ss,\"gauss(\",6)) { // Gaussian function\n              _cimg_mp_op(\"Function 'gauss()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss6,s1,depth1,0);\n              arg2 = s1<se1?compile(++s1,se1,depth1,0):1;\n              _cimg_mp_check_type(arg2,2,1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector2_vs(mp_gauss,arg1,arg2);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2)) {\n                val1 = mem[arg1];\n                val2 = mem[arg2];\n                _cimg_mp_constant(std::exp(-val1*val1/(2*val2*val2))/std::sqrt(2*val2*val2*cimg::PI));\n              }\n              _cimg_mp_scalar2(mp_gauss,arg1,arg2);\n            }\n            break;\n\n          case 'h' :\n            if (!std::strncmp(ss,\"h(\",2)) { // Image height\n              _cimg_mp_op(\"Function 'h()'\");\n              if (*ss2=='#') { p1 = compile(ss3,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss2!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_h,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n          case 'i' :\n            if (*ss1=='f' && *ss2=='(') { // If..then[..else.]\n              _cimg_mp_op(\"Function 'if()'\");\n              s1 = ss3; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg1 = compile(ss3,s1,depth1,0);\n              _cimg_mp_check_type(arg1,1,1,0);\n              if (_cimg_mp_is_constant(arg1)) {\n                if ((bool)mem[arg1]) return compile(++s1,s2,depth1,0);\n                else return s2<se1?compile(++s2,se1,depth1,0):0;\n              }\n              p2 = code._width;\n              arg2 = compile(++s1,s2,depth1,0);\n              p3 = code._width;\n              arg3 = s2<se1?compile(++s2,se1,depth1,0):_cimg_mp_is_vector(arg2)?vector(_cimg_mp_vector_size(arg2),0):0;\n              _cimg_mp_check_type(arg3,3,_cimg_mp_is_vector(arg2)?2:1,_cimg_mp_vector_size(arg2));\n              arg4 = _cimg_mp_vector_size(arg2);\n              if (arg4) pos = vector(arg4); else pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_if,pos,arg1,arg2,arg3,\n                                  p3 - p2,code._width - p3,arg4).move_to(code,p2);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"init(\",5)) { // Init\n              _cimg_mp_op(\"Function 'init()'\");\n              code.swap(code_init);\n              arg1 = compile(ss5,se1,depth1,p_ref);\n              code.swap(code_init);\n              _cimg_mp_return(arg1);\n            }\n\n            if (!std::strncmp(ss,\"int(\",4)) { // Integer cast\n              _cimg_mp_op(\"Function 'int()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_int,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant((longT)mem[arg1]);\n              _cimg_mp_scalar1(mp_int,arg1);\n            }\n\n            if (!std::strncmp(ss,\"inv(\",4)) { // Matrix/scalar inversion\n              _cimg_mp_op(\"Function 'inv()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) {\n                _cimg_mp_check_matrix_square(arg1,1);\n                p1 = (unsigned int)std::sqrt((float)_cimg_mp_vector_size(arg1));\n                pos = vector(p1*p1);\n                CImg<ulongT>::vector((ulongT)mp_matrix_inv,pos,arg1,p1).move_to(code);\n                _cimg_mp_return(pos);\n              }\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(1/mem[arg1]);\n              _cimg_mp_scalar2(mp_div,1,arg1);\n            }\n\n            if (*ss1=='s') { // Family of 'is_?()' functions\n\n              if (!std::strncmp(ss,\"isbool(\",7)) { // Is boolean?\n                _cimg_mp_op(\"Function 'isbool()'\");\n                if (ss7==se1) _cimg_mp_return(0);\n                arg1 = compile(ss7,se1,depth1,0);\n                if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_isbool,arg1);\n                if (_cimg_mp_is_constant(arg1)) _cimg_mp_return(mem[arg1]==0.0 || mem[arg1]==1.0);\n                _cimg_mp_scalar1(mp_isbool,arg1);\n              }\n\n              if (!std::strncmp(ss,\"isdir(\",6)) { // Is directory?\n                _cimg_mp_op(\"Function 'isdir()'\");\n                *se1 = 0;\n                is_sth = cimg::is_directory(ss6);\n                *se1 = ')';\n                _cimg_mp_return(is_sth?1U:0U);\n              }\n\n              if (!std::strncmp(ss,\"isfile(\",7)) { // Is file?\n                _cimg_mp_op(\"Function 'isfile()'\");\n                *se1 = 0;\n                is_sth = cimg::is_file(ss7);\n                *se1 = ')';\n                _cimg_mp_return(is_sth?1U:0U);\n              }\n\n              if (!std::strncmp(ss,\"isin(\",5)) { // Is in sequence/vector?\n                if (ss5>=se1) _cimg_mp_return(0);\n                _cimg_mp_op(\"Function 'isin()'\");\n                pos = scalar();\n                CImg<ulongT>::vector((ulongT)mp_isin,pos,0).move_to(_opcode);\n                for (s = ss5; s<se; ++s) {\n                  ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                                 (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                  arg1 = compile(s,ns,depth1,0);\n                  if (_cimg_mp_is_vector(arg1))\n                    CImg<ulongT>::sequence(_cimg_mp_vector_size(arg1),arg1 + 1,\n                                           arg1 + (ulongT)_cimg_mp_vector_size(arg1)).\n                      move_to(_opcode);\n                  else CImg<ulongT>::vector(arg1).move_to(_opcode);\n                  s = ns;\n                }\n                (_opcode>'y').move_to(opcode);\n                opcode[2] = opcode._height;\n                opcode.move_to(code);\n                _cimg_mp_return(pos);\n              }\n\n              if (!std::strncmp(ss,\"isinf(\",6)) { // Is infinite?\n                _cimg_mp_op(\"Function 'isinf()'\");\n                if (ss6==se1) _cimg_mp_return(0);\n                arg1 = compile(ss6,se1,depth1,0);\n                if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_isinf,arg1);\n                if (_cimg_mp_is_constant(arg1)) _cimg_mp_return((unsigned int)cimg::type<double>::is_inf(mem[arg1]));\n                _cimg_mp_scalar1(mp_isinf,arg1);\n              }\n\n              if (!std::strncmp(ss,\"isint(\",6)) { // Is integer?\n                _cimg_mp_op(\"Function 'isint()'\");\n                if (ss6==se1) _cimg_mp_return(0);\n                arg1 = compile(ss6,se1,depth1,0);\n                if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_isint,arg1);\n                if (_cimg_mp_is_constant(arg1)) _cimg_mp_return((unsigned int)(cimg::mod(mem[arg1],1.0)==0));\n                _cimg_mp_scalar1(mp_isint,arg1);\n              }\n\n              if (!std::strncmp(ss,\"isnan(\",6)) { // Is NaN?\n                _cimg_mp_op(\"Function 'isnan()'\");\n                if (ss6==se1) _cimg_mp_return(0);\n                arg1 = compile(ss6,se1,depth1,0);\n                if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_isnan,arg1);\n                if (_cimg_mp_is_constant(arg1)) _cimg_mp_return((unsigned int)cimg::type<double>::is_nan(mem[arg1]));\n                _cimg_mp_scalar1(mp_isnan,arg1);\n              }\n\n              if (!std::strncmp(ss,\"isval(\",6)) { // Is value?\n                _cimg_mp_op(\"Function 'isval()'\");\n                val = 0;\n                if (cimg_sscanf(ss6,\"%lf%c%c\",&val,&sep,&end)==2 && sep==')') _cimg_mp_return(1);\n                _cimg_mp_return(0);\n              }\n\n            }\n            break;\n\n          case 'l' :\n            if (!std::strncmp(ss,\"log(\",4)) { // Natural logarithm\n              _cimg_mp_op(\"Function 'log()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_log,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::log(mem[arg1]));\n              _cimg_mp_scalar1(mp_log,arg1);\n            }\n\n            if (!std::strncmp(ss,\"log2(\",5)) { // Base-2 logarithm\n              _cimg_mp_op(\"Function 'log2()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_log2,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::log2(mem[arg1]));\n              _cimg_mp_scalar1(mp_log2,arg1);\n            }\n\n            if (!std::strncmp(ss,\"log10(\",6)) { // Base-10 logarithm\n              _cimg_mp_op(\"Function 'log10()'\");\n              arg1 = compile(ss6,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_log10,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::log10(mem[arg1]));\n              _cimg_mp_scalar1(mp_log10,arg1);\n            }\n\n            if (!std::strncmp(ss,\"lowercase(\",10)) { // Lower case\n              _cimg_mp_op(\"Function 'lowercase()'\");\n              arg1 = compile(ss + 10,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_lowercase,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::lowercase(mem[arg1]));\n              _cimg_mp_scalar1(mp_lowercase,arg1);\n            }\n            break;\n\n          case 'm' :\n            if (!std::strncmp(ss,\"mul(\",4)) { // Matrix multiplication\n              _cimg_mp_op(\"Function 'mul()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(++s1,s2,depth1,0);\n              arg3 = s2<se1?compile(++s2,se1,depth1,0):1;\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_type(arg2,2,2,0);\n              _cimg_mp_check_constant(arg3,3,3);\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = _cimg_mp_vector_size(arg2);\n              p3 = (unsigned int)mem[arg3];\n              arg5 = p2/p3;\n              arg4 = p1/arg5;\n              if (arg4*arg5!=p1 || arg5*p3!=p2) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Types of first and second arguments ('%s' and '%s') \"\n                                            \"do not match with third argument 'nb_colsB=%u', \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s_type(arg1)._data,s_type(arg2)._data,p3,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(arg4*p3);\n              CImg<ulongT>::vector((ulongT)mp_matrix_mul,pos,arg1,arg2,arg4,arg5,p3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'n' :\n            if (!std::strncmp(ss,\"narg(\",5)) { // Number of arguments\n              _cimg_mp_op(\"Function 'narg()'\");\n              if (ss5>=se1) _cimg_mp_return(0);\n              arg1 = 0;\n              for (s = ss5; s<se; ++s) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                ++arg1; s = ns;\n              }\n              _cimg_mp_constant(arg1);\n            }\n\n            if ((cimg_sscanf(ss,\"norm%u%c\",&(arg1=~0U),&sep)==2 && sep=='(') ||\n                !std::strncmp(ss,\"norminf(\",8) || !std::strncmp(ss,\"norm(\",5) ||\n                (!std::strncmp(ss,\"norm\",4) && ss5<se1 && (s=std::strchr(ss5,'('))!=0)) { // Lp norm\n              _cimg_mp_op(\"Function 'normP()'\");\n              if (*ss4=='(') { arg1 = 2; s = ss5; }\n              else if (*ss4=='i' && *ss5=='n' && *ss6=='f' && *ss7=='(') { arg1 = ~0U; s = ss8; }\n              else if (arg1==~0U) {\n                arg1 = compile(ss4,s++,depth1,0);\n                _cimg_mp_check_constant(arg1,0,2);\n                arg1 = (unsigned int)mem[arg1];\n              } else s = std::strchr(ss4,'(') + 1;\n              pos = scalar();\n              switch (arg1) {\n              case 0 :\n                CImg<ulongT>::vector((ulongT)mp_norm0,pos,0).move_to(_opcode); break;\n              case 1 :\n                CImg<ulongT>::vector((ulongT)mp_norm1,pos,0).move_to(_opcode); break;\n              case 2 :\n                CImg<ulongT>::vector((ulongT)mp_norm2,pos,0).move_to(_opcode); break;\n              case ~0U :\n                CImg<ulongT>::vector((ulongT)mp_norminf,pos,0).move_to(_opcode); break;\n              default :\n                CImg<ulongT>::vector((ulongT)mp_normp,pos,0,(ulongT)(arg1==~0U?-1:(int)arg1)).\n                  move_to(_opcode);\n              }\n              for ( ; s<se; ++s) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                arg2 = compile(s,ns,depth1,0);\n                if (_cimg_mp_is_vector(arg2))\n                  CImg<ulongT>::sequence(_cimg_mp_vector_size(arg2),arg2 + 1,\n                                         arg2 + (ulongT)_cimg_mp_vector_size(arg2)).\n                    move_to(_opcode);\n                else CImg<ulongT>::vector(arg2).move_to(_opcode);\n                s = ns;\n              }\n\n              (_opcode>'y').move_to(opcode);\n              if (arg1>0 && opcode._height==4) // Special case with one argument and p>=1\n                _cimg_mp_scalar1(mp_abs,opcode[3]);\n              opcode[2] = opcode._height;\n              opcode.move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'p' :\n            if (!std::strncmp(ss,\"permut(\",7)) { // Number of permutations\n              _cimg_mp_op(\"Function 'permut()'\");\n              s1 = ss7; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg1 = compile(ss7,s1,depth1,0);\n              arg2 = compile(++s1,s2,depth1,0);\n              arg3 = compile(++s2,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,1,0);\n              _cimg_mp_check_type(arg2,2,1,0);\n              _cimg_mp_check_type(arg3,3,1,0);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2) && _cimg_mp_is_constant(arg3))\n                _cimg_mp_constant(cimg::permutations(mem[arg1],mem[arg2],(bool)mem[arg3]));\n              _cimg_mp_scalar3(mp_permutations,arg1,arg2,arg3);\n            }\n\n            if (!std::strncmp(ss,\"pseudoinv(\",10)) { // Matrix/scalar pseudo-inversion\n              _cimg_mp_op(\"Function 'pseudoinv()'\");\n              s1 = ss + 10; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss + 10,s1,depth1,0);\n              arg2 = s1<se1?compile(++s1,se1,depth1,0):1;\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_constant(arg2,2,3);\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = (unsigned int)mem[arg2];\n              p3 = p1/p2;\n              if (p3*p2!=p1) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Type of first argument ('%s') \"\n                                            \"does not match with second argument 'nb_colsA=%u', \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s_type(arg1)._data,p2,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(p1);\n              CImg<ulongT>::vector((ulongT)mp_matrix_pseudoinv,pos,arg1,p2,p3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"print(\",6)) { // Print expressions\n              _cimg_mp_op(\"Function 'print()'\");\n              for (s = ss6; s<se; ++s) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                pos = compile(s,ns,depth1,p_ref);\n                c1 = *ns; *ns = 0;\n                variable_name.assign(CImg<charT>::string(s,true,true).unroll('y'),true);\n                cimg::strpare(variable_name,false,true);\n                if (_cimg_mp_is_vector(pos)) // Vector\n                  ((CImg<ulongT>::vector((ulongT)mp_vector_print,pos,0,(ulongT)_cimg_mp_vector_size(pos)),\n                    variable_name)>'y').move_to(opcode);\n                else // Scalar\n                  ((CImg<ulongT>::vector((ulongT)mp_print,pos,0),\n                    variable_name)>'y').move_to(opcode);\n                opcode[2] = opcode._height;\n                opcode.move_to(code);\n                *ns = c1; s = ns;\n              }\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'r' :\n            if (!std::strncmp(ss,\"resize(\",7)) { // Vector or image resize\n              _cimg_mp_op(\"Function 'resize()'\");\n              if (*ss7!='#') { // Vector\n                s1 = ss7; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                arg1 = compile(ss7,s1,depth1,0);\n                s2 = ++s1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                arg2 = compile(s1,s2,depth1,0);\n                arg3 = 1;\n                arg4 = 0;\n                if (s2<se1) {\n                  s1 = ++s2; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n                  arg3 = compile(s2,s1,depth1,0);\n                  arg4 = s1<se1?compile(++s1,se1,depth1,0):0;\n                }\n                _cimg_mp_check_constant(arg2,2,3);\n                arg2 = (unsigned int)mem[arg2];\n                _cimg_mp_check_type(arg3,3,1,0);\n                _cimg_mp_check_type(arg4,4,1,0);\n                pos = vector(arg2);\n                CImg<ulongT>::vector((ulongT)mp_vector_resize,pos,arg2,arg1,(ulongT)_cimg_mp_vector_size(arg1),\n                                     arg3,arg4).move_to(code);\n                _cimg_mp_return(pos);\n\n              } else { // Image\n                is_parallelizable = false;\n                s0 = ss8; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                p1 = compile(ss8,s0++,depth1,0);\n                _cimg_mp_check_list(true);\n                CImg<ulongT>::vector((ulongT)mp_image_resize,_cimg_mp_slot_nan,p1,~0U,~0U,~0U,~0U,1,0,0,0,0,0).\n                  move_to(opcode);\n                pos = 0;\n                for (s = s0; s<se && pos<10; ++s) {\n                  ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                                 (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                  arg1 = compile(s,ns,depth1,0);\n                  _cimg_mp_check_type(arg1,pos + 2,1,0);\n                  opcode[pos + 3] = arg1;\n                  s = ns;\n                  ++pos;\n                }\n                if (pos<1 || pos>10) {\n                  *se = saved_char;\n                  s0 = ss - 4>expr._data?ss - 4:expr._data;\n                  cimg::strellipsize(s0,64);\n                  throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                              \"CImg<%s>::%s: %s: %s arguments, in expression '%s%s%s'.\",\n                                              pixel_type(),_cimg_mp_calling_function,s_op,\n                                              pos<1?\"Missing\":\"Too much\",\n                                              s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n                }\n                opcode.move_to(code);\n                _cimg_mp_return(_cimg_mp_slot_nan);\n              }\n            }\n\n            if (!std::strncmp(ss,\"reverse(\",8)) { // Vector reverse\n              _cimg_mp_op(\"Function 'reverse()'\");\n              arg1 = compile(ss8,se1,depth1,0);\n              if (!_cimg_mp_is_vector(arg1)) _cimg_mp_return(arg1);\n              p1 = _cimg_mp_vector_size(arg1);\n              pos = vector(p1);\n              CImg<ulongT>::vector((ulongT)mp_vector_reverse,pos,arg1,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"rol(\",4) || !std::strncmp(ss,\"ror(\",4)) { // Bitwise rotation\n              _cimg_mp_op(ss[2]=='l'?\"Function 'rol()'\":\"Function 'ror()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1-expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              arg2 = s1<se1?compile(++s1,se1,depth1,0):1;\n              _cimg_mp_check_type(arg2,2,1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector2_vs(*ss2=='l'?mp_rol:mp_ror,arg1,arg2);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n                _cimg_mp_constant(*ss2=='l'?cimg::rol(mem[arg1],(unsigned int)mem[arg2]):\n                                  cimg::ror(mem[arg1],(unsigned int)mem[arg2]));\n              _cimg_mp_scalar2(*ss2=='l'?mp_rol:mp_ror,arg1,arg2);\n            }\n\n            if (!std::strncmp(ss,\"rot(\",4)) { // 2d/3d rotation matrix\n              _cimg_mp_op(\"Function 'rot()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              if (s1<se1) { // 3d rotation\n                _cimg_mp_check_type(arg1,1,3,3);\n                is_sth = false; // Is coordinates as vector?\n                if (_cimg_mp_is_vector(arg1)) { // Coordinates specified as a vector\n                  is_sth = true;\n                  p2 = _cimg_mp_vector_size(arg1);\n                  ++arg1;\n                  arg2 = arg3 = 0;\n                  if (p2>1) {\n                    arg2 = arg1 + 1;\n                    if (p2>2) arg3 = arg2 + 1;\n                  }\n                  arg4 = compile(++s1,se1,depth1,0);\n                } else {\n                  s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                  arg2 = compile(++s1,s2,depth1,0);\n                  s3 = s2 + 1; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                  arg3 = compile(++s2,s3,depth1,0);\n                  arg4 = compile(++s3,se1,depth1,0);\n                  _cimg_mp_check_type(arg2,2,1,0);\n                  _cimg_mp_check_type(arg3,3,1,0);\n                }\n                _cimg_mp_check_type(arg4,is_sth?2:4,1,0);\n                pos = vector(9);\n                CImg<ulongT>::vector((ulongT)mp_rot3d,pos,arg1,arg2,arg3,arg4).move_to(code);\n              } else { // 2d rotation\n                _cimg_mp_check_type(arg1,1,1,0);\n                pos = vector(4);\n                CImg<ulongT>::vector((ulongT)mp_rot2d,pos,arg1).move_to(code);\n              }\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"round(\",6)) { // Value rounding\n              _cimg_mp_op(\"Function 'round()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss6,s1,depth1,0);\n              arg2 = 1;\n              arg3 = 0;\n              if (s1<se1) {\n                s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n                arg2 = compile(++s1,s2,depth1,0);\n                arg3 = s2<se1?compile(++s2,se1,depth1,0):0;\n              }\n              _cimg_mp_check_type(arg2,2,1,0);\n              _cimg_mp_check_type(arg3,3,1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector3_vss(mp_round,arg1,arg2,arg3);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2) && _cimg_mp_is_constant(arg3))\n                _cimg_mp_constant(cimg::round(mem[arg1],mem[arg2],(int)mem[arg3]));\n              _cimg_mp_scalar3(mp_round,arg1,arg2,arg3);\n            }\n            break;\n\n          case 's' :\n            if (!std::strncmp(ss,\"s(\",2)) { // Image spectrum\n              _cimg_mp_op(\"Function 's()'\");\n              if (*ss2=='#') { p1 = compile(ss3,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss2!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_s,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"same(\",5)) { // Test if operands have the same values\n              _cimg_mp_op(\"Function 'same()'\");\n              s1 = ss5; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss5,s1,depth1,0);\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(++s1,s2,depth1,0);\n              arg3 = 11;\n              arg4 = 1;\n              if (s2<se1) {\n                s3 = s2 + 1; while (s3<se1 && (*s3!=',' || level[s3 - expr._data]!=clevel1)) ++s3;\n                arg3 = compile(++s2,s3,depth1,0);\n                _cimg_mp_check_type(arg3,3,1,0);\n                arg4 = s3<se1?compile(++s3,se1,depth1,0):1;\n              }\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = _cimg_mp_vector_size(arg2);\n              _cimg_mp_scalar6(mp_vector_eq,arg1,p1,arg2,p2,arg3,arg4);\n            }\n\n            if (!std::strncmp(ss,\"sign(\",5)) { // Sign\n              _cimg_mp_op(\"Function 'sign()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sign,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::sign(mem[arg1]));\n              _cimg_mp_scalar1(mp_sign,arg1);\n            }\n\n            if (!std::strncmp(ss,\"sin(\",4)) { // Sine\n              _cimg_mp_op(\"Function 'sin()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sin,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::sin(mem[arg1]));\n              _cimg_mp_scalar1(mp_sin,arg1);\n            }\n\n            if (!std::strncmp(ss,\"sinc(\",5)) { // Sine cardinal\n              _cimg_mp_op(\"Function 'sinc()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sinc,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::sinc(mem[arg1]));\n              _cimg_mp_scalar1(mp_sinc,arg1);\n            }\n\n            if (!std::strncmp(ss,\"single(\",7)) { // Force single thread execution\n              _cimg_mp_op(\"Function 'single()'\");\n              p1 = code._width;\n              arg1 = compile(ss7,se1,depth1,p_ref);\n              CImg<ulongT>::vector((ulongT)mp_single,arg1,code._width - p1).move_to(code,p1);\n              _cimg_mp_return(arg1);\n            }\n\n            if (!std::strncmp(ss,\"sinh(\",5)) { // Hyperbolic sine\n              _cimg_mp_op(\"Function 'sinh()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sinh,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::sinh(mem[arg1]));\n              _cimg_mp_scalar1(mp_sinh,arg1);\n            }\n\n            if (!std::strncmp(ss,\"size(\",5)) { // Vector size.\n              _cimg_mp_op(\"Function 'size()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              _cimg_mp_constant(_cimg_mp_is_scalar(arg1)?0:_cimg_mp_vector_size(arg1));\n            }\n\n            if (!std::strncmp(ss,\"solve(\",6)) { // Solve linear system\n              _cimg_mp_op(\"Function 'solve()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss6,s1,depth1,0);\n              s2 = s1 + 1; while (s2<se1 && (*s2!=',' || level[s2 - expr._data]!=clevel1)) ++s2;\n              arg2 = compile(++s1,s2,depth1,0);\n              arg3 = s2<se1?compile(++s2,se1,depth1,0):1;\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_type(arg2,2,2,0);\n              _cimg_mp_check_constant(arg3,3,3);\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = _cimg_mp_vector_size(arg2);\n              p3 = (unsigned int)mem[arg3];\n              arg5 = p2/p3;\n              arg4 = p1/arg5;\n              if (arg4*arg5!=p1 || arg5*p3!=p2) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Types of first and second arguments ('%s' and '%s') \"\n                                            \"do not match with third argument 'nb_colsB=%u', \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s_type(arg1)._data,s_type(arg2)._data,p3,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(arg4*p3);\n              CImg<ulongT>::vector((ulongT)mp_solve,pos,arg1,arg2,arg4,arg5,p3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"sort(\",5)) { // Sort vector\n              _cimg_mp_op(\"Function 'sort()'\");\n              s1 = ss6; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss5,s1,depth1,0);\n              arg2 = arg3 = 1;\n              if (s1<se1) {\n                s0 = ++s1; while (s0<se1 && (*s0!=',' || level[s0 - expr._data]!=clevel1)) ++s0;\n                arg2 = compile(s1,s0,depth1,0);\n                arg3 = s0<se1?compile(++s0,se1,depth1,0):1;\n              }\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_type(arg2,2,1,0);\n              _cimg_mp_check_constant(arg3,3,3);\n              arg3 = (unsigned int)mem[arg3];\n              p1 = _cimg_mp_vector_size(arg1);\n              if (p1%arg3) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Invalid specified chunk size (%u) for first argument \"\n                                            \"('%s'), in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            arg3,s_type(arg1)._data,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(p1);\n              CImg<ulongT>::vector((ulongT)mp_sort,pos,arg1,p1,arg2,arg3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"sqr(\",4)) { // Square\n              _cimg_mp_op(\"Function 'sqr()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sqr,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::sqr(mem[arg1]));\n              _cimg_mp_scalar1(mp_sqr,arg1);\n            }\n\n            if (!std::strncmp(ss,\"sqrt(\",5)) { // Square root\n              _cimg_mp_op(\"Function 'sqrt()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_sqrt,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::sqrt(mem[arg1]));\n              _cimg_mp_scalar1(mp_sqrt,arg1);\n            }\n\n            if (!std::strncmp(ss,\"stod(\",5)) { // String to double\n              _cimg_mp_op(\"Function 'stod()'\");\n              s1 = ss5; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss5,s1,depth1,0);\n              arg2 = s1<se1?compile(++s1,se1,depth1,0):0;\n              _cimg_mp_check_type(arg2,2,1,0);\n              p1 = _cimg_mp_vector_size(arg1);\n              _cimg_mp_scalar3(mp_stod,arg1,p1,arg2);\n            }\n\n            if (!std::strncmp(ss,\"svd(\",4)) { // Matrix SVD\n              _cimg_mp_op(\"Function 'svd()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              arg2 = s1<se1?compile(++s1,se1,depth1,0):1;\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_constant(arg2,2,3);\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = (unsigned int)mem[arg2];\n              p3 = p1/p2;\n              if (p3*p2!=p1) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Type of first argument ('%s') \"\n                                            \"does not match with second argument 'nb_colsA=%u', \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s_type(arg1)._data,p2,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(p1 + p2 + p2*p2);\n              CImg<ulongT>::vector((ulongT)mp_matrix_svd,pos,arg1,p2,p3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 't' :\n            if (!std::strncmp(ss,\"tan(\",4)) { // Tangent\n              _cimg_mp_op(\"Function 'tan()'\");\n              arg1 = compile(ss4,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_tan,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::tan(mem[arg1]));\n              _cimg_mp_scalar1(mp_tan,arg1);\n            }\n\n            if (!std::strncmp(ss,\"tanh(\",5)) { // Hyperbolic tangent\n              _cimg_mp_op(\"Function 'tanh()'\");\n              arg1 = compile(ss5,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_tanh,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(std::tanh(mem[arg1]));\n              _cimg_mp_scalar1(mp_tanh,arg1);\n            }\n\n            if (!std::strncmp(ss,\"trace(\",6)) { // Matrix trace\n              _cimg_mp_op(\"Function 'trace()'\");\n              arg1 = compile(ss6,se1,depth1,0);\n              _cimg_mp_check_matrix_square(arg1,1);\n              p1 = (unsigned int)std::sqrt((float)_cimg_mp_vector_size(arg1));\n              _cimg_mp_scalar2(mp_trace,arg1,p1);\n            }\n\n            if (!std::strncmp(ss,\"transp(\",7)) { // Matrix transpose\n              _cimg_mp_op(\"Function 'transp()'\");\n              s1 = ss7; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss7,s1,depth1,0);\n              arg2 = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,2,0);\n              _cimg_mp_check_constant(arg2,2,3);\n              p1 = _cimg_mp_vector_size(arg1);\n              p2 = (unsigned int)mem[arg2];\n              p3 = p1/p2;\n              if (p2*p3!=p1) {\n                *se = saved_char;\n                s0 = ss - 4>expr._data?ss - 4:expr._data;\n                cimg::strellipsize(s0,64);\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: %s: Size of first argument ('%s') does not match \"\n                                            \"second argument 'nb_cols=%u', in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,s_op,\n                                            s_type(arg1)._data,p2,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              }\n              pos = vector(p3*p2);\n              CImg<ulongT>::vector((ulongT)mp_transp,pos,arg1,p2,p3).move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'u' :\n            if (*ss1=='(') { // Random value with uniform distribution\n              _cimg_mp_op(\"Function 'u()'\");\n              if (*ss2==')') _cimg_mp_scalar2(mp_u,0,1);\n              s1 = ss2; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss2,s1,depth1,0);\n              if (s1<se1) arg2 = compile(++s1,se1,depth1,0); else { arg2 = arg1; arg1 = 0; }\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_u,arg1,arg2);\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_u,arg1,arg2);\n              if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_u,arg1,arg2);\n              _cimg_mp_scalar2(mp_u,arg1,arg2);\n            }\n\n            if (!std::strncmp(ss,\"unref(\",6)) { // Un-reference variable\n              _cimg_mp_op(\"Function 'unref()'\");\n              arg1 = ~0U;\n              for (s0 = ss6; s0<se1; s0 = s1) {\n                if (s0>ss6 && *s0==',') ++s0;\n                s1 = s0; while (s1<se1 && *s1!=',') ++s1;\n                c1 = *s1;\n                if (s1>s0) {\n                  *s1 = 0;\n                  arg2 = arg3 = ~0U;\n                  if (s0[0]=='w' && s0[1]=='h' && !s0[2]) arg1 = reserved_label[arg3 = 0];\n                  else if (s0[0]=='w' && s0[1]=='h' && s0[2]=='d' && !s0[3]) arg1 = reserved_label[arg3 = 1];\n                  else if (s0[0]=='w' && s0[1]=='h' && s0[2]=='d' && s0[3]=='s' && !s0[4])\n                    arg1 = reserved_label[arg3 = 2];\n                  else if (s0[0]=='p' && s0[1]=='i' && !s0[2]) arg1 = reserved_label[arg3 = 3];\n                  else if (s0[0]=='i' && s0[1]=='m' && !s0[2]) arg1 = reserved_label[arg3 = 4];\n                  else if (s0[0]=='i' && s0[1]=='M' && !s0[2]) arg1 = reserved_label[arg3 = 5];\n                  else if (s0[0]=='i' && s0[1]=='a' && !s0[2]) arg1 = reserved_label[arg3 = 6];\n                  else if (s0[0]=='i' && s0[1]=='v' && !s0[2]) arg1 = reserved_label[arg3 = 7];\n                  else if (s0[0]=='i' && s0[1]=='s' && !s0[2]) arg1 = reserved_label[arg3 = 8];\n                  else if (s0[0]=='i' && s0[1]=='p' && !s0[2]) arg1 = reserved_label[arg3 = 9];\n                  else if (s0[0]=='i' && s0[1]=='c' && !s0[2]) arg1 = reserved_label[arg3 = 10];\n                  else if (s0[0]=='x' && s0[1]=='m' && !s0[2]) arg1 = reserved_label[arg3 = 11];\n                  else if (s0[0]=='y' && s0[1]=='m' && !s0[2]) arg1 = reserved_label[arg3 = 12];\n                  else if (s0[0]=='z' && s0[1]=='m' && !s0[2]) arg1 = reserved_label[arg3 = 13];\n                  else if (s0[0]=='c' && s0[1]=='m' && !s0[2]) arg1 = reserved_label[arg3 = 14];\n                  else if (s0[0]=='x' && s0[1]=='M' && !s0[2]) arg1 = reserved_label[arg3 = 15];\n                  else if (s0[0]=='y' && s0[1]=='M' && !s0[2]) arg1 = reserved_label[arg3 = 16];\n                  else if (s0[0]=='z' && s0[1]=='M' && !s0[2]) arg1 = reserved_label[arg3 = 17];\n                  else if (s0[0]=='c' && s0[1]=='M' && !s0[2]) arg1 = reserved_label[arg3 = 18];\n                  else if (s0[0]=='i' && s0[1]>='0' && s0[1]<='9' && !s0[2])\n                    arg1 = reserved_label[arg3 = 19 + s0[1] - '0'];\n                  else if (!std::strcmp(s0,\"interpolation\")) arg1 = reserved_label[arg3 = 29];\n                  else if (!std::strcmp(s0,\"boundary\")) arg1 = reserved_label[arg3 = 30];\n                  else if (s0[1]) { // Multi-char variable\n                    cimglist_for(variable_def,i) if (!std::strcmp(s0,variable_def[i])) {\n                      arg1 = variable_pos[i]; arg2 = i; break;\n                    }\n                  } else arg1 = reserved_label[arg3 = *s0]; // Single-char variable\n\n                  if (arg1!=~0U) {\n                    if (arg2==~0U) { if (arg3!=~0U) reserved_label[arg3] = ~0U; }\n                    else {\n                      variable_def.remove(arg2);\n                      if (arg2<variable_pos._width - 1)\n                        std::memmove(variable_pos._data + arg2,variable_pos._data + arg2 + 1,\n                                     sizeof(uintT)*(variable_pos._width - arg2 - 1));\n                      --variable_pos._width;\n                    }\n                  }\n                  *s1 = c1;\n                } else compile(s0,s1,depth1,0); // Will throw a 'missing argument' exception\n              }\n              _cimg_mp_return(arg1!=~0U?arg1:_cimg_mp_slot_nan); // Return value of last specified variable.\n            }\n\n            if (!std::strncmp(ss,\"uppercase(\",10)) { // Upper case\n              _cimg_mp_op(\"Function 'uppercase()'\");\n              arg1 = compile(ss + 10,se1,depth1,0);\n              if (_cimg_mp_is_vector(arg1)) _cimg_mp_vector1_v(mp_uppercase,arg1);\n              if (_cimg_mp_is_constant(arg1)) _cimg_mp_constant(cimg::uppercase(mem[arg1]));\n              _cimg_mp_scalar1(mp_uppercase,arg1);\n            }\n            break;\n\n          case 'v' :\n            if ((cimg_sscanf(ss,\"vector%u%c\",&(arg1=~0U),&sep)==2 && sep=='(' && arg1>0) ||\n                !std::strncmp(ss,\"vector(\",7) ||\n                (!std::strncmp(ss,\"vector\",6) && ss7<se1 && (s=std::strchr(ss7,'('))!=0)) { // Vector\n              _cimg_mp_op(\"Function 'vector()'\");\n              arg2 = 0; // Number of specified values.\n              if (arg1==~0U && *ss6!='(') {\n                arg1 = compile(ss6,s++,depth1,0);\n                _cimg_mp_check_constant(arg1,0,3);\n                arg1 = (unsigned int)mem[arg1];\n              } else s = std::strchr(ss6,'(') + 1;\n\n              if (s<se1 || arg1==~0U) for ( ; s<se; ++s) {\n                  ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                                 (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                  arg3 = compile(s,ns,depth1,0);\n                  if (_cimg_mp_is_vector(arg3)) {\n                    arg4 = _cimg_mp_vector_size(arg3);\n                    CImg<ulongT>::sequence(arg4,arg3 + 1,arg3 + arg4).move_to(_opcode);\n                    arg2+=arg4;\n                  } else { CImg<ulongT>::vector(arg3).move_to(_opcode); ++arg2; }\n                  s = ns;\n                }\n              if (arg1==~0U) arg1 = arg2;\n              _cimg_mp_check_vector0(arg1);\n              pos = vector(arg1);\n              _opcode.insert(CImg<ulongT>::vector((ulongT)mp_vector_init,pos,0,arg1),0);\n              (_opcode>'y').move_to(opcode);\n              opcode[2] = opcode._height;\n              opcode.move_to(code);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'w' :\n            if (!std::strncmp(ss,\"w(\",2)) { // Image width\n              _cimg_mp_op(\"Function 'w()'\");\n              if (*ss2=='#') { p1 = compile(ss3,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss2!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_w,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"wh(\",3)) { // Image width*height\n              _cimg_mp_op(\"Function 'wh()'\");\n              if (*ss3=='#') { p1 = compile(ss4,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss3!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_wh,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"whd(\",4)) { // Image width*height*depth\n              _cimg_mp_op(\"Function 'whd()'\");\n              if (*ss4=='#') { p1 = compile(ss5,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss4!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_whd,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"whds(\",5)) { // Image width*height*depth*spectrum\n              _cimg_mp_op(\"Function 'whds()'\");\n              if (*ss5=='#') { p1 = compile(ss6,se1,depth1,0); _cimg_mp_check_list(false); } // Index specified\n              else { if (ss5!=se1) break; p1 = ~0U; }\n              pos = scalar();\n              CImg<ulongT>::vector((ulongT)mp_image_whds,pos,p1).move_to(code);\n              _cimg_mp_return(pos);\n            }\n\n            if (!std::strncmp(ss,\"while(\",6) || !std::strncmp(ss,\"whiledo(\",8)) { // While...do\n              _cimg_mp_op(\"Function 'whiledo()'\");\n              s0 = *ss5=='('?ss6:ss8;\n              s1 = s0; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              p1 = code._width;\n              arg1 = compile(s0,s1,depth1,0);\n              p2 = code._width;\n              arg6 = mempos;\n              pos = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg1,1,1,0);\n              arg2 = _cimg_mp_vector_size(pos);\n              CImg<ulongT>::vector((ulongT)mp_whiledo,pos,arg1,p2 - p1,code._width - p2,arg2,\n                                   pos>=arg6 && !_cimg_mp_is_constant(pos),\n                                   arg1>=arg6 && !_cimg_mp_is_constant(arg1)).move_to(code,p1);\n              _cimg_mp_return(pos);\n            }\n            break;\n\n          case 'x' :\n            if (!std::strncmp(ss,\"xor(\",4)) { // Xor\n              _cimg_mp_op(\"Function 'xor()'\");\n              s1 = ss4; while (s1<se1 && (*s1!=',' || level[s1 - expr._data]!=clevel1)) ++s1;\n              arg1 = compile(ss4,s1,depth1,0);\n              arg2 = compile(++s1,se1,depth1,0);\n              _cimg_mp_check_type(arg2,2,3,_cimg_mp_vector_size(arg1));\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_vv(mp_bitwise_xor,arg1,arg2);\n              if (_cimg_mp_is_vector(arg1) && _cimg_mp_is_scalar(arg2)) _cimg_mp_vector2_vs(mp_bitwise_xor,arg1,arg2);\n              if (_cimg_mp_is_scalar(arg1) && _cimg_mp_is_vector(arg2)) _cimg_mp_vector2_sv(mp_bitwise_xor,arg1,arg2);\n              if (_cimg_mp_is_constant(arg1) && _cimg_mp_is_constant(arg2))\n                _cimg_mp_constant((longT)mem[arg1] ^ (longT)mem[arg2]);\n              _cimg_mp_scalar2(mp_bitwise_xor,arg1,arg2);\n            }\n            break;\n\n          }\n\n          if (!std::strncmp(ss,\"min(\",4) || !std::strncmp(ss,\"max(\",4) ||\n              !std::strncmp(ss,\"med(\",4) || !std::strncmp(ss,\"kth(\",4) ||\n              !std::strncmp(ss,\"sum(\",4) ||\n              !std::strncmp(ss,\"std(\",4) || !std::strncmp(ss,\"variance(\",9) ||\n              !std::strncmp(ss,\"prod(\",5) || !std::strncmp(ss,\"mean(\",5) ||\n              !std::strncmp(ss,\"argmin(\",7) || !std::strncmp(ss,\"argmax(\",7)) { // Multi-argument functions\n            _cimg_mp_op(*ss=='a'?(ss[3]=='('?\"Function 'arg()'\":ss[4]=='i'?\"Function 'argmin()'\":\n                                  \"Function 'argmax()'\"):\n                        *ss=='s'?(ss[1]=='u'?\"Function 'sum()'\":\"Function 'std()'\"):\n                        *ss=='k'?\"Function 'kth()'\":\n                        *ss=='p'?\"Function 'prod()'\":\n                        *ss=='v'?\"Function 'variance()'\":\n                        ss[1]=='i'?\"Function 'min()'\":\n                        ss[1]=='a'?\"Function 'max()'\":\n                        ss[2]=='a'?\"Function 'mean()'\":\"Function 'med()'\");\n            op = *ss=='a'?(ss[3]=='('?mp_arg:ss[4]=='i'?mp_argmin:mp_argmax):\n              *ss=='s'?(ss[1]=='u'?mp_sum:mp_std):\n              *ss=='k'?mp_kth:\n              *ss=='p'?mp_prod:\n              *ss=='v'?mp_variance:\n              ss[1]=='i'?mp_min:\n              ss[1]=='a'?mp_max:\n              ss[2]=='a'?mp_mean:\n              mp_median;\n            is_sth = true; // Tell if all arguments are constant\n            pos = scalar();\n            CImg<ulongT>::vector((ulongT)op,pos,0).move_to(_opcode);\n            for (s = std::strchr(ss,'(') + 1; s<se; ++s) {\n              ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                             (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n              arg2 = compile(s,ns,depth1,0);\n              if (_cimg_mp_is_vector(arg2))\n                CImg<ulongT>::sequence(_cimg_mp_vector_size(arg2),arg2 + 1,\n                                       arg2 + (ulongT)_cimg_mp_vector_size(arg2)).\n                  move_to(_opcode);\n              else CImg<ulongT>::vector(arg2).move_to(_opcode);\n              is_sth&=_cimg_mp_is_constant(arg2);\n              s = ns;\n            }\n            (_opcode>'y').move_to(opcode);\n            opcode[2] = opcode._height;\n            if (is_sth) _cimg_mp_constant(op(*this));\n            opcode.move_to(code);\n            _cimg_mp_return(pos);\n          }\n\n          // No corresponding built-in function -> Look for a user-defined macro call.\n          s0 = strchr(ss,'(');\n          if (s0) {\n            variable_name.assign(ss,(unsigned int)(s0 - ss + 1)).back() = 0;\n\n            // Count number of specified arguments.\n            p1 = 0;\n            for (s = s0 + 1; s<=se1; ++p1, s = ns + 1) {\n              while (*s && (signed char)*s<=' ') ++s;\n              if (*s==')' && !p1) break;\n              ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                             (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n            }\n\n            arg3 = 0; // Number of possible name matches\n            cimglist_for(macro_def,l) if (!std::strcmp(macro_def[l],variable_name) && ++arg3 &&\n                                          macro_def[l].back()==(char)p1) {\n              p2 = (unsigned int)macro_def[l].back(); // Number of required arguments\n              CImg<charT> _expr = macro_body[l]; // Expression to be substituted\n\n              p1 = 1; // Indice of current parsed argument\n              for (s = s0 + 1; s<=se1; ++p1, s = ns + 1) { // Parse function arguments\n                while (*s && (signed char)*s<=' ') ++s;\n                if (*s==')' && p1==1) break; // Function has no arguments\n                if (p1>p2) { ++p1; break; }\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=')' || level[ns - expr._data]!=clevel)) ++ns;\n                variable_name.assign(s,(unsigned int)(ns - s + 1)).back() = 0; // Argument to write\n                arg2 = 0;\n                cimg_forX(_expr,k) {\n                  if (_expr[k]==(char)p1) { // Perform argument substitution\n                    arg1 = _expr._width;\n                    _expr.resize(arg1 + variable_name._width - 2,1,1,1,0);\n                    std::memmove(_expr._data + k + variable_name._width - 1,_expr._data + k + 1,arg1 - k - 1);\n                    std::memcpy(_expr._data + k,variable_name,variable_name._width - 1);\n                    k+=variable_name._width - 2;\n                  }\n                  ++arg2;\n                }\n              }\n\n              // Recompute 'pexpr' and 'level' for evaluating substituted expression.\n              CImg<charT> _pexpr(_expr._width);\n              ns = _pexpr._data;\n              for (ps = _expr._data, c1 = ' '; *ps; ++ps) {\n                if ((signed char)*ps>' ') c1 = *ps;\n                *(ns++) = c1;\n              }\n              *ns = 0;\n\n              CImg<uintT> _level = get_level(_expr);\n              expr.swap(_expr);\n              pexpr.swap(_pexpr);\n              level.swap(_level);\n              s0 = user_macro;\n              user_macro = macro_def[l];\n              pos = compile(expr._data,expr._data + expr._width - 1,depth1,p_ref);\n              user_macro = s0;\n              level.swap(_level);\n              pexpr.swap(_pexpr);\n              expr.swap(_expr);\n              _cimg_mp_return(pos);\n            }\n\n            if (arg3) { // Macro name matched but number of arguments does not\n              CImg<uintT> sig_nargs(arg3);\n              arg1 = 0;\n              cimglist_for(macro_def,l) if (!std::strcmp(macro_def[l],variable_name))\n                sig_nargs[arg1++] = (unsigned int)macro_def[l].back();\n              *se = saved_char;\n              cimg::strellipsize(variable_name,64);\n              s0 = ss - 4>expr._data?ss - 4:expr._data;\n              cimg::strellipsize(s0,64);\n              if (sig_nargs._width>1) {\n                sig_nargs.sort();\n                arg1 = sig_nargs.back();\n                --sig_nargs._width;\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: Function '%s()': Number of specified arguments (%u) \"\n                                            \"does not match macro declaration (defined for %s or %u arguments), \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,variable_name._data,\n                                            p1,sig_nargs.value_string()._data,arg1,\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n              } else\n                throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                            \"CImg<%s>::%s: Function '%s()': Number of specified arguments (%u) \"\n                                            \"does not match macro declaration (defined for %u argument%s), \"\n                                            \"in expression '%s%s%s'.\",\n                                            pixel_type(),_cimg_mp_calling_function,variable_name._data,\n                                            p1,*sig_nargs,*sig_nargs!=1?\"s\":\"\",\n                                            s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n            }\n          }\n        } // if (se1==')')\n\n        // Char / string initializer.\n        if (*se1=='\\'' &&\n            ((se1>ss && *ss=='\\'') ||\n            (se1>ss1 && *ss=='_' && *ss1=='\\''))) {\n          if (*ss=='_') { _cimg_mp_op(\"Char initializer\"); s1 = ss2; }\n          else { _cimg_mp_op(\"String initializer\"); s1 = ss1; }\n          arg1 = (unsigned int)(se1 - s1); // Original string length.\n          if (arg1) {\n            CImg<charT>(s1,arg1 + 1).move_to(variable_name).back() = 0;\n            cimg::strunescape(variable_name);\n            arg1 = (unsigned int)std::strlen(variable_name);\n          }\n          if (!arg1) _cimg_mp_return(0); // Empty string -> 0\n          if (*ss=='_') {\n            if (arg1==1) _cimg_mp_constant(*variable_name);\n            *se = saved_char;\n            cimg::strellipsize(variable_name,64);\n            s0 = ss - 4>expr._data?ss - 4:expr._data;\n            cimg::strellipsize(s0,64);\n            throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                        \"CImg<%s>::%s: %s: Literal %s contains more than one character, \"\n                                        \"in expression '%s%s%s'.\",\n                                        pixel_type(),_cimg_mp_calling_function,s_op,\n                                        ss1,\n                                        s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n          }\n          pos = vector(arg1);\n          CImg<ulongT>::vector((ulongT)mp_string_init,pos,arg1).move_to(_opcode);\n          CImg<ulongT>(1,arg1/sizeof(ulongT) + (arg1%sizeof(ulongT)?1:0)).move_to(_opcode);\n          std::memcpy((char*)_opcode[1]._data,variable_name,arg1);\n          (_opcode>'y').move_to(code);\n          _cimg_mp_return(pos);\n        }\n\n        // Vector initializer [ ... ].\n        if (*ss=='[' && *se1==']') {\n          _cimg_mp_op(\"Vector initializer\");\n          s1 = ss1; while (s1<se2 && (signed char)*s1<=' ') ++s1;\n          s2 = se2; while (s2>s1 && (signed char)*s2<=' ') --s2;\n          if (s2>s1 && *s1=='\\'' && *s2=='\\'') { // Vector values provided as a string\n            arg1 = (unsigned int)(s2 - s1 - 1); // Original string length.\n            if (arg1) {\n              CImg<charT>(s1 + 1,arg1 + 1).move_to(variable_name).back() = 0;\n              cimg::strunescape(variable_name);\n              arg1 = (unsigned int)std::strlen(variable_name);\n            }\n            if (!arg1) _cimg_mp_return(0); // Empty string -> 0\n            pos = vector(arg1);\n            CImg<ulongT>::vector((ulongT)mp_string_init,pos,arg1).move_to(_opcode);\n            CImg<ulongT>(1,arg1/sizeof(ulongT) + (arg1%sizeof(ulongT)?1:0)).move_to(_opcode);\n            std::memcpy((char*)_opcode[1]._data,variable_name,arg1);\n            (_opcode>'y').move_to(code);\n          } else { // Vector values provided as list of items\n            arg1 = 0; // Number of specified values.\n            if (*ss1!=']') for (s = ss1; s<se; ++s) {\n                ns = s; while (ns<se && (*ns!=',' || level[ns - expr._data]!=clevel1) &&\n                               (*ns!=']' || level[ns - expr._data]!=clevel)) ++ns;\n                arg2 = compile(s,ns,depth1,0);\n                if (_cimg_mp_is_vector(arg2)) {\n                  arg3 = _cimg_mp_vector_size(arg2);\n                  CImg<ulongT>::sequence(arg3,arg2 + 1,arg2 + arg3).move_to(_opcode);\n                  arg1+=arg3;\n                } else { CImg<ulongT>::vector(arg2).move_to(_opcode); ++arg1; }\n                s = ns;\n              }\n            _cimg_mp_check_vector0(arg1);\n            pos = vector(arg1);\n            _opcode.insert(CImg<ulongT>::vector((ulongT)mp_vector_init,pos,0,arg1),0);\n            (_opcode>'y').move_to(opcode);\n            opcode[2] = opcode._height;\n            opcode.move_to(code);\n          }\n          _cimg_mp_return(pos);\n        }\n\n        // Variables related to the input list of images.\n        if (*ss1=='#' && ss2<se) {\n          arg1 = compile(ss2,se,depth1,0);\n          p1 = (unsigned int)(listin._width && _cimg_mp_is_constant(arg1)?cimg::mod((int)mem[arg1],listin.width()):~0U);\n          switch (*ss) {\n          case 'w' : // w#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._width);\n            _cimg_mp_scalar1(mp_list_width,arg1);\n          case 'h' : // h#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._height);\n            _cimg_mp_scalar1(mp_list_height,arg1);\n          case 'd' : // d#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._depth);\n            _cimg_mp_scalar1(mp_list_depth,arg1);\n          case 'r' : // r#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._is_shared);\n            _cimg_mp_scalar1(mp_list_is_shared,arg1);\n          case 's' : // s#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._spectrum);\n            _cimg_mp_scalar1(mp_list_spectrum,arg1);\n          case 'i' : // i#ind\n            if (!listin) _cimg_mp_return(0);\n            _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,_cimg_mp_slot_c,\n                             0,_cimg_mp_boundary);\n          case 'I' : // I#ind\n            p2 = p1!=~0U?listin[p1]._spectrum:listin._width?~0U:0;\n            _cimg_mp_check_vector0(p2);\n            pos = vector(p2);\n            CImg<ulongT>::vector((ulongT)mp_list_Joff,pos,p1,0,0,p2).move_to(code);\n            _cimg_mp_return(pos);\n          case 'R' : // R#ind\n            if (!listin) _cimg_mp_return(0);\n            _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,0,\n                             0,_cimg_mp_boundary);\n          case 'G' : // G#ind\n            if (!listin) _cimg_mp_return(0);\n            _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,1,\n                             0,_cimg_mp_boundary);\n          case 'B' : // B#ind\n            if (!listin) _cimg_mp_return(0);\n            _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,2,\n                             0,_cimg_mp_boundary);\n          case 'A' : // A#ind\n            if (!listin) _cimg_mp_return(0);\n            _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,3,\n                             0,_cimg_mp_boundary);\n          }\n        }\n\n        if (*ss1 && *ss2=='#' && ss3<se) {\n          arg1 = compile(ss3,se,depth1,0);\n          p1 = (unsigned int)(listin._width && _cimg_mp_is_constant(arg1)?cimg::mod((int)mem[arg1],listin.width()):~0U);\n          if (*ss=='w' && *ss1=='h') { // wh#ind\n            if (!listin) _cimg_mp_return(0);\n            if (p1!=~0U) _cimg_mp_constant(listin[p1]._width*listin[p1]._height);\n            _cimg_mp_scalar1(mp_list_wh,arg1);\n          }\n          arg2 = ~0U;\n\n          if (*ss=='i') {\n            if (*ss1=='c') { // ic#ind\n              if (!listin) _cimg_mp_return(0);\n              if (_cimg_mp_is_constant(arg1)) {\n                if (!list_median) list_median.assign(listin._width);\n                if (!list_median[p1]) CImg<doubleT>::vector(listin[p1].median()).move_to(list_median[p1]);\n                _cimg_mp_constant(*list_median[p1]);\n              }\n              _cimg_mp_scalar1(mp_list_median,arg1);\n            }\n            if (*ss1>='0' && *ss1<='9') { // i0#ind...i9#ind\n              if (!listin) _cimg_mp_return(0);\n              _cimg_mp_scalar7(mp_list_ixyzc,arg1,_cimg_mp_slot_x,_cimg_mp_slot_y,_cimg_mp_slot_z,*ss1 - '0',\n                               0,_cimg_mp_boundary);\n            }\n            switch (*ss1) {\n            case 'm' : arg2 = 0; break; // im#ind\n            case 'M' : arg2 = 1; break; // iM#ind\n            case 'a' : arg2 = 2; break; // ia#ind\n            case 'v' : arg2 = 3; break; // iv#ind\n            case 's' : arg2 = 12; break; // is#ind\n            case 'p' : arg2 = 13; break; // ip#ind\n            }\n          } else if (*ss1=='m') switch (*ss) {\n            case 'x' : arg2 = 4; break; // xm#ind\n            case 'y' : arg2 = 5; break; // ym#ind\n            case 'z' : arg2 = 6; break; // zm#ind\n            case 'c' : arg2 = 7; break; // cm#ind\n            } else if (*ss1=='M') switch (*ss) {\n            case 'x' : arg2 = 8; break; // xM#ind\n            case 'y' : arg2 = 9; break; // yM#ind\n            case 'z' : arg2 = 10; break; // zM#ind\n            case 'c' : arg2 = 11; break; // cM#ind\n            }\n          if (arg2!=~0U) {\n            if (!listin) _cimg_mp_return(0);\n            if (_cimg_mp_is_constant(arg1)) {\n              if (!list_stats) list_stats.assign(listin._width);\n              if (!list_stats[p1]) list_stats[p1].assign(1,14,1,1,0).fill(listin[p1].get_stats(),false);\n              _cimg_mp_constant(list_stats(p1,arg2));\n            }\n            _cimg_mp_scalar2(mp_list_stats,arg1,arg2);\n          }\n        }\n\n        if (*ss=='w' && *ss1=='h' && *ss2=='d' && *ss3=='#' && ss4<se) { // whd#ind\n          arg1 = compile(ss4,se,depth1,0);\n          if (!listin) _cimg_mp_return(0);\n          p1 = (unsigned int)(_cimg_mp_is_constant(arg1)?cimg::mod((int)mem[arg1],listin.width()):~0U);\n          if (p1!=~0U) _cimg_mp_constant(listin[p1]._width*listin[p1]._height*listin[p1]._depth);\n          _cimg_mp_scalar1(mp_list_whd,arg1);\n        }\n        if (*ss=='w' && *ss1=='h' && *ss2=='d' && *ss3=='s' && *ss4=='#' && ss5<se) { // whds#ind\n          arg1 = compile(ss5,se,depth1,0);\n          if (!listin) _cimg_mp_return(0);\n          p1 = (unsigned int)(_cimg_mp_is_constant(arg1)?cimg::mod((int)mem[arg1],listin.width()):~0U);\n          if (p1!=~0U) _cimg_mp_constant(listin[p1]._width*listin[p1]._height*listin[p1]._depth*listin[p1]._spectrum);\n          _cimg_mp_scalar1(mp_list_whds,arg1);\n        }\n\n        if (!std::strcmp(ss,\"interpolation\")) _cimg_mp_return(_cimg_mp_interpolation); // interpolation\n        if (!std::strcmp(ss,\"boundary\")) _cimg_mp_return(_cimg_mp_boundary); // boundary\n\n        // No known item found, assuming this is an already initialized variable.\n        variable_name.assign(ss,(unsigned int)(se - ss + 1)).back() = 0;\n        if (variable_name[1]) { // Multi-char variable\n          cimglist_for(variable_def,i) if (!std::strcmp(variable_name,variable_def[i]))\n            _cimg_mp_return(variable_pos[i]);\n        } else if (reserved_label[*variable_name]!=~0U) // Single-char variable\n          _cimg_mp_return(reserved_label[*variable_name]);\n\n        // Reached an unknown item -> error.\n        is_sth = true; // is_valid_variable_name\n        if (*variable_name>='0' && *variable_name<='9') is_sth = false;\n        else for (ns = variable_name._data; *ns; ++ns)\n               if (!is_varchar(*ns)) { is_sth = false; break; }\n\n        *se = saved_char;\n        c1 = *se1;\n        cimg::strellipsize(variable_name,64);\n        s0 = ss - 4>expr._data?ss - 4:expr._data;\n        cimg::strellipsize(s0,64);\n        if (is_sth)\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: Undefined variable '%s' in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,\n                                      variable_name._data,\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        s1 = std::strchr(ss,'(');\n        s_op = s1 && c1==')'?\"function call\":\"item\";\n        throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                    \"CImg<%s>::%s: Unrecognized %s '%s' in expression '%s%s%s'.\",\n                                    pixel_type(),_cimg_mp_calling_function,\n                                    s_op,variable_name._data,\n                                    s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n      }\n\n      // Evaluation procedure.\n      double operator()(const double x, const double y, const double z, const double c) {\n        mem[_cimg_mp_slot_x] = x; mem[_cimg_mp_slot_y] = y; mem[_cimg_mp_slot_z] = z; mem[_cimg_mp_slot_c] = c;\n        for (p_code = code; p_code<p_code_end; ++p_code) {\n          const CImg<ulongT> &op = *p_code;\n          opcode._data = op._data;\n          const ulongT target = opcode[1];\n          mem[target] = _cimg_mp_defunc(*this);\n        }\n        return *result;\n      }\n\n      // Evaluation procedure (return output values in vector 'output').\n      template<typename t>\n      void operator()(const double x, const double y, const double z, const double c, t *const output) {\n        mem[_cimg_mp_slot_x] = x; mem[_cimg_mp_slot_y] = y; mem[_cimg_mp_slot_z] = z; mem[_cimg_mp_slot_c] = c;\n        for (p_code = code; p_code<p_code_end; ++p_code) {\n          const CImg<ulongT> &op = *p_code;\n          opcode._data = op._data;\n          const ulongT target = opcode[1];\n          mem[target] = _cimg_mp_defunc(*this);\n        }\n        if (result_dim) {\n          const double *ptrs = result + 1;\n          t *ptrd = output;\n          for (unsigned int k = 0; k<result_dim; ++k) *(ptrd++) = (t)*(ptrs++);\n        } else *output = (t)*result;\n      }\n\n      // Evaluation procedure for the end() blocks.\n      void end() {\n        if (code_end.is_empty()) return;\n        if (imgin) {\n          mem[_cimg_mp_slot_x] = imgin._width - 1.0;\n          mem[_cimg_mp_slot_y] = imgin._height - 1.0f;\n          mem[_cimg_mp_slot_z] = imgin._depth - 1.0f;\n          mem[_cimg_mp_slot_c] = imgin._spectrum - 1.0f;\n        } else mem[_cimg_mp_slot_x] = mem[_cimg_mp_slot_y] = mem[_cimg_mp_slot_z] = mem[_cimg_mp_slot_c] = 0;\n        p_code_end = code_end.end();\n        for (p_code = code_end; p_code<p_code_end; ++p_code) {\n          const CImg<ulongT> &op = *p_code;\n          opcode._data = op._data;\n          const ulongT target = opcode[1];\n          mem[target] = _cimg_mp_defunc(*this);\n        }\n      }\n\n      // Return type of a memory element as a string.\n      CImg<charT> s_type(const unsigned int arg) const {\n        CImg<charT> res;\n        if (_cimg_mp_is_vector(arg)) { // Vector\n          CImg<charT>::string(\"vectorXXXXXXXXXXXXXXXX\").move_to(res);\n          std::sprintf(res._data + 6,\"%u\",_cimg_mp_vector_size(arg));\n        } else CImg<charT>::string(\"scalar\").move_to(res);\n        return res;\n      }\n\n      // Insert constant value in memory.\n      unsigned int constant(const double val) {\n\n        // Search for built-in constant.\n        if (val==(double)(int)val) {\n          if (val>=0 && val<=10) return (unsigned int)val;\n          if (val<0 && val>=-5) return (unsigned int)(10 - val);\n        }\n        if (val==0.5) return 16;\n        if (cimg::type<double>::is_nan(val)) return _cimg_mp_slot_nan;\n\n        // Search for constant already requested before (in const cache).\n        unsigned int ind = ~0U;\n        if (constcache_size<1024) {\n          if (!constcache_size) {\n            constcache_vals.assign(16,1,1,1,0);\n            constcache_inds.assign(16,1,1,1,0);\n            *constcache_vals = val;\n            constcache_size = 1;\n            ind = 0;\n          } else { // Dichotomic search\n            const double val_beg = *constcache_vals, val_end = constcache_vals[constcache_size - 1];\n            if (val_beg>=val) ind = 0;\n            else if (val_end==val) ind = constcache_size - 1;\n            else if (val_end<val) ind = constcache_size;\n            else {\n              unsigned int i0 = 1, i1 = constcache_size - 2;\n              while (i0<=i1) {\n                const unsigned int mid = (i0 + i1)/2;\n                if (constcache_vals[mid]==val) { i0 = mid; break; }\n                else if (constcache_vals[mid]<val) i0 = mid + 1;\n                else i1 = mid - 1;\n              }\n              ind = i0;\n            }\n\n            if (ind>=constcache_size || constcache_vals[ind]!=val) {\n              ++constcache_size;\n              if (constcache_size>constcache_vals._width) {\n                constcache_vals.resize(-200,1,1,1,0);\n                constcache_inds.resize(-200,1,1,1,0);\n              }\n              const int l = constcache_size - (int)ind - 1;\n              if (l>0) {\n                std::memmove(&constcache_vals[ind + 1],&constcache_vals[ind],l*sizeof(double));\n                std::memmove(&constcache_inds[ind + 1],&constcache_inds[ind],l*sizeof(unsigned int));\n              }\n              constcache_vals[ind] = val;\n              constcache_inds[ind] = 0;\n            }\n          }\n          if (constcache_inds[ind]) return constcache_inds[ind];\n        }\n\n        // Insert new constant in memory if necessary.\n        if (mempos>=mem._width) { mem.resize(-200,1,1,1,0); memtype.resize(-200,1,1,1,0); }\n        const unsigned int pos = mempos++;\n        mem[pos] = val;\n        memtype[pos] = 1; // Set constant property\n        if (ind!=~0U) constcache_inds[ind] = pos;\n        return pos;\n      }\n\n      // Insert code instructions for processing scalars.\n      unsigned int scalar() { // Insert new scalar in memory.\n        if (mempos>=mem._width) { mem.resize(-200,1,1,1,0); memtype.resize(mem._width,1,1,1,0); }\n        return mempos++;\n      }\n\n      unsigned int scalar0(const mp_func op) {\n        const unsigned int pos = scalar();\n        CImg<ulongT>::vector((ulongT)op,pos).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar1(const mp_func op, const unsigned int arg1) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1) && op!=mp_copy?arg1:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar2(const mp_func op, const unsigned int arg1, const unsigned int arg2) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar3(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar4(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,\n                           const unsigned int arg4) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:\n          arg4>_cimg_mp_slot_c && _cimg_mp_is_comp(arg4)?arg4:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3,arg4).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar5(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,\n                           const unsigned int arg4, const unsigned int arg5) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:\n          arg4>_cimg_mp_slot_c && _cimg_mp_is_comp(arg4)?arg4:\n          arg5>_cimg_mp_slot_c && _cimg_mp_is_comp(arg5)?arg5:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3,arg4,arg5).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar6(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,\n                           const unsigned int arg4, const unsigned int arg5, const unsigned int arg6) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:\n          arg4>_cimg_mp_slot_c && _cimg_mp_is_comp(arg4)?arg4:\n          arg5>_cimg_mp_slot_c && _cimg_mp_is_comp(arg5)?arg5:\n          arg6>_cimg_mp_slot_c && _cimg_mp_is_comp(arg6)?arg6:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3,arg4,arg5,arg6).move_to(code);\n        return pos;\n      }\n\n      unsigned int scalar7(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,\n                           const unsigned int arg4, const unsigned int arg5, const unsigned int arg6,\n                           const unsigned int arg7) {\n        const unsigned int pos =\n          arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:\n          arg4>_cimg_mp_slot_c && _cimg_mp_is_comp(arg4)?arg4:\n          arg5>_cimg_mp_slot_c && _cimg_mp_is_comp(arg5)?arg5:\n          arg6>_cimg_mp_slot_c && _cimg_mp_is_comp(arg6)?arg6:\n          arg7>_cimg_mp_slot_c && _cimg_mp_is_comp(arg7)?arg7:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3,arg4,arg5,arg6,arg7).move_to(code);\n        return pos;\n      }\n\n      // Return a string that defines the calling function + the user-defined function scope.\n      CImg<charT> calling_function_s() const {\n        CImg<charT> res;\n        const unsigned int\n          l1 = calling_function?(unsigned int)std::strlen(calling_function):0U,\n          l2 = user_macro?(unsigned int)std::strlen(user_macro):0U;\n        if (l2) {\n          res.assign(l1 + l2 + 48);\n          cimg_snprintf(res,res._width,\"%s(): When substituting function '%s()'\",calling_function,user_macro);\n        } else {\n          res.assign(l1 + l2 + 4);\n          cimg_snprintf(res,res._width,\"%s()\",calling_function);\n        }\n        return res;\n      }\n\n      // Return true if specified argument can be a part of an allowed  variable name.\n      bool is_varchar(const char c) const {\n        return (c>='a' && c<='z') || (c>='A' && c<='Z') || (c>='0' && c<='9') || c=='_';\n      }\n\n      // Insert code instructions for processing vectors.\n      bool is_comp_vector(const unsigned int arg) const {\n        unsigned int siz = _cimg_mp_vector_size(arg);\n        if (siz>8) return false;\n        const int *ptr = memtype.data(arg + 1);\n        bool is_tmp = true;\n        while (siz-->0) if (*(ptr++)) { is_tmp = false; break; }\n        return is_tmp;\n      }\n\n      void set_variable_vector(const unsigned int arg) {\n        unsigned int siz = _cimg_mp_vector_size(arg);\n        int *ptr = memtype.data(arg + 1);\n        while (siz-->0) *(ptr++) = -1;\n      }\n\n      unsigned int vector(const unsigned int siz) { // Insert new vector of specified size in memory\n        if (mempos + siz>=mem._width) {\n          mem.resize(2*mem._width + siz,1,1,1,0);\n          memtype.resize(mem._width,1,1,1,0);\n        }\n        const unsigned int pos = mempos++;\n        mem[pos] = cimg::type<double>::nan();\n        memtype[pos] = siz + 1;\n        mempos+=siz;\n        return pos;\n      }\n\n      unsigned int vector(const unsigned int siz, const double value) { // Insert new initialized vector\n        const unsigned int pos = vector(siz);\n        double *ptr = &mem[pos] + 1;\n        for (unsigned int i = 0; i<siz; ++i) *(ptr++) = value;\n        return pos;\n      }\n\n      unsigned int vector_copy(const unsigned int arg) { // Insert new copy of specified vector in memory\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg),\n          pos = vector(siz);\n        CImg<ulongT>::vector((ulongT)mp_vector_copy,pos,arg,siz).move_to(code);\n        return pos;\n      }\n\n      void self_vector_s(const unsigned int pos, const mp_func op, const unsigned int arg1) {\n        const unsigned int siz = _cimg_mp_vector_size(pos);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_self_map_vector_s,pos,siz,(ulongT)op,arg1).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1).move_to(code[code._width - 1 - siz + k]);\n        }\n      }\n\n      void self_vector_v(const unsigned int pos, const mp_func op, const unsigned int arg1) {\n        const unsigned int siz = _cimg_mp_vector_size(pos);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_self_map_vector_v,pos,siz,(ulongT)op,arg1).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1 + k).move_to(code[code._width - 1 - siz + k]);\n        }\n      }\n\n      unsigned int vector1_v(const mp_func op, const unsigned int arg1) {\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg1),\n          pos = is_comp_vector(arg1)?arg1:vector(siz);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_vector_map_v,pos,siz,(ulongT)op,arg1).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1 + k).move_to(code[code._width - 1 - siz + k]);\n        }\n        return pos;\n      }\n\n      unsigned int vector2_vv(const mp_func op, const unsigned int arg1, const unsigned int arg2) {\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg1),\n          pos = is_comp_vector(arg1)?arg1:is_comp_vector(arg2)?arg2:vector(siz);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_vector_map_vv,pos,siz,(ulongT)op,arg1,arg2).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1 + k,arg2 + k).move_to(code[code._width - 1 - siz + k]);\n        }\n        return pos;\n      }\n\n      unsigned int vector2_vs(const mp_func op, const unsigned int arg1, const unsigned int arg2) {\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg1),\n          pos = is_comp_vector(arg1)?arg1:vector(siz);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_vector_map_vs,pos,siz,(ulongT)op,arg1,arg2).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1 + k,arg2).move_to(code[code._width - 1 - siz + k]);\n        }\n        return pos;\n      }\n\n      unsigned int vector2_sv(const mp_func op, const unsigned int arg1, const unsigned int arg2) {\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg2),\n          pos = is_comp_vector(arg2)?arg2:vector(siz);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_vector_map_sv,pos,siz,(ulongT)op,arg1,arg2).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1,arg2 + k).move_to(code[code._width - 1 - siz + k]);\n        }\n        return pos;\n      }\n\n      unsigned int vector3_vss(const mp_func op, const unsigned int arg1, const unsigned int arg2,\n                               const unsigned int arg3) {\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg1),\n          pos = is_comp_vector(arg1)?arg1:vector(siz);\n        if (siz>24) CImg<ulongT>::vector((ulongT)mp_vector_map_vss,pos,siz,(ulongT)op,arg1,arg2,arg3).move_to(code);\n        else {\n          code.insert(siz);\n          for (unsigned int k = 1; k<=siz; ++k)\n            CImg<ulongT>::vector((ulongT)op,pos + k,arg1 + k,arg2,arg3).move_to(code[code._width - 1 - siz + k]);\n        }\n        return pos;\n      }\n\n      // Check if a memory slot is a positive integer constant scalar value.\n      // 'mode' can be:\n      // { 0=constant | 1=integer constant | 2=positive integer constant | 3=strictly-positive integer constant }\n      void check_constant(const unsigned int arg, const unsigned int n_arg,\n                          const unsigned int mode,\n                          char *const ss, char *const se, const char saved_char) {\n        _cimg_mp_check_type(arg,n_arg,1,0);\n        if (!(_cimg_mp_is_constant(arg) &&\n              (!mode || (double)(int)mem[arg]==mem[arg]) &&\n              (mode<2 || mem[arg]>=(mode==3)))) {\n          const char *s_arg = !n_arg?\"\":n_arg==1?\"First \":n_arg==2?\"Second \":n_arg==3?\"Third \":\n            n_arg==4?\"Fourth \":n_arg==5?\"Fifth \":n_arg==6?\"Sixth \":n_arg==7?\"Seventh \":n_arg==8?\"Eighth \":\n            n_arg==9?\"Ninth \":\"One of the \";\n          *se = saved_char;\n          char *const s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s %s%s (of type '%s') is not a%s constant, \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s_arg,*s_arg?\"argument\":\"Argument\",s_type(arg)._data,\n                                      !mode?\"\":mode==1?\"n integer\":\n                                      mode==2?\" positive integer\":\" strictly positive integer\",\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n      }\n\n      // Check a matrix is square.\n      void check_matrix_square(const unsigned int arg, const unsigned int n_arg,\n                               char *const ss, char *const se, const char saved_char) {\n        _cimg_mp_check_type(arg,n_arg,2,0);\n        const unsigned int\n          siz = _cimg_mp_vector_size(arg),\n          n = (unsigned int)std::sqrt((float)siz);\n        if (n*n!=siz) {\n          const char *s_arg;\n          if (*s_op!='F') s_arg = !n_arg?\"\":n_arg==1?\"Left-hand \":\"Right-hand \";\n          else s_arg = !n_arg?\"\":n_arg==1?\"First \":n_arg==2?\"Second \":n_arg==3?\"Third \":\"One \";\n          *se = saved_char;\n          char *const s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s %s%s (of type '%s') \"\n                                      \"cannot be considered as a square matrix, in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s_arg,*s_op=='F'?(*s_arg?\"argument\":\"Argument\"):(*s_arg?\"operand\":\"Operand\"),\n                                      s_type(arg)._data,\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n      }\n\n      // Check type compatibility for one argument.\n      // Bits of 'mode' tells what types are allowed:\n      // { 1 = scalar | 2 = vectorN }.\n      // If 'N' is not zero, it also restricts the vectors to be of size N only.\n      void check_type(const unsigned int arg, const unsigned int n_arg,\n                      const unsigned int mode, const unsigned int N,\n                      char *const ss, char *const se, const char saved_char) {\n        const bool\n          is_scalar = _cimg_mp_is_scalar(arg),\n          is_vector = _cimg_mp_is_vector(arg) && (!N || _cimg_mp_vector_size(arg)==N);\n        bool cond = false;\n        if (mode&1) cond|=is_scalar;\n        if (mode&2) cond|=is_vector;\n        if (!cond) {\n          const char *s_arg;\n          if (*s_op!='F') s_arg = !n_arg?\"\":n_arg==1?\"Left-hand \":\"Right-hand \";\n          else s_arg = !n_arg?\"\":n_arg==1?\"First \":n_arg==2?\"Second \":n_arg==3?\"Third \":\n                 n_arg==4?\"Fourth \":n_arg==5?\"Fifth \":n_arg==6?\"Sixth \":n_arg==7?\"Seventh \":n_arg==8?\"Eighth\":\n                 n_arg==9?\"Ninth\":\"One of the \";\n          CImg<charT> sb_type(32);\n          if (mode==1) cimg_snprintf(sb_type,sb_type._width,\"'scalar'\");\n          else if (mode==2) {\n            if (N) cimg_snprintf(sb_type,sb_type._width,\"'vector%u'\",N);\n            else cimg_snprintf(sb_type,sb_type._width,\"'vector'\");\n          } else {\n            if (N) cimg_snprintf(sb_type,sb_type._width,\"'scalar' or 'vector%u'\",N);\n            else cimg_snprintf(sb_type,sb_type._width,\"'scalar' or 'vector'\");\n          }\n          *se = saved_char;\n          char *const s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s %s%s has invalid type '%s' (should be %s), \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s_arg,*s_op=='F'?(*s_arg?\"argument\":\"Argument\"):(*s_arg?\"operand\":\"Operand\"),\n                                      s_type(arg)._data,sb_type._data,\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n      }\n\n      // Check that listin or listout are not empty.\n      void check_list(const bool is_out,\n                      char *const ss, char *const se, const char saved_char) {\n        if ((!is_out && !listin) || (is_out && !listout)) {\n          *se = saved_char;\n          char *const s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s Invalid call with an empty image list, \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n      }\n\n      // Check a vector is not 0-dimensional, or with unknown dimension at compile time.\n      void check_vector0(const unsigned int dim,\n                         char *const ss, char *const se, const char saved_char) {\n        char *s0 = 0;\n        if (!dim) {\n          *se = saved_char;\n          s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s Invalid construction of a 0-dimensional vector, \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        } else if (dim==~0U) {\n          *se = saved_char;\n          s0 = ss - 4>expr._data?ss - 4:expr._data;\n          cimg::strellipsize(s0,64);\n          throw CImgArgumentException(\"[_cimg_math_parser] \"\n                                      \"CImg<%s>::%s: %s%s Invalid construction of a vector with dynamic size, \"\n                                      \"in expression '%s%s%s'.\",\n                                      pixel_type(),_cimg_mp_calling_function,s_op,*s_op?\":\":\"\",\n                                      s0!=expr._data?\"...\":\"\",s0,se<&expr.back()?\"...\":\"\");\n        }\n      }\n\n      // Evaluation functions, known by the parser.\n      // Defining these functions 'static' ensures that sizeof(mp_func)==sizeof(ulongT),\n      // so we can store pointers to them directly in the opcode vectors.\n#ifdef _mp_arg\n#undef _mp_arg\n#endif\n#define _mp_arg(x) mp.mem[mp.opcode[x]]\n\n      static double mp_abs(_cimg_math_parser& mp) {\n        return cimg::abs(_mp_arg(2));\n      }\n\n      static double mp_add(_cimg_math_parser& mp) {\n        return _mp_arg(2) + _mp_arg(3);\n      }\n\n      static double mp_acos(_cimg_math_parser& mp) {\n        return std::acos(_mp_arg(2));\n      }\n\n      static double mp_arg(_cimg_math_parser& mp) {\n        const int _ind = (int)_mp_arg(4);\n        const unsigned int\n          nb_args = (unsigned int)mp.opcode[2] - 4,\n          ind = _ind<0?_ind + nb_args:(unsigned int)_ind,\n          siz = (unsigned int)mp.opcode[3];\n        if (siz>0) {\n          if (ind>=nb_args) std::memset(&_mp_arg(1) + 1,0,siz*sizeof(double));\n          else std::memcpy(&_mp_arg(1) + 1,&_mp_arg(ind + 4) + 1,siz*sizeof(double));\n          return cimg::type<double>::nan();\n        }\n        if (ind>=nb_args) return 0;\n        return _mp_arg(ind + 4);\n      }\n\n      static double mp_argmin(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        unsigned int argval = 0;\n        for (unsigned int i = 4; i<i_end; ++i) {\n          const double _val = _mp_arg(i);\n          if (_val<val) { val = _val; argval = i - 3; }\n        }\n        return (double)argval;\n      }\n\n      static double mp_argmax(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        unsigned int argval = 0;\n        for (unsigned int i = 4; i<i_end; ++i) {\n          const double _val = _mp_arg(i);\n          if (_val>val) { val = _val; argval = i - 3; }\n        }\n        return (double)argval;\n      }\n\n      static double mp_asin(_cimg_math_parser& mp) {\n        return std::asin(_mp_arg(2));\n      }\n\n      static double mp_atan(_cimg_math_parser& mp) {\n        return std::atan(_mp_arg(2));\n      }\n\n      static double mp_atan2(_cimg_math_parser& mp) {\n        return std::atan2(_mp_arg(2),_mp_arg(3));\n      }\n\n      static double mp_bitwise_and(_cimg_math_parser& mp) {\n        return (double)((longT)_mp_arg(2) & (longT)_mp_arg(3));\n      }\n\n      static double mp_bitwise_left_shift(_cimg_math_parser& mp) {\n        return (double)((longT)_mp_arg(2)<<(unsigned int)_mp_arg(3));\n      }\n\n      static double mp_bitwise_not(_cimg_math_parser& mp) {\n        // Limit result to 32bits such that it can be entirely represented as a 'double'.\n        return (double)~(unsigned int)_mp_arg(2);\n      }\n\n      static double mp_bitwise_or(_cimg_math_parser& mp) {\n        return (double)((longT)_mp_arg(2) | (longT)_mp_arg(3));\n      }\n\n      static double mp_bitwise_right_shift(_cimg_math_parser& mp) {\n        return (double)((longT)_mp_arg(2)>>(unsigned int)_mp_arg(3));\n      }\n\n      static double mp_bitwise_xor(_cimg_math_parser& mp) {\n        return (double)((longT)_mp_arg(2) ^ (longT)_mp_arg(3));\n      }\n\n      static double mp_bool(_cimg_math_parser& mp) {\n        return (double)(bool)_mp_arg(2);\n      }\n\n      static double mp_break(_cimg_math_parser& mp) {\n        mp.break_type = 1;\n        mp.p_code = mp.p_break - 1;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_breakpoint(_cimg_math_parser& mp) {\n        cimg_abort_test();\n        cimg::unused(mp);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_cbrt(_cimg_math_parser& mp) {\n        return cimg::cbrt(_mp_arg(2));\n      }\n\n      static double mp_complex_abs(_cimg_math_parser& mp) {\n        return cimg::_hypot(_mp_arg(2),_mp_arg(3));\n      }\n\n      static double mp_complex_conj(_cimg_math_parser& mp) {\n        const double *ptrs = &_mp_arg(2) + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        *(ptrd++) = *(ptrs++);\n        *ptrd = -*(ptrs);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_div_sv(_cimg_math_parser& mp) {\n        const double\n          *ptr2 = &_mp_arg(3) + 1,\n          r1 = _mp_arg(2),\n          r2 = *(ptr2++), i2 = *ptr2;\n        double *ptrd = &_mp_arg(1) + 1;\n        const double denom = r2*r2 + i2*i2;\n        *(ptrd++) = r1*r2/denom;\n        *ptrd =  -r1*i2/denom;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_div_vv(_cimg_math_parser& mp) {\n        const double\n          *ptr1 = &_mp_arg(2) + 1, *ptr2 = &_mp_arg(3) + 1,\n          r1 = *(ptr1++), i1 = *ptr1,\n          r2 = *(ptr2++), i2 = *ptr2;\n        double *ptrd = &_mp_arg(1) + 1;\n        const double denom = r2*r2 + i2*i2;\n        *(ptrd++) = (r1*r2 + i1*i2)/denom;\n        *ptrd = (r2*i1 - r1*i2)/denom;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_exp(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptrs = &_mp_arg(2) + 1, r = *(ptrs++), i = *(ptrs), er = std::exp(r);\n        *(ptrd++) = er*std::cos(i);\n        *(ptrd++) = er*std::sin(i);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_log(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptrs = &_mp_arg(2) + 1, r = *(ptrs++), i = *(ptrs);\n        *(ptrd++) = 0.5*std::log(r*r + i*i);\n        *(ptrd++) = std::atan2(i,r);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_mul(_cimg_math_parser& mp) {\n        const double\n          *ptr1 = &_mp_arg(2) + 1, *ptr2 = &_mp_arg(3) + 1,\n          r1 = *(ptr1++), i1 = *ptr1,\n          r2 = *(ptr2++), i2 = *ptr2;\n        double *ptrd = &_mp_arg(1) + 1;\n        *(ptrd++) = r1*r2 - i1*i2;\n        *(ptrd++) = r1*i2 + r2*i1;\n        return cimg::type<double>::nan();\n      }\n\n      static void _mp_complex_pow(const double r1, const double i1,\n                                  const double r2, const double i2,\n                                  double *ptrd) {\n        double ro, io;\n        if (cimg::abs(i2)<1e-15) { // Exponent is real\n          if (cimg::abs(r1)<1e-15 && cimg::abs(i1)<1e-15) {\n            if (cimg::abs(r2)<1e-15) { ro = 1; io = 0; }\n            else ro = io = 0;\n          } else {\n            const double\n              mod1_2 = r1*r1 + i1*i1,\n              phi1 = std::atan2(i1,r1),\n              modo = std::pow(mod1_2,0.5*r2),\n              phio = r2*phi1;\n            ro = modo*std::cos(phio);\n            io = modo*std::sin(phio);\n          }\n        } else { // Exponent is complex\n          if (cimg::abs(r1)<1e-15 && cimg::abs(i1)<1e-15) ro = io = 0;\n          const double\n            mod1_2 = r1*r1 + i1*i1,\n            phi1 = std::atan2(i1,r1),\n            modo = std::pow(mod1_2,0.5*r2)*std::exp(-i2*phi1),\n            phio = r2*phi1 + 0.5*i2*std::log(mod1_2);\n          ro = modo*std::cos(phio);\n          io = modo*std::sin(phio);\n        }\n        *(ptrd++) = ro;\n        *ptrd = io;\n      }\n\n      static double mp_complex_pow_ss(_cimg_math_parser& mp) {\n        const double val1 = _mp_arg(2), val2 = _mp_arg(3);\n        double *ptrd = &_mp_arg(1) + 1;\n        _mp_complex_pow(val1,0,val2,0,ptrd);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_pow_sv(_cimg_math_parser& mp) {\n        const double val1 = _mp_arg(2), *ptr2 = &_mp_arg(3) + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        _mp_complex_pow(val1,0,ptr2[0],ptr2[1],ptrd);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_pow_vs(_cimg_math_parser& mp) {\n        const double *ptr1 = &_mp_arg(2) + 1, val2 = _mp_arg(3);\n        double *ptrd = &_mp_arg(1) + 1;\n        _mp_complex_pow(ptr1[0],ptr1[1],val2,0,ptrd);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_complex_pow_vv(_cimg_math_parser& mp) {\n        const double *ptr1 = &_mp_arg(2) + 1, *ptr2 = &_mp_arg(3) + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        _mp_complex_pow(ptr1[0],ptr1[1],ptr2[0],ptr2[1],ptrd);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_continue(_cimg_math_parser& mp) {\n        mp.break_type = 2;\n        mp.p_code = mp.p_break - 1;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_cos(_cimg_math_parser& mp) {\n        return std::cos(_mp_arg(2));\n      }\n\n      static double mp_cosh(_cimg_math_parser& mp) {\n        return std::cosh(_mp_arg(2));\n      }\n\n      static double mp_cross(_cimg_math_parser& mp) {\n        CImg<doubleT>\n          vout(&_mp_arg(1) + 1,1,3,1,1,true),\n          v1(&_mp_arg(2) + 1,1,3,1,1,true),\n          v2(&_mp_arg(3) + 1,1,3,1,1,true);\n        (vout = v1).cross(v2);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_cut(_cimg_math_parser& mp) {\n        double val = _mp_arg(2), cmin = _mp_arg(3), cmax = _mp_arg(4);\n        return val<cmin?cmin:val>cmax?cmax:val;\n      }\n\n      static double mp_debug(_cimg_math_parser& mp) {\n        CImg<charT> expr(mp.opcode[2] - 4);\n        const ulongT *ptrs = mp.opcode._data + 4;\n        cimg_for(expr,ptrd,char) *ptrd = (char)*(ptrs++);\n        cimg::strellipsize(expr);\n        const ulongT g_target = mp.opcode[1];\n\n#ifndef cimg_use_openmp\n        const unsigned int n_thread = 0;\n#else\n        const unsigned int n_thread = omp_get_thread_num();\n#endif\n        cimg_pragma_openmp(critical)\n        {\n          std::fprintf(cimg::output(),\n                       \"\\n[_cimg_math_parser] %p[thread #%u]:%*c\"\n                       \"Start debugging expression '%s', code length %u -> mem[%u] (memsize: %u)\",\n                       (void*)&mp,n_thread,mp.debug_indent,' ',\n                       expr._data,(unsigned int)mp.opcode[3],(unsigned int)g_target,mp.mem._width);\n          std::fflush(cimg::output());\n          mp.debug_indent+=3;\n        }\n        const CImg<ulongT> *const p_end = (++mp.p_code) + mp.opcode[3];\n        CImg<ulongT> _op;\n        for ( ; mp.p_code<p_end; ++mp.p_code) {\n          const CImg<ulongT> &op = *mp.p_code;\n          mp.opcode._data = op._data;\n\n          _op.assign(1,op._height - 1);\n          const ulongT *ptrs = op._data + 1;\n          for (ulongT *ptrd = _op._data, *const ptrde = _op._data + _op._height; ptrd<ptrde; ++ptrd)\n            *ptrd = *(ptrs++);\n\n          const ulongT target = mp.opcode[1];\n          mp.mem[target] = _cimg_mp_defunc(mp);\n          cimg_pragma_openmp(critical)\n          {\n            std::fprintf(cimg::output(),\n                         \"\\n[_cimg_math_parser] %p[thread #%u]:%*c\"\n                         \"Opcode %p = [ %p,%s ] -> mem[%u] = %g\",\n                         (void*)&mp,n_thread,mp.debug_indent,' ',\n                         (void*)mp.opcode._data,(void*)*mp.opcode,_op.value_string().data(),\n                         (unsigned int)target,mp.mem[target]);\n            std::fflush(cimg::output());\n          }\n        }\n        cimg_pragma_openmp(critical)\n        {\n          mp.debug_indent-=3;\n          std::fprintf(cimg::output(),\n            \"\\n[_cimg_math_parser] %p[thread #%u]:%*c\"\n            \"End debugging expression '%s' -> mem[%u] = %g (memsize: %u)\",\n            (void*)&mp,n_thread,mp.debug_indent,' ',\n            expr._data,(unsigned int)g_target,mp.mem[g_target],mp.mem._width);\n          std::fflush(cimg::output());\n        }\n        --mp.p_code;\n        return mp.mem[g_target];\n      }\n\n      static double mp_decrement(_cimg_math_parser& mp) {\n        return _mp_arg(2) - 1;\n      }\n\n      static double mp_det(_cimg_math_parser& mp) {\n        const double *ptrs = &_mp_arg(2) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[3];\n        return CImg<double>(ptrs,k,k,1,1,true).det();\n      }\n\n      static double mp_diag(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptrs = &_mp_arg(2) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[3];\n        CImg<double>(ptrd,k,k,1,1,true) = CImg<double>(ptrs,1,k,1,1,true).get_diagonal();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_display_memory(_cimg_math_parser& mp) {\n        cimg::unused(mp);\n        std::fputc('\\n',cimg::output());\n        mp.mem.display(\"[_cimg_math_parser] Memory snapshot\");\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_display(_cimg_math_parser& mp) {\n        const unsigned int\n          _siz = (unsigned int)mp.opcode[3],\n          siz = _siz?_siz:1;\n        const double *const ptr = &_mp_arg(1) + (_siz?1:0);\n        const int\n          w = (int)_mp_arg(4),\n          h = (int)_mp_arg(5),\n          d = (int)_mp_arg(6),\n          s = (int)_mp_arg(7);\n        CImg<double> img;\n        if (w>0 && h>0 && d>0 && s>0) {\n          if ((unsigned int)w*h*d*s<=siz) img.assign(ptr,w,h,d,s,true);\n          else img.assign(ptr,siz).resize(w,h,d,s,-1);\n        } else img.assign(ptr,1,siz,1,1,true);\n\n        CImg<charT> expr(mp.opcode[2] - 8);\n        const ulongT *ptrs = mp.opcode._data + 8;\n        cimg_for(expr,ptrd,char) *ptrd = (char)*(ptrs++);\n        ((CImg<charT>::string(\"[_cimg_math_parser] \",false,true),expr)>'x').move_to(expr);\n        cimg::strellipsize(expr);\n        std::fputc('\\n',cimg::output());\n        img.display(expr._data);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_div(_cimg_math_parser& mp) {\n        return _mp_arg(2)/_mp_arg(3);\n      }\n\n      static double mp_dot(_cimg_math_parser& mp) {\n        const unsigned int siz = (unsigned int)mp.opcode[4];\n        return CImg<doubleT>(&_mp_arg(2) + 1,1,siz,1,1,true).\n          dot(CImg<doubleT>(&_mp_arg(3) + 1,1,siz,1,1,true));\n      }\n\n      static double mp_dowhile(_cimg_math_parser& mp) {\n        const ulongT\n          mem_body = mp.opcode[1],\n          mem_cond = mp.opcode[2];\n        const CImg<ulongT>\n          *const p_body = ++mp.p_code,\n          *const p_cond = p_body + mp.opcode[3],\n          *const p_end = p_cond + mp.opcode[4];\n        const unsigned int vsiz = (unsigned int)mp.opcode[5];\n        if (mp.opcode[6]) { // Set default value for result and condition if necessary\n          if (vsiz) CImg<doubleT>(&mp.mem[mem_body] + 1,vsiz,1,1,1,true).fill(cimg::type<double>::nan());\n          else mp.mem[mem_body] = cimg::type<double>::nan();\n        }\n        if (mp.opcode[7]) mp.mem[mem_cond] = 0;\n\n        const unsigned int _break_type = mp.break_type;\n        mp.break_type = 0;\n        do {\n          for (mp.p_code = p_body; mp.p_code<p_cond; ++mp.p_code) { // Evaluate body\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n          if (mp.break_type==1) break; else if (mp.break_type==2) mp.break_type = 0;\n          for (mp.p_code = p_cond; mp.p_code<p_end; ++mp.p_code) { // Evaluate condition\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n          if (mp.break_type==1) break; else if (mp.break_type==2) mp.break_type = 0;\n        } while (mp.mem[mem_cond]);\n        mp.break_type = _break_type;\n        mp.p_code = p_end - 1;\n        return mp.mem[mem_body];\n      }\n\n      static double mp_eq(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)==_mp_arg(3));\n      }\n\n      static double mp_exp(_cimg_math_parser& mp) {\n        return std::exp(_mp_arg(2));\n      }\n\n      static double mp_eye(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[2];\n        CImg<double>(ptrd,k,k,1,1,true).identity_matrix();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_factorial(_cimg_math_parser& mp) {\n        return cimg::factorial(_mp_arg(2));\n      }\n\n      static double mp_fibonacci(_cimg_math_parser& mp) {\n        return cimg::fibonacci((int)_mp_arg(2));\n      }\n\n      static double mp_find(_cimg_math_parser& mp) {\n        const bool is_forward = (bool)_mp_arg(5);\n        const ulongT siz = (ulongT)mp.opcode[3];\n        longT ind = (longT)(mp.opcode[6]!=_cimg_mp_slot_nan?_mp_arg(6):is_forward?0:siz - 1);\n        if (ind<0 || ind>=(longT)siz) return -1.;\n        const double\n          *const ptrb = &_mp_arg(2) + 1,\n          *const ptre = ptrb + siz,\n          val = _mp_arg(4),\n          *ptr = ptrb + ind;\n\n        // Forward search\n        if (is_forward) {\n          while (ptr<ptre && *ptr!=val) ++ptr;\n          return ptr==ptre?-1.:(double)(ptr - ptrb);\n        }\n\n        // Backward search.\n        while (ptr>=ptrb && *ptr!=val) --ptr;\n        return ptr<ptrb?-1.:(double)(ptr - ptrb);\n      }\n\n      static double mp_find_seq(_cimg_math_parser& mp) {\n        const bool is_forward = (bool)_mp_arg(6);\n        const ulongT\n          siz1 = (ulongT)mp.opcode[3],\n          siz2 = (ulongT)mp.opcode[5];\n        longT ind = (longT)(mp.opcode[7]!=_cimg_mp_slot_nan?_mp_arg(7):is_forward?0:siz1 - 1);\n        if (ind<0 || ind>=(longT)siz1) return -1.;\n        const double\n          *const ptr1b = &_mp_arg(2) + 1,\n          *const ptr1e = ptr1b + siz1,\n          *const ptr2b = &_mp_arg(4) + 1,\n          *const ptr2e = ptr2b + siz2,\n          *ptr1 = ptr1b + ind,\n          *p1 = 0,\n          *p2 = 0;\n\n        // Forward search.\n        if (is_forward) {\n          do {\n            while (ptr1<ptr1e && *ptr1!=*ptr2b) ++ptr1;\n            p1 = ptr1 + 1;\n            p2 = ptr2b + 1;\n            while (p1<ptr1e && p2<ptr2e && *p1==*p2) { ++p1; ++p2; }\n          } while (p2<ptr2e && ++ptr1<ptr1e);\n          return p2<ptr2e?-1.0:(double)(ptr1 - ptr1b);\n        }\n\n        // Backward search.\n        do {\n          while (ptr1>=ptr1b && *ptr1!=*ptr2b) --ptr1;\n          p1 = ptr1 + 1;\n          p2 = ptr2b + 1;\n          while (p1<ptr1e && p2<ptr2e && *p1==*p2) { ++p1; ++p2; }\n        } while (p2<ptr2e && --ptr1>=ptr1b);\n        return p2<ptr2e?-1.0:(double)(ptr1 - ptr1b);\n      }\n\n      static double mp_for(_cimg_math_parser& mp) {\n        const ulongT\n          mem_body = mp.opcode[1],\n          mem_cond = mp.opcode[3];\n        const CImg<ulongT>\n          *const p_init = ++mp.p_code,\n          *const p_cond = p_init + mp.opcode[4],\n          *const p_body = p_cond + mp.opcode[5],\n          *const p_post = p_body + mp.opcode[6],\n          *const p_end = p_post + mp.opcode[7];\n        const unsigned int vsiz = (unsigned int)mp.opcode[2];\n        bool is_cond = false;\n        if (mp.opcode[8]) { // Set default value for result and condition if necessary\n          if (vsiz) CImg<doubleT>(&mp.mem[mem_body] + 1,vsiz,1,1,1,true).fill(cimg::type<double>::nan());\n          else mp.mem[mem_body] = cimg::type<double>::nan();\n        }\n        if (mp.opcode[9]) mp.mem[mem_cond] = 0;\n        const unsigned int _break_type = mp.break_type;\n        mp.break_type = 0;\n\n        for (mp.p_code = p_init; mp.p_code<p_cond; ++mp.p_code) { // Evaluate init\n          const CImg<ulongT> &op = *mp.p_code;\n          mp.opcode._data = op._data;\n          const ulongT target = mp.opcode[1];\n          mp.mem[target] = _cimg_mp_defunc(mp);\n        }\n\n        if (!mp.break_type) do {\n            for (mp.p_code = p_cond; mp.p_code<p_body; ++mp.p_code) { // Evaluate condition\n              const CImg<ulongT> &op = *mp.p_code;\n              mp.opcode._data = op._data;\n              const ulongT target = mp.opcode[1];\n              mp.mem[target] = _cimg_mp_defunc(mp);\n            }\n            if (mp.break_type==1) break;\n\n            is_cond = (bool)mp.mem[mem_cond];\n            if (is_cond && !mp.break_type) {\n              for (mp.p_code = p_body; mp.p_code<p_post; ++mp.p_code) { // Evaluate body\n                const CImg<ulongT> &op = *mp.p_code;\n                mp.opcode._data = op._data;\n                const ulongT target = mp.opcode[1];\n                mp.mem[target] = _cimg_mp_defunc(mp);\n              }\n              if (mp.break_type==1) break; else if (mp.break_type==2) mp.break_type = 0;\n\n              for (mp.p_code = p_post; mp.p_code<p_end; ++mp.p_code) { // Evaluate post-code\n                const CImg<ulongT> &op = *mp.p_code;\n                mp.opcode._data = op._data;\n                const ulongT target = mp.opcode[1];\n                mp.mem[target] = _cimg_mp_defunc(mp);\n              }\n              if (mp.break_type==1) break; else if (mp.break_type==2) mp.break_type = 0;\n            }\n          } while (is_cond);\n\n        mp.break_type = _break_type;\n        mp.p_code = p_end - 1;\n        return mp.mem[mem_body];\n      }\n\n      static double mp_g(_cimg_math_parser& mp) {\n        cimg::unused(mp);\n        return cimg::grand();\n      }\n\n      static double mp_gauss(_cimg_math_parser& mp) {\n        const double x = _mp_arg(2), s = _mp_arg(3);\n        return std::exp(-x*x/(2*s*s))/std::sqrt(2*s*s*cimg::PI);\n      }\n\n      static double mp_gt(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)>_mp_arg(3));\n      }\n\n      static double mp_gte(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)>=_mp_arg(3));\n      }\n\n      static double mp_i(_cimg_math_parser& mp) {\n        return (double)mp.imgin.atXYZC((int)mp.mem[_cimg_mp_slot_x],(int)mp.mem[_cimg_mp_slot_y],\n                                       (int)mp.mem[_cimg_mp_slot_z],(int)mp.mem[_cimg_mp_slot_c],(T)0);\n      }\n\n      static double mp_if(_cimg_math_parser& mp) {\n        const bool is_cond = (bool)_mp_arg(2);\n        const ulongT\n          mem_left = mp.opcode[3],\n          mem_right = mp.opcode[4];\n        const CImg<ulongT>\n          *const p_right = ++mp.p_code + mp.opcode[5],\n          *const p_end = p_right + mp.opcode[6];\n        const unsigned int vtarget = (unsigned int)mp.opcode[1], vsiz = (unsigned int)mp.opcode[7];\n        if (is_cond) for ( ; mp.p_code<p_right; ++mp.p_code) {\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n        else for (mp.p_code = p_right; mp.p_code<p_end; ++mp.p_code) {\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n        if (mp.p_code==mp.p_break) --mp.p_code;\n        else mp.p_code = p_end - 1;\n        if (vsiz) std::memcpy(&mp.mem[vtarget] + 1,&mp.mem[is_cond?mem_left:mem_right] + 1,sizeof(double)*vsiz);\n        return mp.mem[is_cond?mem_left:mem_right];\n      }\n\n      static double mp_image_crop(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const int x = (int)_mp_arg(3), y = (int)_mp_arg(4), z = (int)_mp_arg(5), c = (int)_mp_arg(6);\n        const unsigned int\n          dx = (unsigned int)mp.opcode[7],\n          dy = (unsigned int)mp.opcode[8],\n          dz = (unsigned int)mp.opcode[9],\n          dc = (unsigned int)mp.opcode[10];\n        const bool boundary_conditions = (bool)_mp_arg(11);\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        if (!img) std::memset(ptrd,0,dx*dy*dz*dc*sizeof(double));\n        else CImg<double>(ptrd,dx,dy,dz,dc,true) = img.get_crop(x,y,z,c,\n                                                                x + dx - 1,y + dy - 1,\n                                                                z + dz - 1,c + dc - 1,\n                                                                boundary_conditions);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_image_d(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.depth();\n      }\n\n      static double mp_image_draw(_cimg_math_parser& mp) {\n        const int x = (int)_mp_arg(4), y = (int)_mp_arg(5), z = (int)_mp_arg(6), c = (int)_mp_arg(7);\n        unsigned int ind = (unsigned int)mp.opcode[3];\n\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(3),mp.listin.width());\n        CImg<T> &img = ind==~0U?mp.imgout:mp.listout[ind];\n        unsigned int\n          dx = (unsigned int)mp.opcode[8],\n          dy = (unsigned int)mp.opcode[9],\n          dz = (unsigned int)mp.opcode[10],\n          dc = (unsigned int)mp.opcode[11];\n        dx = dx==~0U?img._width:(unsigned int)_mp_arg(8);\n        dy = dy==~0U?img._height:(unsigned int)_mp_arg(9);\n        dz = dz==~0U?img._depth:(unsigned int)_mp_arg(10);\n        dc = dc==~0U?img._spectrum:(unsigned int)_mp_arg(11);\n\n        const ulongT sizS = mp.opcode[2];\n        if (sizS<(ulongT)dx*dy*dz*dc)\n          throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Function 'draw()': \"\n                                      \"Sprite dimension (%lu values) and specified sprite geometry (%u,%u,%u,%u) \"\n                                      \"(%lu values) do not match.\",\n                                      mp.imgin.pixel_type(),sizS,dx,dy,dz,dc,(ulongT)dx*dy*dz*dc);\n        CImg<double> S(&_mp_arg(1) + 1,dx,dy,dz,dc,true);\n        const float opacity = (float)_mp_arg(12);\n\n        if (img) {\n          if (mp.opcode[13]!=~0U) { // Opacity mask specified\n            const ulongT sizM = mp.opcode[14];\n            if (sizM<(ulongT)dx*dy*dz)\n              throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Function 'draw()': \"\n                                          \"Mask dimension (%lu values) and specified sprite geometry (%u,%u,%u,%u) \"\n                                          \"(%lu values) do not match.\",\n                                          mp.imgin.pixel_type(),sizS,dx,dy,dz,dc,(ulongT)dx*dy*dz*dc);\n            const CImg<double> M(&_mp_arg(13) + 1,dx,dy,dz,(unsigned int)(sizM/(dx*dy*dz)),true);\n            img.draw_image(x,y,z,c,S,M,opacity,(float)_mp_arg(15));\n          } else img.draw_image(x,y,z,c,S,opacity);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_image_h(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.height();\n      }\n\n      static double mp_image_resize(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listout.width());\n        cimg::mutex(6);\n        CImg<T> &img = mp.listout[ind];\n        const double\n          _w = mp.opcode[3]==~0U?-100:_mp_arg(3),\n          _h = mp.opcode[4]==~0U?-100:_mp_arg(4),\n          _d = mp.opcode[5]==~0U?-100:_mp_arg(5),\n          _s = mp.opcode[6]==~0U?-100:_mp_arg(6);\n        const unsigned int\n          w = (unsigned int)(_w>=0?_w:-_w*img.width()/100),\n          h = (unsigned int)(_h>=0?_h:-_h*img.height()/100),\n          d = (unsigned int)(_d>=0?_d:-_d*img.depth()/100),\n          s = (unsigned int)(_s>=0?_s:-_s*img.spectrum()/100),\n          interp = (int)_mp_arg(7);\n        if (mp.is_fill && img._data==mp.imgout._data) {\n          cimg::mutex(6,0);\n          throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Function 'resize()': \"\n                                      \"Cannot both fill and resize image (%u,%u,%u,%u) \"\n                                      \"to new dimensions (%u,%u,%u,%u).\",\n                                      img.pixel_type(),img._width,img._height,img._depth,img._spectrum,w,h,d,s);\n        }\n        const unsigned int\n          boundary = (int)_mp_arg(8);\n        const float\n          cx = (float)_mp_arg(9),\n          cy = (float)_mp_arg(10),\n          cz = (float)_mp_arg(11),\n          cc = (float)_mp_arg(12);\n        img.resize(w,h,d,s,interp,boundary,cx,cy,cz,cc);\n        cimg::mutex(6,0);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_image_s(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.spectrum();\n      }\n\n      static double mp_image_w(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.width();\n      }\n\n      static double mp_image_wh(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.width()*img.height();\n      }\n\n      static double mp_image_whd(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.width()*img.height()*img.depth();\n      }\n\n      static double mp_image_whds(_cimg_math_parser& mp) {\n        unsigned int ind = (unsigned int)mp.opcode[2];\n        if (ind!=~0U) ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[ind];\n        return (double)img.width()*img.height()*img.depth()*img.spectrum();\n      }\n\n      static double mp_increment(_cimg_math_parser& mp) {\n        return _mp_arg(2) + 1;\n      }\n\n      static double mp_int(_cimg_math_parser& mp) {\n        return (double)(longT)_mp_arg(2);\n      }\n\n      static double mp_ioff(_cimg_math_parser& mp) {\n        const unsigned int\n          boundary_conditions = (unsigned int)_mp_arg(3);\n        const CImg<T> &img = mp.imgin;\n        const longT\n          off = (longT)_mp_arg(2),\n          whds = (longT)img.size();\n        if (off<0 || off>=whds)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) return (double)img[cimg::mod(off,whds)];\n            return 0;\n          case 1 : // Neumann boundary\n            if (img) return (double)(off<0?*img:img.back());\n            return 0;\n          default : // Dirichet boundary\n            return 0;\n          }\n        return (double)img[off];\n      }\n\n      static double mp_isbool(_cimg_math_parser& mp) {\n        const double val = _mp_arg(2);\n        return (double)(val==0.0 || val==1.0);\n      }\n\n      static double mp_isin(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        const double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i)\n          if (val==_mp_arg(i)) return 1.0;\n        return 0.0;\n      }\n\n      static double mp_isinf(_cimg_math_parser& mp) {\n        return (double)cimg::type<double>::is_inf(_mp_arg(2));\n      }\n\n      static double mp_isint(_cimg_math_parser& mp) {\n        return (double)(cimg::mod(_mp_arg(2),1.0)==0);\n      }\n\n      static double mp_isnan(_cimg_math_parser& mp) {\n        return (double)cimg::type<double>::is_nan(_mp_arg(2));\n      }\n\n      static double mp_ixyzc(_cimg_math_parser& mp) {\n        const unsigned int\n          interpolation = (unsigned int)_mp_arg(6),\n          boundary_conditions = (unsigned int)_mp_arg(7);\n        const CImg<T> &img = mp.imgin;\n        const double\n          x = _mp_arg(2), y = _mp_arg(3),\n          z = _mp_arg(4), c = _mp_arg(5);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            return (double)img.atXYZC(cimg::mod((int)x,img.width()),\n                                      cimg::mod((int)y,img.height()),\n                                      cimg::mod((int)z,img.depth()),\n                                      cimg::mod((int)c,img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c);\n          return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            return (double)img.linear_atXYZC(cimg::mod((float)x,(float)img.width()),\n                                             cimg::mod((float)y,(float)img.height()),\n                                             cimg::mod((float)z,(float)img.depth()),\n                                             cimg::mod((float)c,(float)img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c);\n          return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c,(T)0);\n        }\n      }\n\n      static double mp_joff(_cimg_math_parser& mp) {\n        const unsigned int\n          boundary_conditions = (unsigned int)_mp_arg(3);\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const CImg<T> &img = mp.imgin;\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(2),\n          whds = (longT)img.size();\n        if (off<0 || off>=whds)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) return (double)img[cimg::mod(off,whds)];\n            return 0;\n          case 1 : // Neumann boundary\n            if (img) return (double)(off<0?*img:img.back());\n            return 0;\n          default : // Dirichet boundary\n            return 0;\n          }\n        return (double)img[off];\n      }\n\n      static double mp_jxyzc(_cimg_math_parser& mp) {\n        const unsigned int\n          interpolation = (unsigned int)_mp_arg(6),\n          boundary_conditions = (unsigned int)_mp_arg(7);\n        const CImg<T> &img = mp.imgin;\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y],\n          oz = mp.mem[_cimg_mp_slot_z], oc = mp.mem[_cimg_mp_slot_c],\n          x = ox + _mp_arg(2), y = oy + _mp_arg(3),\n          z = oz + _mp_arg(4), c = oc + _mp_arg(5);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            return (double)img.atXYZC(cimg::mod((int)x,img.width()),\n                                      cimg::mod((int)y,img.height()),\n                                      cimg::mod((int)z,img.depth()),\n                                      cimg::mod((int)c,img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c);\n          return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            return (double)img.linear_atXYZC(cimg::mod((float)x,(float)img.width()),\n                                             cimg::mod((float)y,(float)img.height()),\n                                             cimg::mod((float)z,(float)img.depth()),\n                                             cimg::mod((float)c,(float)img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c);\n          return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c,(T)0);\n        }\n      }\n\n      static double mp_kth(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        CImg<doubleT> vals(i_end - 4);\n        double *p = vals.data();\n        for (unsigned int i = 4; i<i_end; ++i) *(p++) = _mp_arg(i);\n        int ind = (int)cimg::round(_mp_arg(3));\n        if (ind<0) ind+=vals.width() + 1;\n        ind = std::max(1,std::min(vals.width(),ind));\n        return vals.kth_smallest(ind - 1);\n      }\n\n      static double mp_linear_add(_cimg_math_parser& mp) {\n        return _mp_arg(2)*_mp_arg(3) + _mp_arg(4);\n      }\n\n      static double mp_linear_sub_left(_cimg_math_parser& mp) {\n        return _mp_arg(2)*_mp_arg(3) - _mp_arg(4);\n      }\n\n      static double mp_linear_sub_right(_cimg_math_parser& mp) {\n        return _mp_arg(4) - _mp_arg(2)*_mp_arg(3);\n      }\n\n      static double mp_list_depth(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._depth;\n      }\n\n      static double mp_list_find(_cimg_math_parser& mp) {\n        const unsigned int\n          indi = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = mp.listin[indi];\n        const bool is_forward = (bool)_mp_arg(4);\n        const ulongT siz = (ulongT)img.size();\n        longT ind = (longT)(mp.opcode[5]!=_cimg_mp_slot_nan?_mp_arg(5):is_forward?0:siz - 1);\n        if (ind<0 || ind>=(longT)siz) return -1.;\n        const T\n          *const ptrb = img.data(),\n          *const ptre = img.end(),\n          *ptr = ptrb + ind;\n        const double val = _mp_arg(3);\n\n        // Forward search\n        if (is_forward) {\n          while (ptr<ptre && (double)*ptr!=val) ++ptr;\n          return ptr==ptre?-1.:(double)(ptr - ptrb);\n        }\n\n        // Backward search.\n        while (ptr>=ptrb && (double)*ptr!=val) --ptr;\n        return ptr<ptrb?-1.:(double)(ptr - ptrb);\n      }\n\n      static double mp_list_find_seq(_cimg_math_parser& mp) {\n        const unsigned int\n          indi = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        const CImg<T> &img = mp.listin[indi];\n        const bool is_forward = (bool)_mp_arg(5);\n        const ulongT\n          siz1 = (ulongT)img.size(),\n          siz2 = (ulongT)mp.opcode[4];\n        longT ind = (longT)(mp.opcode[6]!=_cimg_mp_slot_nan?_mp_arg(6):is_forward?0:siz1 - 1);\n        if (ind<0 || ind>=(longT)siz1) return -1.;\n        const T\n          *const ptr1b = img.data(),\n          *const ptr1e = ptr1b + siz1,\n          *ptr1 = ptr1b + ind,\n          *p1 = 0;\n        const double\n          *const ptr2b = &_mp_arg(3) + 1,\n          *const ptr2e = ptr2b + siz2,\n          *p2 = 0;\n\n        // Forward search.\n        if (is_forward) {\n          do {\n            while (ptr1<ptr1e && *ptr1!=*ptr2b) ++ptr1;\n            p1 = ptr1 + 1;\n            p2 = ptr2b + 1;\n            while (p1<ptr1e && p2<ptr2e && *p1==*p2) { ++p1; ++p2; }\n          } while (p2<ptr2e && ++ptr1<ptr1e);\n          return p2<ptr2e?-1.0:(double)(ptr1 - ptr1b);\n        }\n\n        // Backward search.\n        do {\n          while (ptr1>=ptr1b && *ptr1!=*ptr2b) --ptr1;\n          p1 = ptr1 + 1;\n          p2 = ptr2b + 1;\n          while (p1<ptr1e && p2<ptr2e && *p1==*p2) { ++p1; ++p2; }\n        } while (p2<ptr2e && --ptr1>=ptr1b);\n        return p2<ptr2e?-1.0:(double)(ptr1 - ptr1b);\n      }\n\n      static double mp_list_height(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._height;\n      }\n\n      static double mp_list_ioff(_cimg_math_parser& mp) {\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          boundary_conditions = (unsigned int)_mp_arg(4);\n        const CImg<T> &img = mp.listin[ind];\n        const longT\n          off = (longT)_mp_arg(3),\n          whds = (longT)img.size();\n        if (off<0 || off>=whds)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) return (double)img[cimg::mod(off,whds)];\n            return 0;\n          case 1 : // Neumann boundary\n            if (img) return (double)(off<0?*img:img.back());\n            return 0;\n          default : // Dirichet boundary\n            return 0;\n          }\n        return (double)img[off];\n      }\n\n      static double mp_list_is_shared(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._is_shared;\n      }\n\n      static double mp_list_ixyzc(_cimg_math_parser& mp) {\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          interpolation = (unsigned int)_mp_arg(7),\n          boundary_conditions = (unsigned int)_mp_arg(8);\n        const CImg<T> &img = mp.listin[ind];\n        const double\n          x = _mp_arg(3), y = _mp_arg(4),\n          z = _mp_arg(5), c = _mp_arg(6);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            return (double)img.atXYZC(cimg::mod((int)x,img.width()),\n                                      cimg::mod((int)y,img.height()),\n                                      cimg::mod((int)z,img.depth()),\n                                      cimg::mod((int)c,img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c);\n          return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            return (double)img.linear_atXYZC(cimg::mod((float)x,(float)img.width()),\n                                             cimg::mod((float)y,(float)img.height()),\n                                             cimg::mod((float)z,(float)img.depth()),\n                                             cimg::mod((float)c,(float)img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c);\n          return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c,(T)0);\n        }\n      }\n\n      static double mp_list_joff(_cimg_math_parser& mp) {\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          boundary_conditions = (unsigned int)_mp_arg(4);\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const CImg<T> &img = mp.listin[ind];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(3),\n          whds = (longT)img.size();\n        if (off<0 || off>=whds)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) return (double)img[cimg::mod(off,whds)];\n            return 0;\n          case 1 : // Neumann boundary\n            if (img) return (double)(off<0?*img:img.back());\n            return 0;\n          default : // Dirichet boundary\n            return 0;\n          }\n        return (double)img[off];\n      }\n\n      static double mp_list_jxyzc(_cimg_math_parser& mp) {\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          interpolation = (unsigned int)_mp_arg(7),\n          boundary_conditions = (unsigned int)_mp_arg(8);\n        const CImg<T> &img = mp.listin[ind];\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y],\n          oz = mp.mem[_cimg_mp_slot_z], oc = mp.mem[_cimg_mp_slot_c],\n          x = ox + _mp_arg(3), y = oy + _mp_arg(4),\n          z = oz + _mp_arg(5), c = oc + _mp_arg(6);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            return (double)img.atXYZC(cimg::mod((int)x,img.width()),\n                                      cimg::mod((int)y,img.height()),\n                                      cimg::mod((int)z,img.depth()),\n                                      cimg::mod((int)c,img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c);\n          return (double)img.atXYZC((int)x,(int)y,(int)z,(int)c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            return (double)img.linear_atXYZC(cimg::mod((float)x,(float)img.width()),\n                                             cimg::mod((float)y,(float)img.height()),\n                                             cimg::mod((float)z,(float)img.depth()),\n                                             cimg::mod((float)c,(float)img.spectrum()));\n          if (boundary_conditions==1)\n            return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c);\n          return (double)img.linear_atXYZC((float)x,(float)y,(float)z,(float)c,(T)0);\n        }\n      }\n\n      static double mp_list_median(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        if (!mp.list_median) mp.list_median.assign(mp.listin._width);\n        if (!mp.list_median[ind]) CImg<doubleT>::vector(mp.listin[ind].median()).move_to(mp.list_median[ind]);\n        return *mp.list_median[ind];\n      }\n\n      static double mp_list_set_ioff(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const longT\n          off = (longT)_mp_arg(3),\n          whds = (longT)img.size();\n        const double val = _mp_arg(1);\n        if (off>=0 && off<whds) img[off] = (T)val;\n        return val;\n      }\n\n      static double mp_list_set_ixyzc(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          x = (int)_mp_arg(3), y = (int)_mp_arg(4),\n          z = (int)_mp_arg(5), c = (int)_mp_arg(6);\n        const double val = _mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() &&\n            z>=0 && z<img.depth() && c>=0 && c<img.spectrum())\n          img(x,y,z,c) = (T)val;\n        return val;\n      }\n\n      static double mp_list_set_joff(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(3),\n          whds = (longT)img.size();\n        const double val = _mp_arg(1);\n        if (off>=0 && off<whds) img[off] = (T)val;\n        return val;\n      }\n\n      static double mp_list_set_jxyzc(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y],\n          oz = mp.mem[_cimg_mp_slot_z], oc = mp.mem[_cimg_mp_slot_c];\n        const int\n          x = (int)(ox + _mp_arg(3)), y = (int)(oy + _mp_arg(4)),\n          z = (int)(oz + _mp_arg(5)), c = (int)(oc + _mp_arg(6));\n        const double val = _mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() &&\n            z>=0 && z<img.depth() && c>=0 && c<img.spectrum())\n          img(x,y,z,c) = (T)val;\n        return val;\n      }\n\n      static double mp_list_set_Ioff_s(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const longT\n          off = (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T val = (T)_mp_arg(1);\n        if (off>=0 && off<whd) {\n          T *ptrd = &img[off];\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_list_set_Ioff_v(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const longT\n          off = (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (off>=0 && off<whd) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[4];\n          T *ptrd = &img[off];\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_set_Ixyz_s(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          x = (int)_mp_arg(3),\n          y = (int)_mp_arg(4),\n          z = (int)_mp_arg(5);\n        const T val = (T)_mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_list_set_Ixyz_v(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          x = (int)_mp_arg(3),\n          y = (int)_mp_arg(4),\n          z = (int)_mp_arg(5);\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[6];\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_set_Joff_s(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T val = (T)_mp_arg(1);\n        if (off>=0 && off<whd) {\n          T *ptrd = &img[off];\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_list_set_Joff_v(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (off>=0 && off<whd) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[4];\n          T *ptrd = &img[off];\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_set_Jxyz_s(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const double ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z];\n        const int\n          x = (int)(ox + _mp_arg(3)),\n          y = (int)(oy + _mp_arg(4)),\n          z = (int)(oz + _mp_arg(5));\n        const T val = (T)_mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_list_set_Jxyz_v(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        CImg<T> &img = mp.listout[ind];\n        const double ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z];\n        const int\n          x = (int)(ox + _mp_arg(3)),\n          y = (int)(oy + _mp_arg(4)),\n          z = (int)(oz + _mp_arg(5));\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[6];\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_spectrum(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._spectrum;\n      }\n\n      static double mp_list_stats(_cimg_math_parser& mp) {\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          k = (unsigned int)_mp_arg(3);\n        if (!mp.list_stats) mp.list_stats.assign(mp.listin._width);\n        if (!mp.list_stats[ind]) mp.list_stats[ind].assign(1,14,1,1,0).fill(mp.listin[ind].get_stats(),false);\n        return mp.list_stats(ind,k);\n      }\n\n      static double mp_list_wh(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._width*mp.listin[ind]._height;\n      }\n\n      static double mp_list_whd(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._width*mp.listin[ind]._height*mp.listin[ind]._depth;\n      }\n\n      static double mp_list_whds(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._width*mp.listin[ind]._height*mp.listin[ind]._depth*mp.listin[ind]._spectrum;\n      }\n\n      static double mp_list_width(_cimg_math_parser& mp) {\n        const unsigned int ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width());\n        return (double)mp.listin[ind]._width;\n      }\n\n      static double mp_list_Ioff(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          boundary_conditions = (unsigned int)_mp_arg(4),\n          vsiz = (unsigned int)mp.opcode[5];\n        const CImg<T> &img = mp.listin[ind];\n        const longT\n          off = (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T *ptrs;\n        if (off<0 || off>=whd)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) {\n              ptrs = &img[cimg::mod(off,whd)];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          case 1 : // Neumann boundary\n            if (img) {\n              ptrs = off<0?img._data:&img.back();\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          default : // Dirichet boundary\n            std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          }\n        ptrs = &img[off];\n        cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_Ixyz(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          interpolation = (unsigned int)_mp_arg(6),\n          boundary_conditions = (unsigned int)_mp_arg(7),\n          vsiz = (unsigned int)mp.opcode[8];\n        const CImg<T> &img = mp.listin[ind];\n        const double x = _mp_arg(3), y = _mp_arg(4), z = _mp_arg(5);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ(cimg::mod((int)x,img.width()),\n                                            cimg::mod((int)y,img.height()),\n                                            cimg::mod((int)z,img.depth()),\n                                            c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ(cimg::mod((float)x,(float)img.width()),\n                                                   cimg::mod((float)y,(float)img.height()),\n                                                   cimg::mod((float)z,(float)img.depth()),c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c,(T)0);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_Joff(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          boundary_conditions = (unsigned int)_mp_arg(4),\n          vsiz = (unsigned int)mp.opcode[5];\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y], oz = (int)mp.mem[_cimg_mp_slot_z];\n        const CImg<T> &img = mp.listin[ind];\n        const longT\n          off = img.offset(ox,oy,oz) + (longT)_mp_arg(3),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T *ptrs;\n        if (off<0 || off>=whd)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) {\n              ptrs = &img[cimg::mod(off,whd)];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          case 1 : // Neumann boundary\n            if (img) {\n              ptrs = off<0?img._data:&img.back();\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          default : // Dirichet boundary\n            std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          }\n        ptrs = &img[off];\n        cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_list_Jxyz(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          ind = (unsigned int)cimg::mod((int)_mp_arg(2),mp.listin.width()),\n          interpolation = (unsigned int)_mp_arg(6),\n          boundary_conditions = (unsigned int)_mp_arg(7),\n          vsiz = (unsigned int)mp.opcode[8];\n        const CImg<T> &img = mp.listin[ind];\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z],\n          x = ox + _mp_arg(3), y = oy + _mp_arg(4), z = oz + _mp_arg(5);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ(cimg::mod((int)x,img.width()),\n                                            cimg::mod((int)y,img.height()),\n                                            cimg::mod((int)z,img.depth()),\n                                            c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ(cimg::mod((float)x,(float)img.width()),\n                                                   cimg::mod((float)y,(float)img.height()),\n                                                   cimg::mod((float)z,(float)img.depth()),c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c,(T)0);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_log(_cimg_math_parser& mp) {\n        return std::log(_mp_arg(2));\n      }\n\n      static double mp_log10(_cimg_math_parser& mp) {\n        return std::log10(_mp_arg(2));\n      }\n\n      static double mp_log2(_cimg_math_parser& mp) {\n        return cimg::log2(_mp_arg(2));\n      }\n\n      static double mp_logical_and(_cimg_math_parser& mp) {\n        const bool val_left = (bool)_mp_arg(2);\n        const CImg<ulongT> *const p_end = ++mp.p_code + mp.opcode[4];\n        if (!val_left) { mp.p_code = p_end - 1; return 0; }\n        const ulongT mem_right = mp.opcode[3];\n        for ( ; mp.p_code<p_end; ++mp.p_code) {\n          const CImg<ulongT> &op = *mp.p_code;\n          mp.opcode._data = op._data;\n          const ulongT target = mp.opcode[1];\n          mp.mem[target] = _cimg_mp_defunc(mp);\n        }\n        --mp.p_code;\n        return (double)(bool)mp.mem[mem_right];\n      }\n\n      static double mp_logical_not(_cimg_math_parser& mp) {\n        return (double)!_mp_arg(2);\n      }\n\n      static double mp_logical_or(_cimg_math_parser& mp) {\n        const bool val_left = (bool)_mp_arg(2);\n        const CImg<ulongT> *const p_end = ++mp.p_code + mp.opcode[4];\n        if (val_left) { mp.p_code = p_end - 1; return 1; }\n        const ulongT mem_right = mp.opcode[3];\n        for ( ; mp.p_code<p_end; ++mp.p_code) {\n          const CImg<ulongT> &op = *mp.p_code;\n          mp.opcode._data = op._data;\n          const ulongT target = mp.opcode[1];\n          mp.mem[target] = _cimg_mp_defunc(mp);\n        }\n        --mp.p_code;\n        return (double)(bool)mp.mem[mem_right];\n      }\n\n      static double mp_lowercase(_cimg_math_parser& mp) {\n        return cimg::lowercase(_mp_arg(2));\n      }\n\n      static double mp_lt(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)<_mp_arg(3));\n      }\n\n      static double mp_lte(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)<=_mp_arg(3));\n      }\n\n      static double mp_matrix_eig(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptr1 = &_mp_arg(2) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[3];\n        CImg<double> val, vec;\n        CImg<double>(ptr1,k,k,1,1,true).symmetric_eigen(val,vec);\n        CImg<double>(ptrd,1,k,1,1,true) = val;\n        CImg<double>(ptrd + k,k,k,1,1,true) = vec.get_transpose();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_matrix_inv(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptr1 = &_mp_arg(2) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[3];\n        CImg<double>(ptrd,k,k,1,1,true) = CImg<double>(ptr1,k,k,1,1,true).get_invert();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_matrix_mul(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double\n          *ptr1 = &_mp_arg(2) + 1,\n          *ptr2 = &_mp_arg(3) + 1;\n        const unsigned int\n          k = (unsigned int)mp.opcode[4],\n          l = (unsigned int)mp.opcode[5],\n          m = (unsigned int)mp.opcode[6];\n        CImg<double>(ptrd,m,k,1,1,true) = CImg<double>(ptr1,l,k,1,1,true)*CImg<double>(ptr2,m,l,1,1,true);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_matrix_pseudoinv(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptr1 = &_mp_arg(2) + 1;\n        const unsigned int\n          k = (unsigned int)mp.opcode[3],\n          l = (unsigned int)mp.opcode[4];\n        CImg<double>(ptrd,l,k,1,1,true) = CImg<double>(ptr1,k,l,1,1,true).get_pseudoinvert();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_matrix_svd(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptr1 = &_mp_arg(2) + 1;\n        const unsigned int\n          k = (unsigned int)mp.opcode[3],\n          l = (unsigned int)mp.opcode[4];\n        CImg<double> U, S, V;\n        CImg<double>(ptr1,k,l,1,1,true).SVD(U,S,V);\n        CImg<double>(ptrd,k,l,1,1,true) = U;\n        CImg<double>(ptrd + k*l,1,k,1,1,true) = S;\n        CImg<double>(ptrd + k*l + k,k,k,1,1,true) = V;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_max(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val = std::max(val,_mp_arg(i));\n        return val;\n      }\n\n      static double* _mp_memcopy_double(_cimg_math_parser& mp, const unsigned int ind, const ulongT *const p_ref,\n                                        const longT siz, const long inc) {\n        const longT\n          off = *p_ref?p_ref[1] + (longT)mp.mem[(longT)p_ref[2]] + 1:ind,\n          eoff = off + (siz - 1)*inc;\n        if (off<0 || eoff>=mp.mem.width())\n          throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Function 'copy()': \"\n                                      \"Out-of-bounds variable pointer \"\n                                      \"(length: %ld, increment: %ld, offset start: %ld, \"\n                                      \"offset end: %ld, offset max: %u).\",\n                                      mp.imgin.pixel_type(),siz,inc,off,eoff,mp.mem._width - 1);\n        return &mp.mem[off];\n      }\n\n      static float* _mp_memcopy_float(_cimg_math_parser& mp, const ulongT *const p_ref,\n                                      const longT siz, const long inc) {\n        const unsigned ind = (unsigned int)p_ref[1];\n        const CImg<T> &img = ind==~0U?mp.imgin:mp.listin[cimg::mod((int)mp.mem[ind],mp.listin.width())];\n        const bool is_relative = (bool)p_ref[2];\n        int ox, oy, oz, oc;\n        longT off = 0;\n        if (is_relative) {\n          ox = (int)mp.mem[_cimg_mp_slot_x];\n          oy = (int)mp.mem[_cimg_mp_slot_y];\n          oz = (int)mp.mem[_cimg_mp_slot_z];\n          oc = (int)mp.mem[_cimg_mp_slot_c];\n          off = img.offset(ox,oy,oz,oc);\n        }\n        if ((*p_ref)%2) {\n          const int\n            x = (int)mp.mem[p_ref[3]],\n            y = (int)mp.mem[p_ref[4]],\n            z = (int)mp.mem[p_ref[5]],\n            c = *p_ref==5?0:(int)mp.mem[p_ref[6]];\n          off+=img.offset(x,y,z,c);\n        } else off+=(longT)mp.mem[p_ref[3]];\n        const longT eoff = off + (siz - 1)*inc;\n        if (off<0 || eoff>=(longT)img.size())\n          throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Function 'copy()': \"\n                                      \"Out-of-bounds image pointer \"\n                                      \"(length: %ld, increment: %ld, offset start: %ld, \"\n                                      \"offset end: %ld, offset max: %lu).\",\n                                      mp.imgin.pixel_type(),siz,inc,off,eoff,img.size() - 1);\n        return (float*)&img[off];\n      }\n\n      static double mp_memcopy(_cimg_math_parser& mp) {\n        longT siz = (longT)_mp_arg(4);\n        const longT inc_d = (longT)_mp_arg(5), inc_s = (longT)_mp_arg(6);\n        const float\n          _opacity = (float)_mp_arg(7),\n          opacity = (float)cimg::abs(_opacity),\n          omopacity = 1 - std::max(_opacity,0.0f);\n        if (siz>0) {\n          const bool\n            is_doubled = mp.opcode[8]<=1,\n            is_doubles = mp.opcode[15]<=1;\n          if (is_doubled && is_doubles) { // (double*) <- (double*)\n            double *ptrd = _mp_memcopy_double(mp,(unsigned int)mp.opcode[2],&mp.opcode[8],siz,inc_d);\n            const double *ptrs = _mp_memcopy_double(mp,(unsigned int)mp.opcode[3],&mp.opcode[15],siz,inc_s);\n            if (inc_d==1 && inc_s==1 && _opacity>=1) {\n              if (ptrs + siz - 1<ptrd || ptrs>ptrd + siz - 1) std::memcpy(ptrd,ptrs,siz*sizeof(double));\n              else std::memmove(ptrd,ptrs,siz*sizeof(double));\n            } else {\n              if (ptrs + (siz - 1)*inc_s<ptrd || ptrs>ptrd + (siz - 1)*inc_d) {\n                if (_opacity>=1) while (siz-->0) { *ptrd = *ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n                else while (siz-->0) { *ptrd = omopacity**ptrd + opacity**ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n              } else { // Overlapping buffers\n                CImg<double> buf((unsigned int)siz);\n                cimg_for(buf,ptr,double) { *ptr = *ptrs; ptrs+=inc_s; }\n                ptrs = buf;\n                if (_opacity>=1) while (siz-->0) { *ptrd = *(ptrs++); ptrd+=inc_d; }\n                else while (siz-->0) { *ptrd = omopacity**ptrd + opacity**(ptrs++); ptrd+=inc_d; }\n              }\n            }\n          } else if (is_doubled && !is_doubles) { // (double*) <- (float*)\n            double *ptrd = _mp_memcopy_double(mp,(unsigned int)mp.opcode[2],&mp.opcode[8],siz,inc_d);\n            const float *ptrs = _mp_memcopy_float(mp,&mp.opcode[15],siz,inc_s);\n            if (_opacity>=1) while (siz-->0) { *ptrd = *ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n            else while (siz-->0) { *ptrd = omopacity**ptrd + _opacity**ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n          } else if (!is_doubled && is_doubles) { // (float*) <- (double*)\n            float *ptrd = _mp_memcopy_float(mp,&mp.opcode[8],siz,inc_d);\n            const double *ptrs = _mp_memcopy_double(mp,(unsigned int)mp.opcode[3],&mp.opcode[15],siz,inc_s);\n            if (_opacity>=1) while (siz-->0) { *ptrd = (float)*ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n            else while (siz-->0) { *ptrd = (float)(omopacity**ptrd + opacity**ptrs); ptrd+=inc_d; ptrs+=inc_s; }\n          } else { // (float*) <- (float*)\n            float *ptrd = _mp_memcopy_float(mp,&mp.opcode[8],siz,inc_d);\n            const float *ptrs = _mp_memcopy_float(mp,&mp.opcode[15],siz,inc_s);\n            if (inc_d==1 && inc_s==1 && _opacity>=1) {\n              if (ptrs + siz - 1<ptrd || ptrs>ptrd + siz - 1) std::memcpy(ptrd,ptrs,siz*sizeof(float));\n              else std::memmove(ptrd,ptrs,siz*sizeof(float));\n            } else {\n              if (ptrs + (siz - 1)*inc_s<ptrd || ptrs>ptrd + (siz - 1)*inc_d) {\n                if (_opacity>=1) while (siz-->0) { *ptrd = *ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n                else while (siz-->0) { *ptrd = omopacity**ptrd + opacity**ptrs; ptrd+=inc_d; ptrs+=inc_s; }\n              } else { // Overlapping buffers\n                CImg<floatT> buf((unsigned int)siz);\n                cimg_for(buf,ptr,float) { *ptr = *ptrs; ptrs+=inc_s; }\n                ptrs = buf;\n                if (_opacity>=1) while (siz-->0) { *ptrd = *(ptrs++); ptrd+=inc_d; }\n                else while (siz-->0) { *ptrd = omopacity**ptrd + opacity**(ptrs++); ptrd+=inc_d; }\n              }\n            }\n          }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_min(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val = std::min(val,_mp_arg(i));\n        return val;\n      }\n\n      static double mp_minus(_cimg_math_parser& mp) {\n        return -_mp_arg(2);\n      }\n\n      static double mp_mean(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val+=_mp_arg(i);\n        return val/(i_end - 3);\n      }\n\n      static double mp_median(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        switch (i_end - 3) {\n        case 1 : return _mp_arg(3);\n        case 2 : return cimg::median(_mp_arg(3),_mp_arg(4));\n        case 3 : return cimg::median(_mp_arg(3),_mp_arg(4),_mp_arg(5));\n        case 5 : return cimg::median(_mp_arg(3),_mp_arg(4),_mp_arg(5),_mp_arg(6),_mp_arg(7));\n        case 7 : return cimg::median(_mp_arg(3),_mp_arg(4),_mp_arg(5),_mp_arg(6),_mp_arg(7),_mp_arg(8),_mp_arg(9));\n        case 9 : return cimg::median(_mp_arg(3),_mp_arg(4),_mp_arg(5),_mp_arg(6),_mp_arg(7),_mp_arg(8),_mp_arg(9),\n                                     _mp_arg(10),_mp_arg(11));\n        case 13 : return cimg::median(_mp_arg(3),_mp_arg(4),_mp_arg(5),_mp_arg(6),_mp_arg(7),_mp_arg(8),_mp_arg(9),\n                                      _mp_arg(10),_mp_arg(11),_mp_arg(12),_mp_arg(13),_mp_arg(14),_mp_arg(15));\n        }\n        CImg<doubleT> vals(i_end - 3);\n        double *p = vals.data();\n        for (unsigned int i = 3; i<i_end; ++i) *(p++) = _mp_arg(i);\n        return vals.median();\n      }\n\n      static double mp_modulo(_cimg_math_parser& mp) {\n        return cimg::mod(_mp_arg(2),_mp_arg(3));\n      }\n\n      static double mp_mul(_cimg_math_parser& mp) {\n        return _mp_arg(2)*_mp_arg(3);\n      }\n\n      static double mp_mul2(_cimg_math_parser& mp) {\n        return _mp_arg(2)*_mp_arg(3)*_mp_arg(4);\n      }\n\n      static double mp_neq(_cimg_math_parser& mp) {\n        return (double)(_mp_arg(2)!=_mp_arg(3));\n      }\n\n      static double mp_norm0(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        switch (i_end - 3) {\n        case 1 : return _mp_arg(3)!=0;\n        case 2 : return (_mp_arg(3)!=0) + (_mp_arg(4)!=0);\n        }\n        double res = 0;\n        for (unsigned int i = 3; i<i_end; ++i)\n          res+=_mp_arg(i)==0?0:1;\n        return res;\n      }\n\n      static double mp_norm1(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        switch (i_end - 3) {\n        case 1 : return cimg::abs(_mp_arg(3));\n        case 2 : return cimg::abs(_mp_arg(3)) + cimg::abs(_mp_arg(4));\n        }\n        double res = 0;\n        for (unsigned int i = 3; i<i_end; ++i)\n          res+=cimg::abs(_mp_arg(i));\n        return res;\n      }\n\n      static double mp_norm2(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        switch (i_end - 3) {\n        case 1 : return cimg::abs(_mp_arg(3));\n        case 2 : return cimg::_hypot(_mp_arg(3),_mp_arg(4));\n        }\n        double res = 0;\n        for (unsigned int i = 3; i<i_end; ++i)\n          res+=cimg::sqr(_mp_arg(i));\n        return std::sqrt(res);\n      }\n\n      static double mp_norminf(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        switch (i_end - 3) {\n        case 1 : return cimg::abs(_mp_arg(3));\n        case 2 : return std::max(cimg::abs(_mp_arg(3)),cimg::abs(_mp_arg(4)));\n        }\n        double res = 0;\n        for (unsigned int i = 3; i<i_end; ++i) {\n          const double val = cimg::abs(_mp_arg(i));\n          if (val>res) res = val;\n        }\n        return res;\n      }\n\n      static double mp_normp(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        if (i_end==4) return cimg::abs(_mp_arg(3));\n        const double p = (double)mp.opcode[3];\n        double res = 0;\n        for (unsigned int i = 4; i<i_end; ++i)\n          res+=std::pow(cimg::abs(_mp_arg(i)),p);\n        res = std::pow(res,1/p);\n        return res>0?res:0.0;\n      }\n\n      static double mp_permutations(_cimg_math_parser& mp) {\n        return cimg::permutations(_mp_arg(2),_mp_arg(3),(bool)_mp_arg(4));\n      }\n\n      static double mp_pow(_cimg_math_parser& mp) {\n        const double v = _mp_arg(2), p = _mp_arg(3);\n        return std::pow(v,p);\n      }\n\n      static double mp_pow0_25(_cimg_math_parser& mp) {\n        const double val = _mp_arg(2);\n        return std::sqrt(std::sqrt(val));\n      }\n\n      static double mp_pow3(_cimg_math_parser& mp) {\n        const double val = _mp_arg(2);\n        return val*val*val;\n      }\n\n      static double mp_pow4(_cimg_math_parser& mp) {\n        const double val = _mp_arg(2);\n        return val*val*val*val;\n      }\n\n      static double mp_print(_cimg_math_parser& mp) {\n          const double val = _mp_arg(1);\n          cimg_pragma_openmp(critical)\n          {\n            CImg<charT> expr(mp.opcode[2] - 3);\n            const ulongT *ptrs = mp.opcode._data + 3;\n            cimg_for(expr,ptrd,char) *ptrd = (char)*(ptrs++);\n            cimg::strellipsize(expr);\n            cimg::mutex(6);\n            std::fprintf(cimg::output(),\"\\n[_cimg_math_parser] %s = %g\",expr._data,val);\n            std::fflush(cimg::output());\n            cimg::mutex(6,0);\n          }\n          return val;\n      }\n\n      static double mp_prod(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val*=_mp_arg(i);\n        return val;\n      }\n\n      static double mp_copy(_cimg_math_parser& mp) {\n        return _mp_arg(2);\n      }\n\n      static double mp_rol(_cimg_math_parser& mp) {\n        return cimg::rol(_mp_arg(2),(unsigned int)_mp_arg(3));\n      }\n\n      static double mp_ror(_cimg_math_parser& mp) {\n        return cimg::ror(_mp_arg(2),(unsigned int)_mp_arg(3));\n      }\n\n      static double mp_rot2d(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const float\n          theta = (float)_mp_arg(2)*cimg::PI/180,\n          ca = std::cos(theta),\n          sa = std::sin(theta);\n        *(ptrd++) = ca;\n        *(ptrd++) = -sa;\n        *(ptrd++) = sa;\n        *ptrd = ca;\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_rot3d(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const float x = (float)_mp_arg(2), y = (float)_mp_arg(3), z = (float)_mp_arg(4), theta = (float)_mp_arg(5);\n        CImg<double>(ptrd,3,3,1,1,true) = CImg<double>::rotation_matrix(x,y,z,theta);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_round(_cimg_math_parser& mp) {\n        return cimg::round(_mp_arg(2),_mp_arg(3),(int)_mp_arg(4));\n      }\n\n      static double mp_self_add(_cimg_math_parser& mp) {\n        return _mp_arg(1)+=_mp_arg(2);\n      }\n\n      static double mp_self_bitwise_and(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = (double)((longT)val & (longT)_mp_arg(2));\n      }\n\n      static double mp_self_bitwise_left_shift(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = (double)((longT)val<<(unsigned int)_mp_arg(2));\n      }\n\n      static double mp_self_bitwise_or(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = (double)((longT)val | (longT)_mp_arg(2));\n      }\n\n      static double mp_self_bitwise_right_shift(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = (double)((longT)val>>(unsigned int)_mp_arg(2));\n      }\n\n      static double mp_self_decrement(_cimg_math_parser& mp) {\n        return --_mp_arg(1);\n      }\n\n      static double mp_self_increment(_cimg_math_parser& mp) {\n        return ++_mp_arg(1);\n      }\n\n      static double mp_self_map_vector_s(_cimg_math_parser& mp) { // Vector += scalar\n        unsigned int\n          ptrd = (unsigned int)mp.opcode[1] + 1,\n          siz = (unsigned int)mp.opcode[2];\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,3);\n        l_opcode[2] = mp.opcode[4]; // Scalar argument.\n        l_opcode.swap(mp.opcode);\n        ulongT &target = mp.opcode[1];\n        while (siz-->0) { target = ptrd++; (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_self_map_vector_v(_cimg_math_parser& mp) { // Vector += vector\n        unsigned int\n          ptrd = (unsigned int)mp.opcode[1] + 1,\n          siz = (unsigned int)mp.opcode[2],\n          ptrs = (unsigned int)mp.opcode[4] + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,4);\n        l_opcode.swap(mp.opcode);\n        ulongT &target = mp.opcode[1], &argument = mp.opcode[2];\n        while (siz-->0)  { target = ptrd++; argument = ptrs++; (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_self_mul(_cimg_math_parser& mp) {\n        return _mp_arg(1)*=_mp_arg(2);\n      }\n\n      static double mp_self_div(_cimg_math_parser& mp) {\n        return _mp_arg(1)/=_mp_arg(2);\n      }\n\n      static double mp_self_modulo(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = cimg::mod(val,_mp_arg(2));\n      }\n\n      static double mp_self_pow(_cimg_math_parser& mp) {\n        double &val = _mp_arg(1);\n        return val = std::pow(val,_mp_arg(2));\n      }\n\n      static double mp_self_sub(_cimg_math_parser& mp) {\n        return _mp_arg(1)-=_mp_arg(2);\n      }\n\n      static double mp_set_ioff(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const longT\n          off = (longT)_mp_arg(2),\n          whds = (longT)img.size();\n        const double val = _mp_arg(1);\n        if (off>=0 && off<whds) img[off] = (T)val;\n        return val;\n      }\n\n      static double mp_set_ixyzc(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          x = (int)_mp_arg(2), y = (int)_mp_arg(3),\n          z = (int)_mp_arg(4), c = (int)_mp_arg(5);\n        const double val = _mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() &&\n            z>=0 && z<img.depth() && c>=0 && c<img.spectrum())\n          img(x,y,z,c) = (T)val;\n        return val;\n      }\n\n      static double mp_set_joff(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(2),\n          whds = (longT)img.size();\n        const double val = _mp_arg(1);\n        if (off>=0 && off<whds) img[off] = (T)val;\n        return val;\n      }\n\n      static double mp_set_jxyzc(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y],\n          oz = mp.mem[_cimg_mp_slot_z], oc = mp.mem[_cimg_mp_slot_c];\n        const int\n          x = (int)(ox + _mp_arg(2)), y = (int)(oy + _mp_arg(3)),\n          z = (int)(oz + _mp_arg(4)), c = (int)(oc + _mp_arg(5));\n        const double val = _mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() &&\n            z>=0 && z<img.depth() && c>=0 && c<img.spectrum())\n          img(x,y,z,c) = (T)val;\n        return val;\n      }\n\n      static double mp_set_Ioff_s(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const longT\n          off = (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T val = (T)_mp_arg(1);\n        if (off>=0 && off<whd) {\n          T *ptrd = &img[off];\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_set_Ioff_v(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const longT\n          off = (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (off>=0 && off<whd) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[3];\n          T *ptrd = &img[off];\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_set_Ixyz_s(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          x = (int)_mp_arg(2),\n          y = (int)_mp_arg(3),\n          z = (int)_mp_arg(4);\n        const T val = (T)_mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_set_Ixyz_v(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          x = (int)_mp_arg(2),\n          y = (int)_mp_arg(3),\n          z = (int)_mp_arg(4);\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[5];\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_set_Joff_s(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T val = (T)_mp_arg(1);\n        if (off>=0 && off<whd) {\n          T *ptrd = &img[off];\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_set_Joff_v(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x], oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z], oc = (int)mp.mem[_cimg_mp_slot_c];\n        const longT\n          off = img.offset(ox,oy,oz,oc) + (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (off>=0 && off<whd) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[3];\n          T *ptrd = &img[off];\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_set_Jxyz_s(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const double ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z];\n        const int\n          x = (int)(ox + _mp_arg(2)),\n          y = (int)(oy + _mp_arg(3)),\n          z = (int)(oz + _mp_arg(4));\n        const T val = (T)_mp_arg(1);\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_forC(img,c) { *ptrd = val; ptrd+=whd; }\n        }\n        return _mp_arg(1);\n      }\n\n      static double mp_set_Jxyz_v(_cimg_math_parser& mp) {\n        CImg<T> &img = mp.imgout;\n        const double ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z];\n        const int\n          x = (int)(ox + _mp_arg(2)),\n          y = (int)(oy + _mp_arg(3)),\n          z = (int)(oz + _mp_arg(4));\n        const double *ptrs = &_mp_arg(1) + 1;\n        if (x>=0 && x<img.width() && y>=0 && y<img.height() && z>=0 && z<img.depth()) {\n          const unsigned int vsiz = (unsigned int)mp.opcode[5];\n          T *ptrd = &img(x,y,z);\n          const ulongT whd = (ulongT)img._width*img._height*img._depth;\n          cimg_for_inC(img,0,vsiz - 1,c) { *ptrd = (T)*(ptrs++); ptrd+=whd; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_sign(_cimg_math_parser& mp) {\n        return cimg::sign(_mp_arg(2));\n      }\n\n      static double mp_sin(_cimg_math_parser& mp) {\n        return std::sin(_mp_arg(2));\n      }\n\n      static double mp_sinc(_cimg_math_parser& mp) {\n        return cimg::sinc(_mp_arg(2));\n      }\n\n      static double mp_single(_cimg_math_parser& mp) {\n        const double res = _mp_arg(1);\n        cimg_pragma_openmp(critical)\n        {\n          for (const CImg<ulongT> *const p_end = ++mp.p_code + mp.opcode[2];\n               mp.p_code<p_end; ++mp.p_code) { // Evaluate body\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n        }\n        --mp.p_code;\n        return res;\n      }\n\n      static double mp_sinh(_cimg_math_parser& mp) {\n        return std::sinh(_mp_arg(2));\n      }\n\n      static double mp_solve(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double\n          *ptr1 = &_mp_arg(2) + 1,\n          *ptr2 = &_mp_arg(3) + 1;\n        const unsigned int\n          k = (unsigned int)mp.opcode[4],\n          l = (unsigned int)mp.opcode[5],\n          m = (unsigned int)mp.opcode[6];\n        CImg<double>(ptrd,m,k,1,1,true) = CImg<double>(ptr2,m,l,1,1,true).get_solve(CImg<double>(ptr1,k,l,1,1,true));\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_sort(_cimg_math_parser& mp) {\n        double *const ptrd = &_mp_arg(1) + 1;\n        const double *const ptrs = &_mp_arg(2) + 1;\n        const unsigned int\n          siz = (unsigned int)mp.opcode[3],\n          chunk_siz = (unsigned int)mp.opcode[5];\n        const bool is_increasing = (bool)_mp_arg(4);\n        CImg<doubleT>(ptrd,chunk_siz,siz/chunk_siz,1,1,true) = CImg<doubleT>(ptrs,chunk_siz,siz/chunk_siz,1,1,true).\n          get_sort(is_increasing,chunk_siz>1?'y':0);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_sqr(_cimg_math_parser& mp) {\n        return cimg::sqr(_mp_arg(2));\n      }\n\n      static double mp_sqrt(_cimg_math_parser& mp) {\n        return std::sqrt(_mp_arg(2));\n      }\n\n      static double mp_std(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        CImg<doubleT> vals(i_end - 3);\n        double *p = vals.data();\n        for (unsigned int i = 3; i<i_end; ++i) *(p++) = _mp_arg(i);\n        return std::sqrt(vals.variance());\n      }\n\n      static double mp_string_init(_cimg_math_parser& mp) {\n        const char *ptrs = (char*)&mp.opcode[3];\n        unsigned int\n          ptrd = (unsigned int)mp.opcode[1] + 1,\n          siz = (unsigned int)mp.opcode[2];\n        while (siz-->0) mp.mem[ptrd++] = (double)*(ptrs++);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_stod(_cimg_math_parser& mp) {\n        const double *ptrs = &_mp_arg(2);\n        const unsigned int siz = (unsigned int)_mp_arg(3);\n        const bool is_strict = (bool)_mp_arg(4);\n        if (!siz) return *ptrs>='0' && *ptrs<='9'?*ptrs - '0':cimg::type<double>::nan();\n        CImg<charT> ss(siz + 1);\n        double val = cimg::type<double>::nan();\n        char sep;\n        for (unsigned i = 0; i<siz; ++i) ss[i] = (char)*(++ptrs);\n        ss[siz] = 0;\n\n        int err = std::sscanf(ss,\"%lf%c\",&val,&sep);\n#if cimg_OS==2\n        // Check for +/-NaN and +/-inf as Microsoft's sscanf() version is not able\n        // to read those particular values.\n        if (!err && (*ss=='+' || *ss=='-' || *ss=='i' || *ss=='I' || *ss=='n' || *ss=='N')) {\n          bool is_positive = true;\n          const char *s = ss;\n          if (*s=='+') ++s; else if (*s=='-') { ++s; is_positive = false; }\n          if (!cimg::strcasecmp(s,\"inf\")) { val = cimg::type<double>::inf(); err = 1; }\n          else if (!cimg::strcasecmp(s,\"nan\")) { val = cimg::type<double>::nan(); err = 1; }\n          if (err==1 && !is_positive) val = -val;\n        }\n#endif\n        if (is_strict && err!=1) return cimg::type<double>::nan();\n        return val;\n      }\n\n      static double mp_sub(_cimg_math_parser& mp) {\n        return _mp_arg(2) - _mp_arg(3);\n      }\n\n      static double mp_sum(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val+=_mp_arg(i);\n        return val;\n      }\n\n      static double mp_tan(_cimg_math_parser& mp) {\n        return std::tan(_mp_arg(2));\n      }\n\n      static double mp_tanh(_cimg_math_parser& mp) {\n        return std::tanh(_mp_arg(2));\n      }\n\n      static double mp_trace(_cimg_math_parser& mp) {\n        const double *ptrs = &_mp_arg(2) + 1;\n        const unsigned int k = (unsigned int)mp.opcode[3];\n        return CImg<double>(ptrs,k,k,1,1,true).trace();\n      }\n\n      static double mp_transp(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const double *ptrs = &_mp_arg(2) + 1;\n        const unsigned int\n          k = (unsigned int)mp.opcode[3],\n          l = (unsigned int)mp.opcode[4];\n        CImg<double>(ptrd,l,k,1,1,true) = CImg<double>(ptrs,k,l,1,1,true).get_transpose();\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_u(_cimg_math_parser& mp) {\n        return cimg::rand(_mp_arg(2),_mp_arg(3));\n      }\n\n      static double mp_uppercase(_cimg_math_parser& mp) {\n        return cimg::uppercase(_mp_arg(2));\n      }\n\n      static double mp_variance(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        CImg<doubleT> vals(i_end - 3);\n        double *p = vals.data();\n        for (unsigned int i = 3; i<i_end; ++i) *(p++) = _mp_arg(i);\n        return vals.variance();\n      }\n\n      static double mp_vector_copy(_cimg_math_parser& mp) {\n        std::memcpy(&_mp_arg(1) + 1,&_mp_arg(2) + 1,sizeof(double)*mp.opcode[3]);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_crop(_cimg_math_parser& mp) {\n        double *const ptrd = &_mp_arg(1) + 1;\n        const double *const ptrs = &_mp_arg(2) + 1;\n        const longT\n          length = (longT)mp.opcode[3],\n          start = (longT)_mp_arg(4),\n          sublength = (longT)mp.opcode[5];\n        if (start<0 || start + sublength>length)\n          throw CImgArgumentException(\"[_cimg_math_parser] CImg<%s>: Value accessor '[]': \"\n                                      \"Out-of-bounds sub-vector request \"\n                                      \"(length: %ld, start: %ld, sub-length: %ld).\",\n                                      mp.imgin.pixel_type(),length,start,sublength);\n        std::memcpy(ptrd,ptrs + start,sublength*sizeof(double));\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_init(_cimg_math_parser& mp) {\n        unsigned int\n          ptrs = 4U,\n          ptrd = (unsigned int)mp.opcode[1] + 1,\n          siz = (unsigned int)mp.opcode[3];\n        switch (mp.opcode[2] - 4) {\n        case 0 : std::memset(mp.mem._data + ptrd,0,siz*sizeof(double)); break; // 0 values given\n        case 1 : { const double val = _mp_arg(ptrs); while (siz-->0) mp.mem[ptrd++] = val; } break;\n        default : while (siz-->0) { mp.mem[ptrd++] = _mp_arg(ptrs++); if (ptrs>=mp.opcode[2]) ptrs = 4U; }\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_eq(_cimg_math_parser& mp) {\n        const double\n          *ptr1 = &_mp_arg(2) + 1,\n          *ptr2 = &_mp_arg(4) + 1;\n        unsigned int p1 = (unsigned int)mp.opcode[3], p2 = (unsigned int)mp.opcode[5], n;\n        const int N = (int)_mp_arg(6);\n        const bool case_sensitive = (bool)_mp_arg(7);\n        bool still_equal = true;\n        double value;\n        if (!N) return true;\n\n        // Compare all values.\n        if (N<0) {\n          if (p1>0 && p2>0) { // Vector == vector\n            if (p1!=p2) return false;\n            if (case_sensitive)\n              while (still_equal && p1--) still_equal = *(ptr1++)==*(ptr2++);\n            else\n              while (still_equal && p1--)\n                still_equal = cimg::lowercase(*(ptr1++))==cimg::lowercase(*(ptr2++));\n            return still_equal;\n          } else if (p1>0 && !p2) { // Vector == scalar\n            value = _mp_arg(4);\n            if (!case_sensitive) value = cimg::lowercase(value);\n            while (still_equal && p1--) still_equal = *(ptr1++)==value;\n            return still_equal;\n          } else if (!p1 && p2>0) { // Scalar == vector\n            value = _mp_arg(2);\n            if (!case_sensitive) value = cimg::lowercase(value);\n            while (still_equal && p2--) still_equal = *(ptr2++)==value;\n            return still_equal;\n          } else { // Scalar == scalar\n            if (case_sensitive) return _mp_arg(2)==_mp_arg(4);\n            else return cimg::lowercase(_mp_arg(2))==cimg::lowercase(_mp_arg(4));\n          }\n        }\n\n        // Compare only first N values.\n        if (p1>0 && p2>0) { // Vector == vector\n          n = cimg::min((unsigned int)N,p1,p2);\n          if (case_sensitive)\n            while (still_equal && n--) still_equal = *(ptr1++)==(*ptr2++);\n          else\n            while (still_equal && n--) still_equal = cimg::lowercase(*(ptr1++))==cimg::lowercase(*(ptr2++));\n          return still_equal;\n        } else if (p1>0 && !p2) { // Vector == scalar\n          n = std::min((unsigned int)N,p1);\n          value = _mp_arg(4);\n          if (!case_sensitive) value = cimg::lowercase(value);\n          while (still_equal && n--) still_equal = *(ptr1++)==value;\n          return still_equal;\n        } else if (!p1 && p2>0) { // Scalar == vector\n          n = std::min((unsigned int)N,p2);\n          value = _mp_arg(2);\n          if (!case_sensitive) value = cimg::lowercase(value);\n          while (still_equal && n--) still_equal = *(ptr2++)==value;\n          return still_equal;\n        }  // Scalar == scalar\n        if (case_sensitive) return _mp_arg(2)==_mp_arg(4);\n        return cimg::lowercase(_mp_arg(2))==cimg::lowercase(_mp_arg(4));\n      }\n\n      static double mp_vector_off(_cimg_math_parser& mp) {\n        const unsigned int\n          ptr = (unsigned int)mp.opcode[2] + 1,\n          siz = (unsigned int)mp.opcode[3];\n        const int off = (int)_mp_arg(4);\n        return off>=0 && off<(int)siz?mp.mem[ptr + off]:cimg::type<double>::nan();\n      }\n\n      static double mp_vector_map_sv(_cimg_math_parser& mp) { // Operator(scalar,vector)\n        unsigned int\n          siz = (unsigned int)mp.opcode[2],\n          ptrs = (unsigned int)mp.opcode[5] + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(4);\n        l_opcode[2] = mp.opcode[4]; // Scalar argument1\n        l_opcode.swap(mp.opcode);\n        ulongT &argument2 = mp.opcode[3];\n        while (siz-->0) { argument2 = ptrs++; *(ptrd++) = (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_map_v(_cimg_math_parser& mp) { // Operator(vector)\n        unsigned int\n          siz = (unsigned int)mp.opcode[2],\n          ptrs = (unsigned int)mp.opcode[4] + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,3);\n        l_opcode.swap(mp.opcode);\n        ulongT &argument = mp.opcode[2];\n        while (siz-->0) { argument = ptrs++; *(ptrd++) = (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_map_vs(_cimg_math_parser& mp) { // Operator(vector,scalar)\n        unsigned int\n          siz = (unsigned int)mp.opcode[2],\n          ptrs = (unsigned int)mp.opcode[4] + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,4);\n        l_opcode[3] = mp.opcode[5]; // Scalar argument2\n        l_opcode.swap(mp.opcode);\n        ulongT &argument1 = mp.opcode[2];\n        while (siz-->0) { argument1 = ptrs++; *(ptrd++) = (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_map_vss(_cimg_math_parser& mp) { // Operator(vector,scalar,scalar)\n        unsigned int\n          siz = (unsigned int)mp.opcode[2],\n          ptrs = (unsigned int)mp.opcode[4] + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,5);\n        l_opcode[3] = mp.opcode[5]; // Scalar argument2\n        l_opcode[4] = mp.opcode[6]; // Scalar argument3\n        l_opcode.swap(mp.opcode);\n        ulongT &argument1 = mp.opcode[2];\n        while (siz-->0) { argument1 = ptrs++; *(ptrd++) = (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_map_vv(_cimg_math_parser& mp) { // Operator(vector,vector)\n        unsigned int\n          siz = (unsigned int)mp.opcode[2],\n          ptrs1 = (unsigned int)mp.opcode[4] + 1,\n          ptrs2 = (unsigned int)mp.opcode[5] + 1;\n        double *ptrd = &_mp_arg(1) + 1;\n        mp_func op = (mp_func)mp.opcode[3];\n        CImg<ulongT> l_opcode(1,4);\n        l_opcode.swap(mp.opcode);\n        ulongT &argument1 = mp.opcode[2], &argument2 = mp.opcode[3];\n        while (siz-->0) { argument1 = ptrs1++; argument2 = ptrs2++; *(ptrd++) = (*op)(mp); }\n        l_opcode.swap(mp.opcode);\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_neq(_cimg_math_parser& mp) {\n        return !mp_vector_eq(mp);\n      }\n\n      static double mp_vector_print(_cimg_math_parser& mp) {\n        cimg_pragma_openmp(critical)\n        {\n          CImg<charT> expr(mp.opcode[2] - 4);\n          const ulongT *ptrs = mp.opcode._data + 4;\n          cimg_for(expr,ptrd,char) *ptrd = (char)*(ptrs++);\n          cimg::strellipsize(expr);\n          unsigned int\n            ptr = (unsigned int)mp.opcode[1] + 1,\n            siz0 = (unsigned int)mp.opcode[3],\n            siz = siz0;\n          cimg::mutex(6);\n          std::fprintf(cimg::output(),\"\\n[_cimg_math_parser] %s = [ \",expr._data);\n          unsigned int count = 0;\n          while (siz-->0) {\n            if (count>=64 && siz>=64) {\n              std::fprintf(cimg::output(),\"...,\");\n              ptr = (unsigned int)mp.opcode[1] + 1 + siz0 - 64;\n              siz = 64;\n            } else std::fprintf(cimg::output(),\"%g%s\",mp.mem[ptr++],siz?\",\":\"\");\n            ++count;\n          }\n          std::fprintf(cimg::output(),\" ] (size: %u)\",siz0);\n          std::fflush(cimg::output());\n          cimg::mutex(6,0);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_resize(_cimg_math_parser& mp) {\n        double *const ptrd = &_mp_arg(1) + 1;\n        const unsigned int p1 = (unsigned int)mp.opcode[2], p2 = (unsigned int)mp.opcode[4];\n        const int\n          interpolation = (int)_mp_arg(5),\n          boundary = (int)_mp_arg(6);\n        if (p2) { // Resize vector\n          const double *const ptrs = &_mp_arg(3) + 1;\n          CImg<doubleT>(ptrd,p1,1,1,1,true) = CImg<doubleT>(ptrs,p2,1,1,1,true).\n            get_resize(p1,1,1,1,interpolation,boundary);\n        } else { // Resize scalar\n          const double value = _mp_arg(3);\n          CImg<doubleT>(ptrd,p1,1,1,1,true) = CImg<doubleT>(1,1,1,1,value).resize(p1,1,1,1,interpolation,boundary);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_reverse(_cimg_math_parser& mp) {\n        double *const ptrd = &_mp_arg(1) + 1;\n        const double *const ptrs = &_mp_arg(2) + 1;\n        const unsigned int p1 = (unsigned int)mp.opcode[3];\n        CImg<doubleT>(ptrd,p1,1,1,1,true) = CImg<doubleT>(ptrs,p1,1,1,1,true).get_mirror('x');\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_vector_set_off(_cimg_math_parser& mp) {\n        const unsigned int\n          ptr = (unsigned int)mp.opcode[2] + 1,\n          siz = (unsigned int)mp.opcode[3];\n        const int off = (int)_mp_arg(4);\n        if (off>=0 && off<(int)siz) mp.mem[ptr + off] = _mp_arg(5);\n        return _mp_arg(5);\n      }\n\n      static double mp_whiledo(_cimg_math_parser& mp) {\n        const ulongT\n          mem_body = mp.opcode[1],\n          mem_cond = mp.opcode[2];\n        const CImg<ulongT>\n          *const p_cond = ++mp.p_code,\n          *const p_body = p_cond + mp.opcode[3],\n          *const p_end = p_body + mp.opcode[4];\n        const unsigned int vsiz = (unsigned int)mp.opcode[5];\n        bool is_cond = false;\n        if (mp.opcode[6]) { // Set default value for result and condition if necessary\n          if (vsiz) CImg<doubleT>(&mp.mem[mem_body] + 1,vsiz,1,1,1,true).fill(cimg::type<double>::nan());\n          else mp.mem[mem_body] = cimg::type<double>::nan();\n        }\n        if (mp.opcode[7]) mp.mem[mem_cond] = 0;\n        const unsigned int _break_type = mp.break_type;\n        mp.break_type = 0;\n        do {\n          for (mp.p_code = p_cond; mp.p_code<p_body; ++mp.p_code) { // Evaluate condition\n            const CImg<ulongT> &op = *mp.p_code;\n            mp.opcode._data = op._data;\n            const ulongT target = mp.opcode[1];\n            mp.mem[target] = _cimg_mp_defunc(mp);\n          }\n          if (mp.break_type==1) break;\n          is_cond = (bool)mp.mem[mem_cond];\n          if (is_cond && !mp.break_type) // Evaluate body\n            for (mp.p_code = p_body; mp.p_code<p_end; ++mp.p_code) {\n              const CImg<ulongT> &op = *mp.p_code;\n              mp.opcode._data = op._data;\n              const ulongT target = mp.opcode[1];\n              mp.mem[target] = _cimg_mp_defunc(mp);\n            }\n          if (mp.break_type==1) break; else if (mp.break_type==2) mp.break_type = 0;\n        } while (is_cond);\n\n        mp.break_type = _break_type;\n        mp.p_code = p_end - 1;\n        return mp.mem[mem_body];\n      }\n\n      static double mp_Ioff(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          boundary_conditions = (unsigned int)_mp_arg(3),\n          vsiz = (unsigned int)mp.opcode[4];\n        const CImg<T> &img = mp.imgin;\n        const longT\n          off = (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T *ptrs;\n        if (off<0 || off>=whd)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) {\n              ptrs = &img[cimg::mod(off,whd)];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          case 1 : // Neumann boundary\n            if (img) {\n              ptrs = off<0?img._data:&img[whd - 1];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          default : // Dirichet boundary\n            std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          }\n\n        ptrs = &img[off];\n        cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_Ixyz(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          interpolation = (unsigned int)_mp_arg(5),\n          boundary_conditions = (unsigned int)_mp_arg(6),\n          vsiz = (unsigned int)mp.opcode[7];\n        const CImg<T> &img = mp.imgin;\n        const double x = _mp_arg(2), y = _mp_arg(3), z = _mp_arg(4);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ(cimg::mod((int)x,img.width()),\n                                            cimg::mod((int)y,img.height()),\n                                            cimg::mod((int)z,img.depth()),\n                                            c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ(cimg::mod((float)x,(float)img.width()),\n                                                   cimg::mod((float)y,(float)img.height()),\n                                                   cimg::mod((float)z,(float)img.depth()),c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c,(T)0);\n        }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_Joff(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          boundary_conditions = (unsigned int)_mp_arg(3),\n          vsiz = (unsigned int)mp.opcode[4];\n        const CImg<T> &img = mp.imgin;\n        const int\n          ox = (int)mp.mem[_cimg_mp_slot_x],\n          oy = (int)mp.mem[_cimg_mp_slot_y],\n          oz = (int)mp.mem[_cimg_mp_slot_z];\n        const longT\n          off = img.offset(ox,oy,oz) + (longT)_mp_arg(2),\n          whd = (longT)img.width()*img.height()*img.depth();\n        const T *ptrs;\n        if (off<0 || off>=whd)\n          switch (boundary_conditions) {\n          case 2 : // Periodic boundary\n            if (img) {\n              ptrs = &img[cimg::mod(off,whd)];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          case 1 : // Neumann boundary\n            if (img) {\n              ptrs = off<0?img._data:&img[whd - 1];\n              cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n            } else std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          default : // Dirichet boundary\n            std::memset(ptrd,0,vsiz*sizeof(double));\n            return cimg::type<double>::nan();\n          }\n        ptrs = &img[off];\n        cimg_for_inC(img,0,vsiz - 1,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n        return cimg::type<double>::nan();\n      }\n\n      static double mp_Jxyz(_cimg_math_parser& mp) {\n        double *ptrd = &_mp_arg(1) + 1;\n        const unsigned int\n          interpolation = (unsigned int)_mp_arg(5),\n          boundary_conditions = (unsigned int)_mp_arg(6),\n          vsiz = (unsigned int)mp.opcode[7];\n        const CImg<T> &img = mp.imgin;\n        const double\n          ox = mp.mem[_cimg_mp_slot_x], oy = mp.mem[_cimg_mp_slot_y], oz = mp.mem[_cimg_mp_slot_z],\n          x = ox + _mp_arg(2), y = oy + _mp_arg(3), z = oz + _mp_arg(4);\n        if (interpolation==0) { // Nearest neighbor interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ(cimg::mod((int)x,img.width()),\n                                            cimg::mod((int)y,img.height()),\n                                            cimg::mod((int)z,img.depth()),\n                                            c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.atXYZ((int)x,(int)y,(int)z,c,(T)0);\n        } else { // Linear interpolation\n          if (boundary_conditions==2)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ(cimg::mod((float)x,(float)img.width()),\n                                                   cimg::mod((float)y,(float)img.height()),\n                                                   cimg::mod((float)z,(float)img.depth()),c);\n          else if (boundary_conditions==1)\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c);\n          else\n            cimg_for_inC(img,0,vsiz - 1,c)\n              *(ptrd++) = (double)img.linear_atXYZ((float)x,(float)y,(float)z,c,(T)0);\n        }\n        return cimg::type<double>::nan();\n      }\n\n#undef _mp_arg\n\n    }; // struct _cimg_math_parser {}\n\n    //! Compute the square value of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its square value \\f$I_{(x,y,z,c)}^2\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");\n       (img,img.get_sqr().normalize(0,255)).display();\n       \\endcode\n       \\image html ref_sqr.jpg\n    **/\n    CImg<T>& sqr() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(val*val); };\n      return *this;\n    }\n\n    //! Compute the square value of each pixel value \\newinstance.\n    CImg<Tfloat> get_sqr() const {\n      return CImg<Tfloat>(*this,false).sqr();\n    }\n\n    //! Compute the square root of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its square root \\f$\\sqrt{I_{(x,y,z,c)}}\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");\n       (img,img.get_sqrt().normalize(0,255)).display();\n       \\endcode\n       \\image html ref_sqrt.jpg\n    **/\n    CImg<T>& sqrt() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::sqrt((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the square root of each pixel value \\newinstance.\n    CImg<Tfloat> get_sqrt() const {\n      return CImg<Tfloat>(*this,false).sqrt();\n    }\n\n    //! Compute the exponential of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its exponential \\f$e^{I_{(x,y,z,c)}}\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& exp() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=4096))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::exp((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the exponential of each pixel value \\newinstance.\n    CImg<Tfloat> get_exp() const {\n      return CImg<Tfloat>(*this,false).exp();\n    }\n\n    //! Compute the logarithm of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its logarithm\n       \\f$\\mathrm{log}_{e}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& log() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=262144))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::log((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the logarithm of each pixel value \\newinstance.\n    CImg<Tfloat> get_log() const {\n      return CImg<Tfloat>(*this,false).log();\n    }\n\n    //! Compute the base-2 logarithm of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its base-2 logarithm\n       \\f$\\mathrm{log}_{2}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& log2() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=4096))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::log2((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the base-10 logarithm of each pixel value \\newinstance.\n    CImg<Tfloat> get_log2() const {\n      return CImg<Tfloat>(*this,false).log2();\n    }\n\n    //! Compute the base-10 logarithm of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its base-10 logarithm\n       \\f$\\mathrm{log}_{10}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& log10() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=4096))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::log10((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the base-10 logarithm of each pixel value \\newinstance.\n    CImg<Tfloat> get_log10() const {\n      return CImg<Tfloat>(*this,false).log10();\n    }\n\n    //! Compute the absolute value of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its absolute value \\f$|I_{(x,y,z,c)}|\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& abs() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=524288))\n      cimg_rof(*this,ptrd,T) *ptrd = cimg::abs(*ptrd);\n      return *this;\n    }\n\n    //! Compute the absolute value of each pixel value \\newinstance.\n    CImg<Tfloat> get_abs() const {\n      return CImg<Tfloat>(*this,false).abs();\n    }\n\n    //! Compute the sign of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its sign\n       \\f$\\mathrm{sign}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The sign is set to:\n         - \\c 1 if pixel value is strictly positive.\n         - \\c -1 if pixel value is strictly negative.\n         - \\c 0 if pixel value is equal to \\c 0.\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& sign() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = cimg::sign(*ptrd);\n      return *this;\n    }\n\n    //! Compute the sign of each pixel value \\newinstance.\n    CImg<Tfloat> get_sign() const {\n      return CImg<Tfloat>(*this,false).sign();\n    }\n\n    //! Compute the cosine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its cosine \\f$\\cos(I_{(x,y,z,c)})\\f$.\n       \\note\n       - Pixel values are regarded as being in \\e radian.\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& cos() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::cos((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the cosine of each pixel value \\newinstance.\n    CImg<Tfloat> get_cos() const {\n      return CImg<Tfloat>(*this,false).cos();\n    }\n\n    //! Compute the sine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its sine \\f$\\sin(I_{(x,y,z,c)})\\f$.\n       \\note\n       - Pixel values are regarded as being in \\e radian.\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& sin() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::sin((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the sine of each pixel value \\newinstance.\n    CImg<Tfloat> get_sin() const {\n      return CImg<Tfloat>(*this,false).sin();\n    }\n\n    //! Compute the sinc of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its sinc\n       \\f$\\mathrm{sinc}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - Pixel values are regarded as being exin \\e radian.\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& sinc() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=2048))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::sinc((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the sinc of each pixel value \\newinstance.\n    CImg<Tfloat> get_sinc() const {\n      return CImg<Tfloat>(*this,false).sinc();\n    }\n\n    //! Compute the tangent of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its tangent \\f$\\tan(I_{(x,y,z,c)})\\f$.\n       \\note\n       - Pixel values are regarded as being exin \\e radian.\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& tan() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=2048))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::tan((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the tangent of each pixel value \\newinstance.\n    CImg<Tfloat> get_tan() const {\n      return CImg<Tfloat>(*this,false).tan();\n    }\n\n    //! Compute the hyperbolic cosine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its hyperbolic cosine\n       \\f$\\mathrm{cosh}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& cosh() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=2048))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::cosh((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the hyperbolic cosine of each pixel value \\newinstance.\n    CImg<Tfloat> get_cosh() const {\n      return CImg<Tfloat>(*this,false).cosh();\n    }\n\n    //! Compute the hyperbolic sine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its hyperbolic sine\n       \\f$\\mathrm{sinh}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& sinh() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=2048))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::sinh((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the hyperbolic sine of each pixel value \\newinstance.\n    CImg<Tfloat> get_sinh() const {\n      return CImg<Tfloat>(*this,false).sinh();\n    }\n\n    //! Compute the hyperbolic tangent of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its hyperbolic tangent\n       \\f$\\mathrm{tanh}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& tanh() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=2048))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::tanh((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the hyperbolic tangent of each pixel value \\newinstance.\n    CImg<Tfloat> get_tanh() const {\n      return CImg<Tfloat>(*this,false).tanh();\n    }\n\n    //! Compute the arccosine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its arccosine\n       \\f$\\mathrm{acos}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& acos() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::acos((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the arccosine of each pixel value \\newinstance.\n    CImg<Tfloat> get_acos() const {\n      return CImg<Tfloat>(*this,false).acos();\n    }\n\n    //! Compute the arcsine of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its arcsine\n       \\f$\\mathrm{asin}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& asin() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::asin((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the arcsine of each pixel value \\newinstance.\n    CImg<Tfloat> get_asin() const {\n      return CImg<Tfloat>(*this,false).asin();\n    }\n\n    //! Compute the arctangent of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its arctangent\n       \\f$\\mathrm{atan}(I_{(x,y,z,c)})\\f$.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n    **/\n    CImg<T>& atan() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::atan((double)*ptrd);\n      return *this;\n    }\n\n    //! Compute the arctangent of each pixel value \\newinstance.\n    CImg<Tfloat> get_atan() const {\n      return CImg<Tfloat>(*this,false).atan();\n    }\n\n    //! Compute the arctangent2 of each pixel value.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its arctangent2\n       \\f$\\mathrm{atan2}(I_{(x,y,z,c)})\\f$.\n       \\param img Image whose pixel values specify the second argument of the \\c atan2() function.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n       \\par Example\n       \\code\n       const CImg<float>\n          img_x(100,100,1,1,\"x-w/2\",false),   // Define an horizontal centered gradient, from '-width/2' to 'width/2'.\n          img_y(100,100,1,1,\"y-h/2\",false),   // Define a vertical centered gradient, from '-height/2' to 'height/2'.\n          img_atan2 = img_y.get_atan2(img_x); // Compute atan2(y,x) for each pixel value.\n       (img_x,img_y,img_atan2).display();\n       \\endcode\n    **/\n    template<typename t>\n    CImg<T>& atan2(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return atan2(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)std::atan2((double)*ptrd,(double)*(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)std::atan2((double)*ptrd,(double)*(ptrs++));\n      }\n      return *this;\n    }\n\n    //! Compute the arctangent2 of each pixel value \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_atan2(const CImg<t>& img) const {\n      return CImg<Tfloat>(*this,false).atan2(img);\n    }\n\n    //! In-place pointwise multiplication.\n    /**\n       Compute the pointwise multiplication between the image instance and the specified input image \\c img.\n       \\param img Input image, as the second operand of the multiplication.\n       \\note\n       - Similar to operator+=(const CImg<t>&), except that it performs a pointwise multiplication\n         instead of an addition.\n       - It does \\e not perform a \\e matrix multiplication. For this purpose, use operator*=(const CImg<t>&) instead.\n       \\par Example\n       \\code\n       CImg<float>\n         img(\"reference.jpg\"),\n         shade(img.width,img.height(),1,1,\"-(x-w/2)^2-(y-h/2)^2\",false);\n       shade.normalize(0,1);\n       (img,shade,img.get_mul(shade)).display();\n       \\endcode\n    **/\n    template<typename t>\n    CImg<T>& mul(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return mul(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)(*ptrd * *(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)(*ptrd * *(ptrs++));\n      }\n      return *this;\n    }\n\n    //! In-place pointwise multiplication \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_mul(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false).mul(img);\n    }\n\n    //! In-place pointwise division.\n    /**\n       Similar to mul(const CImg<t>&), except that it performs a pointwise division instead of a multiplication.\n    **/\n    template<typename t>\n    CImg<T>& div(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return div(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)(*ptrd / *(ptrs++));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)(*ptrd / *(ptrs++));\n      }\n      return *this;\n    }\n\n    //! In-place pointwise division \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_div(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false).div(img);\n    }\n\n    //! Raise each pixel value to a specified power.\n    /**\n       Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by its power \\f$I_{(x,y,z,c)}^p\\f$.\n       \\param p Exponent value.\n       \\note\n       - The \\inplace of this method statically casts the computed values to the pixel type \\c T.\n       - The \\newinstance returns a \\c CImg<float> image, if the pixel type \\c T is \\e not float-valued.\n       \\par Example\n       \\code\n       const CImg<float>\n         img0(\"reference.jpg\"),           // Load reference color image.\n         img1 = (img0/255).pow(1.8)*=255, // Compute gamma correction, with gamma = 1.8.\n         img2 = (img0/255).pow(0.5)*=255; // Compute gamma correction, with gamma = 0.5.\n       (img0,img1,img2).display();\n       \\endcode\n    **/\n    CImg<T>& pow(const double p) {\n      if (is_empty()) return *this;\n      if (p==-4) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(1.0/(val*val*val*val)); }\n        return *this;\n      }\n      if (p==-3) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(1.0/(val*val*val)); }\n        return *this;\n      }\n      if (p==-2) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(1.0/(val*val)); }\n        return *this;\n      }\n      if (p==-1) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(1.0/val); }\n        return *this;\n      }\n      if (p==-0.5) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = (T)(1/std::sqrt((double)val)); }\n        return *this;\n      }\n      if (p==0) return fill((T)1);\n      if (p==0.25) return sqrt().sqrt();\n      if (p==0.5) return sqrt();\n      if (p==1) return *this;\n      if (p==2) return sqr();\n      if (p==3) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=262144))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = val*val*val; }\n        return *this;\n      }\n      if (p==4) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=131072))\n        cimg_rof(*this,ptrd,T) { const T val = *ptrd; *ptrd = val*val*val*val; }\n        return *this;\n      }\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=1024))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)std::pow((double)*ptrd,p);\n      return *this;\n    }\n\n    //! Raise each pixel value to a specified power \\newinstance.\n    CImg<Tfloat> get_pow(const double p) const {\n      return CImg<Tfloat>(*this,false).pow(p);\n    }\n\n    //! Raise each pixel value to a power, specified from an expression.\n    /**\n       Similar to operator+=(const char*), except it performs a pointwise exponentiation instead of an addition.\n    **/\n    CImg<T>& pow(const char *const expression) {\n      return pow((+*this)._fill(expression,true,true,0,0,\"pow\",this));\n    }\n\n    //! Raise each pixel value to a power, specified from an expression \\newinstance.\n    CImg<Tfloat> get_pow(const char *const expression) const {\n      return CImg<Tfloat>(*this,false).pow(expression);\n    }\n\n    //! Raise each pixel value to a power, pointwisely specified from another image.\n    /**\n       Similar to operator+=(const CImg<t>& img), except that it performs an exponentiation instead of an addition.\n    **/\n    template<typename t>\n    CImg<T>& pow(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return pow(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)std::pow((double)*ptrd,(double)(*(ptrs++)));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)std::pow((double)*ptrd,(double)(*(ptrs++)));\n      }\n      return *this;\n    }\n\n    //! Raise each pixel value to a power, pointwisely specified from another image \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_pow(const CImg<t>& img) const {\n      return CImg<Tfloat>(*this,false).pow(img);\n    }\n\n    //! Compute the bitwise left rotation of each pixel value.\n    /**\n       Similar to operator<<=(unsigned int), except that it performs a left rotation instead of a left shift.\n    **/\n    CImg<T>& rol(const unsigned int n=1) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::rol(*ptrd,n);\n      return *this;\n    }\n\n    //! Compute the bitwise left rotation of each pixel value \\newinstance.\n    CImg<T> get_rol(const unsigned int n=1) const {\n      return (+*this).rol(n);\n    }\n\n    //! Compute the bitwise left rotation of each pixel value.\n    /**\n       Similar to operator<<=(const char*), except that it performs a left rotation instead of a left shift.\n    **/\n    CImg<T>& rol(const char *const expression) {\n      return rol((+*this)._fill(expression,true,true,0,0,\"rol\",this));\n    }\n\n    //! Compute the bitwise left rotation of each pixel value \\newinstance.\n    CImg<T> get_rol(const char *const expression) const {\n      return (+*this).rol(expression);\n    }\n\n    //! Compute the bitwise left rotation of each pixel value.\n    /**\n       Similar to operator<<=(const CImg<t>&), except that it performs a left rotation instead of a left shift.\n    **/\n    template<typename t>\n    CImg<T>& rol(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return rol(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)cimg::rol(*ptrd,(unsigned int)(*(ptrs++)));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)cimg::rol(*ptrd,(unsigned int)(*(ptrs++)));\n      }\n      return *this;\n    }\n\n    //! Compute the bitwise left rotation of each pixel value \\newinstance.\n    template<typename t>\n    CImg<T> get_rol(const CImg<t>& img) const {\n      return (+*this).rol(img);\n    }\n\n    //! Compute the bitwise right rotation of each pixel value.\n    /**\n       Similar to operator>>=(unsigned int), except that it performs a right rotation instead of a right shift.\n    **/\n    CImg<T>& ror(const unsigned int n=1) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::ror(*ptrd,n);\n      return *this;\n    }\n\n    //! Compute the bitwise right rotation of each pixel value \\newinstance.\n    CImg<T> get_ror(const unsigned int n=1) const {\n      return (+*this).ror(n);\n    }\n\n    //! Compute the bitwise right rotation of each pixel value.\n    /**\n       Similar to operator>>=(const char*), except that it performs a right rotation instead of a right shift.\n    **/\n    CImg<T>& ror(const char *const expression) {\n      return ror((+*this)._fill(expression,true,true,0,0,\"ror\",this));\n    }\n\n    //! Compute the bitwise right rotation of each pixel value \\newinstance.\n    CImg<T> get_ror(const char *const expression) const {\n      return (+*this).ror(expression);\n    }\n\n    //! Compute the bitwise right rotation of each pixel value.\n    /**\n       Similar to operator>>=(const CImg<t>&), except that it performs a right rotation instead of a right shift.\n    **/\n    template<typename t>\n    CImg<T>& ror(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return ror(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = (T)cimg::ror(*ptrd,(unsigned int)(*(ptrs++)));\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = (T)cimg::ror(*ptrd,(unsigned int)(*(ptrs++)));\n      }\n      return *this;\n    }\n\n    //! Compute the bitwise right rotation of each pixel value \\newinstance.\n    template<typename t>\n    CImg<T> get_ror(const CImg<t>& img) const {\n      return (+*this).ror(img);\n    }\n\n    //! Pointwise min operator between instance image and a value.\n    /**\n       \\param val Value used as the reference argument of the min operator.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{min}(I_{(x,y,z,c)},\\mathrm{val})\\f$.\n     **/\n    CImg<T>& min(const T& val) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n      cimg_rof(*this,ptrd,T) *ptrd = std::min(*ptrd,val);\n      return *this;\n    }\n\n    //! Pointwise min operator between instance image and a value \\newinstance.\n    CImg<T> get_min(const T& val) const {\n      return (+*this).min(val);\n    }\n\n    //! Pointwise min operator between two images.\n    /**\n       \\param img Image used as the reference argument of the min operator.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{min}(I_{(x,y,z,c)},\\mathrm{img}_{(x,y,z,c)})\\f$.\n     **/\n    template<typename t>\n    CImg<T>& min(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return min(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = std::min((T)*(ptrs++),*ptrd);\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = std::min((T)*(ptrs++),*ptrd);\n      }\n      return *this;\n    }\n\n    //! Pointwise min operator between two images \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_min(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false).min(img);\n    }\n\n    //! Pointwise min operator between an image and an expression.\n    /**\n       \\param expression Math formula as a C-string.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{min}(I_{(x,y,z,c)},\\mathrm{expr}_{(x,y,z,c)})\\f$.\n    **/\n    CImg<T>& min(const char *const expression) {\n      return min((+*this)._fill(expression,true,true,0,0,\"min\",this));\n    }\n\n    //! Pointwise min operator between an image and an expression \\newinstance.\n    CImg<Tfloat> get_min(const char *const expression) const {\n      return CImg<Tfloat>(*this,false).min(expression);\n    }\n\n    //! Pointwise max operator between instance image and a value.\n    /**\n       \\param val Value used as the reference argument of the max operator.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{max}(I_{(x,y,z,c)},\\mathrm{val})\\f$.\n     **/\n    CImg<T>& max(const T& val) {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n      cimg_rof(*this,ptrd,T) *ptrd = std::max(*ptrd,val);\n      return *this;\n    }\n\n    //! Pointwise max operator between instance image and a value \\newinstance.\n    CImg<T> get_max(const T& val) const {\n      return (+*this).max(val);\n    }\n\n    //! Pointwise max operator between two images.\n    /**\n       \\param img Image used as the reference argument of the max operator.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{max}(I_{(x,y,z,c)},\\mathrm{img}_{(x,y,z,c)})\\f$.\n     **/\n    template<typename t>\n    CImg<T>& max(const CImg<t>& img) {\n      const ulongT siz = size(), isiz = img.size();\n      if (siz && isiz) {\n        if (is_overlapped(img)) return max(+img);\n        T *ptrd = _data, *const ptre = _data + siz;\n        if (siz>isiz) for (ulongT n = siz/isiz; n; --n)\n          for (const t *ptrs = img._data, *ptrs_end = ptrs + isiz; ptrs<ptrs_end; ++ptrd)\n            *ptrd = std::max((T)*(ptrs++),*ptrd);\n        for (const t *ptrs = img._data; ptrd<ptre; ++ptrd) *ptrd = std::max((T)*(ptrs++),*ptrd);\n      }\n      return *this;\n    }\n\n    //! Pointwise max operator between two images \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_max(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false).max(img);\n    }\n\n    //! Pointwise max operator between an image and an expression.\n    /**\n       \\param expression Math formula as a C-string.\n       \\note Replace each pixel value \\f$I_{(x,y,z,c)}\\f$ of the image instance by\n       \\f$\\mathrm{max}(I_{(x,y,z,c)},\\mathrm{expr}_{(x,y,z,c)})\\f$.\n    **/\n    CImg<T>& max(const char *const expression) {\n      return max((+*this)._fill(expression,true,true,0,0,\"max\",this));\n    }\n\n    //! Pointwise max operator between an image and an expression \\newinstance.\n    CImg<Tfloat> get_max(const char *const expression) const {\n      return CImg<Tfloat>(*this,false).max(expression);\n    }\n\n    //! Return a reference to the minimum pixel value.\n    /**\n     **/\n    T& min() {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"min(): Empty instance.\",\n                                    cimg_instance);\n      T *ptr_min = _data;\n      T min_value = *ptr_min;\n      cimg_for(*this,ptrs,T) if (*ptrs<min_value) min_value = *(ptr_min=ptrs);\n      return *ptr_min;\n    }\n\n    //! Return a reference to the minimum pixel value \\const.\n    const T& min() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"min(): Empty instance.\",\n                                    cimg_instance);\n      const T *ptr_min = _data;\n      T min_value = *ptr_min;\n      cimg_for(*this,ptrs,T) if (*ptrs<min_value) min_value = *(ptr_min=ptrs);\n      return *ptr_min;\n    }\n\n    //! Return a reference to the maximum pixel value.\n    /**\n     **/\n    T& max() {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"max(): Empty instance.\",\n                                    cimg_instance);\n      T *ptr_max = _data;\n      T max_value = *ptr_max;\n      cimg_for(*this,ptrs,T) if (*ptrs>max_value) max_value = *(ptr_max=ptrs);\n      return *ptr_max;\n    }\n\n    //! Return a reference to the maximum pixel value \\const.\n    const T& max() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"max(): Empty instance.\",\n                                    cimg_instance);\n      const T *ptr_max = _data;\n      T max_value = *ptr_max;\n      cimg_for(*this,ptrs,T) if (*ptrs>max_value) max_value = *(ptr_max=ptrs);\n      return *ptr_max;\n    }\n\n    //! Return a reference to the minimum pixel value as well as the maximum pixel value.\n    /**\n       \\param[out] max_val Maximum pixel value.\n    **/\n    template<typename t>\n    T& min_max(t& max_val) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"min_max(): Empty instance.\",\n                                    cimg_instance);\n      T *ptr_min = _data;\n      T min_value = *ptr_min, max_value = min_value;\n      cimg_for(*this,ptrs,T) {\n        const T val = *ptrs;\n        if (val<min_value) { min_value = val; ptr_min = ptrs; }\n        if (val>max_value) max_value = val;\n      }\n      max_val = (t)max_value;\n      return *ptr_min;\n    }\n\n    //! Return a reference to the minimum pixel value as well as the maximum pixel value \\const.\n    template<typename t>\n    const T& min_max(t& max_val) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"min_max(): Empty instance.\",\n                                    cimg_instance);\n      const T *ptr_min = _data;\n      T min_value = *ptr_min, max_value = min_value;\n      cimg_for(*this,ptrs,T) {\n        const T val = *ptrs;\n        if (val<min_value) { min_value = val; ptr_min = ptrs; }\n        if (val>max_value) max_value = val;\n      }\n      max_val = (t)max_value;\n      return *ptr_min;\n    }\n\n    //! Return a reference to the maximum pixel value as well as the minimum pixel value.\n    /**\n       \\param[out] min_val Minimum pixel value.\n    **/\n    template<typename t>\n    T& max_min(t& min_val) {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"max_min(): Empty instance.\",\n                                    cimg_instance);\n      T *ptr_max = _data;\n      T max_value = *ptr_max, min_value = max_value;\n      cimg_for(*this,ptrs,T) {\n        const T val = *ptrs;\n        if (val>max_value) { max_value = val; ptr_max = ptrs; }\n        if (val<min_value) min_value = val;\n      }\n      min_val = (t)min_value;\n      return *ptr_max;\n    }\n\n    //! Return a reference to the maximum pixel value as well as the minimum pixel value \\const.\n    template<typename t>\n    const T& max_min(t& min_val) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"max_min(): Empty instance.\",\n                                    cimg_instance);\n      const T *ptr_max = _data;\n      T max_value = *ptr_max, min_value = max_value;\n      cimg_for(*this,ptrs,T) {\n        const T val = *ptrs;\n        if (val>max_value) { max_value = val; ptr_max = ptrs; }\n        if (val<min_value) min_value = val;\n      }\n      min_val = (t)min_value;\n      return *ptr_max;\n    }\n\n    //! Return the kth smallest pixel value.\n    /**\n       \\param k Rank of the search smallest element.\n    **/\n    T kth_smallest(const ulongT k) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"kth_smallest(): Empty instance.\",\n                                    cimg_instance);\n      CImg<T> arr(*this);\n      ulongT l = 0, ir = size() - 1;\n      for ( ; ; ) {\n        if (ir<=l + 1) {\n          if (ir==l + 1 && arr[ir]<arr[l]) cimg::swap(arr[l],arr[ir]);\n          return arr[k];\n        } else {\n          const ulongT mid = (l + ir)>>1;\n          cimg::swap(arr[mid],arr[l + 1]);\n          if (arr[l]>arr[ir]) cimg::swap(arr[l],arr[ir]);\n          if (arr[l + 1]>arr[ir]) cimg::swap(arr[l + 1],arr[ir]);\n          if (arr[l]>arr[l + 1]) cimg::swap(arr[l],arr[l + 1]);\n          ulongT i = l + 1, j = ir;\n          const T pivot = arr[l + 1];\n          for ( ; ; ) {\n            do ++i; while (arr[i]<pivot);\n            do --j; while (arr[j]>pivot);\n            if (j<i) break;\n            cimg::swap(arr[i],arr[j]);\n          }\n          arr[l + 1] = arr[j];\n          arr[j] = pivot;\n          if (j>=k) ir = j - 1;\n          if (j<=k) l = i;\n        }\n      }\n    }\n\n    //! Return the median pixel value.\n    /**\n     **/\n    T median() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"median(): Empty instance.\",\n                                    cimg_instance);\n      const ulongT s = size();\n      switch (s) {\n      case 1 : return _data[0];\n      case 2 : return cimg::median(_data[0],_data[1]);\n      case 3 : return cimg::median(_data[0],_data[1],_data[2]);\n      case 5 : return cimg::median(_data[0],_data[1],_data[2],_data[3],_data[4]);\n      case 7 : return cimg::median(_data[0],_data[1],_data[2],_data[3],_data[4],_data[5],_data[6]);\n      case 9 : return cimg::median(_data[0],_data[1],_data[2],_data[3],_data[4],_data[5],_data[6],_data[7],_data[8]);\n      case 13 : return cimg::median(_data[0],_data[1],_data[2],_data[3],_data[4],_data[5],_data[6],_data[7],_data[8],\n                                    _data[9],_data[10],_data[11],_data[12]);\n      }\n      const T res = kth_smallest(s>>1);\n      return (s%2)?res:(T)((res + kth_smallest((s>>1) - 1))/2);\n    }\n\n    //! Return the product of all the pixel values.\n    /**\n     **/\n    double product() const {\n      if (is_empty()) return 0;\n      double res = 1;\n      cimg_for(*this,ptrs,T) res*=(double)*ptrs;\n      return res;\n    }\n\n    //! Return the sum of all the pixel values.\n    /**\n     **/\n    double sum() const {\n      double res = 0;\n      cimg_for(*this,ptrs,T) res+=(double)*ptrs;\n      return res;\n    }\n\n    //! Return the average pixel value.\n    /**\n     **/\n    double mean() const {\n      double res = 0;\n      cimg_for(*this,ptrs,T) res+=(double)*ptrs;\n      return res/size();\n    }\n\n    //! Return the variance of the pixel values.\n    /**\n       \\param variance_method Method used to estimate the variance. Can be:\n       - \\c 0: Second moment, computed as\n       \\f$1/N \\sum\\limits_{k=1}^{N} (x_k - \\bar x)^2 =\n       1/N \\left( \\sum\\limits_{k=1}^N x_k^2 - \\left( \\sum\\limits_{k=1}^N x_k \\right)^2 / N \\right)\\f$\n       with \\f$ \\bar x = 1/N \\sum\\limits_{k=1}^N x_k \\f$.\n       - \\c 1: Best unbiased estimator, computed as \\f$\\frac{1}{N - 1} \\sum\\limits_{k=1}^{N} (x_k - \\bar x)^2 \\f$.\n       - \\c 2: Least median of squares.\n       - \\c 3: Least trimmed of squares.\n    **/\n    double variance(const unsigned int variance_method=1) const {\n      double foo;\n      return variance_mean(variance_method,foo);\n    }\n\n    //! Return the variance as well as the average of the pixel values.\n    /**\n       \\param variance_method Method used to estimate the variance (see variance(const unsigned int) const).\n       \\param[out] mean Average pixel value.\n    **/\n    template<typename t>\n    double variance_mean(const unsigned int variance_method, t& mean) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"variance_mean(): Empty instance.\",\n                                    cimg_instance);\n\n      double variance = 0, average = 0;\n      const ulongT siz = size();\n      switch (variance_method) {\n      case 0 : { // Least mean square (standard definition)\n        double S = 0, S2 = 0;\n        cimg_for(*this,ptrs,T) { const double val = (double)*ptrs; S+=val; S2+=val*val; }\n        variance = (S2 - S*S/siz)/siz;\n        average = S;\n      } break;\n      case 1 : { // Least mean square (robust definition)\n        double S = 0, S2 = 0;\n        cimg_for(*this,ptrs,T) { const double val = (double)*ptrs; S+=val; S2+=val*val; }\n        variance = siz>1?(S2 - S*S/siz)/(siz - 1):0;\n        average = S;\n      } break;\n      case 2 : { // Least Median of Squares (MAD)\n        CImg<Tfloat> buf(*this,false);\n        buf.sort();\n        const ulongT siz2 = siz>>1;\n        const double med_i = (double)buf[siz2];\n        cimg_for(buf,ptrs,Tfloat) {\n          const double val = (double)*ptrs; *ptrs = (Tfloat)cimg::abs(val - med_i); average+=val;\n        }\n        buf.sort();\n        const double sig = (double)(1.4828*buf[siz2]);\n        variance = sig*sig;\n      } break;\n      default : { // Least trimmed of Squares\n        CImg<Tfloat> buf(*this,false);\n        const ulongT siz2 = siz>>1;\n        cimg_for(buf,ptrs,Tfloat) {\n          const double val = (double)*ptrs; (*ptrs)=(Tfloat)((*ptrs)*val); average+=val;\n        }\n        buf.sort();\n        double a = 0;\n        const Tfloat *ptrs = buf._data;\n        for (ulongT j = 0; j<siz2; ++j) a+=(double)*(ptrs++);\n        const double sig = (double)(2.6477*std::sqrt(a/siz2));\n        variance = sig*sig;\n      }\n      }\n      mean = (t)(average/siz);\n      return variance>0?variance:0;\n    }\n\n    //! Return estimated variance of the noise.\n    /**\n       \\param variance_method Method used to compute the variance (see variance(const unsigned int) const).\n       \\note Because of structures such as edges in images it is\n       recommanded to use a robust variance estimation. The variance of the\n       noise is estimated by computing the variance of the Laplacian \\f$(\\Delta\n       I)^2 \\f$ scaled by a factor \\f$c\\f$ insuring \\f$ c E[(\\Delta I)^2]=\n       \\sigma^2\\f$ where \\f$\\sigma\\f$ is the noise variance.\n    **/\n    double variance_noise(const unsigned int variance_method=2) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"variance_noise(): Empty instance.\",\n                                    cimg_instance);\n\n      const ulongT siz = size();\n      if (!siz || !_data) return 0;\n      if (variance_method>1) { // Compute a scaled version of the Laplacian.\n        CImg<Tdouble> tmp(*this);\n        if (_depth==1) {\n          const double cste = 1.0/std::sqrt(20.0); // Depends on how the Laplacian is computed.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height>=262144 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            CImg_3x3(I,T);\n            cimg_for3x3(*this,x,y,0,c,I,T) {\n              tmp(x,y,c) = cste*((double)Inc + (double)Ipc + (double)Icn +\n                                 (double)Icp - 4*(double)Icc);\n            }\n          }\n        } else {\n          const double cste = 1.0/std::sqrt(42.0); // Depends on how the Laplacian is computed.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=262144 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            CImg_3x3x3(I,T);\n            cimg_for3x3x3(*this,x,y,z,c,I,T) {\n              tmp(x,y,z,c) = cste*(\n                                   (double)Incc + (double)Ipcc + (double)Icnc + (double)Icpc +\n                                   (double)Iccn + (double)Iccp - 6*(double)Iccc);\n            }\n          }\n        }\n        return tmp.variance(variance_method);\n      }\n\n      // Version that doesn't need intermediate images.\n      double variance = 0, S = 0, S2 = 0;\n      if (_depth==1) {\n        const double cste = 1.0/std::sqrt(20.0);\n        CImg_3x3(I,T);\n        cimg_forC(*this,c) cimg_for3x3(*this,x,y,0,c,I,T) {\n          const double val = cste*((double)Inc + (double)Ipc +\n                                   (double)Icn + (double)Icp - 4*(double)Icc);\n          S+=val; S2+=val*val;\n        }\n      } else {\n        const double cste = 1.0/std::sqrt(42.0);\n        CImg_3x3x3(I,T);\n        cimg_forC(*this,c) cimg_for3x3x3(*this,x,y,z,c,I,T) {\n          const double val = cste *\n            ((double)Incc + (double)Ipcc + (double)Icnc +\n             (double)Icpc +\n             (double)Iccn + (double)Iccp - 6*(double)Iccc);\n          S+=val; S2+=val*val;\n        }\n      }\n      if (variance_method) variance = siz>1?(S2 - S*S/siz)/(siz - 1):0;\n      else variance = (S2 - S*S/siz)/siz;\n      return variance>0?variance:0;\n    }\n\n    //! Compute the MSE (Mean-Squared Error) between two images.\n    /**\n       \\param img Image used as the second argument of the MSE operator.\n    **/\n    template<typename t>\n    double MSE(const CImg<t>& img) const {\n      if (img.size()!=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"MSE(): Instance and specified image (%u,%u,%u,%u,%p) have different dimensions.\",\n                                    cimg_instance,\n                                    img._width,img._height,img._depth,img._spectrum,img._data);\n      double vMSE = 0;\n      const t* ptr2 = img._data;\n      cimg_for(*this,ptr1,T) {\n        const double diff = (double)*ptr1 - (double)*(ptr2++);\n        vMSE+=diff*diff;\n      }\n      const ulongT siz = img.size();\n      if (siz) vMSE/=siz;\n      return vMSE;\n    }\n\n    //! Compute the PSNR (Peak Signal-to-Noise Ratio) between two images.\n    /**\n       \\param img Image used as the second argument of the PSNR operator.\n       \\param max_value Maximum theoretical value of the signal.\n     **/\n    template<typename t>\n    double PSNR(const CImg<t>& img, const double max_value=255) const {\n      const double vMSE = (double)std::sqrt(MSE(img));\n      return (vMSE!=0)?(double)(20*std::log10(max_value/vMSE)):(double)(cimg::type<double>::max());\n    }\n\n    //! Evaluate math formula.\n    /**\n       \\param expression Math formula, as a C-string.\n       \\param x Value of the pre-defined variable \\c x.\n       \\param y Value of the pre-defined variable \\c y.\n       \\param z Value of the pre-defined variable \\c z.\n       \\param c Value of the pre-defined variable \\c c.\n       \\param list_inputs A list of input images attached to the specified math formula.\n       \\param list_outputs A pointer to a list of output images attached to the specified math formula.\n    **/\n    double eval(const char *const expression,\n                const double x=0, const double y=0, const double z=0, const double c=0,\n                const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) {\n      return _eval(this,expression,x,y,z,c,list_inputs,list_outputs);\n    }\n\n    //! Evaluate math formula \\const.\n    double eval(const char *const expression,\n                const double x=0, const double y=0, const double z=0, const double c=0,\n                const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) const {\n      return _eval(0,expression,x,y,z,c,list_inputs,list_outputs);\n    }\n\n    double _eval(CImg<T> *const img_output, const char *const expression,\n                 const double x, const double y, const double z, const double c,\n                 const CImgList<T> *const list_inputs, CImgList<T> *const list_outputs) const {\n      if (!expression) return 0;\n      if (!expression[1]) switch (*expression) { // Single-char optimization.\n        case 'w' : return (double)_width;\n        case 'h' : return (double)_height;\n        case 'd' : return (double)_depth;\n        case 's' : return (double)_spectrum;\n        case 'r' : return (double)_is_shared;\n        }\n      _cimg_math_parser mp(expression + (*expression=='>' || *expression=='<' ||\n                                         *expression=='*' || *expression==':'),\"eval\",\n                           *this,img_output,list_inputs,list_outputs,false);\n      const double val = mp(x,y,z,c);\n      mp.end();\n      return val;\n    }\n\n    //! Evaluate math formula.\n    /**\n       \\param[out] output Contains values of output vector returned by the evaluated expression\n         (or is empty if the returned type is scalar).\n       \\param expression Math formula, as a C-string.\n       \\param x Value of the pre-defined variable \\c x.\n       \\param y Value of the pre-defined variable \\c y.\n       \\param z Value of the pre-defined variable \\c z.\n       \\param c Value of the pre-defined variable \\c c.\n       \\param list_inputs A list of input images attached to the specified math formula.\n       \\param list_outputs A pointer to a list of output images attached to the specified math formula.\n    **/\n    template<typename t>\n    void eval(CImg<t> &output, const char *const expression,\n              const double x=0, const double y=0, const double z=0, const double c=0,\n              const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) {\n      _eval(output,this,expression,x,y,z,c,list_inputs,list_outputs);\n    }\n\n    //! Evaluate math formula \\const.\n    template<typename t>\n    void eval(CImg<t>& output, const char *const expression,\n              const double x=0, const double y=0, const double z=0, const double c=0,\n              const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) const {\n      _eval(output,0,expression,x,y,z,c,list_inputs,list_outputs);\n    }\n\n    template<typename t>\n    void _eval(CImg<t>& output, CImg<T> *const img_output, const char *const expression,\n               const double x, const double y, const double z, const double c,\n               const CImgList<T> *const list_inputs, CImgList<T> *const list_outputs) const {\n      if (!expression) { output.assign(1); *output = 0; }\n      if (!expression[1]) switch (*expression) { // Single-char optimization.\n        case 'w' : output.assign(1); *output = (t)_width;\n        case 'h' : output.assign(1); *output = (t)_height;\n        case 'd' : output.assign(1); *output = (t)_depth;\n        case 's' : output.assign(1); *output = (t)_spectrum;\n        case 'r' : output.assign(1); *output = (t)_is_shared;\n        }\n      _cimg_math_parser mp(expression + (*expression=='>' || *expression=='<' ||\n                                         *expression=='*' || *expression==':'),\"eval\",\n                           *this,img_output,list_inputs,list_outputs,false);\n      output.assign(1,std::max(1U,mp.result_dim));\n      mp(x,y,z,c,output._data);\n      mp.end();\n    }\n\n    //! Evaluate math formula on a set of variables.\n    /**\n       \\param expression Math formula, as a C-string.\n       \\param xyzc Set of values (x,y,z,c) used for the evaluation.\n    **/\n    template<typename t>\n    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc,\n                       const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) {\n      return _eval(this,expression,xyzc,list_inputs,list_outputs);\n    }\n\n    //! Evaluate math formula on a set of variables \\const.\n    template<typename t>\n    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc,\n                       const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) const {\n      return _eval(0,expression,xyzc,list_inputs,list_outputs);\n    }\n\n    template<typename t>\n    CImg<doubleT> _eval(CImg<T> *const output, const char *const expression, const CImg<t>& xyzc,\n                        const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) const {\n      CImg<doubleT> res(1,xyzc.size()/4);\n      if (!expression) return res.fill(0);\n      _cimg_math_parser mp(expression,\"eval\",*this,output,list_inputs,list_outputs,false);\n#ifdef cimg_use_openmp\n      cimg_pragma_openmp(parallel if (res._height>=512))\n      {\n        _cimg_math_parser\n          _mp = omp_get_thread_num()?mp:_cimg_math_parser(),\n          &lmp = omp_get_thread_num()?_mp:mp;\n        cimg_pragma_openmp(for)\n          for (unsigned int i = 0; i<res._height; ++i) {\n            const unsigned int i4 = 4*i;\n            const double\n              x = (double)xyzc[i4], y = (double)xyzc[i4 + 1],\n              z = (double)xyzc[i4 + 2], c = (double)xyzc[i4 + 3];\n            res[i] = lmp(x,y,z,c);\n          }\n        }\n#else\n      const t *ps = xyzc._data;\n      cimg_for(res,pd,double) {\n        const double x = (double)*(ps++), y = (double)*(ps++), z = (double)*(ps++), c = (double)*(ps++);\n        *pd = mp(x,y,z,c);\n      }\n#endif\n      mp.end();\n      return res;\n    }\n\n    //! Compute statistics vector from the pixel values.\n    /*\n       \\param variance_method Method used to compute the variance (see variance(const unsigned int) const).\n       \\return Statistics vector as\n         <tt>[min; max; mean; variance; xmin; ymin; zmin; cmin; xmax; ymax; zmax; cmax; sum; product]</tt>.\n    **/\n    CImg<Tdouble> get_stats(const unsigned int variance_method=1) const {\n      if (is_empty()) return CImg<doubleT>();\n      const ulongT siz = size();\n      const T *const odata = _data;\n      const T *pm = odata, *pM = odata;\n      double S = 0, S2 = 0, P = _data?1:0;\n      T m = *pm, M = m;\n      cimg_for(*this,ptrs,T) {\n        const T val = *ptrs;\n        const double _val = (double)val;\n        if (val<m) { m = val; pm = ptrs; }\n        if (val>M) { M = val; pM = ptrs; }\n        S+=_val;\n        S2+=_val*_val;\n        P*=_val;\n      }\n      const double\n        mean_value = S/siz,\n        _variance_value = variance_method==0?(S2 - S*S/siz)/siz:\n        (variance_method==1?(siz>1?(S2 - S*S/siz)/(siz - 1):0):\n         variance(variance_method)),\n        variance_value = _variance_value>0?_variance_value:0;\n      int\n        xm = 0, ym = 0, zm = 0, cm = 0,\n        xM = 0, yM = 0, zM = 0, cM = 0;\n      contains(*pm,xm,ym,zm,cm);\n      contains(*pM,xM,yM,zM,cM);\n      return CImg<Tdouble>(1,14).fill((double)m,(double)M,mean_value,variance_value,\n                                      (double)xm,(double)ym,(double)zm,(double)cm,\n                                      (double)xM,(double)yM,(double)zM,(double)cM,\n                                      S,P);\n    }\n\n    //! Compute statistics vector from the pixel values \\inplace.\n    CImg<T>& stats(const unsigned int variance_method=1) {\n      return get_stats(variance_method).move_to(*this);\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Vector / Matrix Operations\n    //@{\n    //-------------------------------------\n\n    //! Compute norm of the image, viewed as a matrix.\n    /**\n       \\param magnitude_type Norm type. Can be:\n       - \\c -1: Linf-norm\n       - \\c 0: L2-norm\n       - \\c 1: L1-norm\n    **/\n    double magnitude(const int magnitude_type=2) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"magnitude(): Empty instance.\",\n                                    cimg_instance);\n      double res = 0;\n      switch (magnitude_type) {\n      case -1 : {\n        cimg_for(*this,ptrs,T) { const double val = (double)cimg::abs(*ptrs); if (val>res) res = val; }\n      } break;\n      case 1 : {\n        cimg_for(*this,ptrs,T) res+=(double)cimg::abs(*ptrs);\n      } break;\n      default : {\n        cimg_for(*this,ptrs,T) res+=(double)cimg::sqr(*ptrs);\n        res = (double)std::sqrt(res);\n      }\n      }\n      return res;\n    }\n\n    //! Compute the trace of the image, viewed as a matrix.\n    /**\n     **/\n    double trace() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"trace(): Empty instance.\",\n                                    cimg_instance);\n      double res = 0;\n      cimg_forX(*this,k) res+=(double)(*this)(k,k);\n      return res;\n    }\n\n    //! Compute the determinant of the image, viewed as a matrix.\n    /**\n     **/\n    double det() const {\n      if (is_empty() || _width!=_height || _depth!=1 || _spectrum!=1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"det(): Instance is not a square matrix.\",\n                                    cimg_instance);\n\n      switch (_width) {\n      case 1 : return (double)((*this)(0,0));\n      case 2 : return (double)((*this)(0,0))*(double)((*this)(1,1)) - (double)((*this)(0,1))*(double)((*this)(1,0));\n      case 3 : {\n        const double\n          a = (double)_data[0], d = (double)_data[1], g = (double)_data[2],\n          b = (double)_data[3], e = (double)_data[4], h = (double)_data[5],\n          c = (double)_data[6], f = (double)_data[7], i = (double)_data[8];\n        return i*a*e - a*h*f - i*b*d + b*g*f + c*d*h - c*g*e;\n      }\n      default : {\n        CImg<Tfloat> lu(*this);\n        CImg<uintT> indx;\n        bool d;\n        lu._LU(indx,d);\n        double res = d?(double)1:(double)-1;\n        cimg_forX(lu,i) res*=lu(i,i);\n        return res;\n      }\n      }\n    }\n\n    //! Compute the dot product between instance and argument, viewed as matrices.\n    /**\n       \\param img Image used as a second argument of the dot product.\n    **/\n    template<typename t>\n    double dot(const CImg<t>& img) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"dot(): Empty instance.\",\n                                    cimg_instance);\n      if (!img)\n        throw CImgArgumentException(_cimg_instance\n                                    \"dot(): Empty specified image.\",\n                                    cimg_instance);\n\n      const ulongT nb = std::min(size(),img.size());\n      double res = 0;\n      for (ulongT off = 0; off<nb; ++off) res+=(double)_data[off]*(double)img[off];\n      return res;\n    }\n\n    //! Get vector-valued pixel located at specified position.\n    /**\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n    **/\n    CImg<T> get_vector_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {\n      CImg<T> res;\n      if (res._height!=_spectrum) res.assign(1,_spectrum);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      const T *ptrs = data(x,y,z);\n      T *ptrd = res._data;\n      cimg_forC(*this,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n      return res;\n    }\n\n    //! Get (square) matrix-valued pixel located at specified position.\n    /**\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\note - The spectrum() of the image must be a square.\n     **/\n    CImg<T> get_matrix_at(const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) const {\n      const int n = (int)std::sqrt((double)_spectrum);\n      const T *ptrs = data(x,y,z,0);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      CImg<T> res(n,n);\n      T *ptrd = res._data;\n      cimg_forC(*this,c) { *(ptrd++) = *ptrs; ptrs+=whd; }\n      return res;\n    }\n\n    //! Get tensor-valued pixel located at specified position.\n    /**\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n    **/\n    CImg<T> get_tensor_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {\n      const T *ptrs = data(x,y,z,0);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      if (_spectrum==6)\n        return tensor(*ptrs,*(ptrs + whd),*(ptrs + 2*whd),*(ptrs + 3*whd),*(ptrs + 4*whd),*(ptrs + 5*whd));\n      if (_spectrum==3)\n        return tensor(*ptrs,*(ptrs + whd),*(ptrs + 2*whd));\n      return tensor(*ptrs);\n    }\n\n    //! Set vector-valued pixel at specified position.\n    /**\n       \\param vec Vector to put on the instance image.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n    **/\n    template<typename t>\n    CImg<T>& set_vector_at(const CImg<t>& vec, const unsigned int x, const unsigned int y=0, const unsigned int z=0) {\n      if (x<_width && y<_height && z<_depth) {\n        const t *ptrs = vec._data;\n        const ulongT whd = (ulongT)_width*_height*_depth;\n        T *ptrd = data(x,y,z);\n        for (unsigned int k = std::min((unsigned int)vec.size(),_spectrum); k; --k) {\n          *ptrd = (T)*(ptrs++); ptrd+=whd;\n        }\n      }\n      return *this;\n    }\n\n    //! Set (square) matrix-valued pixel at specified position.\n    /**\n       \\param mat Matrix to put on the instance image.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n    **/\n    template<typename t>\n    CImg<T>& set_matrix_at(const CImg<t>& mat, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {\n      return set_vector_at(mat,x,y,z);\n    }\n\n    //! Set tensor-valued pixel at specified position.\n    /**\n       \\param ten Tensor to put on the instance image.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n    **/\n    template<typename t>\n    CImg<T>& set_tensor_at(const CImg<t>& ten, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {\n      T *ptrd = data(x,y,z,0);\n      const ulongT siz = (ulongT)_width*_height*_depth;\n      if (ten._height==2) {\n        *ptrd = (T)ten[0]; ptrd+=siz;\n        *ptrd = (T)ten[1]; ptrd+=siz;\n        *ptrd = (T)ten[3];\n      }\n      else {\n        *ptrd = (T)ten[0]; ptrd+=siz;\n        *ptrd = (T)ten[1]; ptrd+=siz;\n        *ptrd = (T)ten[2]; ptrd+=siz;\n        *ptrd = (T)ten[4]; ptrd+=siz;\n        *ptrd = (T)ten[5]; ptrd+=siz;\n        *ptrd = (T)ten[8];\n      }\n      return *this;\n    }\n\n    //! Unroll pixel values along axis \\c y.\n    /**\n       \\note Equivalent to \\code unroll('y'); \\endcode.\n    **/\n    CImg<T>& vector() {\n      return unroll('y');\n    }\n\n    //! Unroll pixel values along axis \\c y \\newinstance.\n    CImg<T> get_vector() const {\n      return get_unroll('y');\n    }\n\n    //! Resize image to become a scalar square matrix.\n    /**\n     **/\n    CImg<T>& matrix() {\n      const ulongT siz = size();\n      switch (siz) {\n      case 1 : break;\n      case 4 : _width = _height = 2; break;\n      case 9 : _width = _height = 3; break;\n      case 16 : _width = _height = 4; break;\n      case 25 : _width = _height = 5; break;\n      case 36 : _width = _height = 6; break;\n      case 49 : _width = _height = 7; break;\n      case 64 : _width = _height = 8; break;\n      case 81 : _width = _height = 9; break;\n      case 100 : _width = _height = 10; break;\n      default : {\n        ulongT i = 11, i2 = i*i;\n        while (i2<siz) { i2+=2*i + 1; ++i; }\n        if (i2==siz) _width = _height = i;\n        else throw CImgInstanceException(_cimg_instance\n                                         \"matrix(): Invalid instance size %u (should be a square integer).\",\n                                         cimg_instance,\n                                         siz);\n      }\n      }\n      return *this;\n    }\n\n    //! Resize image to become a scalar square matrix \\newinstance.\n    CImg<T> get_matrix() const {\n      return (+*this).matrix();\n    }\n\n    //! Resize image to become a symmetric tensor.\n    /**\n     **/\n    CImg<T>& tensor() {\n      return get_tensor().move_to(*this);\n    }\n\n    //! Resize image to become a symmetric tensor \\newinstance.\n    CImg<T> get_tensor() const {\n      CImg<T> res;\n      const ulongT siz = size();\n      switch (siz) {\n      case 1 : break;\n      case 3 :\n        res.assign(2,2);\n        res(0,0) = (*this)(0);\n        res(1,0) = res(0,1) = (*this)(1);\n        res(1,1) = (*this)(2);\n        break;\n      case 6 :\n        res.assign(3,3);\n        res(0,0) = (*this)(0);\n        res(1,0) = res(0,1) = (*this)(1);\n        res(2,0) = res(0,2) = (*this)(2);\n        res(1,1) = (*this)(3);\n        res(2,1) = res(1,2) = (*this)(4);\n        res(2,2) = (*this)(5);\n        break;\n      default :\n        throw CImgInstanceException(_cimg_instance\n                                    \"tensor(): Invalid instance size (does not define a 1x1, 2x2 or 3x3 tensor).\",\n                                    cimg_instance);\n      }\n      return res;\n    }\n\n    //! Resize image to become a diagonal matrix.\n    /**\n       \\note Transform the image as a diagonal matrix so that each of its initial value becomes a diagonal coefficient.\n    **/\n    CImg<T>& diagonal() {\n      return get_diagonal().move_to(*this);\n    }\n\n    //! Resize image to become a diagonal matrix \\newinstance.\n    CImg<T> get_diagonal() const {\n      if (is_empty()) return *this;\n      const unsigned int siz = (unsigned int)size();\n      CImg<T> res(siz,siz,1,1,0);\n      cimg_foroff(*this,off) res((unsigned int)off,(unsigned int)off) = (*this)[off];\n      return res;\n    }\n\n    //! Replace the image by an identity matrix.\n    /**\n       \\note If the instance image is not square, it is resized to a square matrix using its maximum\n       dimension as a reference.\n    **/\n    CImg<T>& identity_matrix() {\n      return identity_matrix(std::max(_width,_height)).move_to(*this);\n    }\n\n    //! Replace the image by an identity matrix \\newinstance.\n    CImg<T> get_identity_matrix() const {\n      return identity_matrix(std::max(_width,_height));\n    }\n\n    //! Fill image with a linear sequence of values.\n    /**\n       \\param a0 Starting value of the sequence.\n       \\param a1 Ending value of the sequence.\n    **/\n    CImg<T>& sequence(const T& a0, const T& a1) {\n      if (is_empty()) return *this;\n      const ulongT siz = size() - 1;\n      T* ptr = _data;\n      if (siz) {\n        const double delta = (double)a1 - (double)a0;\n        cimg_foroff(*this,l) *(ptr++) = (T)(a0 + delta*l/siz);\n      } else *ptr = a0;\n      return *this;\n    }\n\n    //! Fill image with a linear sequence of values \\newinstance.\n    CImg<T> get_sequence(const T& a0, const T& a1) const {\n      return (+*this).sequence(a0,a1);\n    }\n\n    //! Transpose the image, viewed as a matrix.\n    /**\n       \\note Equivalent to \\code permute_axes(\"yxzc\"); \\endcode\n    **/\n    CImg<T>& transpose() {\n      if (_width==1) { _width = _height; _height = 1; return *this; }\n      if (_height==1) { _height = _width; _width = 1; return *this; }\n      if (_width==_height) {\n        cimg_forYZC(*this,y,z,c) for (int x = y; x<width(); ++x) cimg::swap((*this)(x,y,z,c),(*this)(y,x,z,c));\n        return *this;\n      }\n      return get_transpose().move_to(*this);\n    }\n\n    //! Transpose the image, viewed as a matrix \\newinstance.\n    CImg<T> get_transpose() const {\n      return get_permute_axes(\"yxzc\");\n    }\n\n    //! Compute the cross product between two \\c 1x3 images, viewed as 3d vectors.\n    /**\n       \\param img Image used as the second argument of the cross product.\n       \\note The first argument of the cross product is \\c *this.\n     **/\n    template<typename t>\n    CImg<T>& cross(const CImg<t>& img) {\n      if (_width!=1 || _height<3 || img._width!=1 || img._height<3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"cross(): Instance and/or specified image (%u,%u,%u,%u,%p) are not 3d vectors.\",\n                                    cimg_instance,\n                                    img._width,img._height,img._depth,img._spectrum,img._data);\n\n      const T x = (*this)[0], y = (*this)[1], z = (*this)[2];\n      (*this)[0] = (T)(y*img[2] - z*img[1]);\n      (*this)[1] = (T)(z*img[0] - x*img[2]);\n      (*this)[2] = (T)(x*img[1] - y*img[0]);\n      return *this;\n    }\n\n    //! Compute the cross product between two \\c 1x3 images, viewed as 3d vectors \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_cross(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this).cross(img);\n    }\n\n    //! Invert the instance image, viewed as a matrix.\n    /**\n       \\param use_LU Choose the inverting algorithm. Can be:\n       - \\c true: LU-based matrix inversion.\n       - \\c false: SVD-based matrix inversion.\n    **/\n    CImg<T>& invert(const bool use_LU=true) {\n      if (_width!=_height || _depth!=1 || _spectrum!=1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"invert(): Instance is not a square matrix.\",\n                                    cimg_instance);\n#ifdef cimg_use_lapack\n      int INFO = (int)use_LU, N = _width, LWORK = 4*N, *const IPIV = new int[N];\n      Tfloat\n        *const lapA = new Tfloat[N*N],\n        *const WORK = new Tfloat[LWORK];\n      cimg_forXY(*this,k,l) lapA[k*N + l] = (Tfloat)((*this)(k,l));\n      cimg::getrf(N,lapA,IPIV,INFO);\n      if (INFO)\n        cimg::warn(_cimg_instance\n                   \"invert(): LAPACK function dgetrf_() returned error code %d.\",\n                   cimg_instance,\n                   INFO);\n      else {\n        cimg::getri(N,lapA,IPIV,WORK,LWORK,INFO);\n        if (INFO)\n          cimg::warn(_cimg_instance\n                     \"invert(): LAPACK function dgetri_() returned error code %d.\",\n                     cimg_instance,\n                     INFO);\n      }\n      if (!INFO) cimg_forXY(*this,k,l) (*this)(k,l) = (T)(lapA[k*N + l]); else fill(0);\n      delete[] IPIV; delete[] lapA; delete[] WORK;\n#else\n      const double dete = _width>3?-1.0:det();\n      if (dete!=0.0 && _width==2) {\n        const double\n          a = _data[0], c = _data[1],\n          b = _data[2], d = _data[3];\n        _data[0] = (T)(d/dete); _data[1] = (T)(-c/dete);\n        _data[2] = (T)(-b/dete); _data[3] = (T)(a/dete);\n      } else if (dete!=0.0 && _width==3) {\n        const double\n          a = _data[0], d = _data[1], g = _data[2],\n          b = _data[3], e = _data[4], h = _data[5],\n          c = _data[6], f = _data[7], i = _data[8];\n        _data[0] = (T)((i*e-f*h)/dete), _data[1] = (T)((g*f-i*d)/dete), _data[2] = (T)((d*h-g*e)/dete);\n        _data[3] = (T)((h*c-i*b)/dete), _data[4] = (T)((i*a-c*g)/dete), _data[5] = (T)((g*b-a*h)/dete);\n        _data[6] = (T)((b*f-e*c)/dete), _data[7] = (T)((d*c-a*f)/dete), _data[8] = (T)((a*e-d*b)/dete);\n      } else {\n        if (use_LU) { // LU-based inverse computation\n          CImg<Tfloat> A(*this), indx, col(1,_width);\n          bool d;\n          A._LU(indx,d);\n          cimg_forX(*this,j) {\n            col.fill(0);\n            col(j) = 1;\n            col._solve(A,indx);\n            cimg_forX(*this,i) (*this)(j,i) = (T)col(i);\n          }\n        } else { // SVD-based inverse computation\n          CImg<Tfloat> U(_width,_width), S(1,_width), V(_width,_width);\n          SVD(U,S,V,false);\n          U.transpose();\n          cimg_forY(S,k) if (S[k]!=0) S[k]=1/S[k];\n          S.diagonal();\n          *this = V*S*U;\n        }\n      }\n#endif\n      return *this;\n    }\n\n    //! Invert the instance image, viewed as a matrix \\newinstance.\n    CImg<Tfloat> get_invert(const bool use_LU=true) const {\n      return CImg<Tfloat>(*this,false).invert(use_LU);\n    }\n\n    //! Compute the Moore-Penrose pseudo-inverse of the instance image, viewed as a matrix.\n    /**\n    **/\n    CImg<T>& pseudoinvert() {\n      return get_pseudoinvert().move_to(*this);\n    }\n\n    //! Compute the Moore-Penrose pseudo-inverse of the instance image, viewed as a matrix \\newinstance.\n    CImg<Tfloat> get_pseudoinvert() const {\n      CImg<Tfloat> U, S, V;\n      SVD(U,S,V);\n      const Tfloat tolerance = (sizeof(Tfloat)<=4?5.96e-8f:1.11e-16f)*std::max(_width,_height)*S.max();\n      cimg_forX(V,x) {\n        const Tfloat s = S(x), invs = s>tolerance?1/s:0;\n        cimg_forY(V,y) V(x,y)*=invs;\n      }\n      return V*U.transpose();\n    }\n\n    //! Solve a system of linear equations.\n    /**\n       \\param A Matrix of the linear system.\n       \\note Solve \\c AX=B where \\c B=*this.\n    **/\n    template<typename t>\n    CImg<T>& solve(const CImg<t>& A) {\n      if (_depth!=1 || _spectrum!=1 || _height!=A._height || A._depth!=1 || A._spectrum!=1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"solve(): Instance and specified matrix (%u,%u,%u,%u,%p) have \"\n                                    \"incompatible dimensions.\",\n                                    cimg_instance,\n                                    A._width,A._height,A._depth,A._spectrum,A._data);\n      typedef _cimg_Ttfloat Ttfloat;\n      if (A._width==A._height) { // Classical linear system\n        if (_width!=1) {\n          CImg<T> res(_width,A._width);\n          cimg_forX(*this,i) res.draw_image(i,get_column(i).solve(A));\n          return res.move_to(*this);\n        }\n#ifdef cimg_use_lapack\n        char TRANS = 'N';\n        int INFO, N = _height, LWORK = 4*N, *const IPIV = new int[N];\n        Ttfloat\n          *const lapA = new Ttfloat[N*N],\n          *const lapB = new Ttfloat[N],\n          *const WORK = new Ttfloat[LWORK];\n        cimg_forXY(A,k,l) lapA[k*N + l] = (Ttfloat)(A(k,l));\n        cimg_forY(*this,i) lapB[i] = (Ttfloat)((*this)(i));\n        cimg::getrf(N,lapA,IPIV,INFO);\n        if (INFO)\n          cimg::warn(_cimg_instance\n                     \"solve(): LAPACK library function dgetrf_() returned error code %d.\",\n                     cimg_instance,\n                     INFO);\n\n        if (!INFO) {\n          cimg::getrs(TRANS,N,lapA,IPIV,lapB,INFO);\n          if (INFO)\n            cimg::warn(_cimg_instance\n                       \"solve(): LAPACK library function dgetrs_() returned error code %d.\",\n                       cimg_instance,\n                       INFO);\n        }\n        if (!INFO) cimg_forY(*this,i) (*this)(i) = (T)(lapB[i]); else fill(0);\n        delete[] IPIV; delete[] lapA; delete[] lapB; delete[] WORK;\n#else\n        CImg<Ttfloat> lu(A,false);\n        CImg<Ttfloat> indx;\n        bool d;\n        lu._LU(indx,d);\n        _solve(lu,indx);\n#endif\n      } else { // Least-square solution for non-square systems.\n#ifdef cimg_use_lapack\n        if (_width!=1) {\n          CImg<T> res(_width,A._width);\n          cimg_forX(*this,i) res.draw_image(i,get_column(i).solve(A));\n          return res.move_to(*this);\n        }\n        char TRANS = 'N';\n        int INFO, N = A._width, M = A._height, LWORK = -1, LDA = M, LDB = M, NRHS = _width;\n        Ttfloat WORK_QUERY;\n        Ttfloat\n          * const lapA = new Ttfloat[M*N],\n          * const lapB = new Ttfloat[M*NRHS];\n        cimg::sgels(TRANS, M, N, NRHS, lapA, LDA, lapB, LDB, &WORK_QUERY, LWORK, INFO);\n        LWORK = (int) WORK_QUERY;\n        Ttfloat *const WORK = new Ttfloat[LWORK];\n        cimg_forXY(A,k,l) lapA[k*M + l] = (Ttfloat)(A(k,l));\n        cimg_forXY(*this,k,l) lapB[k*M + l] = (Ttfloat)((*this)(k,l));\n        cimg::sgels(TRANS, M, N, NRHS, lapA, LDA, lapB, LDB, WORK, LWORK, INFO);\n        if (INFO != 0)\n          cimg::warn(_cimg_instance\n                     \"solve(): LAPACK library function sgels() returned error code %d.\",\n                     cimg_instance,\n                     INFO);\n        assign(NRHS, N);\n        if (!INFO)\n          cimg_forXY(*this,k,l) (*this)(k,l) = (T)lapB[k*M + l];\n        else\n          assign(A.get_pseudoinvert()*(*this));\n        delete[] lapA; delete[] lapB; delete[] WORK;\n#else\n        assign(A.get_pseudoinvert()*(*this));\n#endif\n      }\n      return *this;\n    }\n\n    //! Solve a system of linear equations \\newinstance.\n    template<typename t>\n    CImg<_cimg_Ttfloat> get_solve(const CImg<t>& A) const {\n      return CImg<_cimg_Ttfloat>(*this,false).solve(A);\n    }\n\n    template<typename t, typename ti>\n    CImg<T>& _solve(const CImg<t>& A, const CImg<ti>& indx) {\n      typedef _cimg_Ttfloat Ttfloat;\n      const int N = (int)size();\n      int ii = -1;\n      Ttfloat sum;\n      for (int i = 0; i<N; ++i) {\n        const int ip = (int)indx[i];\n        Ttfloat sum = (*this)(ip);\n        (*this)(ip) = (*this)(i);\n        if (ii>=0) for (int j = ii; j<=i - 1; ++j) sum-=A(j,i)*(*this)(j);\n        else if (sum!=0) ii = i;\n        (*this)(i) = (T)sum;\n      }\n      for (int i = N - 1; i>=0; --i) {\n        sum = (*this)(i);\n        for (int j = i + 1; j<N; ++j) sum-=A(j,i)*(*this)(j);\n        (*this)(i) = (T)(sum/A(i,i));\n      }\n      return *this;\n    }\n\n    //! Solve a tridiagonal system of linear equations.\n    /**\n       \\param A Coefficients of the tridiagonal system.\n       A is a tridiagonal matrix A = [ b0,c0,0,...; a1,b1,c1,0,... ; ... ; ...,0,aN,bN ],\n       stored as a 3 columns matrix\n       \\note Solve AX=B where \\c B=*this, using the Thomas algorithm.\n    **/\n    template<typename t>\n    CImg<T>& solve_tridiagonal(const CImg<t>& A) {\n      const unsigned int siz = (unsigned int)size();\n      if (A._width!=3 || A._height!=siz)\n        throw CImgArgumentException(_cimg_instance\n                                    \"solve_tridiagonal(): Instance and tridiagonal matrix \"\n                                    \"(%u,%u,%u,%u,%p) have incompatible dimensions.\",\n                                    cimg_instance,\n                                    A._width,A._height,A._depth,A._spectrum,A._data);\n      typedef _cimg_Ttfloat Ttfloat;\n      const Ttfloat epsilon = 1e-4f;\n      CImg<Ttfloat> B = A.get_column(1), V(*this,false);\n      for (int i = 1; i<(int)siz; ++i) {\n        const Ttfloat m = A(0,i)/(B[i - 1]?B[i - 1]:epsilon);\n        B[i] -= m*A(2,i - 1);\n        V[i] -= m*V[i - 1];\n      }\n      (*this)[siz - 1] = (T)(V[siz - 1]/(B[siz - 1]?B[siz - 1]:epsilon));\n      for (int i = (int)siz - 2; i>=0; --i) (*this)[i] = (T)((V[i] - A(2,i)*(*this)[i + 1])/(B[i]?B[i]:epsilon));\n      return *this;\n    }\n\n    //! Solve a tridiagonal system of linear equations \\newinstance.\n    template<typename t>\n    CImg<_cimg_Ttfloat> get_solve_tridiagonal(const CImg<t>& A) const {\n      return CImg<_cimg_Ttfloat>(*this,false).solve_tridiagonal(A);\n    }\n\n    //! Compute eigenvalues and eigenvectors of the instance image, viewed as a matrix.\n    /**\n       \\param[out] val Vector of the estimated eigenvalues, in decreasing order.\n       \\param[out] vec Matrix of the estimated eigenvectors, sorted by columns.\n    **/\n    template<typename t>\n    const CImg<T>& eigen(CImg<t>& val, CImg<t> &vec) const {\n      if (is_empty()) { val.assign(); vec.assign(); }\n      else {\n        if (_width!=_height || _depth>1 || _spectrum>1)\n          throw CImgInstanceException(_cimg_instance\n                                      \"eigen(): Instance is not a square matrix.\",\n                                      cimg_instance);\n\n        if (val.size()<(ulongT)_width) val.assign(1,_width);\n        if (vec.size()<(ulongT)_width*_width) vec.assign(_width,_width);\n        switch (_width) {\n        case 1 : { val[0] = (t)(*this)[0]; vec[0] = (t)1; } break;\n        case 2 : {\n          const double a = (*this)[0], b = (*this)[1], c = (*this)[2], d = (*this)[3], e = a + d;\n          double f = e*e - 4*(a*d - b*c);\n          if (f<0)\n            cimg::warn(_cimg_instance\n                       \"eigen(): Complex eigenvalues found.\",\n                       cimg_instance);\n\n          f = std::sqrt(f);\n          const double\n            l1 = 0.5*(e - f),\n            l2 = 0.5*(e + f),\n            b2 = b*b,\n            norm1 = std::sqrt(cimg::sqr(l2 - a) + b2),\n            norm2 = std::sqrt(cimg::sqr(l1 - a) + b2);\n          val[0] = (t)l2;\n          val[1] = (t)l1;\n          if (norm1>0) { vec(0,0) = (t)(b/norm1); vec(0,1) = (t)((l2 - a)/norm1); } else { vec(0,0) = 1; vec(0,1) = 0; }\n          if (norm2>0) { vec(1,0) = (t)(b/norm2); vec(1,1) = (t)((l1 - a)/norm2); } else { vec(1,0) = 1; vec(1,1) = 0; }\n        } break;\n        default :\n          throw CImgInstanceException(_cimg_instance\n                                      \"eigen(): Eigenvalues computation of general matrices is limited \"\n                                      \"to 2x2 matrices.\",\n                                      cimg_instance);\n        }\n      }\n      return *this;\n    }\n\n    //! Compute eigenvalues and eigenvectors of the instance image, viewed as a matrix.\n    /**\n       \\return A list of two images <tt>[val; vec]</tt>, whose meaning is similar as in eigen(CImg<t>&,CImg<t>&) const.\n    **/\n    CImgList<Tfloat> get_eigen() const {\n      CImgList<Tfloat> res(2);\n      eigen(res[0],res[1]);\n      return res;\n    }\n\n    //! Compute eigenvalues and eigenvectors of the instance image, viewed as a symmetric matrix.\n    /**\n       \\param[out] val Vector of the estimated eigenvalues, in decreasing order.\n       \\param[out] vec Matrix of the estimated eigenvectors, sorted by columns.\n    **/\n    template<typename t>\n    const CImg<T>& symmetric_eigen(CImg<t>& val, CImg<t>& vec) const {\n      if (is_empty()) { val.assign(); vec.assign(); }\n      else {\n#ifdef cimg_use_lapack\n        char JOB = 'V', UPLO = 'U';\n        int N = _width, LWORK = 4*N, INFO;\n        Tfloat\n          *const lapA = new Tfloat[N*N],\n          *const lapW = new Tfloat[N],\n          *const WORK = new Tfloat[LWORK];\n        cimg_forXY(*this,k,l) lapA[k*N + l] = (Tfloat)((*this)(k,l));\n        cimg::syev(JOB,UPLO,N,lapA,lapW,WORK,LWORK,INFO);\n        if (INFO)\n          cimg::warn(_cimg_instance\n                     \"symmetric_eigen(): LAPACK library function dsyev_() returned error code %d.\",\n                     cimg_instance,\n                     INFO);\n\n        val.assign(1,N);\n        vec.assign(N,N);\n        if (!INFO) {\n          cimg_forY(val,i) val(i) = (T)lapW[N - 1 -i];\n          cimg_forXY(vec,k,l) vec(k,l) = (T)(lapA[(N - 1 - k)*N + l]);\n        } else { val.fill(0); vec.fill(0); }\n        delete[] lapA; delete[] lapW; delete[] WORK;\n#else\n        if (_width!=_height || _depth>1 || _spectrum>1)\n          throw CImgInstanceException(_cimg_instance\n                                      \"eigen(): Instance is not a square matrix.\",\n                                      cimg_instance);\n\n        val.assign(1,_width);\n        if (vec._data) vec.assign(_width,_width);\n        if (_width<3) {\n          eigen(val,vec);\n          if (_width==2) { vec[1] = -vec[2]; vec[3] = vec[0]; } // Force orthogonality for 2x2 matrices.\n          return *this;\n        }\n        CImg<t> V(_width,_width);\n        Tfloat M = 0, m = (Tfloat)min_max(M), maxabs = cimg::max((Tfloat)1.0f,cimg::abs(m),cimg::abs(M));\n        (CImg<Tfloat>(*this,false)/=maxabs).SVD(vec,val,V,false);\n        if (maxabs!=1) val*=maxabs;\n\n        bool is_ambiguous = false;\n        float eig = 0;\n        cimg_forY(val,p) {       // check for ambiguous cases.\n          if (val[p]>eig) eig = (float)val[p];\n          t scal = 0;\n          cimg_forY(vec,y) scal+=vec(p,y)*V(p,y);\n          if (cimg::abs(scal)<0.9f) is_ambiguous = true;\n          if (scal<0) val[p] = -val[p];\n        }\n        if (is_ambiguous) {\n          ++(eig*=2);\n          SVD(vec,val,V,false,40,eig);\n          val-=eig;\n        }\n        CImg<intT> permutations;  // sort eigenvalues in decreasing order\n        CImg<t> tmp(_width);\n        val.sort(permutations,false);\n        cimg_forY(vec,k) {\n          cimg_forY(permutations,y) tmp(y) = vec(permutations(y),k);\n          std::memcpy(vec.data(0,k),tmp._data,sizeof(t)*_width);\n        }\n#endif\n      }\n      return *this;\n    }\n\n    //! Compute eigenvalues and eigenvectors of the instance image, viewed as a symmetric matrix.\n    /**\n       \\return A list of two images <tt>[val; vec]</tt>, whose meaning are similar as in\n         symmetric_eigen(CImg<t>&,CImg<t>&) const.\n    **/\n    CImgList<Tfloat> get_symmetric_eigen() const {\n      CImgList<Tfloat> res(2);\n      symmetric_eigen(res[0],res[1]);\n      return res;\n    }\n\n    //! Sort pixel values and get sorting permutations.\n    /**\n       \\param[out] permutations Permutation map used for the sorting.\n       \\param is_increasing Tells if pixel values are sorted in an increasing (\\c true) or decreasing (\\c false) way.\n    **/\n    template<typename t>\n    CImg<T>& sort(CImg<t>& permutations, const bool is_increasing=true) {\n      permutations.assign(_width,_height,_depth,_spectrum);\n      if (is_empty()) return *this;\n      cimg_foroff(permutations,off) permutations[off] = (t)off;\n      return _quicksort(0,size() - 1,permutations,is_increasing,true);\n    }\n\n    //! Sort pixel values and get sorting permutations \\newinstance.\n    template<typename t>\n    CImg<T> get_sort(CImg<t>& permutations, const bool is_increasing=true) const {\n      return (+*this).sort(permutations,is_increasing);\n    }\n\n    //! Sort pixel values.\n    /**\n       \\param is_increasing Tells if pixel values are sorted in an increasing (\\c true) or decreasing (\\c false) way.\n       \\param axis Tells if the value sorting must be done along a specific axis. Can be:\n       - \\c 0: All pixel values are sorted, independently on their initial position.\n       - \\c 'x': Image columns are sorted, according to the first value in each column.\n       - \\c 'y': Image rows are sorted, according to the first value in each row.\n       - \\c 'z': Image slices are sorted, according to the first value in each slice.\n       - \\c 'c': Image channels are sorted, according to the first value in each channel.\n    **/\n    CImg<T>& sort(const bool is_increasing=true, const char axis=0) {\n      if (is_empty()) return *this;\n      CImg<uintT> perm;\n      switch (cimg::lowercase(axis)) {\n      case 0 :\n        _quicksort(0,size() - 1,perm,is_increasing,false);\n        break;\n      case 'x' : {\n        perm.assign(_width);\n        get_crop(0,0,0,0,_width - 1,0,0,0).sort(perm,is_increasing);\n        CImg<T> img(*this,false);\n        cimg_forXYZC(*this,x,y,z,c) (*this)(x,y,z,c) = img(perm[x],y,z,c);\n      } break;\n      case 'y' : {\n        perm.assign(_height);\n        get_crop(0,0,0,0,0,_height - 1,0,0).sort(perm,is_increasing);\n        CImg<T> img(*this,false);\n        cimg_forXYZC(*this,x,y,z,c) (*this)(x,y,z,c) = img(x,perm[y],z,c);\n      } break;\n      case 'z' : {\n        perm.assign(_depth);\n        get_crop(0,0,0,0,0,0,_depth - 1,0).sort(perm,is_increasing);\n        CImg<T> img(*this,false);\n        cimg_forXYZC(*this,x,y,z,c) (*this)(x,y,z,c) = img(x,y,perm[z],c);\n      } break;\n      case 'c' : {\n        perm.assign(_spectrum);\n        get_crop(0,0,0,0,0,0,0,_spectrum - 1).sort(perm,is_increasing);\n        CImg<T> img(*this,false);\n        cimg_forXYZC(*this,x,y,z,c) (*this)(x,y,z,c) = img(x,y,z,perm[c]);\n      } break;\n      default :\n        throw CImgArgumentException(_cimg_instance\n                                    \"sort(): Invalid specified axis '%c' \"\n                                    \"(should be { x | y | z | c }).\",\n                                    cimg_instance,axis);\n      }\n      return *this;\n    }\n\n    //! Sort pixel values \\newinstance.\n    CImg<T> get_sort(const bool is_increasing=true, const char axis=0) const {\n      return (+*this).sort(is_increasing,axis);\n    }\n\n    template<typename t>\n    CImg<T>& _quicksort(const long indm, const long indM, CImg<t>& permutations,\n                        const bool is_increasing, const bool is_permutations) {\n      if (indm<indM) {\n        const long mid = (indm + indM)/2;\n        if (is_increasing) {\n          if ((*this)[indm]>(*this)[mid]) {\n            cimg::swap((*this)[indm],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indm],permutations[mid]);\n          }\n          if ((*this)[mid]>(*this)[indM]) {\n            cimg::swap((*this)[indM],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indM],permutations[mid]);\n          }\n          if ((*this)[indm]>(*this)[mid]) {\n            cimg::swap((*this)[indm],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indm],permutations[mid]);\n          }\n        } else {\n          if ((*this)[indm]<(*this)[mid]) {\n            cimg::swap((*this)[indm],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indm],permutations[mid]);\n          }\n          if ((*this)[mid]<(*this)[indM]) {\n            cimg::swap((*this)[indM],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indM],permutations[mid]);\n          }\n          if ((*this)[indm]<(*this)[mid]) {\n            cimg::swap((*this)[indm],(*this)[mid]);\n            if (is_permutations) cimg::swap(permutations[indm],permutations[mid]);\n          }\n        }\n        if (indM - indm>=3) {\n          const T pivot = (*this)[mid];\n          long i = indm, j = indM;\n          if (is_increasing) {\n            do {\n              while ((*this)[i]<pivot) ++i;\n              while ((*this)[j]>pivot) --j;\n              if (i<=j) {\n                if (is_permutations) cimg::swap(permutations[i],permutations[j]);\n                cimg::swap((*this)[i++],(*this)[j--]);\n              }\n            } while (i<=j);\n          } else {\n            do {\n              while ((*this)[i]>pivot) ++i;\n              while ((*this)[j]<pivot) --j;\n              if (i<=j) {\n                if (is_permutations) cimg::swap(permutations[i],permutations[j]);\n                cimg::swap((*this)[i++],(*this)[j--]);\n              }\n            } while (i<=j);\n          }\n          if (indm<j) _quicksort(indm,j,permutations,is_increasing,is_permutations);\n          if (i<indM) _quicksort(i,indM,permutations,is_increasing,is_permutations);\n        }\n      }\n      return *this;\n    }\n\n    //! Compute the SVD of the instance image, viewed as a general matrix.\n    /**\n       Compute the SVD decomposition \\c *this=U*S*V' where \\c U and \\c V are orthogonal matrices\n       and \\c S is a diagonal matrix. \\c V' denotes the matrix transpose of \\c V.\n       \\param[out] U First matrix of the SVD product.\n       \\param[out] S Coefficients of the second (diagonal) matrix of the SVD product.\n         These coefficients are stored as a vector.\n       \\param[out] V Third matrix of the SVD product.\n       \\param sorting Tells if the diagonal coefficients are sorted (in decreasing order).\n       \\param max_iteration Maximum number of iterations considered for the algorithm convergence.\n       \\param lambda Epsilon used for the algorithm convergence.\n       \\note The instance matrix can be computed from \\c U,\\c S and \\c V by\n       \\code\n       const CImg<> A;  // Input matrix (assumed to contain some values).\n       CImg<> U,S,V;\n       A.SVD(U,S,V)\n       \\endcode\n    **/\n    template<typename t>\n    const CImg<T>& SVD(CImg<t>& U, CImg<t>& S, CImg<t>& V, const bool sorting=true,\n                       const unsigned int max_iteration=40, const float lambda=0) const {\n      if (is_empty()) { U.assign(); S.assign(); V.assign(); }\n      else {\n        U = *this;\n        if (lambda!=0) {\n          const unsigned int delta = std::min(U._width,U._height);\n          for (unsigned int i = 0; i<delta; ++i) U(i,i) = (t)(U(i,i) + lambda);\n        }\n        if (S.size()<_width) S.assign(1,_width);\n        if (V._width<_width || V._height<_height) V.assign(_width,_width);\n        CImg<t> rv1(_width);\n        t anorm = 0, c, f, g = 0, h, s, scale = 0;\n        int l = 0, nm = 0;\n\n        cimg_forX(U,i) {\n          l = i + 1; rv1[i] = scale*g; g = s = scale = 0;\n          if (i<height()) {\n            for (int k = i; k<height(); ++k) scale+=cimg::abs(U(i,k));\n            if (scale) {\n              for (int k = i; k<height(); ++k) { U(i,k)/=scale; s+=U(i,k)*U(i,k); }\n              f = U(i,i); g = (t)((f>=0?-1:1)*std::sqrt(s)); h=f*g-s; U(i,i) = f-g;\n              for (int j = l; j<width(); ++j) {\n                s = 0;\n                for (int k=i; k<height(); ++k) s+=U(i,k)*U(j,k);\n                f = s/h;\n                for (int k = i; k<height(); ++k) U(j,k)+=f*U(i,k);\n              }\n              for (int k = i; k<height(); ++k) U(i,k)*=scale;\n            }\n          }\n          S[i]=scale*g;\n\n          g = s = scale = 0;\n          if (i<height() && i!=width() - 1) {\n            for (int k = l; k<width(); ++k) scale+=cimg::abs(U(k,i));\n            if (scale) {\n              for (int k = l; k<width(); ++k) { U(k,i)/= scale; s+=U(k,i)*U(k,i); }\n              f = U(l,i); g = (t)((f>=0?-1:1)*std::sqrt(s)); h = f*g-s; U(l,i) = f-g;\n              for (int k = l; k<width(); ++k) rv1[k]=U(k,i)/h;\n              for (int j = l; j<height(); ++j) {\n                s = 0;\n                for (int k = l; k<width(); ++k) s+=U(k,j)*U(k,i);\n                for (int k = l; k<width(); ++k) U(k,j)+=s*rv1[k];\n              }\n              for (int k = l; k<width(); ++k) U(k,i)*=scale;\n            }\n          }\n          anorm = (t)std::max((float)anorm,(float)(cimg::abs(S[i]) + cimg::abs(rv1[i])));\n        }\n\n        for (int i = width() - 1; i>=0; --i) {\n          if (i<width()-1) {\n            if (g) {\n              for (int j = l; j<width(); ++j) V(i,j) =(U(j,i)/U(l,i))/g;\n              for (int j = l; j<width(); ++j) {\n                s = 0;\n                for (int k = l; k<width(); ++k) s+=U(k,i)*V(j,k);\n                for (int k = l; k<width(); ++k) V(j,k)+=s*V(i,k);\n              }\n            }\n            for (int j = l; j<width(); ++j) V(j,i) = V(i,j) = (t)0.0;\n          }\n          V(i,i) = (t)1.0; g = rv1[i]; l = i;\n        }\n\n        for (int i = std::min(width(),height()) - 1; i>=0; --i) {\n          l = i + 1; g = S[i];\n          for (int j = l; j<width(); ++j) U(j,i) = 0;\n          if (g) {\n            g = 1/g;\n            for (int j = l; j<width(); ++j) {\n              s = 0; for (int k = l; k<height(); ++k) s+=U(i,k)*U(j,k);\n              f = (s/U(i,i))*g;\n              for (int k = i; k<height(); ++k) U(j,k)+=f*U(i,k);\n            }\n            for (int j = i; j<height(); ++j) U(i,j)*= g;\n          } else for (int j = i; j<height(); ++j) U(i,j) = 0;\n          ++U(i,i);\n        }\n\n        for (int k = width() - 1; k>=0; --k) {\n          for (unsigned int its = 0; its<max_iteration; ++its) {\n            bool flag = true;\n            for (l = k; l>=1; --l) {\n              nm = l - 1;\n              if ((cimg::abs(rv1[l]) + anorm)==anorm) { flag = false; break; }\n              if ((cimg::abs(S[nm]) + anorm)==anorm) break;\n            }\n            if (flag) {\n              c = 0; s = 1;\n              for (int i = l; i<=k; ++i) {\n                f = s*rv1[i]; rv1[i] = c*rv1[i];\n                if ((cimg::abs(f) + anorm)==anorm) break;\n                g = S[i]; h = cimg::_hypot(f,g); S[i] = h; h = 1/h; c = g*h; s = -f*h;\n                cimg_forY(U,j) { const t y = U(nm,j), z = U(i,j); U(nm,j) = y*c + z*s; U(i,j) = z*c - y*s; }\n              }\n            }\n\n            const t z = S[k];\n            if (l==k) { if (z<0) { S[k] = -z; cimg_forX(U,j) V(k,j) = -V(k,j); } break; }\n            nm = k - 1;\n            t x = S[l], y = S[nm];\n            g = rv1[nm]; h = rv1[k];\n            f = ((y - z)*(y + z)+(g - h)*(g + h))/std::max((t)1e-25,2*h*y);\n            g = cimg::_hypot(f,(t)1);\n            f = ((x - z)*(x + z)+h*((y/(f + (f>=0?g:-g))) - h))/std::max((t)1e-25,x);\n            c = s = 1;\n            for (int j = l; j<=nm; ++j) {\n              const int i = j + 1;\n              g = rv1[i]; h = s*g; g = c*g;\n              t y = S[i];\n              t z = cimg::_hypot(f,h);\n              rv1[j] = z; c = f/std::max((t)1e-25,z); s = h/std::max((t)1e-25,z);\n              f = x*c + g*s; g = g*c - x*s; h = y*s; y*=c;\n              cimg_forX(U,jj) { const t x = V(j,jj), z = V(i,jj); V(j,jj) = x*c + z*s; V(i,jj) = z*c - x*s; }\n              z = cimg::_hypot(f,h); S[j] = z;\n              if (z) { z = 1/std::max((t)1e-25,z); c = f*z; s = h*z; }\n              f = c*g + s*y; x = c*y - s*g;\n              cimg_forY(U,jj) { const t y = U(j,jj); z = U(i,jj); U(j,jj) = y*c + z*s; U(i,jj) = z*c - y*s; }\n            }\n            rv1[l] = 0; rv1[k]=f; S[k]=x;\n          }\n        }\n\n        if (sorting) {\n          CImg<intT> permutations;\n          CImg<t> tmp(_width);\n          S.sort(permutations,false);\n          cimg_forY(U,k) {\n            cimg_forY(permutations,y) tmp(y) = U(permutations(y),k);\n            std::memcpy(U.data(0,k),tmp._data,sizeof(t)*_width);\n          }\n          cimg_forY(V,k) {\n            cimg_forY(permutations,y) tmp(y) = V(permutations(y),k);\n            std::memcpy(V.data(0,k),tmp._data,sizeof(t)*_width);\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Compute the SVD of the instance image, viewed as a general matrix.\n    /**\n       \\return A list of three images <tt>[U; S; V]</tt>, whose meaning is similar as in\n         SVD(CImg<t>&,CImg<t>&,CImg<t>&,bool,unsigned int,float) const.\n    **/\n    CImgList<Tfloat> get_SVD(const bool sorting=true,\n                             const unsigned int max_iteration=40, const float lambda=0) const {\n      CImgList<Tfloat> res(3);\n      SVD(res[0],res[1],res[2],sorting,max_iteration,lambda);\n      return res;\n    }\n\n    // [internal] Compute the LU decomposition of a permuted matrix.\n    template<typename t>\n    CImg<T>& _LU(CImg<t>& indx, bool& d) {\n      const int N = width();\n      int imax = 0;\n      CImg<Tfloat> vv(N);\n      indx.assign(N);\n      d = true;\n      cimg_forX(*this,i) {\n        Tfloat vmax = 0;\n        cimg_forX(*this,j) {\n          const Tfloat tmp = cimg::abs((*this)(j,i));\n          if (tmp>vmax) vmax = tmp;\n        }\n        if (vmax==0) { indx.fill(0); return fill(0); }\n        vv[i] = 1/vmax;\n      }\n      cimg_forX(*this,j) {\n        for (int i = 0; i<j; ++i) {\n          Tfloat sum=(*this)(j,i);\n          for (int k = 0; k<i; ++k) sum-=(*this)(k,i)*(*this)(j,k);\n          (*this)(j,i) = (T)sum;\n        }\n        Tfloat vmax = 0;\n        for (int i = j; i<width(); ++i) {\n          Tfloat sum=(*this)(j,i);\n          for (int k = 0; k<j; ++k) sum-=(*this)(k,i)*(*this)(j,k);\n          (*this)(j,i) = (T)sum;\n          const Tfloat tmp = vv[i]*cimg::abs(sum);\n          if (tmp>=vmax) { vmax=tmp; imax=i; }\n        }\n        if (j!=imax) {\n          cimg_forX(*this,k) cimg::swap((*this)(k,imax),(*this)(k,j));\n          d =!d;\n          vv[imax] = vv[j];\n        }\n        indx[j] = (t)imax;\n        if ((*this)(j,j)==0) (*this)(j,j) = (T)1e-20;\n        if (j<N) {\n          const Tfloat tmp = 1/(Tfloat)(*this)(j,j);\n          for (int i = j + 1; i<N; ++i) (*this)(j,i) = (T)((*this)(j,i)*tmp);\n        }\n      }\n      return *this;\n    }\n\n    //! Compute minimal path in a graph, using the Dijkstra algorithm.\n    /**\n       \\param distance An object having operator()(unsigned int i, unsigned int j) which returns distance\n         between two nodes (i,j).\n       \\param nb_nodes Number of graph nodes.\n       \\param starting_node Indice of the starting node.\n       \\param ending_node Indice of the ending node (set to ~0U to ignore ending node).\n       \\param previous_node Array that gives the previous node indice in the path to the starting node\n         (optional parameter).\n       \\return Array of distances of each node to the starting node.\n    **/\n    template<typename tf, typename t>\n    static CImg<T> dijkstra(const tf& distance, const unsigned int nb_nodes,\n                            const unsigned int starting_node, const unsigned int ending_node,\n                            CImg<t>& previous_node) {\n      if (starting_node>=nb_nodes)\n        throw CImgArgumentException(\"CImg<%s>::dijkstra(): Specified indice of starting node %u is higher \"\n                                    \"than number of nodes %u.\",\n                                    pixel_type(),starting_node,nb_nodes);\n      CImg<T> dist(1,nb_nodes,1,1,cimg::type<T>::max());\n      dist(starting_node) = 0;\n      previous_node.assign(1,nb_nodes,1,1,(t)-1);\n      previous_node(starting_node) = (t)starting_node;\n      CImg<uintT> Q(nb_nodes);\n      cimg_forX(Q,u) Q(u) = (unsigned int)u;\n      cimg::swap(Q(starting_node),Q(0));\n      unsigned int sizeQ = nb_nodes;\n      while (sizeQ) {\n        // Update neighbors from minimal vertex\n        const unsigned int umin = Q(0);\n        if (umin==ending_node) sizeQ = 0;\n        else {\n          const T dmin = dist(umin);\n          const T infty = cimg::type<T>::max();\n          for (unsigned int q = 1; q<sizeQ; ++q) {\n            const unsigned int v = Q(q);\n            const T d = (T)distance(v,umin);\n            if (d<infty) {\n              const T alt = dmin + d;\n              if (alt<dist(v)) {\n                dist(v) = alt;\n                previous_node(v) = (t)umin;\n                const T distpos = dist(Q(q));\n                for (unsigned int pos = q, par = 0; pos && distpos<dist(Q(par=(pos + 1)/2 - 1)); pos=par)\n                  cimg::swap(Q(pos),Q(par));\n              }\n            }\n          }\n          // Remove minimal vertex from queue\n          Q(0) = Q(--sizeQ);\n          const T distpos = dist(Q(0));\n          for (unsigned int pos = 0, left = 0, right = 0;\n               ((right=2*(pos + 1),(left=right - 1))<sizeQ && distpos>dist(Q(left))) ||\n                 (right<sizeQ && distpos>dist(Q(right)));) {\n            if (right<sizeQ) {\n              if (dist(Q(left))<dist(Q(right))) { cimg::swap(Q(pos),Q(left)); pos = left; }\n              else { cimg::swap(Q(pos),Q(right)); pos = right; }\n            } else { cimg::swap(Q(pos),Q(left)); pos = left; }\n          }\n        }\n      }\n      return dist;\n    }\n\n    //! Return minimal path in a graph, using the Dijkstra algorithm.\n    template<typename tf, typename t>\n    static CImg<T> dijkstra(const tf& distance, const unsigned int nb_nodes,\n                            const unsigned int starting_node, const unsigned int ending_node=~0U) {\n      CImg<uintT> foo;\n      return dijkstra(distance,nb_nodes,starting_node,ending_node,foo);\n    }\n\n    //! Return minimal path in a graph, using the Dijkstra algorithm.\n    /**\n       \\param starting_node Indice of the starting node.\n       \\param ending_node Indice of the ending node.\n       \\param previous_node Array that gives the previous node indice in the path to the starting node\n         (optional parameter).\n       \\return Array of distances of each node to the starting node.\n       \\note image instance corresponds to the adjacency matrix of the graph.\n    **/\n    template<typename t>\n    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node,\n                      CImg<t>& previous_node) {\n      return get_dijkstra(starting_node,ending_node,previous_node).move_to(*this);\n    }\n\n    //! Return minimal path in a graph, using the Dijkstra algorithm \\newinstance.\n    template<typename t>\n    CImg<T> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node,\n                         CImg<t>& previous_node) const {\n      if (_width!=_height || _depth!=1 || _spectrum!=1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"dijkstra(): Instance is not a graph adjacency matrix.\",\n                                    cimg_instance);\n\n      return dijkstra(*this,_width,starting_node,ending_node,previous_node);\n    }\n\n    //! Return minimal path in a graph, using the Dijkstra algorithm.\n    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) {\n      return get_dijkstra(starting_node,ending_node).move_to(*this);\n    }\n\n    //! Return minimal path in a graph, using the Dijkstra algorithm \\newinstance.\n    CImg<Tfloat> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) const {\n      CImg<uintT> foo;\n      return get_dijkstra(starting_node,ending_node,foo);\n    }\n\n    //! Return an image containing the ascii codes of the specified  string.\n    /**\n       \\param str input C-string to encode as an image.\n       \\param is_last_zero Tells if the ending \\c '0' character appear in the resulting image.\n    **/\n    static CImg<T> string(const char *const str, const bool is_last_zero=true, const bool is_shared=false) {\n      if (!str) return CImg<T>();\n      return CImg<T>(str,(unsigned int)std::strlen(str) + (is_last_zero?1:0),1,1,1,is_shared);\n    }\n\n    //! Return a \\c 1x1 image containing specified value.\n    /**\n       \\param a0 First vector value.\n    **/\n    static CImg<T> vector(const T& a0) {\n      CImg<T> r(1,1);\n      r[0] = a0;\n      return r;\n    }\n\n    //! Return a \\c 1x2 image containing specified values.\n    /**\n       \\param a0 First vector value.\n       \\param a1 Second vector value.\n    **/\n    static CImg<T> vector(const T& a0, const T& a1) {\n      CImg<T> r(1,2); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1;\n      return r;\n    }\n\n    //! Return a \\c 1x3 image containing specified values.\n    /**\n       \\param a0 First vector value.\n       \\param a1 Second vector value.\n       \\param a2 Third vector value.\n    **/\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2) {\n      CImg<T> r(1,3); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2;\n      return r;\n    }\n\n    //! Return a \\c 1x4 image containing specified values.\n    /**\n       \\param a0 First vector value.\n       \\param a1 Second vector value.\n       \\param a2 Third vector value.\n       \\param a3 Fourth vector value.\n    **/\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3) {\n      CImg<T> r(1,4); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      return r;\n    }\n\n    //! Return a \\c 1x5 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {\n      CImg<T> r(1,5); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3; *(ptr++) = a4;\n      return r;\n    }\n\n    //! Return a \\c 1x6 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4, const T& a5) {\n      CImg<T> r(1,6); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3; *(ptr++) = a4; *(ptr++) = a5;\n      return r;\n    }\n\n    //! Return a \\c 1x7 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6) {\n      CImg<T> r(1,7); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6;\n      return r;\n    }\n\n    //! Return a \\c 1x8 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7) {\n      CImg<T> r(1,8); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      return r;\n    }\n\n    //! Return a \\c 1x9 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8) {\n      CImg<T> r(1,9); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8;\n      return r;\n    }\n\n    //! Return a \\c 1x10 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9) {\n      CImg<T> r(1,10); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9;\n      return r;\n    }\n\n    //! Return a \\c 1x11 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10) {\n      CImg<T> r(1,11); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10;\n      return r;\n    }\n\n    //! Return a \\c 1x12 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11) {\n      CImg<T> r(1,12); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      return r;\n    }\n\n    //! Return a \\c 1x13 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11,\n                          const T& a12) {\n      CImg<T> r(1,13); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      *(ptr++) = a12;\n      return r;\n    }\n\n    //! Return a \\c 1x14 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11,\n                          const T& a12, const T& a13) {\n      CImg<T> r(1,14); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      *(ptr++) = a12; *(ptr++) = a13;\n      return r;\n    }\n\n    //! Return a \\c 1x15 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11,\n                          const T& a12, const T& a13, const T& a14) {\n      CImg<T> r(1,15); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      *(ptr++) = a12; *(ptr++) = a13; *(ptr++) = a14;\n      return r;\n    }\n\n    //! Return a \\c 1x16 image containing specified values.\n    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11,\n                          const T& a12, const T& a13, const T& a14, const T& a15) {\n      CImg<T> r(1,16); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      *(ptr++) = a12; *(ptr++) = a13; *(ptr++) = a14; *(ptr++) = a15;\n      return r;\n    }\n\n    //! Return a 1x1 matrix containing specified coefficients.\n    /**\n       \\param a0 First matrix value.\n       \\note Equivalent to vector(const T&).\n    **/\n    static CImg<T> matrix(const T& a0) {\n      return vector(a0);\n    }\n\n    //! Return a 2x2 matrix containing specified coefficients.\n    /**\n       \\param a0 First matrix value.\n       \\param a1 Second matrix value.\n       \\param a2 Third matrix value.\n       \\param a3 Fourth matrix value.\n    **/\n    static CImg<T> matrix(const T& a0, const T& a1,\n                          const T& a2, const T& a3) {\n      CImg<T> r(2,2); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1;\n      *(ptr++) = a2; *(ptr++) = a3;\n      return r;\n    }\n\n    //! Return a 3x3 matrix containing specified coefficients.\n    /**\n       \\param a0 First matrix value.\n       \\param a1 Second matrix value.\n       \\param a2 Third matrix value.\n       \\param a3 Fourth matrix value.\n       \\param a4 Fifth matrix value.\n       \\param a5 Sixth matrix value.\n       \\param a6 Seventh matrix value.\n       \\param a7 Eighth matrix value.\n       \\param a8 Nineth matrix value.\n    **/\n    static CImg<T> matrix(const T& a0, const T& a1, const T& a2,\n                          const T& a3, const T& a4, const T& a5,\n                          const T& a6, const T& a7, const T& a8) {\n      CImg<T> r(3,3); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2;\n      *(ptr++) = a3; *(ptr++) = a4; *(ptr++) = a5;\n      *(ptr++) = a6; *(ptr++) = a7; *(ptr++) = a8;\n      return r;\n    }\n\n    //! Return a 4x4 matrix containing specified coefficients.\n    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3,\n                          const T& a4, const T& a5, const T& a6, const T& a7,\n                          const T& a8, const T& a9, const T& a10, const T& a11,\n                          const T& a12, const T& a13, const T& a14, const T& a15) {\n      CImg<T> r(4,4); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3;\n      *(ptr++) = a4; *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7;\n      *(ptr++) = a8; *(ptr++) = a9; *(ptr++) = a10; *(ptr++) = a11;\n      *(ptr++) = a12; *(ptr++) = a13; *(ptr++) = a14; *(ptr++) = a15;\n      return r;\n    }\n\n    //! Return a 5x5 matrix containing specified coefficients.\n    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4,\n                          const T& a5, const T& a6, const T& a7, const T& a8, const T& a9,\n                          const T& a10, const T& a11, const T& a12, const T& a13, const T& a14,\n                          const T& a15, const T& a16, const T& a17, const T& a18, const T& a19,\n                          const T& a20, const T& a21, const T& a22, const T& a23, const T& a24) {\n      CImg<T> r(5,5); T *ptr = r._data;\n      *(ptr++) = a0; *(ptr++) = a1; *(ptr++) = a2; *(ptr++) = a3; *(ptr++) = a4;\n      *(ptr++) = a5; *(ptr++) = a6; *(ptr++) = a7; *(ptr++) = a8; *(ptr++) = a9;\n      *(ptr++) = a10; *(ptr++) = a11; *(ptr++) = a12; *(ptr++) = a13; *(ptr++) = a14;\n      *(ptr++) = a15; *(ptr++) = a16; *(ptr++) = a17; *(ptr++) = a18; *(ptr++) = a19;\n      *(ptr++) = a20; *(ptr++) = a21; *(ptr++) = a22; *(ptr++) = a23; *(ptr++) = a24;\n      return r;\n    }\n\n    //! Return a 1x1 symmetric matrix containing specified coefficients.\n    /**\n       \\param a0 First matrix value.\n       \\note Equivalent to vector(const T&).\n    **/\n    static CImg<T> tensor(const T& a0) {\n      return matrix(a0);\n    }\n\n    //! Return a 2x2 symmetric matrix tensor containing specified coefficients.\n    static CImg<T> tensor(const T& a0, const T& a1, const T& a2) {\n      return matrix(a0,a1,a1,a2);\n    }\n\n    //! Return a 3x3 symmetric matrix containing specified coefficients.\n    static CImg<T> tensor(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4, const T& a5) {\n      return matrix(a0,a1,a2,a1,a3,a4,a2,a4,a5);\n    }\n\n    //! Return a 1x1 diagonal matrix containing specified coefficients.\n    static CImg<T> diagonal(const T& a0) {\n      return matrix(a0);\n    }\n\n    //! Return a 2x2 diagonal matrix containing specified coefficients.\n    static CImg<T> diagonal(const T& a0, const T& a1) {\n      return matrix(a0,0,0,a1);\n    }\n\n    //! Return a 3x3 diagonal matrix containing specified coefficients.\n    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2) {\n      return matrix(a0,0,0,0,a1,0,0,0,a2);\n    }\n\n    //! Return a 4x4 diagonal matrix containing specified coefficients.\n    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3) {\n      return matrix(a0,0,0,0,0,a1,0,0,0,0,a2,0,0,0,0,a3);\n    }\n\n    //! Return a 5x5 diagonal matrix containing specified coefficients.\n    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {\n      return matrix(a0,0,0,0,0,0,a1,0,0,0,0,0,a2,0,0,0,0,0,a3,0,0,0,0,0,a4);\n    }\n\n    //! Return a NxN identity matrix.\n    /**\n       \\param N Dimension of the matrix.\n    **/\n    static CImg<T> identity_matrix(const unsigned int N) {\n      CImg<T> res(N,N,1,1,0);\n      cimg_forX(res,x) res(x,x) = 1;\n      return res;\n    }\n\n    //! Return a N-numbered sequence vector from \\p a0 to \\p a1.\n    /**\n       \\param N Size of the resulting vector.\n       \\param a0 Starting value of the sequence.\n       \\param a1 Ending value of the sequence.\n     **/\n    static CImg<T> sequence(const unsigned int N, const T& a0, const T& a1) {\n      if (N) return CImg<T>(1,N).sequence(a0,a1);\n      return CImg<T>();\n    }\n\n    //! Return a 3x3 rotation matrix from an { axis + angle } or a quaternion.\n    /**\n       \\param x X-coordinate of the rotation axis, or first quaternion coordinate.\n       \\param y Y-coordinate of the rotation axis, or second quaternion coordinate.\n       \\param z Z-coordinate of the rotation axis, or third quaternion coordinate.\n       \\param w Angle of the rotation axis (in degree), or fourth quaternion coordinate.\n       \\param is_quaternion Tell is the four arguments denotes a set { axis + angle } or a quaternion (x,y,z,w).\n     **/\n    static CImg<T> rotation_matrix(const float x, const float y, const float z, const float w,\n                                   const bool is_quaternion=false) {\n      double X, Y, Z, W, N;\n      if (is_quaternion) {\n        N = std::sqrt((double)x*x + (double)y*y + (double)z*z + (double)w*w);\n        if (N>0) { X = x/N; Y = y/N; Z = z/N; W = w/N; }\n        else { X = Y = Z = 0; W = 1; }\n        return CImg<T>::matrix((T)(X*X + Y*Y - Z*Z - W*W),(T)(2*Y*Z - 2*X*W),(T)(2*X*Z + 2*Y*W),\n                               (T)(2*X*W + 2*Y*Z),(T)(X*X - Y*Y + Z*Z - W*W),(T)(2*Z*W - 2*X*Y),\n                               (T)(2*Y*W - 2*X*Z),(T)(2*X*Y + 2*Z*W),(T)(X*X - Y*Y - Z*Z + W*W));\n      }\n      N = cimg::hypot((double)x,(double)y,(double)z);\n      if (N>0) { X = x/N; Y = y/N; Z = z/N; }\n      else { X = Y = 0; Z = 1; }\n      const double ang = w*cimg::PI/180, c = std::cos(ang), omc = 1 - c, s = std::sin(ang);\n      return CImg<T>::matrix((T)(X*X*omc + c),(T)(X*Y*omc - Z*s),(T)(X*Z*omc + Y*s),\n                             (T)(X*Y*omc + Z*s),(T)(Y*Y*omc + c),(T)(Y*Z*omc - X*s),\n                             (T)(X*Z*omc - Y*s),(T)(Y*Z*omc + X*s),(T)(Z*Z*omc + c));\n    }\n\n    //@}\n    //-----------------------------------\n    //\n    //! \\name Value Manipulation\n    //@{\n    //-----------------------------------\n\n    //! Fill all pixel values with specified value.\n    /**\n       \\param val Fill value.\n    **/\n    CImg<T>& fill(const T& val) {\n      if (is_empty()) return *this;\n      if (val && sizeof(T)!=1) cimg_for(*this,ptrd,T) *ptrd = val;\n      else std::memset(_data,(int)val,sizeof(T)*size());\n      return *this;\n    }\n\n    //! Fill all pixel values with specified value \\newinstance.\n    CImg<T> get_fill(const T& val) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val);\n    }\n\n    //! Fill sequentially all pixel values with specified values.\n    /**\n       \\param val0 First fill value.\n       \\param val1 Second fill value.\n    **/\n    CImg<T>& fill(const T& val0, const T& val1) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 1;\n      for (ptrd = _data; ptrd<ptre; ) { *(ptrd++) = val0; *(ptrd++) = val1; }\n      if (ptrd!=ptre + 1) *(ptrd++) = val0;\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 2;\n      for (ptrd = _data; ptrd<ptre; ) { *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; }\n      ptre+=2;\n      switch (ptre - ptrd) {\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 3;\n      for (ptrd = _data; ptrd<ptre; ) { *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; }\n      ptre+=3;\n      switch (ptre - ptrd) {\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 4;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4;\n      }\n      ptre+=4;\n      switch (ptre - ptrd) {\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 5;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n      }\n      ptre+=5;\n      switch (ptre - ptrd) {\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 6;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6;\n      }\n      ptre+=6;\n      switch (ptre - ptrd) {\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 7;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3;\n        *(ptrd++) = val4; *(ptrd++) = val5; *(ptrd++) = val6; *(ptrd++) = val7;\n      }\n      ptre+=7;\n      switch (ptre - ptrd) {\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 8;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2;\n        *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8;\n      }\n      ptre+=8;\n      switch (ptre - ptrd) {\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 9;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4;\n        *(ptrd++) = val5; *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9;\n      }\n      ptre+=9;\n      switch (ptre - ptrd) {\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 10;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4;\n        *(ptrd++) = val5; *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9;\n        *(ptrd++) = val10;\n      }\n      ptre+=10;\n      switch (ptre - ptrd) {\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 11;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9; *(ptrd++) = val10; *(ptrd++) = val11;\n      }\n      ptre+=11;\n      switch (ptre - ptrd) {\n      case 11 : *(--ptre) = val10;\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10,\n                                                           val11);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                  const T& val12) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 12;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9; *(ptrd++) = val10; *(ptrd++) = val11;\n        *(ptrd++) = val12;\n      }\n      ptre+=12;\n      switch (ptre - ptrd) {\n      case 12 : *(--ptre) = val11;\n      case 11 : *(--ptre) = val10;\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                     const T& val12) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10,\n                                                           val11,val12);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                  const T& val12, const T& val13) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 13;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9; *(ptrd++) = val10; *(ptrd++) = val11;\n        *(ptrd++) = val12; *(ptrd++) = val13;\n      }\n      ptre+=13;\n      switch (ptre - ptrd) {\n      case 13 : *(--ptre) = val12;\n      case 12 : *(--ptre) = val11;\n      case 11 : *(--ptre) = val10;\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                     const T& val12, const T& val13) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10,\n                                                           val11,val12,val13);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                  const T& val12, const T& val13, const T& val14) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 14;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9; *(ptrd++) = val10; *(ptrd++) = val11;\n        *(ptrd++) = val12; *(ptrd++) = val13; *(ptrd++) = val14;\n      }\n      ptre+=14;\n      switch (ptre - ptrd) {\n      case 14 : *(--ptre) = val13;\n      case 13 : *(--ptre) = val12;\n      case 12 : *(--ptre) = val11;\n      case 11 : *(--ptre) = val10;\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                     const T& val12, const T& val13, const T& val14) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10,\n                                                           val11,val12,val13,val14);\n    }\n\n    //! Fill sequentially all pixel values with specified values \\overloading.\n    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                  const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                  const T& val12, const T& val13, const T& val14, const T& val15) {\n      if (is_empty()) return *this;\n      T *ptrd, *ptre = end() - 15;\n      for (ptrd = _data; ptrd<ptre; ) {\n        *(ptrd++) = val0; *(ptrd++) = val1; *(ptrd++) = val2; *(ptrd++) = val3; *(ptrd++) = val4; *(ptrd++) = val5;\n        *(ptrd++) = val6; *(ptrd++) = val7; *(ptrd++) = val8; *(ptrd++) = val9; *(ptrd++) = val10; *(ptrd++) = val11;\n        *(ptrd++) = val12; *(ptrd++) = val13; *(ptrd++) = val14; *(ptrd++) = val15;\n      }\n      ptre+=15;\n      switch (ptre - ptrd) {\n      case 15 : *(--ptre) = val14;\n      case 14 : *(--ptre) = val13;\n      case 13 : *(--ptre) = val12;\n      case 12 : *(--ptre) = val11;\n      case 11 : *(--ptre) = val10;\n      case 10 : *(--ptre) = val9;\n      case 9 : *(--ptre) = val8;\n      case 8 : *(--ptre) = val7;\n      case 7 : *(--ptre) = val6;\n      case 6 : *(--ptre) = val5;\n      case 5 : *(--ptre) = val4;\n      case 4 : *(--ptre) = val3;\n      case 3 : *(--ptre) = val2;\n      case 2 : *(--ptre) = val1;\n      case 1 : *(--ptre) = val0;\n      }\n      return *this;\n    }\n\n    //! Fill sequentially all pixel values with specified values \\newinstance.\n    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8, const T& val9, const T& val10, const T& val11,\n                     const T& val12, const T& val13, const T& val14, const T& val15) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8,val9,val10,\n                                                           val11,val12,val13,val14,val15);\n    }\n\n    //! Fill sequentially pixel values according to a given expression.\n    /**\n       \\param expression C-string describing a math formula, or a sequence of values.\n       \\param repeat_values In case a list of values is provided, tells if this list must be repeated for the filling.\n       \\param list_inputs In case of a mathematical expression, attach a list of images to the specified expression.\n       \\param list_outputs In case of a mathematical expression, attach a list of images to the specified expression.\n    **/\n    CImg<T>& fill(const char *const expression, const bool repeat_values, const bool allow_formula=true,\n                  const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) {\n      return _fill(expression,repeat_values,allow_formula,list_inputs,list_outputs,\"fill\",0);\n    }\n\n    CImg<T>& _fill(const char *const expression, const bool repeat_values, bool allow_formula,\n                   const CImgList<T> *const list_inputs, CImgList<T> *const list_outputs,\n                   const char *const calling_function, const CImg<T> *provides_copy) {\n      if (is_empty() || !expression || !*expression) return *this;\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      CImg<charT> is_error;\n      bool is_value_sequence = false;\n\n      if (allow_formula) {\n\n        // Try to pre-detect regular value sequence to avoid exception thrown by _cimg_math_parser.\n        double value;\n        char sep;\n        const int err = cimg_sscanf(expression,\"%lf %c\",&value,&sep);\n        if (err==1 || (err==2 && sep==',')) {\n          if (err==1) return fill((T)value);\n          else is_value_sequence = true;\n        }\n\n        // Try to fill values according to a formula.\n        cimg_abort_init;\n        if (!is_value_sequence) try {\n            CImg<T> base = provides_copy?provides_copy->get_shared():get_shared();\n            _cimg_math_parser mp(expression + (*expression=='>' || *expression=='<' ||\n                                               *expression=='*' || *expression==':'),\n                                 calling_function,base,this,list_inputs,list_outputs,true);\n            if (!provides_copy && expression && *expression!='>' && *expression!='<' && *expression!=':' &&\n                mp.need_input_copy)\n              base.assign().assign(*this); // Needs input copy\n\n            bool do_in_parallel = false;\n#ifdef cimg_use_openmp\n            cimg_openmp_if(*expression=='*' || *expression==':' ||\n                           (mp.is_parallelizable && _width>=320 && _height*_depth*_spectrum>=2))\n              do_in_parallel = true;\n#endif\n            if (mp.result_dim) { // Vector-valued expression\n              const unsigned int N = std::min(mp.result_dim,_spectrum);\n              const ulongT whd = (ulongT)_width*_height*_depth;\n              T *ptrd = *expression=='<'?_data + _width*_height*_depth - 1:_data;\n              if (*expression=='<') {\n                CImg<doubleT> res(1,mp.result_dim);\n                cimg_rofYZ(*this,y,z) {\n                  cimg_abort_test();\n                  cimg_rofX(*this,x) {\n                    mp(x,y,z,0,res._data);\n                    const double *ptrs = res._data;\n                    T *_ptrd = ptrd--; for (unsigned int n = N; n>0; --n) { *_ptrd = (T)(*ptrs++); _ptrd+=whd; }\n                  }\n                }\n              } else if (*expression=='>' || !do_in_parallel) {\n                CImg<doubleT> res(1,mp.result_dim);\n                cimg_forYZ(*this,y,z) {\n                  cimg_abort_test();\n                  cimg_forX(*this,x) {\n                    mp(x,y,z,0,res._data);\n                    const double *ptrs = res._data;\n                    T *_ptrd = ptrd++; for (unsigned int n = N; n>0; --n) { *_ptrd = (T)(*ptrs++); _ptrd+=whd; }\n                  }\n                }\n             } else {\n#ifdef cimg_use_openmp\n                cimg_pragma_openmp(parallel)\n                {\n                  _cimg_math_parser\n                    _mp = omp_get_thread_num()?mp:_cimg_math_parser(),\n                    &lmp = omp_get_thread_num()?_mp:mp;\n                  lmp.is_fill = true;\n                  cimg_pragma_openmp(for collapse(2))\n                    cimg_forYZ(*this,y,z) cimg_abort_try {\n                    cimg_abort_test();\n                    CImg<doubleT> res(1,lmp.result_dim);\n                    T *ptrd = data(0,y,z,0);\n                    cimg_forX(*this,x) {\n                      lmp(x,y,z,0,res._data);\n                      const double *ptrs = res._data;\n                      T *_ptrd = ptrd++; for (unsigned int n = N; n>0; --n) { *_ptrd = (T)(*ptrs++); _ptrd+=whd; }\n                    }\n                  } cimg_abort_catch() cimg_abort_catch_fill()\n                }\n#endif\n              }\n\n            } else { // Scalar-valued expression\n              T *ptrd = *expression=='<'?end() - 1:_data;\n              if (*expression=='<')\n                cimg_rofYZC(*this,y,z,c) { cimg_abort_test(); cimg_rofX(*this,x) *(ptrd--) = (T)mp(x,y,z,c); }\n              else if (*expression=='>' || !do_in_parallel)\n                cimg_forYZC(*this,y,z,c) { cimg_abort_test(); cimg_forX(*this,x) *(ptrd++) = (T)mp(x,y,z,c); }\n              else {\n#ifdef cimg_use_openmp\n                cimg_pragma_openmp(parallel)\n                {\n                  _cimg_math_parser\n                    _mp = omp_get_thread_num()?mp:_cimg_math_parser(),\n                    &lmp = omp_get_thread_num()?_mp:mp;\n                  lmp.is_fill = true;\n                  cimg_pragma_openmp(for collapse(3))\n                    cimg_forYZC(*this,y,z,c) cimg_abort_try {\n                    cimg_abort_test();\n                    T *ptrd = data(0,y,z,c);\n                    cimg_forX(*this,x) *ptrd++ = (T)lmp(x,y,z,c);\n                  } cimg_abort_catch() cimg_abort_catch_fill()\n                }\n#endif\n              }\n            }\n            mp.end();\n          } catch (CImgException& e) { CImg<charT>::string(e._message).move_to(is_error); }\n      }\n\n      // Try to fill values according to a value sequence.\n      if (!allow_formula || is_value_sequence || is_error) {\n        CImg<charT> item(256);\n        char sep = 0;\n        const char *nexpression = expression;\n        ulongT nb = 0;\n        const ulongT siz = size();\n        T *ptrd = _data;\n        for (double val = 0; *nexpression && nb<siz; ++nb) {\n          sep = 0;\n          const int err = cimg_sscanf(nexpression,\"%255[ \\n\\t0-9.eEinfa+-]%c\",item._data,&sep);\n          if (err>0 && cimg_sscanf(item,\"%lf\",&val)==1 && (sep==',' || sep==';' || err==1)) {\n            nexpression+=std::strlen(item) + (err>1);\n            *(ptrd++) = (T)val;\n          } else break;\n        }\n        cimg::exception_mode(omode);\n        if (nb<siz && (sep || *nexpression)) {\n          if (is_error) throw CImgArgumentException(\"%s\",is_error._data);\n          else throw CImgArgumentException(_cimg_instance\n                                           \"%s(): Invalid sequence of filling values '%s'.\",\n                                           cimg_instance,calling_function,expression);\n        }\n        if (repeat_values && nb && nb<siz)\n          for (T *ptrs = _data, *const ptre = _data + siz; ptrd<ptre; ++ptrs) *(ptrd++) = *ptrs;\n      }\n\n      cimg::exception_mode(omode);\n      cimg_abort_test();\n      return *this;\n    }\n\n    //! Fill sequentially pixel values according to a given expression \\newinstance.\n    CImg<T> get_fill(const char *const expression, const bool repeat_values, const bool allow_formula=true,\n                     const CImgList<T> *const list_inputs=0, CImgList<T> *const list_outputs=0) const {\n      return (+*this).fill(expression,repeat_values,allow_formula,list_inputs,list_outputs);\n    }\n\n    //! Fill sequentially pixel values according to the values found in another image.\n    /**\n       \\param values Image containing the values used for the filling.\n       \\param repeat_values In case there are less values than necessary in \\c values, tells if these values must be\n         repeated for the filling.\n    **/\n    template<typename t>\n    CImg<T>& fill(const CImg<t>& values, const bool repeat_values=true) {\n      if (is_empty() || !values) return *this;\n      T *ptrd = _data, *ptre = ptrd + size();\n      for (t *ptrs = values._data, *ptrs_end = ptrs + values.size(); ptrs<ptrs_end && ptrd<ptre; ++ptrs)\n        *(ptrd++) = (T)*ptrs;\n      if (repeat_values && ptrd<ptre) for (T *ptrs = _data; ptrd<ptre; ++ptrs) *(ptrd++) = *ptrs;\n      return *this;\n    }\n\n    //! Fill sequentially pixel values according to the values found in another image \\newinstance.\n    template<typename t>\n    CImg<T> get_fill(const CImg<t>& values, const bool repeat_values=true) const {\n      return repeat_values?CImg<T>(_width,_height,_depth,_spectrum).fill(values,repeat_values):\n        (+*this).fill(values,repeat_values);\n    }\n\n    //! Fill pixel values along the X-axis at a specified pixel position.\n    /**\n       \\param y Y-coordinate of the filled column.\n       \\param z Z-coordinate of the filled column.\n       \\param c C-coordinate of the filled column.\n       \\param a0 First fill value.\n    **/\n    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const int a0, ...) {\n#define _cimg_fill1(x,y,z,c,off,siz,t) { \\\n    va_list ap; va_start(ap,a0); T *ptrd = data(x,y,z,c); *ptrd = (T)a0; \\\n    for (unsigned int k = 1; k<siz; ++k) { ptrd+=off; *ptrd = (T)va_arg(ap,t); } \\\n    va_end(ap); }\n      if (y<_height && z<_depth && c<_spectrum) _cimg_fill1(0,y,z,c,1,_width,int);\n      return *this;\n    }\n\n    //! Fill pixel values along the X-axis at a specified pixel position \\overloading.\n    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const double a0, ...) {\n      if (y<_height && z<_depth && c<_spectrum) _cimg_fill1(0,y,z,c,1,_width,double);\n      return *this;\n    }\n\n    //! Fill pixel values along the Y-axis at a specified pixel position.\n    /**\n       \\param x X-coordinate of the filled row.\n       \\param z Z-coordinate of the filled row.\n       \\param c C-coordinate of the filled row.\n       \\param a0 First fill value.\n    **/\n    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const int a0, ...) {\n      if (x<_width && z<_depth && c<_spectrum) _cimg_fill1(x,0,z,c,_width,_height,int);\n      return *this;\n    }\n\n    //! Fill pixel values along the Y-axis at a specified pixel position \\overloading.\n    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const double a0, ...) {\n      if (x<_width && z<_depth && c<_spectrum) _cimg_fill1(x,0,z,c,_width,_height,double);\n      return *this;\n    }\n\n    //! Fill pixel values along the Z-axis at a specified pixel position.\n    /**\n       \\param x X-coordinate of the filled slice.\n       \\param y Y-coordinate of the filled slice.\n       \\param c C-coordinate of the filled slice.\n       \\param a0 First fill value.\n    **/\n    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const int a0, ...) {\n      const ulongT wh = (ulongT)_width*_height;\n      if (x<_width && y<_height && c<_spectrum) _cimg_fill1(x,y,0,c,wh,_depth,int);\n      return *this;\n    }\n\n    //! Fill pixel values along the Z-axis at a specified pixel position \\overloading.\n    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const double a0, ...) {\n      const ulongT wh = (ulongT)_width*_height;\n      if (x<_width && y<_height && c<_spectrum) _cimg_fill1(x,y,0,c,wh,_depth,double);\n      return *this;\n    }\n\n    //! Fill pixel values along the C-axis at a specified pixel position.\n    /**\n       \\param x X-coordinate of the filled channel.\n       \\param y Y-coordinate of the filled channel.\n       \\param z Z-coordinate of the filled channel.\n       \\param a0 First filling value.\n    **/\n    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const int a0, ...) {\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      if (x<_width && y<_height && z<_depth) _cimg_fill1(x,y,z,0,whd,_spectrum,int);\n      return *this;\n    }\n\n    //! Fill pixel values along the C-axis at a specified pixel position \\overloading.\n    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const double a0, ...) {\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      if (x<_width && y<_height && z<_depth) _cimg_fill1(x,y,z,0,whd,_spectrum,double);\n      return *this;\n    }\n\n    //! Discard specified sequence of values in the image buffer, along a specific axis.\n    /**\n       \\param values Sequence of values to discard.\n       \\param axis Axis along which the values are discarded. If set to \\c 0 (default value)\n         the method does it for all the buffer values and returns a one-column vector.\n       \\note Discarded values will change the image geometry, so the resulting image\n       is returned as a one-column vector.\n    **/\n    template<typename t>\n    CImg<T>& discard(const CImg<t>& values, const char axis=0) {\n      if (is_empty() || !values) return *this;\n      return get_discard(values,axis).move_to(*this);\n    }\n\n    template<typename t>\n    CImg<T> get_discard(const CImg<t>& values, const char axis=0) const {\n      CImg<T> res;\n      if (!values) return +*this;\n      if (is_empty()) return res;\n      const ulongT vsiz = values.size();\n      const char _axis = cimg::lowercase(axis);\n      ulongT j = 0;\n      unsigned int k = 0;\n      int i0 = 0;\n      res.assign(width(),height(),depth(),spectrum());\n      switch (_axis) {\n      case 'x' : {\n        cimg_forX(*this,i) {\n          if ((*this)(i)!=(T)values[j]) {\n            if (j) --i;\n            res.draw_image(k,get_columns(i0,i));\n            k+=i - i0 + 1; i0 = i + 1; j = 0;\n          } else { ++j; if (j>=vsiz) { j = 0; i0 = i + 1; } }\n        }\n        if (i0<width()) { res.draw_image(k,get_columns(i0,width() - 1)); k+=width() - i0; }\n        res.resize(k,-100,-100,-100,0);\n      } break;\n      case 'y' : {\n        cimg_forY(*this,i) {\n          if ((*this)(0,i)!=(T)values[j]) {\n            if (j) --i;\n            res.draw_image(0,k,get_rows(i0,i));\n            k+=i - i0 + 1; i0 = i + 1; j = 0;\n          } else { ++j; if (j>=vsiz) { j = 0; i0 = i + 1; } }\n        }\n        if (i0<height()) { res.draw_image(0,k,get_rows(i0,height() - 1)); k+=height() - i0; }\n        res.resize(-100,k,-100,-100,0);\n      } break;\n      case 'z' : {\n        cimg_forZ(*this,i) {\n          if ((*this)(0,0,i)!=(T)values[j]) {\n            if (j) --i;\n            res.draw_image(0,0,k,get_slices(i0,i));\n            k+=i - i0 + 1; i0 = i + 1; j = 0;\n          } else { ++j; if (j>=vsiz) { j = 0; i0 = i + 1; } }\n        }\n        if (i0<depth()) { res.draw_image(0,0,k,get_slices(i0,height() - 1)); k+=depth() - i0; }\n        res.resize(-100,-100,k,-100,0);\n      } break;\n      case 'c' : {\n        cimg_forC(*this,i) {\n          if ((*this)(0,0,0,i)!=(T)values[j]) {\n            if (j) --i;\n            res.draw_image(0,0,0,k,get_channels(i0,i));\n            k+=i - i0 + 1; i0 = i + 1; j = 0;\n          } else { ++j; if (j>=vsiz) { j = 0; i0 = i + 1; } }\n        }\n        if (i0<spectrum()) { res.draw_image(0,0,k,get_channels(i0,height() - 1)); k+=spectrum() - i0; }\n        res.resize(-100,-100,-100,k,0);\n      } break;\n      default : {\n        res.unroll('y');\n        cimg_foroff(*this,i) {\n          if ((*this)[i]!=(T)values[j]) {\n            if (j) --i;\n            std::memcpy(res._data + k,_data + i0,(i - i0 + 1)*sizeof(T));\n            k+=i - i0 + 1; i0 = (int)i + 1; j = 0;\n          } else { ++j; if (j>=vsiz) { j = 0; i0 = (int)i + 1; }}\n        }\n        const ulongT siz = size();\n        if ((ulongT)i0<siz) { std::memcpy(res._data + k,_data + i0,(siz - i0)*sizeof(T)); k+=siz - i0; }\n        res.resize(1,k,1,1,0);\n      }\n      }\n      return res;\n    }\n\n    //! Discard neighboring duplicates in the image buffer, along the specified axis.\n    CImg<T>& discard(const char axis=0) {\n      return get_discard(axis).move_to(*this);\n    }\n\n    //! Discard neighboring duplicates in the image buffer, along the specified axis \\newinstance.\n    CImg<T> get_discard(const char axis=0) const {\n      CImg<T> res;\n      if (is_empty()) return res;\n      const char _axis = cimg::lowercase(axis);\n      T current = *_data?(T)0:(T)1;\n      int j = 0;\n      res.assign(width(),height(),depth(),spectrum());\n      switch (_axis) {\n      case 'x' : {\n        cimg_forX(*this,i)\n          if ((*this)(i)!=current) { res.draw_image(j++,get_column(i)); current = (*this)(i); }\n        res.resize(j,-100,-100,-100,0);\n      } break;\n      case 'y' : {\n        cimg_forY(*this,i)\n          if ((*this)(0,i)!=current) { res.draw_image(0,j++,get_row(i)); current = (*this)(0,i); }\n        res.resize(-100,j,-100,-100,0);\n      } break;\n      case 'z' : {\n        cimg_forZ(*this,i)\n          if ((*this)(0,0,i)!=current) { res.draw_image(0,0,j++,get_slice(i)); current = (*this)(0,0,i); }\n        res.resize(-100,-100,j,-100,0);\n      } break;\n      case 'c' : {\n        cimg_forC(*this,i)\n          if ((*this)(0,0,0,i)!=current) { res.draw_image(0,0,0,j++,get_channel(i)); current = (*this)(0,0,0,i); }\n        res.resize(-100,-100,-100,j,0);\n      } break;\n      default : {\n        res.unroll('y');\n        cimg_foroff(*this,i)\n          if ((*this)[i]!=current) res[j++] = current = (*this)[i];\n        res.resize(-100,j,-100,-100,0);\n      }\n      }\n      return res;\n    }\n\n    //! Invert endianness of all pixel values.\n    /**\n     **/\n    CImg<T>& invert_endianness() {\n      cimg::invert_endianness(_data,size());\n      return *this;\n    }\n\n    //! Invert endianness of all pixel values \\newinstance.\n    CImg<T> get_invert_endianness() const {\n      return (+*this).invert_endianness();\n    }\n\n    //! Fill image with random values in specified range.\n    /**\n       \\param val_min Minimal authorized random value.\n       \\param val_max Maximal authorized random value.\n       \\note Random variables are uniformely distributed in [val_min,val_max].\n     **/\n    CImg<T>& rand(const T& val_min, const T& val_max) {\n      const float delta = (float)val_max - (float)val_min + (cimg::type<T>::is_float()?0:1);\n      if (cimg::type<T>::is_float()) cimg_for(*this,ptrd,T) *ptrd = (T)(val_min + cimg::rand()*delta);\n      else cimg_for(*this,ptrd,T) *ptrd = std::min(val_max,(T)(val_min + cimg::rand()*delta));\n      return *this;\n    }\n\n    //! Fill image with random values in specified range \\newinstance.\n    CImg<T> get_rand(const T& val_min, const T& val_max) const {\n      return (+*this).rand(val_min,val_max);\n    }\n\n    //! Round pixel values.\n    /**\n       \\param y Rounding precision.\n       \\param rounding_type Rounding type. Can be:\n       - \\c -1: Backward.\n       - \\c 0: Nearest.\n       - \\c 1: Forward.\n    **/\n    CImg<T>& round(const double y=1, const int rounding_type=0) {\n      if (y>0)\n        cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=8192))\n        cimg_rof(*this,ptrd,T) *ptrd = cimg::round(*ptrd,y,rounding_type);\n      return *this;\n    }\n\n    //! Round pixel values \\newinstance.\n    CImg<T> get_round(const double y=1, const unsigned int rounding_type=0) const {\n      return (+*this).round(y,rounding_type);\n    }\n\n    //! Add random noise to pixel values.\n    /**\n       \\param sigma Amplitude of the random additive noise. If \\p sigma<0, it stands for a percentage of the\n         global value range.\n       \\param noise_type Type of additive noise (can be \\p 0=gaussian, \\p 1=uniform, \\p 2=Salt and Pepper,\n         \\p 3=Poisson or \\p 4=Rician).\n       \\return A reference to the modified image instance.\n       \\note\n       - For Poisson noise (\\p noise_type=3), parameter \\p sigma is ignored, as Poisson noise only depends on\n         the image value itself.\n       - Function \\p CImg<T>::get_noise() is also defined. It returns a non-shared modified copy of the image instance.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_noise(40);\n       (img,res.normalize(0,255)).display();\n       \\endcode\n       \\image html ref_noise.jpg\n    **/\n    CImg<T>& noise(const double sigma, const unsigned int noise_type=0) {\n      if (is_empty()) return *this;\n      const Tfloat vmin = (Tfloat)cimg::type<T>::min(), vmax = (Tfloat)cimg::type<T>::max();\n      Tfloat nsigma = (Tfloat)sigma, m = 0, M = 0;\n      if (nsigma==0 && noise_type!=3) return *this;\n      if (nsigma<0 || noise_type==2) m = (Tfloat)min_max(M);\n      if (nsigma<0) nsigma = (Tfloat)(-nsigma*(M-m)/100.0);\n      switch (noise_type) {\n      case 0 : { // Gaussian noise\n        cimg_rof(*this,ptrd,T) {\n          Tfloat val = (Tfloat)(*ptrd + nsigma*cimg::grand());\n          if (val>vmax) val = vmax;\n          if (val<vmin) val = vmin;\n          *ptrd = (T)val;\n        }\n      } break;\n      case 1 : { // Uniform noise\n        cimg_rof(*this,ptrd,T) {\n          Tfloat val = (Tfloat)(*ptrd + nsigma*cimg::rand(-1,1));\n          if (val>vmax) val = vmax;\n          if (val<vmin) val = vmin;\n          *ptrd = (T)val;\n        }\n      } break;\n      case 2 : { // Salt & Pepper noise\n        if (nsigma<0) nsigma = -nsigma;\n        if (M==m) { m = 0; M = cimg::type<T>::is_float()?(Tfloat)1:(Tfloat)cimg::type<T>::max(); }\n        cimg_rof(*this,ptrd,T) if (cimg::rand(100)<nsigma) *ptrd = (T)(cimg::rand()<0.5?M:m);\n      } break;\n      case 3 : { // Poisson Noise\n        cimg_rof(*this,ptrd,T) *ptrd = (T)cimg::prand(*ptrd);\n      } break;\n      case 4 : { // Rice noise\n        const Tfloat sqrt2 = (Tfloat)std::sqrt(2.0);\n        cimg_rof(*this,ptrd,T) {\n          const Tfloat\n            val0 = (Tfloat)*ptrd/sqrt2,\n            re = (Tfloat)(val0 + nsigma*cimg::grand()),\n            im = (Tfloat)(val0 + nsigma*cimg::grand());\n          Tfloat val = cimg::hypot(re,im);\n          if (val>vmax) val = vmax;\n          if (val<vmin) val = vmin;\n          *ptrd = (T)val;\n        }\n      } break;\n      default :\n        throw CImgArgumentException(_cimg_instance\n                                    \"noise(): Invalid specified noise type %d \"\n                                    \"(should be { 0=gaussian | 1=uniform | 2=salt&Pepper | 3=poisson }).\",\n                                    cimg_instance,\n                                    noise_type);\n      }\n      return *this;\n    }\n\n    //! Add random noise to pixel values \\newinstance.\n    CImg<T> get_noise(const double sigma, const unsigned int noise_type=0) const {\n      return (+*this).noise(sigma,noise_type);\n    }\n\n    //! Linearly normalize pixel values.\n    /**\n       \\param min_value Minimum desired value of the resulting image.\n       \\param max_value Maximum desired value of the resulting image.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_normalize(160,220);\n       (img,res).display();\n       \\endcode\n       \\image html ref_normalize2.jpg\n    **/\n    CImg<T>& normalize(const T& min_value, const T& max_value) {\n      if (is_empty()) return *this;\n      const T a = min_value<max_value?min_value:max_value, b = min_value<max_value?max_value:min_value;\n      T m, M = max_min(m);\n      const Tfloat fm = (Tfloat)m, fM = (Tfloat)M;\n      if (m==M) return fill(min_value);\n      if (m!=a || M!=b) cimg_rof(*this,ptrd,T) *ptrd = (T)((*ptrd - fm)/(fM - fm)*(b - a) + a);\n      return *this;\n    }\n\n    //! Linearly normalize pixel values \\newinstance.\n    CImg<Tfloat> get_normalize(const T& min_value, const T& max_value) const {\n      return CImg<Tfloat>(*this,false).normalize((Tfloat)min_value,(Tfloat)max_value);\n    }\n\n    //! Normalize multi-valued pixels of the image instance, with respect to their L2-norm.\n    /**\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_normalize();\n       (img,res.normalize(0,255)).display();\n       \\endcode\n       \\image html ref_normalize.jpg\n    **/\n    CImg<T>& normalize() {\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n      cimg_forYZ(*this,y,z) {\n        T *ptrd = data(0,y,z,0);\n        cimg_forX(*this,x) {\n          const T *ptrs = ptrd;\n          float n = 0;\n          cimg_forC(*this,c) { n+=cimg::sqr((float)*ptrs); ptrs+=whd; }\n          n = (float)std::sqrt(n);\n          T *_ptrd = ptrd++;\n          if (n>0) cimg_forC(*this,c) { *_ptrd = (T)(*_ptrd/n); _ptrd+=whd; }\n          else cimg_forC(*this,c) { *_ptrd = (T)0; _ptrd+=whd; }\n        }\n      }\n      return *this;\n    }\n\n    //! Normalize multi-valued pixels of the image instance, with respect to their L2-norm \\newinstance.\n    CImg<Tfloat> get_normalize() const {\n      return CImg<Tfloat>(*this,false).normalize();\n    }\n\n    //! Compute Lp-norm of each multi-valued pixel of the image instance.\n    /**\n       \\param norm_type Type of computed vector norm (can be \\p -1=Linf, or \\p>=0).\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_norm();\n       (img,res.normalize(0,255)).display();\n       \\endcode\n       \\image html ref_norm.jpg\n    **/\n    CImg<T>& norm(const int norm_type=2) {\n      if (_spectrum==1 && norm_type) return abs();\n      return get_norm(norm_type).move_to(*this);\n    }\n\n    //! Compute L2-norm of each multi-valued pixel of the image instance \\newinstance.\n    CImg<Tfloat> get_norm(const int norm_type=2) const {\n      if (is_empty()) return *this;\n      if (_spectrum==1 && norm_type) return get_abs();\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      CImg<Tfloat> res(_width,_height,_depth);\n      switch (norm_type) {\n      case -1 : { // Linf-norm.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n        cimg_forYZ(*this,y,z) {\n          const ulongT off = (ulongT)offset(0,y,z);\n          const T *ptrs = _data + off;\n          Tfloat *ptrd = res._data + off;\n          cimg_forX(*this,x) {\n            Tfloat n = 0;\n            const T *_ptrs = ptrs++;\n            cimg_forC(*this,c) { const Tfloat val = (Tfloat)cimg::abs(*_ptrs); if (val>n) n = val; _ptrs+=whd; }\n            *(ptrd++) = n;\n          }\n        }\n      } break;\n      case 0 : { // L0-norm.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n        cimg_forYZ(*this,y,z) {\n          const ulongT off = (ulongT)offset(0,y,z);\n          const T *ptrs = _data + off;\n          Tfloat *ptrd = res._data + off;\n          cimg_forX(*this,x) {\n            unsigned int n = 0;\n            const T *_ptrs = ptrs++;\n            cimg_forC(*this,c) { n+=*_ptrs==0?0:1; _ptrs+=whd; }\n            *(ptrd++) = (Tfloat)n;\n          }\n        }\n      } break;\n      case 1 : { // L1-norm.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n        cimg_forYZ(*this,y,z) {\n          const ulongT off = (ulongT)offset(0,y,z);\n          const T *ptrs = _data + off;\n          Tfloat *ptrd = res._data + off;\n          cimg_forX(*this,x) {\n            Tfloat n = 0;\n            const T *_ptrs = ptrs++;\n            cimg_forC(*this,c) { n+=cimg::abs(*_ptrs); _ptrs+=whd; }\n            *(ptrd++) = n;\n          }\n        }\n      } break;\n      case 2 : { // L2-norm.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n        cimg_forYZ(*this,y,z) {\n          const ulongT off = (ulongT)offset(0,y,z);\n          const T *ptrs = _data + off;\n          Tfloat *ptrd = res._data + off;\n          cimg_forX(*this,x) {\n            Tfloat n = 0;\n            const T *_ptrs = ptrs++;\n            cimg_forC(*this,c) { n+=cimg::sqr((Tfloat)*_ptrs); _ptrs+=whd; }\n            *(ptrd++) = (Tfloat)std::sqrt((Tfloat)n);\n          }\n        }\n      } break;\n      default : { // Linf-norm.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16))\n        cimg_forYZ(*this,y,z) {\n          const ulongT off = (ulongT)offset(0,y,z);\n          const T *ptrs = _data + off;\n          Tfloat *ptrd = res._data + off;\n          cimg_forX(*this,x) {\n            Tfloat n = 0;\n            const T *_ptrs = ptrs++;\n            cimg_forC(*this,c) { n+=std::pow(cimg::abs((Tfloat)*_ptrs),(Tfloat)norm_type); _ptrs+=whd; }\n            *(ptrd++) = (Tfloat)std::pow((Tfloat)n,1/(Tfloat)norm_type);\n          }\n        }\n      }\n      }\n      return res;\n    }\n\n    //! Cut pixel values in specified range.\n    /**\n       \\param min_value Minimum desired value of the resulting image.\n       \\param max_value Maximum desired value of the resulting image.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_cut(160,220);\n       (img,res).display();\n       \\endcode\n       \\image html ref_cut.jpg\n    **/\n    CImg<T>& cut(const T& min_value, const T& max_value) {\n      if (is_empty()) return *this;\n      const T a = min_value<max_value?min_value:max_value, b = min_value<max_value?max_value:min_value;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n      cimg_rof(*this,ptrd,T) *ptrd = (*ptrd<a)?a:((*ptrd>b)?b:*ptrd);\n      return *this;\n    }\n\n    //! Cut pixel values in specified range \\newinstance.\n    CImg<T> get_cut(const T& min_value, const T& max_value) const {\n      return (+*this).cut(min_value,max_value);\n    }\n\n    //! Uniformly quantize pixel values.\n    /**\n       \\param nb_levels Number of quantization levels.\n       \\param keep_range Tells if resulting values keep the same range as the original ones.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_quantize(4);\n       (img,res).display();\n       \\endcode\n       \\image html ref_quantize.jpg\n    **/\n    CImg<T>& quantize(const unsigned int nb_levels, const bool keep_range=true) {\n      if (!nb_levels)\n        throw CImgArgumentException(_cimg_instance\n                                    \"quantize(): Invalid quantization request with 0 values.\",\n                                    cimg_instance);\n\n      if (is_empty()) return *this;\n      Tfloat m, M = (Tfloat)max_min(m), range = M - m;\n      if (range>0) {\n        if (keep_range)\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n          cimg_rof(*this,ptrd,T) {\n            const unsigned int val = (unsigned int)((*ptrd-m)*nb_levels/range);\n            *ptrd = (T)(m + std::min(val,nb_levels - 1)*range/nb_levels);\n          } else\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n          cimg_rof(*this,ptrd,T) {\n            const unsigned int val = (unsigned int)((*ptrd-m)*nb_levels/range);\n            *ptrd = (T)std::min(val,nb_levels - 1);\n          }\n      }\n      return *this;\n    }\n\n    //! Uniformly quantize pixel values \\newinstance.\n    CImg<T> get_quantize(const unsigned int n, const bool keep_range=true) const {\n      return (+*this).quantize(n,keep_range);\n    }\n\n    //! Threshold pixel values.\n    /**\n       \\param value Threshold value\n       \\param soft_threshold Tells if soft thresholding must be applied (instead of hard one).\n       \\param strict_threshold Tells if threshold value is strict.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_threshold(128);\n       (img,res.normalize(0,255)).display();\n       \\endcode\n       \\image html ref_threshold.jpg\n    **/\n    CImg<T>& threshold(const T& value, const bool soft_threshold=false, const bool strict_threshold=false) {\n      if (is_empty()) return *this;\n      if (strict_threshold) {\n        if (soft_threshold)\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n          cimg_rof(*this,ptrd,T) {\n            const T v = *ptrd;\n            *ptrd = v>value?(T)(v-value):v<-(float)value?(T)(v + value):(T)0;\n          }\n        else\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n          cimg_rof(*this,ptrd,T) *ptrd = *ptrd>value?(T)1:(T)0;\n      } else {\n        if (soft_threshold)\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32768))\n          cimg_rof(*this,ptrd,T) {\n            const T v = *ptrd;\n            *ptrd = v>=value?(T)(v-value):v<=-(float)value?(T)(v + value):(T)0;\n          }\n        else\n          cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=65536))\n          cimg_rof(*this,ptrd,T) *ptrd = *ptrd>=value?(T)1:(T)0;\n      }\n      return *this;\n    }\n\n    //! Threshold pixel values \\newinstance.\n    CImg<T> get_threshold(const T& value, const bool soft_threshold=false, const bool strict_threshold=false) const {\n      return (+*this).threshold(value,soft_threshold,strict_threshold);\n    }\n\n    //! Compute the histogram of pixel values.\n    /**\n       \\param nb_levels Number of desired histogram levels.\n       \\param min_value Minimum pixel value considered for the histogram computation.\n         All pixel values lower than \\p min_value will not be counted.\n       \\param max_value Maximum pixel value considered for the histogram computation.\n         All pixel values higher than \\p max_value will not be counted.\n       \\note\n       - The histogram H of an image I is the 1d function where H(x) counts the number of occurences of the value x\n         in the image I.\n       - The resulting histogram is always defined in 1d. Histograms of multi-valued images are not multi-dimensional.\n       \\par Example\n       \\code\n       const CImg<float> img = CImg<float>(\"reference.jpg\").histogram(256);\n       img.display_graph(0,3);\n       \\endcode\n       \\image html ref_histogram.jpg\n    **/\n    CImg<T>& histogram(const unsigned int nb_levels, const T& min_value, const T& max_value) {\n      return get_histogram(nb_levels,min_value,max_value).move_to(*this);\n    }\n\n    //! Compute the histogram of pixel values \\overloading.\n    CImg<T>& histogram(const unsigned int nb_levels) {\n      return get_histogram(nb_levels).move_to(*this);\n    }\n\n    //! Compute the histogram of pixel values \\newinstance.\n    CImg<ulongT> get_histogram(const unsigned int nb_levels, const T& min_value, const T& max_value) const {\n      if (!nb_levels || is_empty()) return CImg<ulongT>();\n      const double\n        vmin = (double)(min_value<max_value?min_value:max_value),\n        vmax = (double)(min_value<max_value?max_value:min_value);\n      CImg<ulongT> res(nb_levels,1,1,1,0);\n      cimg_rof(*this,ptrs,T) {\n        const T val = *ptrs;\n        if (val>=vmin && val<=vmax) ++res[val==vmax?nb_levels - 1:(unsigned int)((val - vmin)*nb_levels/(vmax - vmin))];\n      }\n      return res;\n    }\n\n    //! Compute the histogram of pixel values \\newinstance.\n    CImg<ulongT> get_histogram(const unsigned int nb_levels) const {\n      if (!nb_levels || is_empty()) return CImg<ulongT>();\n      T vmax = 0, vmin = min_max(vmax);\n      return get_histogram(nb_levels,vmin,vmax);\n    }\n\n    //! Equalize histogram of pixel values.\n    /**\n       \\param nb_levels Number of histogram levels used for the equalization.\n       \\param min_value Minimum pixel value considered for the histogram computation.\n         All pixel values lower than \\p min_value will not be counted.\n       \\param max_value Maximum pixel value considered for the histogram computation.\n         All pixel values higher than \\p max_value will not be counted.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), res = img.get_equalize(256);\n       (img,res).display();\n       \\endcode\n       \\image html ref_equalize.jpg\n    **/\n    CImg<T>& equalize(const unsigned int nb_levels, const T& min_value, const T& max_value) {\n      if (!nb_levels || is_empty()) return *this;\n      const T\n        vmin = min_value<max_value?min_value:max_value,\n        vmax = min_value<max_value?max_value:min_value;\n      CImg<ulongT> hist = get_histogram(nb_levels,vmin,vmax);\n      ulongT cumul = 0;\n      cimg_forX(hist,pos) { cumul+=hist[pos]; hist[pos] = cumul; }\n      if (!cumul) cumul = 1;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=1048576))\n      cimg_rof(*this,ptrd,T) {\n        const int pos = (int)((*ptrd-vmin)*(nb_levels - 1.)/(vmax-vmin));\n        if (pos>=0 && pos<(int)nb_levels) *ptrd = (T)(vmin + (vmax-vmin)*hist[pos]/cumul);\n      }\n      return *this;\n    }\n\n    //! Equalize histogram of pixel values \\overloading.\n    CImg<T>& equalize(const unsigned int nb_levels) {\n      if (!nb_levels || is_empty()) return *this;\n      T vmax = 0, vmin = min_max(vmax);\n      return equalize(nb_levels,vmin,vmax);\n    }\n\n    //! Equalize histogram of pixel values \\newinstance.\n    CImg<T> get_equalize(const unsigned int nblevels, const T& val_min, const T& val_max) const {\n      return (+*this).equalize(nblevels,val_min,val_max);\n    }\n\n    //! Equalize histogram of pixel values \\newinstance.\n    CImg<T> get_equalize(const unsigned int nblevels) const {\n      return (+*this).equalize(nblevels);\n    }\n\n    //! Index multi-valued pixels regarding to a specified colormap.\n    /**\n       \\param colormap Multi-valued colormap used as the basis for multi-valued pixel indexing.\n       \\param dithering Level of dithering (0=disable, 1=standard level).\n       \\param map_indexes Tell if the values of the resulting image are the colormap indices or the colormap vectors.\n       \\note\n       - \\p img.index(colormap,dithering,1) is equivalent to <tt>img.index(colormap,dithering,0).map(colormap)</tt>.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"), colormap(3,1,1,3, 0,128,255, 0,128,255, 0,128,255);\n       const CImg<float> res = img.get_index(colormap,1,true);\n       (img,res).display();\n       \\endcode\n       \\image html ref_index.jpg\n    **/\n    template<typename t>\n    CImg<T>& index(const CImg<t>& colormap, const float dithering=1, const bool map_indexes=false) {\n      return get_index(colormap,dithering,map_indexes).move_to(*this);\n    }\n\n    //! Index multi-valued pixels regarding to a specified colormap \\newinstance.\n    template<typename t>\n    CImg<typename CImg<t>::Tuint>\n    get_index(const CImg<t>& colormap, const float dithering=1, const bool map_indexes=true) const {\n      if (colormap._spectrum!=_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"index(): Instance and specified colormap (%u,%u,%u,%u,%p) \"\n                                    \"have incompatible dimensions.\",\n                                    cimg_instance,\n                                    colormap._width,colormap._height,colormap._depth,colormap._spectrum,colormap._data);\n\n      typedef typename CImg<t>::Tuint tuint;\n      if (is_empty()) return CImg<tuint>();\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        pwhd = (ulongT)colormap._width*colormap._height*colormap._depth;\n      CImg<tuint> res(_width,_height,_depth,map_indexes?_spectrum:1);\n      tuint *ptrd = res._data;\n      if (dithering>0) { // Dithered versions.\n        const float ndithering = cimg::cut(dithering,0,1)/16;\n        Tfloat valm = 0, valM = (Tfloat)max_min(valm);\n        if (valm==valM && valm>=0 && valM<=255) { valm = 0; valM = 255; }\n        CImg<Tfloat> cache = get_crop(-1,0,0,0,_width,1,0,_spectrum - 1);\n        Tfloat *cache_current = cache.data(1,0,0,0), *cache_next = cache.data(1,1,0,0);\n        const ulongT cwhd = (ulongT)cache._width*cache._height*cache._depth;\n        switch (_spectrum) {\n        case 1 : { // Optimized for scalars.\n          cimg_forYZ(*this,y,z) {\n            if (y<height() - 2) {\n              Tfloat *ptrc0 = cache_next; const T *ptrs0 = data(0,y + 1,z,0);\n              cimg_forX(*this,x) *(ptrc0++) = (Tfloat)*(ptrs0++);\n            }\n            Tfloat *ptrs0 = cache_current, *ptrsn0 = cache_next;\n            cimg_forX(*this,x) {\n              const Tfloat _val0 = (Tfloat)*ptrs0, val0 = _val0<valm?valm:_val0>valM?valM:_val0;\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp_end = ptrp0 + pwhd; ptrp0<ptrp_end; ) {\n                const Tfloat pval0 = (Tfloat)*(ptrp0++) - val0, dist = pval0*pval0;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              const Tfloat err0 = ((*(ptrs0++)=val0) - (Tfloat)*ptrmin0)*ndithering;\n              *ptrs0+=7*err0; *(ptrsn0 - 1)+=3*err0; *(ptrsn0++)+=5*err0; *ptrsn0+=err0;\n              if (map_indexes) *(ptrd++) = (tuint)*ptrmin0; else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n            cimg::swap(cache_current,cache_next);\n          }\n        } break;\n        case 2 : { // Optimized for 2d vectors.\n          tuint *ptrd1 = ptrd + whd;\n          cimg_forYZ(*this,y,z) {\n            if (y<height() - 2) {\n              Tfloat *ptrc0 = cache_next, *ptrc1 = ptrc0 + cwhd;\n              const T *ptrs0 = data(0,y + 1,z,0), *ptrs1 = ptrs0 + whd;\n              cimg_forX(*this,x) { *(ptrc0++) = (Tfloat)*(ptrs0++); *(ptrc1++) = (Tfloat)*(ptrs1++); }\n            }\n            Tfloat\n              *ptrs0 = cache_current, *ptrs1 = ptrs0 + cwhd,\n              *ptrsn0 = cache_next, *ptrsn1 = ptrsn0 + cwhd;\n            cimg_forX(*this,x) {\n              const Tfloat\n                _val0 = (Tfloat)*ptrs0, val0 = _val0<valm?valm:_val0>valM?valM:_val0,\n                _val1 = (Tfloat)*ptrs1, val1 = _val1<valm?valm:_val1>valM?valM:_val1;\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp_end = ptrp1; ptrp0<ptrp_end; ) {\n                const Tfloat\n                  pval0 = (Tfloat)*(ptrp0++) - val0, pval1 = (Tfloat)*(ptrp1++) - val1,\n                  dist = pval0*pval0 + pval1*pval1;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              const t *const ptrmin1 = ptrmin0 + pwhd;\n              const Tfloat\n                err0 = ((*(ptrs0++)=val0) - (Tfloat)*ptrmin0)*ndithering,\n                err1 = ((*(ptrs1++)=val1) - (Tfloat)*ptrmin1)*ndithering;\n              *ptrs0+=7*err0; *ptrs1+=7*err1;\n              *(ptrsn0 - 1)+=3*err0; *(ptrsn1 - 1)+=3*err1;\n              *(ptrsn0++)+=5*err0; *(ptrsn1++)+=5*err1;\n              *ptrsn0+=err0; *ptrsn1+=err1;\n              if (map_indexes) { *(ptrd++) = (tuint)*ptrmin0; *(ptrd1++) = (tuint)*ptrmin1; }\n              else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n            cimg::swap(cache_current,cache_next);\n          }\n        } break;\n        case 3 : { // Optimized for 3d vectors (colors).\n          tuint *ptrd1 = ptrd + whd, *ptrd2 = ptrd1 + whd;\n          cimg_forYZ(*this,y,z) {\n            if (y<height() - 2) {\n              Tfloat *ptrc0 = cache_next, *ptrc1 = ptrc0 + cwhd, *ptrc2 = ptrc1 + cwhd;\n              const T *ptrs0 = data(0,y + 1,z,0), *ptrs1 = ptrs0 + whd, *ptrs2 = ptrs1 + whd;\n              cimg_forX(*this,x) {\n                *(ptrc0++) = (Tfloat)*(ptrs0++); *(ptrc1++) = (Tfloat)*(ptrs1++); *(ptrc2++) = (Tfloat)*(ptrs2++);\n              }\n            }\n            Tfloat\n              *ptrs0 = cache_current, *ptrs1 = ptrs0 + cwhd, *ptrs2 = ptrs1 + cwhd,\n              *ptrsn0 = cache_next, *ptrsn1 = ptrsn0 + cwhd, *ptrsn2 = ptrsn1 + cwhd;\n            cimg_forX(*this,x) {\n              const Tfloat\n                _val0 = (Tfloat)*ptrs0, val0 = _val0<valm?valm:_val0>valM?valM:_val0,\n                _val1 = (Tfloat)*ptrs1, val1 = _val1<valm?valm:_val1>valM?valM:_val1,\n                _val2 = (Tfloat)*ptrs2, val2 = _val2<valm?valm:_val2>valM?valM:_val2;\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp2 = ptrp1 + pwhd,\n                     *ptrp_end = ptrp1; ptrp0<ptrp_end; ) {\n                const Tfloat\n                  pval0 = (Tfloat)*(ptrp0++) - val0,\n                  pval1 = (Tfloat)*(ptrp1++) - val1,\n                  pval2 = (Tfloat)*(ptrp2++) - val2,\n                  dist = pval0*pval0 + pval1*pval1 + pval2*pval2;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              const t *const ptrmin1 = ptrmin0 + pwhd, *const ptrmin2 = ptrmin1 + pwhd;\n              const Tfloat\n                err0 = ((*(ptrs0++)=val0) - (Tfloat)*ptrmin0)*ndithering,\n                err1 = ((*(ptrs1++)=val1) - (Tfloat)*ptrmin1)*ndithering,\n                err2 = ((*(ptrs2++)=val2) - (Tfloat)*ptrmin2)*ndithering;\n\n              *ptrs0+=7*err0; *ptrs1+=7*err1; *ptrs2+=7*err2;\n              *(ptrsn0 - 1)+=3*err0; *(ptrsn1 - 1)+=3*err1; *(ptrsn2 - 1)+=3*err2;\n              *(ptrsn0++)+=5*err0; *(ptrsn1++)+=5*err1; *(ptrsn2++)+=5*err2;\n              *ptrsn0+=err0; *ptrsn1+=err1; *ptrsn2+=err2;\n\n              if (map_indexes) {\n                *(ptrd++) = (tuint)*ptrmin0; *(ptrd1++) = (tuint)*ptrmin1; *(ptrd2++) = (tuint)*ptrmin2;\n              } else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n            cimg::swap(cache_current,cache_next);\n          }\n        } break;\n        default : // Generic version\n          cimg_forYZ(*this,y,z) {\n            if (y<height() - 2) {\n              Tfloat *ptrc = cache_next;\n              cimg_forC(*this,c) {\n                Tfloat *_ptrc = ptrc; const T *_ptrs = data(0,y + 1,z,c);\n                cimg_forX(*this,x) *(_ptrc++) = (Tfloat)*(_ptrs++);\n                ptrc+=cwhd;\n              }\n            }\n            Tfloat *ptrs = cache_current, *ptrsn = cache_next;\n            cimg_forX(*this,x) {\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin = colormap._data;\n              for (const t *ptrp = colormap._data, *ptrp_end = ptrp + pwhd; ptrp<ptrp_end; ++ptrp) {\n                Tfloat dist = 0; Tfloat *_ptrs = ptrs; const t *_ptrp = ptrp;\n                cimg_forC(*this,c) {\n                  const Tfloat _val = *_ptrs, val = _val<valm?valm:_val>valM?valM:_val;\n                  dist+=cimg::sqr((*_ptrs=val) - (Tfloat)*_ptrp); _ptrs+=cwhd; _ptrp+=pwhd;\n                }\n                if (dist<distmin) { ptrmin = ptrp; distmin = dist; }\n              }\n              const t *_ptrmin = ptrmin; Tfloat *_ptrs = ptrs++, *_ptrsn = (ptrsn++) - 1;\n              cimg_forC(*this,c) {\n                const Tfloat err = (*(_ptrs++) - (Tfloat)*_ptrmin)*ndithering;\n                *_ptrs+=7*err; *(_ptrsn++)+=3*err; *(_ptrsn++)+=5*err; *_ptrsn+=err;\n                _ptrmin+=pwhd; _ptrs+=cwhd - 1; _ptrsn+=cwhd - 2;\n              }\n              if (map_indexes) {\n                tuint *_ptrd = ptrd++;\n                cimg_forC(*this,c) { *_ptrd = (tuint)*ptrmin; _ptrd+=whd; ptrmin+=pwhd; }\n              }\n              else *(ptrd++) = (tuint)(ptrmin - colormap._data);\n            }\n            cimg::swap(cache_current,cache_next);\n          }\n        }\n      } else { // Non-dithered versions\n        switch (_spectrum) {\n        case 1 : { // Optimized for scalars.\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=64 && _height*_depth>=16 && pwhd>=16))\n          cimg_forYZ(*this,y,z) {\n            tuint *ptrd = res.data(0,y,z);\n            for (const T *ptrs0 = data(0,y,z), *ptrs_end = ptrs0 + _width; ptrs0<ptrs_end; ) {\n              const Tfloat val0 = (Tfloat)*(ptrs0++);\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp_end = ptrp0 + pwhd; ptrp0<ptrp_end; ) {\n                const Tfloat pval0 = (Tfloat)*(ptrp0++) - val0, dist = pval0*pval0;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              if (map_indexes) *(ptrd++) = (tuint)*ptrmin0; else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n          }\n        } break;\n        case 2 : { // Optimized for 2d vectors.\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=64 && _height*_depth>=16 && pwhd>=16))\n          cimg_forYZ(*this,y,z) {\n            tuint *ptrd = res.data(0,y,z), *ptrd1 = ptrd + whd;\n            for (const T *ptrs0 = data(0,y,z), *ptrs1 = ptrs0 + whd, *ptrs_end = ptrs0 + _width; ptrs0<ptrs_end; ) {\n              const Tfloat val0 = (Tfloat)*(ptrs0++), val1 = (Tfloat)*(ptrs1++);\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp_end = ptrp1; ptrp0<ptrp_end; ) {\n                const Tfloat\n                  pval0 = (Tfloat)*(ptrp0++) - val0, pval1 = (Tfloat)*(ptrp1++) - val1,\n                  dist = pval0*pval0 + pval1*pval1;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              if (map_indexes) { *(ptrd++) = (tuint)*ptrmin0; *(ptrd1++) = (tuint)*(ptrmin0 + pwhd); }\n              else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n          }\n        } break;\n        case 3 : { // Optimized for 3d vectors (colors).\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=64 && _height*_depth>=16 && pwhd>=16))\n          cimg_forYZ(*this,y,z) {\n            tuint *ptrd = res.data(0,y,z), *ptrd1 = ptrd + whd, *ptrd2 = ptrd1 + whd;\n            for (const T *ptrs0 = data(0,y,z), *ptrs1 = ptrs0 + whd, *ptrs2 = ptrs1 + whd,\n                   *ptrs_end = ptrs0 + _width; ptrs0<ptrs_end; ) {\n              const Tfloat val0 = (Tfloat)*(ptrs0++), val1 = (Tfloat)*(ptrs1++), val2 = (Tfloat)*(ptrs2++);\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin0 = colormap._data;\n              for (const t *ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp2 = ptrp1 + pwhd,\n                     *ptrp_end = ptrp1; ptrp0<ptrp_end; ) {\n                const Tfloat\n                  pval0 = (Tfloat)*(ptrp0++) - val0,\n                  pval1 = (Tfloat)*(ptrp1++) - val1,\n                  pval2 = (Tfloat)*(ptrp2++) - val2,\n                  dist = pval0*pval0 + pval1*pval1 + pval2*pval2;\n                if (dist<distmin) { ptrmin0 = ptrp0 - 1; distmin = dist; }\n              }\n              if (map_indexes) {\n                *(ptrd++) = (tuint)*ptrmin0;\n                *(ptrd1++) = (tuint)*(ptrmin0 + pwhd);\n                *(ptrd2++) = (tuint)*(ptrmin0 + 2*pwhd);\n              } else *(ptrd++) = (tuint)(ptrmin0 - colormap._data);\n            }\n          }\n        } break;\n        default : // Generic version.\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=64 && _height*_depth>=16 && pwhd>=16))\n          cimg_forYZ(*this,y,z) {\n            tuint *ptrd = res.data(0,y,z);\n            for (const T *ptrs = data(0,y,z), *ptrs_end = ptrs + _width; ptrs<ptrs_end; ++ptrs) {\n              Tfloat distmin = cimg::type<Tfloat>::max(); const t *ptrmin = colormap._data;\n              for (const t *ptrp = colormap._data, *ptrp_end = ptrp + pwhd; ptrp<ptrp_end; ++ptrp) {\n                Tfloat dist = 0; const T *_ptrs = ptrs; const t *_ptrp = ptrp;\n                cimg_forC(*this,c) { dist+=cimg::sqr((Tfloat)*_ptrs - (Tfloat)*_ptrp); _ptrs+=whd; _ptrp+=pwhd; }\n                if (dist<distmin) { ptrmin = ptrp; distmin = dist; }\n              }\n              if (map_indexes) {\n                tuint *_ptrd = ptrd++;\n                cimg_forC(*this,c) { *_ptrd = (tuint)*ptrmin; _ptrd+=whd; ptrmin+=pwhd; }\n              }\n              else *(ptrd++) = (tuint)(ptrmin - colormap._data);\n            }\n          }\n        }\n      }\n      return res;\n    }\n\n    //! Map predefined colormap on the scalar (indexed) image instance.\n    /**\n       \\param colormap Multi-valued colormap used for mapping the indexes.\n       \\param boundary_conditions The border condition type { 0=zero |  1=dirichlet | 2=periodic }.\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\"),\n                         colormap1(3,1,1,3, 0,128,255, 0,128,255, 0,128,255),\n                         colormap2(3,1,1,3, 255,0,0, 0,255,0, 0,0,255),\n                         res = img.get_index(colormap1,0).map(colormap2);\n       (img,res).display();\n       \\endcode\n       \\image html ref_map.jpg\n    **/\n    template<typename t>\n    CImg<T>& map(const CImg<t>& colormap, const unsigned int boundary_conditions=0) {\n      return get_map(colormap,boundary_conditions).move_to(*this);\n    }\n\n    //! Map predefined colormap on the scalar (indexed) image instance \\newinstance.\n    template<typename t>\n    CImg<t> get_map(const CImg<t>& colormap, const unsigned int boundary_conditions=0) const {\n      if (_spectrum!=1 && colormap._spectrum!=1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"map(): Instance and specified colormap (%u,%u,%u,%u,%p) \"\n                                    \"have incompatible dimensions.\",\n                                    cimg_instance,\n                                    colormap._width,colormap._height,colormap._depth,colormap._spectrum,colormap._data);\n\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        pwhd = (ulongT)colormap._width*colormap._height*colormap._depth;\n      CImg<t> res(_width,_height,_depth,colormap._spectrum==1?_spectrum:colormap._spectrum);\n      switch (colormap._spectrum) {\n\n      case 1 : { // Optimized for scalars.\n        const T *ptrs = _data;\n        switch (boundary_conditions) {\n        case 2 : // Periodic boundaries.\n          cimg_for(res,ptrd,t) {\n            const ulongT ind = (ulongT)*(ptrs++);\n            *ptrd = colormap[ind%pwhd];\n          } break;\n        case 1 : // Neumann boundaries.\n          cimg_for(res,ptrd,t) {\n            const longT ind = (longT)*(ptrs++);\n            *ptrd = colormap[cimg::cut(ind,(longT)0,(longT)pwhd - 1)];\n          } break;\n        default : // Dirichlet boundaries.\n          cimg_for(res,ptrd,t) {\n            const ulongT ind = (ulongT)*(ptrs++);\n            *ptrd = ind<pwhd?colormap[ind]:(t)0;\n          }\n        }\n      } break;\n\n      case 2 : { // Optimized for 2d vectors.\n        switch (boundary_conditions) {\n        case 2 : { // Periodic boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = ((ulongT)*(ptrs++))%pwhd;\n            *(ptrd0++) = ptrp0[ind]; *(ptrd1++) = ptrp1[ind];\n          }\n        } break;\n        case 1 : { // Neumann boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const longT ind = cimg::cut((longT)*(ptrs++),(longT)0,(longT)pwhd - 1);\n            *(ptrd0++) = ptrp0[ind]; *(ptrd1++) = ptrp1[ind];\n          }\n        } break;\n        default : { // Dirichlet boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = (ulongT)*(ptrs++);\n            const bool is_in = ind<pwhd;\n            *(ptrd0++) = is_in?ptrp0[ind]:(t)0; *(ptrd1++) = is_in?ptrp1[ind]:(t)0;\n          }\n        }\n        }\n      } break;\n\n      case 3 : { // Optimized for 3d vectors (colors).\n        switch (boundary_conditions) {\n        case 2 : { // Periodic boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp2 = ptrp1 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd, *ptrd2 = ptrd1 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = ((ulongT)*(ptrs++))%pwhd;\n            *(ptrd0++) = ptrp0[ind]; *(ptrd1++) = ptrp1[ind]; *(ptrd2++) = ptrp2[ind];\n          }\n        } break;\n        case 1 : { // Neumann boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp2 = ptrp1 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd, *ptrd2 = ptrd1 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const longT ind = cimg::cut((longT)*(ptrs++),(longT)0,(longT)pwhd - 1);\n            *(ptrd0++) = ptrp0[ind]; *(ptrd1++) = ptrp1[ind]; *(ptrd2++) = ptrp2[ind];\n          }\n        } break;\n        default : { // Dirichlet boundaries.\n          const t *const ptrp0 = colormap._data, *ptrp1 = ptrp0 + pwhd, *ptrp2 = ptrp1 + pwhd;\n          t *ptrd0 = res._data, *ptrd1 = ptrd0 + whd, *ptrd2 = ptrd1 + whd;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = (ulongT)*(ptrs++);\n            const bool is_in = ind<pwhd;\n            *(ptrd0++) = is_in?ptrp0[ind]:(t)0; *(ptrd1++) = is_in?ptrp1[ind]:(t)0; *(ptrd2++) = is_in?ptrp2[ind]:(t)0;\n          }\n        }\n        }\n      } break;\n\n      default : { // Generic version.\n        switch (boundary_conditions) {\n        case 2 : { // Periodic boundaries.\n          t *ptrd = res._data;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = ((ulongT)*(ptrs++))%pwhd;\n            const t *ptrp = colormap._data + ind;\n            t *_ptrd = ptrd++; cimg_forC(res,c) { *_ptrd = *ptrp; _ptrd+=whd; ptrp+=pwhd; }\n          }\n        } break;\n        case 1 : { // Neumann boundaries.\n          t *ptrd = res._data;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const longT ind = cimg::cut((longT)*(ptrs++),(longT)0,(longT)pwhd - 1);\n            const t *ptrp = colormap._data + ind;\n            t *_ptrd = ptrd++; cimg_forC(res,c) { *_ptrd = *ptrp; _ptrd+=whd; ptrp+=pwhd; }\n          }\n        } break;\n        default : { // Dirichlet boundaries.\n          t *ptrd = res._data;\n          for (const T *ptrs = _data, *ptrs_end = ptrs + whd; ptrs<ptrs_end; ) {\n            const ulongT ind = (ulongT)*(ptrs++);\n            const bool is_in = ind<pwhd;\n            if (is_in) {\n              const t *ptrp = colormap._data + ind;\n              t *_ptrd = ptrd++; cimg_forC(res,c) { *_ptrd = *ptrp; _ptrd+=whd; ptrp+=pwhd; }\n            } else {\n              t *_ptrd = ptrd++; cimg_forC(res,c) { *_ptrd = (t)0; _ptrd+=whd; }\n            }\n          }\n        }\n        }\n      }\n      }\n      return res;\n    }\n\n    //! Label connected components.\n    /**\n       \\param is_high_connectivity Boolean that choose between 4(false)- or 8(true)-connectivity\n       in 2d case, and between 6(false)- or 26(true)-connectivity in 3d case.\n       \\param tolerance Tolerance used to determine if two neighboring pixels belong to the same region.\n       \\note The algorithm of connected components computation has been primarily done\n       by A. Meijster, according to the publication:\n       'W.H. Hesselink, A. Meijster, C. Bron, \"Concurrent Determination of Connected Components.\",\n       In: Science of Computer Programming 41 (2001), pp. 173--194'.\n       The submitted code has then been modified to fit CImg coding style and constraints.\n    **/\n    CImg<T>& label(const bool is_high_connectivity=false, const Tfloat tolerance=0) {\n      return get_label(is_high_connectivity,tolerance).move_to(*this);\n    }\n\n    //! Label connected components \\newinstance.\n    CImg<ulongT> get_label(const bool is_high_connectivity=false,\n                           const Tfloat tolerance=0) const {\n      if (is_empty()) return CImg<ulongT>();\n\n      // Create neighborhood tables.\n      int dx[13], dy[13], dz[13], nb = 0;\n      dx[nb] = 1; dy[nb] = 0; dz[nb++] = 0;\n      dx[nb] = 0; dy[nb] = 1; dz[nb++] = 0;\n      if (is_high_connectivity) {\n        dx[nb] = 1; dy[nb] = 1; dz[nb++] = 0;\n        dx[nb] = 1; dy[nb] = -1; dz[nb++] = 0;\n      }\n      if (_depth>1) { // 3d version.\n        dx[nb] = 0; dy[nb] = 0; dz[nb++]=1;\n        if (is_high_connectivity) {\n          dx[nb] = 1; dy[nb] = 1; dz[nb++] = -1;\n          dx[nb] = 1; dy[nb] = 0; dz[nb++] = -1;\n          dx[nb] = 1; dy[nb] = -1; dz[nb++] = -1;\n          dx[nb] = 0; dy[nb] = 1; dz[nb++] = -1;\n\n          dx[nb] = 0; dy[nb] = 1; dz[nb++] = 1;\n          dx[nb] = 1; dy[nb] = -1; dz[nb++] = 1;\n          dx[nb] = 1; dy[nb] = 0; dz[nb++] = 1;\n          dx[nb] = 1; dy[nb] = 1; dz[nb++] = 1;\n        }\n      }\n      return _label(nb,dx,dy,dz,tolerance);\n    }\n\n    //! Label connected components \\overloading.\n    /**\n       \\param connectivity_mask Mask of the neighboring pixels.\n       \\param tolerance Tolerance used to determine if two neighboring pixels belong to the same region.\n    **/\n    template<typename t>\n    CImg<T>& label(const CImg<t>& connectivity_mask, const Tfloat tolerance=0) {\n      return get_label(connectivity_mask,tolerance).move_to(*this);\n    }\n\n    //! Label connected components \\newinstance.\n    template<typename t>\n    CImg<ulongT> get_label(const CImg<t>& connectivity_mask,\n                           const Tfloat tolerance=0) const {\n      int nb = 0;\n      cimg_for(connectivity_mask,ptr,t) if (*ptr) ++nb;\n      CImg<intT> dx(nb,1,1,1,0), dy(nb,1,1,1,0), dz(nb,1,1,1,0);\n      nb = 0;\n      cimg_forXYZ(connectivity_mask,x,y,z) if ((x || y || z) &&\n                                               connectivity_mask(x,y,z)) {\n        dx[nb] = x; dy[nb] = y; dz[nb++] = z;\n      }\n      return _label(nb,dx,dy,dz,tolerance);\n    }\n\n    CImg<ulongT> _label(const unsigned int nb, const int\n                        *const dx, const int *const dy, const int *const dz,\n                        const Tfloat tolerance) const {\n      CImg<ulongT> res(_width,_height,_depth,_spectrum);\n      cimg_forC(*this,c) {\n        CImg<ulongT> _res = res.get_shared_channel(c);\n\n        // Init label numbers.\n        ulongT *ptr = _res.data();\n        cimg_foroff(_res,p) *(ptr++) = p;\n\n        // For each neighbour-direction, label.\n        for (unsigned int n = 0; n<nb; ++n) {\n          const int _dx = dx[n], _dy = dy[n], _dz = dz[n];\n          if (_dx || _dy || _dz) {\n            const int\n              x0 = _dx<0?-_dx:0,\n              x1 = _dx<0?width():width() - _dx,\n              y0 = _dy<0?-_dy:0,\n              y1 = _dy<0?height():height() - _dy,\n              z0 = _dz<0?-_dz:0,\n              z1 = _dz<0?depth():depth() - _dz;\n            const longT\n              wh = (longT)width()*height(),\n              whd = (longT)width()*height()*depth(),\n              offset = _dz*wh + _dy*width() + _dx;\n            for (longT z = z0, nz = z0 + _dz, pz = z0*wh; z<z1; ++z, ++nz, pz+=wh) {\n              for (longT y = y0, ny = y0 + _dy, py = y0*width() + pz; y<y1; ++y, ++ny, py+=width()) {\n                for (longT x = x0, nx = x0 + _dx, p = x0 + py; x<x1; ++x, ++nx, ++p) {\n                  if ((Tfloat)cimg::abs((*this)(x,y,z,c,wh,whd) - (*this)(nx,ny,nz,c,wh,whd))<=tolerance) {\n                    const longT q = p + offset;\n                    ulongT x, y;\n                    for (x = (ulongT)(p<q?q:p), y = (ulongT)(p<q?p:q); x!=y && _res[x]!=x; ) {\n                      x = _res[x]; if (x<y) cimg::swap(x,y);\n                    }\n                    if (x!=y) _res[x] = (ulongT)y;\n                    for (ulongT _p = (ulongT)p; _p!=y; ) {\n                      const ulongT h = _res[_p];\n                      _res[_p] = (ulongT)y;\n                      _p = h;\n                    }\n                    for (ulongT _q = (ulongT)q; _q!=y; ) {\n                      const ulongT h = _res[_q];\n                      _res[_q] = (ulongT)y;\n                      _q = h;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        // Resolve equivalences.\n        ulongT counter = 0;\n        ptr = _res.data();\n        cimg_foroff(_res,p) { *ptr = *ptr==p?counter++:_res[*ptr]; ++ptr; }\n      }\n      return res;\n    }\n\n    // [internal] Replace possibly malicious characters for commands to be called by system() by their escaped version.\n    CImg<T>& _system_strescape() {\n#define cimg_system_strescape(c,s) case c : if (p!=ptrs) CImg<T>(ptrs,(unsigned int)(p-ptrs),1,1,1,false).\\\n      move_to(list); \\\n      CImg<T>(s,(unsigned int)std::strlen(s),1,1,1,false).move_to(list); ptrs = p + 1; break\n      CImgList<T> list;\n      const T *ptrs = _data;\n      cimg_for(*this,p,T) switch ((int)*p) {\n        cimg_system_strescape('\\\\',\"\\\\\\\\\");\n        cimg_system_strescape('\\\"',\"\\\\\\\"\");\n        cimg_system_strescape('!',\"\\\"\\\\!\\\"\");\n        cimg_system_strescape('`',\"\\\\`\");\n        cimg_system_strescape('$',\"\\\\$\");\n      }\n      if (ptrs<end()) CImg<T>(ptrs,(unsigned int)(end()-ptrs),1,1,1,false).move_to(list);\n      return (list>'x').move_to(*this);\n    }\n\n    //@}\n    //---------------------------------\n    //\n    //! \\name Color Base Management\n    //@{\n    //---------------------------------\n\n    //! Return colormap \\e \"default\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_default.jpg\n    **/\n    static const CImg<Tuchar>& default_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        colormap.assign(1,256,1,3);\n        for (unsigned int index = 0, r = 16; r<256; r+=32)\n          for (unsigned int g = 16; g<256; g+=32)\n            for (unsigned int b = 32; b<256; b+=64) {\n              colormap(0,index,0) = (Tuchar)r;\n              colormap(0,index,1) = (Tuchar)g;\n              colormap(0,index++,2) = (Tuchar)b;\n            }\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"HSV\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_hsv.jpg\n    **/\n    static const CImg<Tuchar>& HSV_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        CImg<Tint> tmp(1,256,1,3,1);\n        tmp.get_shared_channel(0).sequence(0,359);\n        colormap = tmp.HSVtoRGB();\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"lines\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_lines.jpg\n    **/\n    static const CImg<Tuchar>& lines_LUT256() {\n      static const unsigned char pal[] = {\n        217,62,88,75,1,237,240,12,56,160,165,116,1,1,204,2,15,248,148,185,133,141,46,246,222,116,16,5,207,226,\n        17,114,247,1,214,53,238,0,95,55,233,235,109,0,17,54,33,0,90,30,3,0,94,27,19,0,68,212,166,130,0,15,7,119,\n        238,2,246,198,0,3,16,10,13,2,25,28,12,6,2,99,18,141,30,4,3,140,12,4,30,233,7,10,0,136,35,160,168,184,20,\n        233,0,1,242,83,90,56,180,44,41,0,6,19,207,5,31,214,4,35,153,180,75,21,76,16,202,218,22,17,2,136,71,74,\n        81,251,244,148,222,17,0,234,24,0,200,16,239,15,225,102,230,186,58,230,110,12,0,7,129,249,22,241,37,219,\n        1,3,254,210,3,212,113,131,197,162,123,252,90,96,209,60,0,17,0,180,249,12,112,165,43,27,229,77,40,195,12,\n        87,1,210,148,47,80,5,9,1,137,2,40,57,205,244,40,8,252,98,0,40,43,206,31,187,0,180,1,69,70,227,131,108,0,\n        223,94,228,35,248,243,4,16,0,34,24,2,9,35,73,91,12,199,51,1,249,12,103,131,20,224,2,70,32,\n        233,1,165,3,8,154,246,233,196,5,0,6,183,227,247,195,208,36,0,0,226,160,210,198,69,153,210,1,23,8,192,2,4,\n        137,1,0,52,2,249,241,129,0,0,234,7,238,71,7,32,15,157,157,252,158,2,250,6,13,30,11,162,0,199,21,11,27,224,\n        4,157,20,181,111,187,218,3,0,11,158,230,196,34,223,22,248,135,254,210,157,219,0,117,239,3,255,4,227,5,247,\n        11,4,3,188,111,11,105,195,2,0,14,1,21,219,192,0,183,191,113,241,1,12,17,248,0,48,7,19,1,254,212,0,239,246,\n        0,23,0,250,165,194,194,17,3,253,0,24,6,0,141,167,221,24,212,2,235,243,0,0,205,1,251,133,204,28,4,6,1,10,\n        141,21,74,12,236,254,228,19,1,0,214,1,186,13,13,6,13,16,27,209,6,216,11,207,251,59,32,9,155,23,19,235,143,\n        116,6,213,6,75,159,23,6,0,228,4,10,245,249,1,7,44,234,4,102,174,0,19,239,103,16,15,18,8,214,22,4,47,244,\n        255,8,0,251,173,1,212,252,250,251,252,6,0,29,29,222,233,246,5,149,0,182,180,13,151,0,203,183,0,35,149,0,\n        235,246,254,78,9,17,203,73,11,195,0,3,5,44,0,0,237,5,106,6,130,16,214,20,168,247,168,4,207,11,5,1,232,251,\n        129,210,116,231,217,223,214,27,45,38,4,177,186,249,7,215,172,16,214,27,249,230,236,2,34,216,217,0,175,30,\n        243,225,244,182,20,212,2,226,21,255,20,0,2,13,62,13,191,14,76,64,20,121,4,118,0,216,1,147,0,2,210,1,215,\n        95,210,236,225,184,46,0,248,24,11,1,9,141,250,243,9,221,233,160,11,147,2,55,8,23,12,253,9,0,54,0,231,6,3,\n        141,8,2,246,9,180,5,11,8,227,8,43,110,242,1,130,5,97,36,10,6,219,86,133,11,108,6,1,5,244,67,19,28,0,174,\n        154,16,127,149,252,188,196,196,228,244,9,249,0,0,0,37,170,32,250,0,73,255,23,3,224,234,38,195,198,0,255,87,\n        33,221,174,31,3,0,189,228,6,153,14,144,14,108,197,0,9,206,245,254,3,16,253,178,248,0,95,125,8,0,3,168,21,\n        23,168,19,50,240,244,185,0,1,144,10,168,31,82,1,13 };\n      static const CImg<Tuchar> colormap(pal,1,256,1,3,false);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"hot\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_hot.jpg\n    **/\n    static const CImg<Tuchar>& hot_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        colormap.assign(1,4,1,3,(T)0);\n        colormap[1] = colormap[2] = colormap[3] = colormap[6] = colormap[7] = colormap[11] = 255;\n        colormap.resize(1,256,1,3,3);\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"cool\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_cool.jpg\n    **/\n    static const CImg<Tuchar>& cool_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) colormap.assign(1,2,1,3).fill((T)0,(T)255,(T)255,(T)0,(T)255,(T)255).resize(1,256,1,3,3);\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"jet\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_jet.jpg\n    **/\n    static const CImg<Tuchar>& jet_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        colormap.assign(1,4,1,3,(T)0);\n        colormap[2] = colormap[3] = colormap[5] = colormap[6] = colormap[8] = colormap[9] = 255;\n        colormap.resize(1,256,1,3,3);\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"flag\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_flag.jpg\n    **/\n    static const CImg<Tuchar>& flag_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        colormap.assign(1,4,1,3,(T)0);\n        colormap[0] = colormap[1] = colormap[5] = colormap[9] = colormap[10] = 255;\n        colormap.resize(1,256,1,3,0,2);\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Return colormap \\e \"cube\", containing 256 colors entries in RGB.\n    /**\n       \\return The following \\c 256x1x1x3 colormap is returned:\n       \\image html ref_colormap_cube.jpg\n    **/\n    static const CImg<Tuchar>& cube_LUT256() {\n      static CImg<Tuchar> colormap;\n      cimg::mutex(8);\n      if (!colormap) {\n        colormap.assign(1,8,1,3,(T)0);\n        colormap[1] = colormap[3] = colormap[5] = colormap[7] =\n          colormap[10] = colormap[11] = colormap[12] = colormap[13] =\n          colormap[20] = colormap[21] = colormap[22] = colormap[23] = 255;\n        colormap.resize(1,256,1,3,3);\n      }\n      cimg::mutex(8,0);\n      return colormap;\n    }\n\n    //! Convert pixel values from sRGB to RGB color spaces.\n    CImg<T>& sRGBtoRGB() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32))\n      cimg_rof(*this,ptr,T) {\n        const Tfloat\n          sval = (Tfloat)*ptr/255,\n          val = (Tfloat)(sval<=0.04045f?sval/12.92f:std::pow((sval + 0.055f)/(1.055f),2.4f));\n        *ptr = (T)cimg::cut(val*255,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from sRGB to RGB color spaces \\newinstance.\n    CImg<Tfloat> get_sRGBtoRGB() const {\n      return CImg<Tfloat>(*this,false).sRGBtoRGB();\n    }\n\n    //! Convert pixel values from RGB to sRGB color spaces.\n    CImg<T>& RGBtosRGB() {\n      if (is_empty()) return *this;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(size()>=32))\n      cimg_rof(*this,ptr,T) {\n        const Tfloat\n          val = (Tfloat)*ptr/255,\n          sval = (Tfloat)(val<=0.0031308f?val*12.92f:1.055f*std::pow(val,0.416667f) - 0.055f);\n        *ptr = (T)cimg::cut(sval*255,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to sRGB color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtosRGB() const {\n      return CImg<Tfloat>(*this,false).RGBtosRGB();\n    }\n\n    //! Convert pixel values from RGB to HSI color spaces.\n    CImg<T>& RGBtoHSI() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoHSI(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N],\n          G = (Tfloat)p2[N],\n          B = (Tfloat)p3[N],\n          theta = (Tfloat)(std::acos(0.5f*((R - G) + (R - B))/\n                                     std::sqrt(cimg::sqr(R - G) + (R - B)*(G - B)))*180/cimg::PI),\n          m = cimg::min(R,G,B),\n          sum = R + G + B;\n        Tfloat H = 0, S = 0, I = 0;\n        if (theta>0) H = B<=G?theta:360 - theta;\n        if (sum>0) S = 1 - 3*m/sum;\n        I = sum/(3*255);\n        p1[N] = (T)cimg::cut(H,0,360);\n        p2[N] = (T)cimg::cut(S,0,1);\n        p3[N] = (T)cimg::cut(I,0,1);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to HSI color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoHSI() const {\n      return CImg<Tfloat>(*this,false).RGBtoHSI();\n    }\n\n    //! Convert pixel values from HSI to RGB color spaces.\n    CImg<T>& HSItoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"HSItoRGB(): Instance is not a HSI image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        Tfloat\n          H = cimg::mod((Tfloat)p1[N],(Tfloat)360),\n          S = (Tfloat)p2[N],\n          I = (Tfloat)p3[N],\n          a = I*(1 - S),\n          R = 0, G = 0, B = 0;\n        if (H<120) {\n          B = a;\n          R = (Tfloat)(I*(1 + S*std::cos(H*cimg::PI/180)/std::cos((60 - H)*cimg::PI/180)));\n          G = 3*I - (R + B);\n        } else if (H<240) {\n          H-=120;\n          R = a;\n          G = (Tfloat)(I*(1 + S*std::cos(H*cimg::PI/180)/std::cos((60 - H)*cimg::PI/180)));\n          B = 3*I - (R + G);\n        } else {\n          H-=240;\n          G = a;\n          B = (Tfloat)(I*(1 + S*std::cos(H*cimg::PI/180)/std::cos((60 - H)*cimg::PI/180)));\n          R = 3*I - (G + B);\n        }\n        p1[N] = (T)cimg::cut(R*255,0,255);\n        p2[N] = (T)cimg::cut(G*255,0,255);\n        p3[N] = (T)cimg::cut(B*255,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from HSI to RGB color spaces \\newinstance.\n    CImg<Tfloat> get_HSItoRGB() const {\n      return CImg< Tuchar>(*this,false).HSItoRGB();\n    }\n\n    //! Convert pixel values from RGB to HSL color spaces.\n    CImg<T>& RGBtoHSL() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoHSL(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N],\n          G = (Tfloat)p2[N],\n          B = (Tfloat)p3[N],\n          m = cimg::min(R,G,B),\n          M = cimg::max(R,G,B),\n          L = (m + M)/(2*255);\n        Tfloat H = 0, S = 0;\n        if (M==m) H = S = 0;\n        else {\n          const Tfloat\n            f = R==m?G - B:G==m?B - R:R - G,\n            i = R==m?3:G==m?5:1;\n          H = i - f/(M - m);\n          if (H>=6) H-=6;\n          H*=60;\n          S = 2*L<=1?(M - m)/(M + m):(M - m)/(2*255 - M - m);\n        }\n        p1[N] = (T)cimg::cut(H,0,360);\n        p2[N] = (T)cimg::cut(S,0,1);\n        p3[N] = (T)cimg::cut(L,0,1);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to HSL color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoHSL() const {\n      return CImg<Tfloat>(*this,false).RGBtoHSL();\n    }\n\n    //! Convert pixel values from HSL to RGB color spaces.\n    CImg<T>& HSLtoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"HSLtoRGB(): Instance is not a HSL image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          H = cimg::mod((Tfloat)p1[N],(Tfloat)360),\n          S = (Tfloat)p2[N],\n          L = (Tfloat)p3[N],\n          q = 2*L<1?L*(1 + S):L + S - L*S,\n          p = 2*L - q,\n          h = H/360,\n          tr = h + (Tfloat)1/3,\n          tg = h,\n          tb = h - (Tfloat)1/3,\n          ntr = tr<0?tr + 1:tr>1?tr - 1:(Tfloat)tr,\n          ntg = tg<0?tg + 1:tg>1?tg - 1:(Tfloat)tg,\n          ntb = tb<0?tb + 1:tb>1?tb - 1:(Tfloat)tb,\n          R = 6*ntr<1?p + (q - p)*6*ntr:2*ntr<1?q:3*ntr<2?p + (q - p)*6*(2.0f/3 - ntr):p,\n          G = 6*ntg<1?p + (q - p)*6*ntg:2*ntg<1?q:3*ntg<2?p + (q - p)*6*(2.0f/3 - ntg):p,\n          B = 6*ntb<1?p + (q - p)*6*ntb:2*ntb<1?q:3*ntb<2?p + (q - p)*6*(2.0f/3 - ntb):p;\n        p1[N] = (T)cimg::cut(255*R,0,255);\n        p2[N] = (T)cimg::cut(255*G,0,255);\n        p3[N] = (T)cimg::cut(255*B,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from HSL to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_HSLtoRGB() const {\n      return CImg<Tuchar>(*this,false).HSLtoRGB();\n    }\n\n    //! Convert pixel values from RGB to HSV color spaces.\n    CImg<T>& RGBtoHSV() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoHSV(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N],\n          G = (Tfloat)p2[N],\n          B = (Tfloat)p3[N],\n          m = cimg::min(R,G,B),\n          M = cimg::max(R,G,B);\n        Tfloat H = 0, S = 0;\n        if (M!=m) {\n          const Tfloat\n            f = R==m?G - B:G==m?B - R:R - G,\n            i = R==m?3:G==m?5:1;\n          H = i - f/(M - m);\n          if (H>=6) H-=6;\n          H*=60;\n          S = (M - m)/M;\n        }\n        p1[N] = (T)cimg::cut(H,0,360);\n        p2[N] = (T)cimg::cut(S,0,1);\n        p3[N] = (T)cimg::cut(M/255,0,1);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to HSV color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoHSV() const {\n      return CImg<Tfloat>(*this,false).RGBtoHSV();\n    }\n\n    //! Convert pixel values from HSV to RGB color spaces.\n    CImg<T>& HSVtoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"HSVtoRGB(): Instance is not a HSV image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=256))\n      for (ulongT N = 0; N<whd; ++N) {\n        Tfloat\n          H = cimg::mod((Tfloat)p1[N],(Tfloat)360),\n          S = (Tfloat)p2[N],\n          V = (Tfloat)p3[N],\n          R = 0, G = 0, B = 0;\n        if (H==0 && S==0) R = G = B = V;\n        else {\n          H/=60;\n          const int i = (int)std::floor(H);\n          const Tfloat\n            f = (i&1)?H - i:1 - H + i,\n            m = V*(1 - S),\n            n = V*(1 - S*f);\n          switch (i) {\n          case 6 :\n          case 0 : R = V; G = n; B = m; break;\n          case 1 : R = n; G = V; B = m; break;\n          case 2 : R = m; G = V; B = n; break;\n          case 3 : R = m; G = n; B = V; break;\n          case 4 : R = n; G = m; B = V; break;\n          case 5 : R = V; G = m; B = n; break;\n          }\n        }\n        p1[N] = (T)cimg::cut(R*255,0,255);\n        p2[N] = (T)cimg::cut(G*255,0,255);\n        p3[N] = (T)cimg::cut(B*255,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from HSV to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_HSVtoRGB() const {\n      return CImg<Tuchar>(*this,false).HSVtoRGB();\n    }\n\n    //! Convert pixel values from RGB to YCbCr color spaces.\n    CImg<T>& RGBtoYCbCr() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoYCbCr(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=512))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N],\n          G = (Tfloat)p2[N],\n          B = (Tfloat)p3[N],\n          Y = (66*R + 129*G + 25*B + 128)/256 + 16,\n          Cb = (-38*R - 74*G + 112*B + 128)/256 + 128,\n          Cr = (112*R - 94*G - 18*B + 128)/256 + 128;\n        p1[N] = (T)cimg::cut(Y,0,255),\n        p2[N] = (T)cimg::cut(Cb,0,255),\n        p3[N] = (T)cimg::cut(Cr,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to YCbCr color spaces \\newinstance.\n    CImg<Tuchar> get_RGBtoYCbCr() const {\n      return CImg<Tuchar>(*this,false).RGBtoYCbCr();\n    }\n\n    //! Convert pixel values from RGB to YCbCr color spaces.\n    CImg<T>& YCbCrtoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"YCbCrtoRGB(): Instance is not a YCbCr image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=512))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          Y = (Tfloat)p1[N] - 16,\n          Cb = (Tfloat)p2[N] - 128,\n          Cr = (Tfloat)p3[N] - 128,\n          R = (298*Y + 409*Cr + 128)/256,\n          G = (298*Y - 100*Cb - 208*Cr + 128)/256,\n          B = (298*Y + 516*Cb + 128)/256;\n        p1[N] = (T)cimg::cut(R,0,255),\n        p2[N] = (T)cimg::cut(G,0,255),\n        p3[N] = (T)cimg::cut(B,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to YCbCr color spaces \\newinstance.\n    CImg<Tuchar> get_YCbCrtoRGB() const {\n      return CImg<Tuchar>(*this,false).YCbCrtoRGB();\n    }\n\n    //! Convert pixel values from RGB to YUV color spaces.\n    CImg<T>& RGBtoYUV() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoYUV(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=16384))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N]/255,\n          G = (Tfloat)p2[N]/255,\n          B = (Tfloat)p3[N]/255,\n          Y = 0.299f*R + 0.587f*G + 0.114f*B;\n        p1[N] = (T)Y;\n        p2[N] = (T)(0.492f*(B - Y));\n        p3[N] = (T)(0.877*(R - Y));\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to YUV color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoYUV() const {\n      return CImg<Tfloat>(*this,false).RGBtoYUV();\n    }\n\n    //! Convert pixel values from YUV to RGB color spaces.\n    CImg<T>& YUVtoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"YUVtoRGB(): Instance is not a YUV image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=16384))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          Y = (Tfloat)p1[N],\n          U = (Tfloat)p2[N],\n          V = (Tfloat)p3[N],\n          R = (Y + 1.140f*V)*255,\n          G = (Y - 0.395f*U - 0.581f*V)*255,\n          B = (Y + 2.032f*U)*255;\n        p1[N] = (T)cimg::cut(R,0,255),\n        p2[N] = (T)cimg::cut(G,0,255),\n        p3[N] = (T)cimg::cut(B,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from YUV to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_YUVtoRGB() const {\n      return CImg< Tuchar>(*this,false).YUVtoRGB();\n    }\n\n    //! Convert pixel values from RGB to CMY color spaces.\n    CImg<T>& RGBtoCMY() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoCMY(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=2048))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N],\n          G = (Tfloat)p2[N],\n          B = (Tfloat)p3[N],\n          C = 255 - R,\n          M = 255 - G,\n          Y = 255 - B;\n        p1[N] = (T)cimg::cut(C,0,255),\n        p2[N] = (T)cimg::cut(M,0,255),\n        p3[N] = (T)cimg::cut(Y,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to CMY color spaces \\newinstance.\n    CImg<Tuchar> get_RGBtoCMY() const {\n      return CImg<Tfloat>(*this,false).RGBtoCMY();\n    }\n\n    //! Convert pixel values from CMY to RGB color spaces.\n    CImg<T>& CMYtoRGB() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"CMYtoRGB(): Instance is not a CMY image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=2048))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          C = (Tfloat)p1[N],\n          M = (Tfloat)p2[N],\n          Y = (Tfloat)p3[N],\n          R = 255 - C,\n          G = 255 - M,\n          B = 255 - Y;\n        p1[N] = (T)cimg::cut(R,0,255),\n        p2[N] = (T)cimg::cut(G,0,255),\n        p3[N] = (T)cimg::cut(B,0,255);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from CMY to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_CMYtoRGB() const {\n      return CImg<Tuchar>(*this,false).CMYtoRGB();\n    }\n\n    //! Convert pixel values from CMY to CMYK color spaces.\n    CImg<T>& CMYtoCMYK() {\n      return get_CMYtoCMYK().move_to(*this);\n    }\n\n    //! Convert pixel values from CMY to CMYK color spaces \\newinstance.\n    CImg<Tuchar> get_CMYtoCMYK() const {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"CMYtoCMYK(): Instance is not a CMY image.\",\n                                    cimg_instance);\n\n      CImg<Tfloat> res(_width,_height,_depth,4);\n      const T *ps1 = data(0,0,0,0), *ps2 = data(0,0,0,1), *ps3 = data(0,0,0,2);\n      Tfloat *pd1 = res.data(0,0,0,0), *pd2 = res.data(0,0,0,1), *pd3 = res.data(0,0,0,2), *pd4 = res.data(0,0,0,3);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=1024))\n      for (ulongT N = 0; N<whd; ++N) {\n        Tfloat\n          C = (Tfloat)ps1[N],\n          M = (Tfloat)ps2[N],\n          Y = (Tfloat)ps3[N],\n          K = cimg::min(C,M,Y);\n        if (K>=255) C = M = Y = 0;\n        else { const Tfloat K1 = 255 - K; C = 255*(C - K)/K1; M = 255*(M - K)/K1; Y = 255*(Y - K)/K1; }\n        pd1[N] = (Tfloat)cimg::cut(C,0,255),\n        pd2[N] = (Tfloat)cimg::cut(M,0,255),\n        pd3[N] = (Tfloat)cimg::cut(Y,0,255),\n        pd4[N] = (Tfloat)cimg::cut(K,0,255);\n      }\n      return res;\n    }\n\n    //! Convert pixel values from CMYK to CMY color spaces.\n    CImg<T>& CMYKtoCMY() {\n      return get_CMYKtoCMY().move_to(*this);\n    }\n\n    //! Convert pixel values from CMYK to CMY color spaces \\newinstance.\n    CImg<Tfloat> get_CMYKtoCMY() const {\n      if (_spectrum!=4)\n        throw CImgInstanceException(_cimg_instance\n                                    \"CMYKtoCMY(): Instance is not a CMYK image.\",\n                                    cimg_instance);\n\n      CImg<Tfloat> res(_width,_height,_depth,3);\n      const T *ps1 = data(0,0,0,0), *ps2 = data(0,0,0,1), *ps3 = data(0,0,0,2), *ps4 = data(0,0,0,3);\n      Tfloat *pd1 = res.data(0,0,0,0), *pd2 = res.data(0,0,0,1), *pd3 = res.data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=1024))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          C = (Tfloat)ps1[N],\n          M = (Tfloat)ps2[N],\n          Y = (Tfloat)ps3[N],\n          K = (Tfloat)ps4[N],\n          K1 = 1 - K/255,\n          nC = C*K1 + K,\n          nM = M*K1 + K,\n          nY = Y*K1 + K;\n        pd1[N] = (Tfloat)cimg::cut(nC,0,255),\n        pd2[N] = (Tfloat)cimg::cut(nM,0,255),\n        pd3[N] = (Tfloat)cimg::cut(nY,0,255);\n      }\n      return res;\n    }\n\n    //! Convert pixel values from RGB to XYZ color spaces.\n    /**\n       \\param use_D65 Tell to use the D65 illuminant (D50 otherwise).\n    **/\n    CImg<T>& RGBtoXYZ(const bool use_D65=true) {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"RGBtoXYZ(): Instance is not a RGB image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=2048))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          R = (Tfloat)p1[N]/255,\n          G = (Tfloat)p2[N]/255,\n          B = (Tfloat)p3[N]/255;\n        if (use_D65) { // D65\n          p1[N] = (T)(0.4124564*R + 0.3575761*G + 0.1804375*B);\n          p2[N] = (T)(0.2126729*R + 0.7151522*G + 0.0721750*B);\n          p3[N] = (T)(0.0193339*R + 0.1191920*G + 0.9503041*B);\n        } else { // D50\n          p1[N] = (T)(0.43603516*R + 0.38511658*G + 0.14305115*B);\n          p2[N] = (T)(0.22248840*R + 0.71690369*G + 0.06060791*B);\n          p3[N] = (T)(0.01391602*R + 0.09706116*G + 0.71392822*B);\n        }\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from RGB to XYZ color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoXYZ(const bool use_D65=true) const {\n      return CImg<Tfloat>(*this,false).RGBtoXYZ(use_D65);\n    }\n\n    //! Convert pixel values from XYZ to RGB color spaces.\n    /**\n       \\param use_D65 Tell to use the D65 illuminant (D50 otherwise).\n    **/\n    CImg<T>& XYZtoRGB(const bool use_D65=true) {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"XYZtoRGB(): Instance is not a XYZ image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=2048))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          X = (Tfloat)p1[N]*255,\n          Y = (Tfloat)p2[N]*255,\n          Z = (Tfloat)p3[N]*255;\n        if (use_D65) {\n          p1[N] = (T)cimg::cut(3.2404542*X - 1.5371385*Y - 0.4985314*Z,0,255);\n          p2[N] = (T)cimg::cut(-0.9692660*X + 1.8760108*Y + 0.0415560*Z,0,255);\n          p3[N] = (T)cimg::cut(0.0556434*X - 0.2040259*Y + 1.0572252*Z,0,255);\n        } else {\n          p1[N] = (T)cimg::cut(3.134274799724*X  - 1.617275708956*Y - 0.490724283042*Z,0,255);\n          p2[N] = (T)cimg::cut(-0.978795575994*X + 1.916161689117*Y + 0.033453331711*Z,0,255);\n          p3[N] = (T)cimg::cut(0.071976988401*X - 0.228984974402*Y + 1.405718224383*Z,0,255);\n        }\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from XYZ to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_XYZtoRGB(const bool use_D65=true) const {\n      return CImg<Tuchar>(*this,false).XYZtoRGB(use_D65);\n    }\n\n    //! Convert pixel values from XYZ to Lab color spaces.\n    CImg<T>& XYZtoLab(const bool use_D65=true) {\n#define _cimg_Labf(x) (24389*(x)>216?cimg::cbrt(x):(24389*(x)/27 + 16)/116)\n\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"XYZtoLab(): Instance is not a XYZ image.\",\n                                    cimg_instance);\n      const CImg<Tfloat> white = CImg<Tfloat>(1,1,1,3,255).RGBtoXYZ(use_D65);\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=128))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          X = (Tfloat)(p1[N]/white[0]),\n          Y = (Tfloat)(p2[N]/white[1]),\n          Z = (Tfloat)(p3[N]/white[2]),\n          fX = (Tfloat)_cimg_Labf(X),\n          fY = (Tfloat)_cimg_Labf(Y),\n          fZ = (Tfloat)_cimg_Labf(Z);\n        p1[N] = (T)cimg::cut(116*fY - 16,0,100);\n        p2[N] = (T)(500*(fX - fY));\n        p3[N] = (T)(200*(fY - fZ));\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from XYZ to Lab color spaces \\newinstance.\n    CImg<Tfloat> get_XYZtoLab(const bool use_D65=true) const {\n      return CImg<Tfloat>(*this,false).XYZtoLab(use_D65);\n    }\n\n    //! Convert pixel values from Lab to XYZ color spaces.\n    CImg<T>& LabtoXYZ(const bool use_D65=true) {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"LabtoXYZ(): Instance is not a Lab image.\",\n                                    cimg_instance);\n      const CImg<Tfloat> white = CImg<Tfloat>(1,1,1,3,255).RGBtoXYZ(use_D65);\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=128))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          L = (Tfloat)p1[N],\n          a = (Tfloat)p2[N],\n          b = (Tfloat)p3[N],\n          cY = (L + 16)/116,\n          cZ = cY - b/200,\n          cX = a/500 + cY,\n          X = (Tfloat)(24389*cX>216?cX*cX*cX:(116*cX - 16)*27/24389),\n          Y = (Tfloat)(27*L>216?cY*cY*cY:27*L/24389),\n          Z = (Tfloat)(24389*cZ>216?cZ*cZ*cZ:(116*cZ - 16)*27/24389);\n        p1[N] = (T)(X*white[0]);\n        p2[N] = (T)(Y*white[1]);\n        p3[N] = (T)(Z*white[2]);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from Lab to XYZ color spaces \\newinstance.\n    CImg<Tfloat> get_LabtoXYZ(const bool use_D65=true) const {\n      return CImg<Tfloat>(*this,false).LabtoXYZ(use_D65);\n    }\n\n    //! Convert pixel values from XYZ to xyY color spaces.\n    CImg<T>& XYZtoxyY() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"XYZtoxyY(): Instance is not a XYZ image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=4096))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n          X = (Tfloat)p1[N],\n          Y = (Tfloat)p2[N],\n          Z = (Tfloat)p3[N],\n          sum = X + Y + Z,\n          nsum = sum>0?sum:1;\n        p1[N] = (T)(X/nsum);\n        p2[N] = (T)(Y/nsum);\n        p3[N] = (T)Y;\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from XYZ to xyY color spaces \\newinstance.\n    CImg<Tfloat> get_XYZtoxyY() const {\n      return CImg<Tfloat>(*this,false).XYZtoxyY();\n    }\n\n    //! Convert pixel values from xyY pixels to XYZ color spaces.\n    CImg<T>& xyYtoXYZ() {\n      if (_spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"xyYtoXYZ(): Instance is not a xyY image.\",\n                                    cimg_instance);\n\n      T *p1 = data(0,0,0,0), *p2 = data(0,0,0,1), *p3 = data(0,0,0,2);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(whd>=4096))\n      for (ulongT N = 0; N<whd; ++N) {\n        const Tfloat\n         px = (Tfloat)p1[N],\n         py = (Tfloat)p2[N],\n         Y = (Tfloat)p3[N],\n         ny = py>0?py:1;\n        p1[N] = (T)(px*Y/ny);\n        p2[N] = (T)Y;\n        p3[N] = (T)((1 - px - py)*Y/ny);\n      }\n      return *this;\n    }\n\n    //! Convert pixel values from xyY pixels to XYZ color spaces \\newinstance.\n    CImg<Tfloat> get_xyYtoXYZ() const {\n      return CImg<Tfloat>(*this,false).xyYtoXYZ();\n    }\n\n    //! Convert pixel values from RGB to Lab color spaces.\n    CImg<T>& RGBtoLab(const bool use_D65=true) {\n      return RGBtoXYZ(use_D65).XYZtoLab(use_D65);\n    }\n\n    //! Convert pixel values from RGB to Lab color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoLab(const bool use_D65=true) const {\n      return CImg<Tfloat>(*this,false).RGBtoLab(use_D65);\n    }\n\n    //! Convert pixel values from Lab to RGB color spaces.\n    CImg<T>& LabtoRGB(const bool use_D65=true) {\n      return LabtoXYZ().XYZtoRGB(use_D65);\n    }\n\n    //! Convert pixel values from Lab to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_LabtoRGB(const bool use_D65=true) const {\n      return CImg<Tuchar>(*this,false).LabtoRGB(use_D65);\n    }\n\n    //! Convert pixel values from RGB to xyY color spaces.\n    CImg<T>& RGBtoxyY(const bool use_D65=true) {\n      return RGBtoXYZ(use_D65).XYZtoxyY();\n    }\n\n    //! Convert pixel values from RGB to xyY color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoxyY(const bool use_D65=true) const {\n      return CImg<Tfloat>(*this,false).RGBtoxyY(use_D65);\n    }\n\n    //! Convert pixel values from xyY to RGB color spaces.\n    CImg<T>& xyYtoRGB(const bool use_D65=true) {\n      return xyYtoXYZ().XYZtoRGB(use_D65);\n    }\n\n    //! Convert pixel values from xyY to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_xyYtoRGB(const bool use_D65=true) const {\n      return CImg<Tuchar>(*this,false).xyYtoRGB(use_D65);\n    }\n\n    //! Convert pixel values from RGB to CMYK color spaces.\n    CImg<T>& RGBtoCMYK() {\n      return RGBtoCMY().CMYtoCMYK();\n    }\n\n    //! Convert pixel values from RGB to CMYK color spaces \\newinstance.\n    CImg<Tfloat> get_RGBtoCMYK() const {\n      return CImg<Tfloat>(*this,false).RGBtoCMYK();\n    }\n\n    //! Convert pixel values from CMYK to RGB color spaces.\n    CImg<T>& CMYKtoRGB() {\n      return CMYKtoCMY().CMYtoRGB();\n    }\n\n    //! Convert pixel values from CMYK to RGB color spaces \\newinstance.\n    CImg<Tuchar> get_CMYKtoRGB() const {\n      return CImg<Tuchar>(*this,false).CMYKtoRGB();\n    }\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Geometric / Spatial Manipulation\n    //@{\n    //------------------------------------------\n\n    static float _cimg_lanczos(const float x) {\n      if (x<=-2 || x>=2) return 0;\n      const float a = (float)cimg::PI*x, b = 0.5f*a;\n      return (float)(x?std::sin(a)*std::sin(b)/(a*b):1);\n    }\n\n    //! Resize image to new dimensions.\n    /**\n       \\param size_x Number of columns (new size along the X-axis).\n       \\param size_y Number of rows (new size along the Y-axis).\n       \\param size_z Number of slices (new size along the Z-axis).\n       \\param size_c Number of vector-channels (new size along the C-axis).\n       \\param interpolation_type Method of interpolation:\n       - -1 = no interpolation: raw memory resizing.\n       - 0 = no interpolation: additional space is filled according to \\p boundary_conditions.\n       - 1 = nearest-neighbor interpolation.\n       - 2 = moving average interpolation.\n       - 3 = linear interpolation.\n       - 4 = grid interpolation.\n       - 5 = cubic interpolation.\n       - 6 = lanczos interpolation.\n       \\param boundary_conditions Border condition type.\n       \\param centering_x Set centering type (only if \\p interpolation_type=0).\n       \\param centering_y Set centering type (only if \\p interpolation_type=0).\n       \\param centering_z Set centering type (only if \\p interpolation_type=0).\n       \\param centering_c Set centering type (only if \\p interpolation_type=0).\n       \\note If pd[x,y,z,v]<0, it corresponds to a percentage of the original size (the default value is -100).\n    **/\n    CImg<T>& resize(const int size_x, const int size_y=-100,\n                    const int size_z=-100, const int size_c=-100,\n                    const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                    const float centering_x = 0, const float centering_y = 0,\n                    const float centering_z = 0, const float centering_c = 0) {\n      if (!size_x || !size_y || !size_z || !size_c) return assign();\n      const unsigned int\n        _sx = (unsigned int)(size_x<0?-size_x*width()/100:size_x),\n        _sy = (unsigned int)(size_y<0?-size_y*height()/100:size_y),\n        _sz = (unsigned int)(size_z<0?-size_z*depth()/100:size_z),\n        _sc = (unsigned int)(size_c<0?-size_c*spectrum()/100:size_c),\n        sx = _sx?_sx:1, sy = _sy?_sy:1, sz = _sz?_sz:1, sc = _sc?_sc:1;\n      if (sx==_width && sy==_height && sz==_depth && sc==_spectrum) return *this;\n      if (is_empty()) return assign(sx,sy,sz,sc,(T)0);\n      if (interpolation_type==-1 && sx*sy*sz*sc==size()) {\n        _width = sx; _height = sy; _depth = sz; _spectrum = sc;\n        return *this;\n      }\n      return get_resize(sx,sy,sz,sc,interpolation_type,boundary_conditions,\n                        centering_x,centering_y,centering_z,centering_c).move_to(*this);\n    }\n\n    //! Resize image to new dimensions \\newinstance.\n    CImg<T> get_resize(const int size_x, const int size_y = -100,\n                       const int size_z = -100, const int size_c = -100,\n                       const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                       const float centering_x = 0, const float centering_y = 0,\n                       const float centering_z = 0, const float centering_c = 0) const {\n      if (centering_x<0 || centering_x>1 || centering_y<0 || centering_y>1 ||\n          centering_z<0 || centering_z>1 || centering_c<0 || centering_c>1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"resize(): Specified centering arguments (%g,%g,%g,%g) are outside range [0,1].\",\n                                    cimg_instance,\n                                    centering_x,centering_y,centering_z,centering_c);\n\n      if (!size_x || !size_y || !size_z || !size_c) return CImg<T>();\n      const unsigned int\n        sx = std::max(1U,(unsigned int)(size_x>=0?size_x:-size_x*width()/100)),\n        sy = std::max(1U,(unsigned int)(size_y>=0?size_y:-size_y*height()/100)),\n        sz = std::max(1U,(unsigned int)(size_z>=0?size_z:-size_z*depth()/100)),\n        sc = std::max(1U,(unsigned int)(size_c>=0?size_c:-size_c*spectrum()/100));\n      if (sx==_width && sy==_height && sz==_depth && sc==_spectrum) return +*this;\n      if (is_empty()) return CImg<T>(sx,sy,sz,sc,(T)0);\n      CImg<T> res;\n      switch (interpolation_type) {\n\n        // Raw resizing.\n        //\n      case -1 :\n        std::memcpy(res.assign(sx,sy,sz,sc,(T)0)._data,_data,sizeof(T)*std::min(size(),(ulongT)sx*sy*sz*sc));\n        break;\n\n        // No interpolation.\n        //\n      case 0 : {\n        const int\n          xc = (int)(centering_x*((int)sx - width())),\n          yc = (int)(centering_y*((int)sy - height())),\n          zc = (int)(centering_z*((int)sz - depth())),\n          cc = (int)(centering_c*((int)sc - spectrum()));\n\n        switch (boundary_conditions) {\n        case 2 : { // Periodic boundary.\n          res.assign(sx,sy,sz,sc);\n          const int\n            x0 = ((int)xc%width()) - width(),\n            y0 = ((int)yc%height()) - height(),\n            z0 = ((int)zc%depth()) - depth(),\n            c0 = ((int)cc%spectrum()) - spectrum();\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=65536))\n          for (int c = c0; c<(int)sc; c+=spectrum())\n            for (int z = z0; z<(int)sz; z+=depth())\n              for (int y = y0; y<(int)sy; y+=height())\n                for (int x = x0; x<(int)sx; x+=width())\n                  res.draw_image(x,y,z,c,*this);\n        } break;\n        case 1 : { // Neumann boundary.\n          res.assign(sx,sy,sz,sc).draw_image(xc,yc,zc,cc,*this);\n          CImg<T> sprite;\n          if (xc>0) {  // X-backward\n            res.get_crop(xc,yc,zc,cc,xc,yc + height() - 1,zc + depth() - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int x = xc - 1; x>=0; --x) res.draw_image(x,yc,zc,cc,sprite);\n          }\n          if (xc + width()<(int)sx) { // X-forward\n            res.get_crop(xc + width() - 1,yc,zc,cc,xc + width() - 1,yc + height() - 1,\n                         zc + depth() - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int x = xc + width(); x<(int)sx; ++x) res.draw_image(x,yc,zc,cc,sprite);\n          }\n          if (yc>0) {  // Y-backward\n            res.get_crop(0,yc,zc,cc,sx - 1,yc,zc + depth() - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int y = yc - 1; y>=0; --y) res.draw_image(0,y,zc,cc,sprite);\n          }\n          if (yc + height()<(int)sy) { // Y-forward\n            res.get_crop(0,yc + height() - 1,zc,cc,sx - 1,yc + height() - 1,\n                         zc + depth() - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int y = yc + height(); y<(int)sy; ++y) res.draw_image(0,y,zc,cc,sprite);\n          }\n          if (zc>0) {  // Z-backward\n            res.get_crop(0,0,zc,cc,sx - 1,sy - 1,zc,cc + spectrum() - 1).move_to(sprite);\n            for (int z = zc - 1; z>=0; --z) res.draw_image(0,0,z,cc,sprite);\n          }\n          if (zc + depth()<(int)sz) { // Z-forward\n            res.get_crop(0,0,zc  +depth() - 1,cc,sx - 1,sy - 1,zc + depth() - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int z = zc + depth(); z<(int)sz; ++z) res.draw_image(0,0,z,cc,sprite);\n          }\n          if (cc>0) {  // C-backward\n            res.get_crop(0,0,0,cc,sx - 1,sy - 1,sz - 1,cc).move_to(sprite);\n            for (int c = cc - 1; c>=0; --c) res.draw_image(0,0,0,c,sprite);\n          }\n          if (cc + spectrum()<(int)sc) { // C-forward\n            res.get_crop(0,0,0,cc + spectrum() - 1,sx - 1,sy - 1,sz - 1,cc + spectrum() - 1).move_to(sprite);\n            for (int c = cc + spectrum(); c<(int)sc; ++c) res.draw_image(0,0,0,c,sprite);\n          }\n        } break;\n        default : // Dirichlet boundary.\n          res.assign(sx,sy,sz,sc,(T)0).draw_image(xc,yc,zc,cc,*this);\n        }\n        break;\n      } break;\n\n        // Nearest neighbor interpolation.\n        //\n      case 1 : {\n        res.assign(sx,sy,sz,sc);\n        CImg<ulongT> off_x(sx), off_y(sy + 1), off_z(sz + 1), off_c(sc + 1);\n        const ulongT\n          wh = (ulongT)_width*_height,\n          whd = (ulongT)_width*_height*_depth,\n          sxy = (ulongT)sx*sy,\n          sxyz = (ulongT)sx*sy*sz;\n        if (sx==_width) off_x.fill(1);\n        else {\n          ulongT *poff_x = off_x._data, curr = 0;\n          cimg_forX(res,x) {\n            const ulongT old = curr;\n            curr = (ulongT)((x + 1.0)*_width/sx);\n            *(poff_x++) = curr - old;\n          }\n        }\n        if (sy==_height) off_y.fill(_width);\n        else {\n          ulongT *poff_y = off_y._data, curr = 0;\n          cimg_forY(res,y) {\n            const ulongT old = curr;\n            curr = (ulongT)((y + 1.0)*_height/sy);\n            *(poff_y++) = _width*(curr - old);\n          }\n          *poff_y = 0;\n        }\n        if (sz==_depth) off_z.fill(wh);\n        else {\n          ulongT *poff_z = off_z._data, curr = 0;\n          cimg_forZ(res,z) {\n            const ulongT old = curr;\n            curr = (ulongT)((z + 1.0)*_depth/sz);\n            *(poff_z++) = wh*(curr - old);\n          }\n          *poff_z = 0;\n        }\n        if (sc==_spectrum) off_c.fill(whd);\n        else {\n          ulongT *poff_c = off_c._data, curr = 0;\n          cimg_forC(res,c) {\n            const ulongT old = curr;\n            curr = (ulongT)((c + 1.0)*_spectrum/sc);\n            *(poff_c++) = whd*(curr - old);\n          }\n          *poff_c = 0;\n        }\n\n        T *ptrd = res._data;\n        const T* ptrc = _data;\n        const ulongT *poff_c = off_c._data;\n        for (unsigned int c = 0; c<sc; ) {\n          const T *ptrz = ptrc;\n          const ulongT *poff_z = off_z._data;\n          for (unsigned int z = 0; z<sz; ) {\n            const T *ptry = ptrz;\n            const ulongT *poff_y = off_y._data;\n            for (unsigned int y = 0; y<sy; ) {\n              const T *ptrx = ptry;\n              const ulongT *poff_x = off_x._data;\n              cimg_forX(res,x) { *(ptrd++) = *ptrx; ptrx+=*(poff_x++); }\n              ++y;\n              ulongT dy = *(poff_y++);\n              for ( ; !dy && y<dy; std::memcpy(ptrd,ptrd - sx,sizeof(T)*sx), ++y, ptrd+=sx, dy = *(poff_y++)) {}\n              ptry+=dy;\n            }\n            ++z;\n            ulongT dz = *(poff_z++);\n            for ( ; !dz && z<dz; std::memcpy(ptrd,ptrd-sxy,sizeof(T)*sxy), ++z, ptrd+=sxy, dz = *(poff_z++)) {}\n            ptrz+=dz;\n          }\n          ++c;\n          ulongT dc = *(poff_c++);\n          for ( ; !dc && c<dc; std::memcpy(ptrd,ptrd-sxyz,sizeof(T)*sxyz), ++c, ptrd+=sxyz, dc = *(poff_c++)) {}\n          ptrc+=dc;\n        }\n      } break;\n\n        // Moving average.\n        //\n      case 2 : {\n        bool instance_first = true;\n        if (sx!=_width) {\n          CImg<Tfloat> tmp(sx,_height,_depth,_spectrum,0);\n          for (unsigned int a = _width*sx, b = _width, c = sx, s = 0, t = 0; a; ) {\n            const unsigned int d = std::min(b,c);\n            a-=d; b-=d; c-=d;\n            cimg_forYZC(tmp,y,z,v) tmp(t,y,z,v)+=(Tfloat)(*this)(s,y,z,v)*d;\n            if (!b) {\n              cimg_forYZC(tmp,y,z,v) tmp(t,y,z,v)/=_width;\n              ++t;\n              b = _width;\n            }\n            if (!c) { ++s; c = sx; }\n          }\n          tmp.move_to(res);\n          instance_first = false;\n        }\n        if (sy!=_height) {\n          CImg<Tfloat> tmp(sx,sy,_depth,_spectrum,0);\n          for (unsigned int a = _height*sy, b = _height, c = sy, s = 0, t = 0; a; ) {\n            const unsigned int d = std::min(b,c);\n            a-=d; b-=d; c-=d;\n            if (instance_first)\n              cimg_forXZC(tmp,x,z,v) tmp(x,t,z,v)+=(Tfloat)(*this)(x,s,z,v)*d;\n            else\n              cimg_forXZC(tmp,x,z,v) tmp(x,t,z,v)+=(Tfloat)res(x,s,z,v)*d;\n            if (!b) {\n              cimg_forXZC(tmp,x,z,v) tmp(x,t,z,v)/=_height;\n              ++t;\n              b = _height;\n            }\n            if (!c) { ++s; c = sy; }\n          }\n          tmp.move_to(res);\n          instance_first = false;\n        }\n        if (sz!=_depth) {\n          CImg<Tfloat> tmp(sx,sy,sz,_spectrum,0);\n          for (unsigned int a = _depth*sz, b = _depth, c = sz, s = 0, t = 0; a; ) {\n            const unsigned int d = std::min(b,c);\n            a-=d; b-=d; c-=d;\n            if (instance_first)\n              cimg_forXYC(tmp,x,y,v) tmp(x,y,t,v)+=(Tfloat)(*this)(x,y,s,v)*d;\n            else\n              cimg_forXYC(tmp,x,y,v) tmp(x,y,t,v)+=(Tfloat)res(x,y,s,v)*d;\n            if (!b) {\n              cimg_forXYC(tmp,x,y,v) tmp(x,y,t,v)/=_depth;\n              ++t;\n              b = _depth;\n            }\n            if (!c) { ++s; c = sz; }\n          }\n          tmp.move_to(res);\n          instance_first = false;\n        }\n        if (sc!=_spectrum) {\n          CImg<Tfloat> tmp(sx,sy,sz,sc,0);\n          for (unsigned int a = _spectrum*sc, b = _spectrum, c = sc, s = 0, t = 0; a; ) {\n            const unsigned int d = std::min(b,c);\n            a-=d; b-=d; c-=d;\n            if (instance_first)\n              cimg_forXYZ(tmp,x,y,z) tmp(x,y,z,t)+=(Tfloat)(*this)(x,y,z,s)*d;\n            else\n              cimg_forXYZ(tmp,x,y,z) tmp(x,y,z,t)+=(Tfloat)res(x,y,z,s)*d;\n            if (!b) {\n              cimg_forXYZ(tmp,x,y,z) tmp(x,y,z,t)/=_spectrum;\n              ++t;\n              b = _spectrum;\n            }\n            if (!c) { ++s; c = sc; }\n          }\n          tmp.move_to(res);\n          instance_first = false;\n        }\n      } break;\n\n        // Linear interpolation.\n        //\n      case 3 : {\n        CImg<uintT> off(cimg::max(sx,sy,sz,sc));\n        CImg<doubleT> foff(off._width);\n        CImg<T> resx, resy, resz, resc;\n        double curr, old;\n\n        if (sx!=_width) {\n          if (_width==1) get_resize(sx,_height,_depth,_spectrum,1).move_to(resx);\n          else if (_width>sx) get_resize(sx,_height,_depth,_spectrum,2).move_to(resx);\n          else {\n            const double fx = (!boundary_conditions && sx>_width)?(sx>1?(_width - 1.0)/(sx - 1):0):\n              (double)_width/sx;\n            resx.assign(sx,_height,_depth,_spectrum);\n            curr = old = 0;\n            unsigned int *poff = off._data;\n            double *pfoff = foff._data;\n            cimg_forX(resx,x) {\n              *(pfoff++) = curr - (unsigned int)curr;\n              old = curr;\n              curr = std::min(width() - 1.0,curr + fx);\n              *(poff++) = (unsigned int)curr - (unsigned int)old;\n            }\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resx.size()>=65536))\n              cimg_forYZC(resx,y,z,c) {\n              const T *ptrs = data(0,y,z,c), *const ptrsmax = ptrs + _width - 1;\n              T *ptrd = resx.data(0,y,z,c);\n              const unsigned int *poff = off._data;\n              const double *pfoff = foff._data;\n              cimg_forX(resx,x) {\n                const double alpha = *(pfoff++);\n                const T val1 = *ptrs, val2 = ptrs<ptrsmax?*(ptrs + 1):val1;\n                *(ptrd++) = (T)((1 - alpha)*val1 + alpha*val2);\n                ptrs+=*(poff++);\n              }\n            }\n          }\n        } else resx.assign(*this,true);\n\n        if (sy!=_height) {\n          if (_height==1) resx.get_resize(sx,sy,_depth,_spectrum,1).move_to(resy);\n          else {\n            if (_height>sy) resx.get_resize(sx,sy,_depth,_spectrum,2).move_to(resy);\n            else {\n              const double fy = (!boundary_conditions && sy>_height)?(sy>1?(_height - 1.0)/(sy - 1):0):\n                (double)_height/sy;\n              resy.assign(sx,sy,_depth,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forY(resy,y) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(height() - 1.0,curr + fy);\n                *(poff++) = sx*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resy.size()>=65536))\n              cimg_forXZC(resy,x,z,c) {\n                const T *ptrs = resx.data(x,0,z,c), *const ptrsmax = ptrs + (_height - 1)*sx;\n                T *ptrd = resy.data(x,0,z,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forY(resy,y) {\n                  const double alpha = *(pfoff++);\n                  const T val1 = *ptrs, val2 = ptrs<ptrsmax?*(ptrs + sx):val1;\n                  *ptrd = (T)((1 - alpha)*val1 + alpha*val2);\n                  ptrd+=sx;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resx.assign();\n        } else resy.assign(resx,true);\n\n        if (sz!=_depth) {\n          if (_depth==1) resy.get_resize(sx,sy,sz,_spectrum,1).move_to(resz);\n          else {\n            if (_depth>sz) resy.get_resize(sx,sy,sz,_spectrum,2).move_to(resz);\n            else {\n              const double fz = (!boundary_conditions && sz>_depth)?(sz>1?(_depth - 1.0)/(sz - 1):0):\n                (double)_depth/sz;\n              const unsigned int sxy = sx*sy;\n              resz.assign(sx,sy,sz,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forZ(resz,z) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(depth() - 1.0,curr + fz);\n                *(poff++) = sxy*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resz.size()>=65536))\n              cimg_forXYC(resz,x,y,c) {\n                const T *ptrs = resy.data(x,y,0,c), *const ptrsmax = ptrs + (_depth - 1)*sxy;\n                T *ptrd = resz.data(x,y,0,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forZ(resz,z) {\n                  const double alpha = *(pfoff++);\n                  const T val1 = *ptrs, val2 = ptrs<ptrsmax?*(ptrs + sxy):val1;\n                  *ptrd = (T)((1 - alpha)*val1 + alpha*val2);\n                  ptrd+=sxy;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resy.assign();\n        } else resz.assign(resy,true);\n\n        if (sc!=_spectrum) {\n          if (_spectrum==1) resz.get_resize(sx,sy,sz,sc,1).move_to(resc);\n          else {\n            if (_spectrum>sc) resz.get_resize(sx,sy,sz,sc,2).move_to(resc);\n            else {\n              const double fc = (!boundary_conditions && sc>_spectrum)?(sc>1?(_spectrum - 1.0)/(sc - 1):0):\n                (double)_spectrum/sc;\n              const unsigned int sxyz = sx*sy*sz;\n              resc.assign(sx,sy,sz,sc);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forC(resc,c) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(spectrum() - 1.0,curr + fc);\n                *(poff++) = sxyz*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resc.size()>=65536))\n              cimg_forXYZ(resc,x,y,z) {\n                const T *ptrs = resz.data(x,y,z,0), *const ptrsmax = ptrs + (_spectrum - 1)*sxyz;\n                T *ptrd = resc.data(x,y,z,0);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forC(resc,c) {\n                  const double alpha = *(pfoff++);\n                  const T val1 = *ptrs, val2 = ptrs<ptrsmax?*(ptrs + sxyz):val1;\n                  *ptrd = (T)((1 - alpha)*val1 + alpha*val2);\n                  ptrd+=sxyz;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resz.assign();\n        } else resc.assign(resz,true);\n        return resc._is_shared?(resz._is_shared?(resy._is_shared?(resx._is_shared?(+(*this)):resx):resy):resz):resc;\n      } break;\n\n        // Grid interpolation.\n        //\n      case 4 : {\n        CImg<T> resx, resy, resz, resc;\n        if (sx!=_width) {\n          if (sx<_width) get_resize(sx,_height,_depth,_spectrum,1).move_to(resx);\n          else {\n            resx.assign(sx,_height,_depth,_spectrum,(T)0);\n            const int dx = (int)(2*sx), dy = 2*width();\n            int err = (int)(dy + centering_x*(sx*dy/width() - dy)), xs = 0;\n            cimg_forX(resx,x) if ((err-=dy)<=0) {\n              cimg_forYZC(resx,y,z,c) resx(x,y,z,c) = (*this)(xs,y,z,c);\n              ++xs;\n              err+=dx;\n            }\n          }\n        } else resx.assign(*this,true);\n\n        if (sy!=_height) {\n          if (sy<_height) resx.get_resize(sx,sy,_depth,_spectrum,1).move_to(resy);\n          else {\n            resy.assign(sx,sy,_depth,_spectrum,(T)0);\n            const int dx = (int)(2*sy), dy = 2*height();\n            int err = (int)(dy + centering_y*(sy*dy/height() - dy)), ys = 0;\n            cimg_forY(resy,y) if ((err-=dy)<=0) {\n              cimg_forXZC(resy,x,z,c) resy(x,y,z,c) = resx(x,ys,z,c);\n              ++ys;\n              err+=dx;\n            }\n          }\n          resx.assign();\n        } else resy.assign(resx,true);\n\n        if (sz!=_depth) {\n          if (sz<_depth) resy.get_resize(sx,sy,sz,_spectrum,1).move_to(resz);\n          else {\n            resz.assign(sx,sy,sz,_spectrum,(T)0);\n            const int dx = (int)(2*sz), dy = 2*depth();\n            int err = (int)(dy + centering_z*(sz*dy/depth() - dy)), zs = 0;\n            cimg_forZ(resz,z) if ((err-=dy)<=0) {\n              cimg_forXYC(resz,x,y,c) resz(x,y,z,c) = resy(x,y,zs,c);\n              ++zs;\n              err+=dx;\n            }\n          }\n          resy.assign();\n        } else resz.assign(resy,true);\n\n        if (sc!=_spectrum) {\n          if (sc<_spectrum) resz.get_resize(sx,sy,sz,sc,1).move_to(resc);\n          else {\n            resc.assign(sx,sy,sz,sc,(T)0);\n            const int dx = (int)(2*sc), dy = 2*spectrum();\n            int err = (int)(dy + centering_c*(sc*dy/spectrum() - dy)), cs = 0;\n            cimg_forC(resc,c) if ((err-=dy)<=0) {\n              cimg_forXYZ(resc,x,y,z) resc(x,y,z,c) = resz(x,y,z,cs);\n              ++cs;\n              err+=dx;\n            }\n          }\n          resz.assign();\n        } else resc.assign(resz,true);\n\n        return resc._is_shared?(resz._is_shared?(resy._is_shared?(resx._is_shared?(+(*this)):resx):resy):resz):resc;\n      } break;\n\n        // Cubic interpolation.\n        //\n      case 5 : {\n        const Tfloat vmin = (Tfloat)cimg::type<T>::min(), vmax = (Tfloat)cimg::type<T>::max();\n        CImg<uintT> off(cimg::max(sx,sy,sz,sc));\n        CImg<doubleT> foff(off._width);\n        CImg<T> resx, resy, resz, resc;\n        double curr, old;\n\n        if (sx!=_width) {\n          if (_width==1) get_resize(sx,_height,_depth,_spectrum,1).move_to(resx);\n          else {\n            if (_width>sx) get_resize(sx,_height,_depth,_spectrum,2).move_to(resx);\n            else {\n              const double fx = (!boundary_conditions && sx>_width)?(sx>1?(_width - 1.0)/(sx - 1):0):\n                (double)_width/sx;\n              resx.assign(sx,_height,_depth,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forX(resx,x) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(width() - 1.0,curr + fx);\n                *(poff++) = (unsigned int)curr - (unsigned int)old;\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resx.size()>=65536))\n              cimg_forYZC(resx,y,z,c) {\n                const T *const ptrs0 = data(0,y,z,c), *ptrs = ptrs0, *const ptrsmax = ptrs + (_width - 2);\n                T *ptrd = resx.data(0,y,z,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forX(resx,x) {\n                  const double\n                    t = *(pfoff++),\n                    val1 = (double)*ptrs,\n                    val0 = ptrs>ptrs0?(double)*(ptrs - 1):val1,\n                    val2 = ptrs<=ptrsmax?(double)*(ptrs + 1):val1,\n                    val3 = ptrs<ptrsmax?(double)*(ptrs + 2):val2,\n                    val = val1 + 0.5f*(t*(-val0 + val2) + t*t*(2*val0 - 5*val1 + 4*val2 - val3) +\n                                       t*t*t*(-val0 + 3*val1 - 3*val2 + val3));\n                  *(ptrd++) = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n        } else resx.assign(*this,true);\n\n        if (sy!=_height) {\n          if (_height==1) resx.get_resize(sx,sy,_depth,_spectrum,1).move_to(resy);\n          else {\n            if (_height>sy) resx.get_resize(sx,sy,_depth,_spectrum,2).move_to(resy);\n            else {\n              const double fy = (!boundary_conditions && sy>_height)?(sy>1?(_height - 1.0)/(sy - 1):0):\n                (double)_height/sy;\n              resy.assign(sx,sy,_depth,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forY(resy,y) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(height() - 1.0,curr + fy);\n                *(poff++) = sx*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resy.size()>=65536))\n              cimg_forXZC(resy,x,z,c) {\n                const T *const ptrs0 = resx.data(x,0,z,c), *ptrs = ptrs0, *const ptrsmax = ptrs + (_height - 2)*sx;\n                T *ptrd = resy.data(x,0,z,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forY(resy,y) {\n                  const double\n                    t = *(pfoff++),\n                    val1 = (double)*ptrs,\n                    val0 = ptrs>ptrs0?(double)*(ptrs - sx):val1,\n                    val2 = ptrs<=ptrsmax?(double)*(ptrs + sx):val1,\n                    val3 = ptrs<ptrsmax?(double)*(ptrs + 2*sx):val2,\n                    val = val1 + 0.5f*(t*(-val0 + val2) + t*t*(2*val0 - 5*val1 + 4*val2 - val3) +\n                                       t*t*t*(-val0 + 3*val1 - 3*val2 + val3));\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sx;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resx.assign();\n        } else resy.assign(resx,true);\n\n        if (sz!=_depth) {\n          if (_depth==1) resy.get_resize(sx,sy,sz,_spectrum,1).move_to(resz);\n          else {\n            if (_depth>sz) resy.get_resize(sx,sy,sz,_spectrum,2).move_to(resz);\n            else {\n              const double fz = (!boundary_conditions && sz>_depth)?(sz>1?(_depth - 1.0)/(sz - 1):0):\n                (double)_depth/sz;\n              const unsigned int sxy = sx*sy;\n              resz.assign(sx,sy,sz,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forZ(resz,z) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(depth() - 1.0,curr + fz);\n                *(poff++) = sxy*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resz.size()>=65536))\n              cimg_forXYC(resz,x,y,c) {\n                const T *const ptrs0 = resy.data(x,y,0,c), *ptrs = ptrs0, *const ptrsmax = ptrs + (_depth - 2)*sxy;\n                T *ptrd = resz.data(x,y,0,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forZ(resz,z) {\n                  const double\n                    t = *(pfoff++),\n                    val1 = (double)*ptrs,\n                    val0 = ptrs>ptrs0?(double)*(ptrs - sxy):val1,\n                    val2 = ptrs<=ptrsmax?(double)*(ptrs + sxy):val1,\n                    val3 = ptrs<ptrsmax?(double)*(ptrs + 2*sxy):val2,\n                    val = val1 + 0.5f*(t*(-val0 + val2) + t*t*(2*val0 - 5*val1 + 4*val2 - val3) +\n                                       t*t*t*(-val0 + 3*val1 - 3*val2 + val3));\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sxy;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resy.assign();\n        } else resz.assign(resy,true);\n\n        if (sc!=_spectrum) {\n          if (_spectrum==1) resz.get_resize(sx,sy,sz,sc,1).move_to(resc);\n          else {\n            if (_spectrum>sc) resz.get_resize(sx,sy,sz,sc,2).move_to(resc);\n            else {\n              const double fc = (!boundary_conditions && sc>_spectrum)?(sc>1?(_spectrum - 1.0)/(sc - 1):0):\n                (double)_spectrum/sc;\n              const unsigned int sxyz = sx*sy*sz;\n              resc.assign(sx,sy,sz,sc);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forC(resc,c) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(spectrum() - 1.0,curr + fc);\n                *(poff++) = sxyz*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resc.size()>=65536))\n              cimg_forXYZ(resc,x,y,z) {\n                const T *const ptrs0 = resz.data(x,y,z,0), *ptrs = ptrs0, *const ptrsmax = ptrs + (_spectrum - 2)*sxyz;\n                T *ptrd = resc.data(x,y,z,0);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forC(resc,c) {\n                  const double\n                    t = *(pfoff++),\n                    val1 = (double)*ptrs,\n                    val0 = ptrs>ptrs0?(double)*(ptrs - sxyz):val1,\n                    val2 = ptrs<=ptrsmax?(double)*(ptrs + sxyz):val1,\n                    val3 = ptrs<ptrsmax?(double)*(ptrs + 2*sxyz):val2,\n                    val = val1 + 0.5f*(t*(-val0 + val2) + t*t*(2*val0 - 5*val1 + 4*val2 - val3) +\n                                       t*t*t*(-val0 + 3*val1 - 3*val2 + val3));\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sxyz;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resz.assign();\n        } else resc.assign(resz,true);\n\n        return resc._is_shared?(resz._is_shared?(resy._is_shared?(resx._is_shared?(+(*this)):resx):resy):resz):resc;\n      } break;\n\n        // Lanczos interpolation.\n        //\n      case 6 : {\n        const double vmin = (double)cimg::type<T>::min(), vmax = (double)cimg::type<T>::max();\n        CImg<uintT> off(cimg::max(sx,sy,sz,sc));\n        CImg<doubleT> foff(off._width);\n        CImg<T> resx, resy, resz, resc;\n        double curr, old;\n\n        if (sx!=_width) {\n          if (_width==1) get_resize(sx,_height,_depth,_spectrum,1).move_to(resx);\n          else {\n            if (_width>sx) get_resize(sx,_height,_depth,_spectrum,2).move_to(resx);\n            else {\n              const double fx = (!boundary_conditions && sx>_width)?(sx>1?(_width - 1.0)/(sx - 1):0):\n                (double)_width/sx;\n              resx.assign(sx,_height,_depth,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forX(resx,x) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(width() - 1.0,curr + fx);\n                *(poff++) = (unsigned int)curr - (unsigned int)old;\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resx.size()>=65536))\n              cimg_forYZC(resx,y,z,c) {\n                const T *const ptrs0 = data(0,y,z,c), *ptrs = ptrs0, *const ptrsmin = ptrs0 + 1,\n                  *const ptrsmax = ptrs0 + (_width - 2);\n                T *ptrd = resx.data(0,y,z,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forX(resx,x) {\n                  const double\n                    t = *(pfoff++),\n                    w0 = _cimg_lanczos(t + 2),\n                    w1 = _cimg_lanczos(t + 1),\n                    w2 = _cimg_lanczos(t),\n                    w3 = _cimg_lanczos(t - 1),\n                    w4 = _cimg_lanczos(t - 2),\n                    val2 = (double)*ptrs,\n                    val1 = ptrs>=ptrsmin?(double)*(ptrs - 1):val2,\n                    val0 = ptrs>ptrsmin?(double)*(ptrs - 2):val1,\n                    val3 = ptrs<=ptrsmax?(double)*(ptrs + 1):val2,\n                    val4 = ptrs<ptrsmax?(double)*(ptrs + 2):val3,\n                    val = (val0*w0 + val1*w1 + val2*w2 + val3*w3 + val4*w4)/(w1 + w2 + w3 + w4);\n                  *(ptrd++) = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n        } else resx.assign(*this,true);\n\n        if (sy!=_height) {\n          if (_height==1) resx.get_resize(sx,sy,_depth,_spectrum,1).move_to(resy);\n          else {\n            if (_height>sy) resx.get_resize(sx,sy,_depth,_spectrum,2).move_to(resy);\n            else {\n              const double fy = (!boundary_conditions && sy>_height)?(sy>1?(_height - 1.0)/(sy - 1):0):\n                (double)_height/sy;\n              resy.assign(sx,sy,_depth,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forY(resy,y) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(height() - 1.0,curr + fy);\n                *(poff++) = sx*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resy.size()>=65536))\n              cimg_forXZC(resy,x,z,c) {\n                const T *const ptrs0 = resx.data(x,0,z,c), *ptrs = ptrs0, *const ptrsmin = ptrs0 + sx,\n                  *const ptrsmax = ptrs0 + (_height - 2)*sx;\n                T *ptrd = resy.data(x,0,z,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forY(resy,y) {\n                  const double\n                    t = *(pfoff++),\n                    w0 = _cimg_lanczos(t + 2),\n                    w1 = _cimg_lanczos(t + 1),\n                    w2 = _cimg_lanczos(t),\n                    w3 = _cimg_lanczos(t - 1),\n                    w4 = _cimg_lanczos(t - 2),\n                    val2 = (double)*ptrs,\n                    val1 = ptrs>=ptrsmin?(double)*(ptrs - sx):val2,\n                    val0 = ptrs>ptrsmin?(double)*(ptrs - 2*sx):val1,\n                    val3 = ptrs<=ptrsmax?(double)*(ptrs + sx):val2,\n                    val4 = ptrs<ptrsmax?(double)*(ptrs + 2*sx):val3,\n                    val = (val0*w0 + val1*w1 + val2*w2 + val3*w3 + val4*w4)/(w1 + w2 + w3 + w4);\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sx;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resx.assign();\n        } else resy.assign(resx,true);\n\n        if (sz!=_depth) {\n          if (_depth==1) resy.get_resize(sx,sy,sz,_spectrum,1).move_to(resz);\n          else {\n            if (_depth>sz) resy.get_resize(sx,sy,sz,_spectrum,2).move_to(resz);\n            else {\n              const double fz = (!boundary_conditions && sz>_depth)?(sz>1?(_depth - 1.0)/(sz - 1):0):\n                (double)_depth/sz;\n              const unsigned int sxy = sx*sy;\n              resz.assign(sx,sy,sz,_spectrum);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forZ(resz,z) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(depth() - 1.0,curr + fz);\n                *(poff++) = sxy*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resz.size()>=65536))\n              cimg_forXYC(resz,x,y,c) {\n                const T *const ptrs0 = resy.data(x,y,0,c), *ptrs = ptrs0, *const ptrsmin = ptrs0 + sxy,\n                  *const ptrsmax = ptrs0 + (_depth - 2)*sxy;\n                T *ptrd = resz.data(x,y,0,c);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forZ(resz,z) {\n                  const double\n                    t = *(pfoff++),\n                    w0 = _cimg_lanczos(t + 2),\n                    w1 = _cimg_lanczos(t + 1),\n                    w2 = _cimg_lanczos(t),\n                    w3 = _cimg_lanczos(t - 1),\n                    w4 = _cimg_lanczos(t - 2),\n                    val2 = (double)*ptrs,\n                    val1 = ptrs>=ptrsmin?(double)*(ptrs - sxy):val2,\n                    val0 = ptrs>ptrsmin?(double)*(ptrs - 2*sxy):val1,\n                    val3 = ptrs<=ptrsmax?(double)*(ptrs + sxy):val2,\n                    val4 = ptrs<ptrsmax?(double)*(ptrs + 2*sxy):val3,\n                    val = (val0*w0 + val1*w1 + val2*w2 + val3*w3 + val4*w4)/(w1 + w2 + w3 + w4);\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sxy;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resy.assign();\n        } else resz.assign(resy,true);\n\n        if (sc!=_spectrum) {\n          if (_spectrum==1) resz.get_resize(sx,sy,sz,sc,1).move_to(resc);\n          else {\n            if (_spectrum>sc) resz.get_resize(sx,sy,sz,sc,2).move_to(resc);\n            else {\n              const double fc = (!boundary_conditions && sc>_spectrum)?(sc>1?(_spectrum - 1.0)/(sc - 1):0):\n                (double)_spectrum/sc;\n              const unsigned int sxyz = sx*sy*sz;\n              resc.assign(sx,sy,sz,sc);\n              curr = old = 0;\n              unsigned int *poff = off._data;\n              double *pfoff = foff._data;\n              cimg_forC(resc,c) {\n                *(pfoff++) = curr - (unsigned int)curr;\n                old = curr;\n                curr = std::min(spectrum() - 1.0,curr + fc);\n                *(poff++) = sxyz*((unsigned int)curr - (unsigned int)old);\n              }\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(resc.size()>=65536))\n              cimg_forXYZ(resc,x,y,z) {\n                const T *const ptrs0 = resz.data(x,y,z,0), *ptrs = ptrs0, *const ptrsmin = ptrs0 + sxyz,\n                  *const ptrsmax = ptrs + (_spectrum - 2)*sxyz;\n                T *ptrd = resc.data(x,y,z,0);\n                const unsigned int *poff = off._data;\n                const double *pfoff = foff._data;\n                cimg_forC(resc,c) {\n                  const double\n                    t = *(pfoff++),\n                    w0 = _cimg_lanczos(t + 2),\n                    w1 = _cimg_lanczos(t + 1),\n                    w2 = _cimg_lanczos(t),\n                    w3 = _cimg_lanczos(t - 1),\n                    w4 = _cimg_lanczos(t - 2),\n                    val2 = (double)*ptrs,\n                    val1 = ptrs>=ptrsmin?(double)*(ptrs - sxyz):val2,\n                    val0 = ptrs>ptrsmin?(double)*(ptrs - 2*sxyz):val1,\n                    val3 = ptrs<=ptrsmax?(double)*(ptrs + sxyz):val2,\n                    val4 = ptrs<ptrsmax?(double)*(ptrs + 2*sxyz):val3,\n                    val = (val0*w0 + val1*w1 + val2*w2 + val3*w3 + val4*w4)/(w1 + w2 + w3 + w4);\n                  *ptrd = (T)(val<vmin?vmin:val>vmax?vmax:val);\n                  ptrd+=sxyz;\n                  ptrs+=*(poff++);\n                }\n              }\n            }\n          }\n          resz.assign();\n        } else resc.assign(resz,true);\n\n        return resc._is_shared?(resz._is_shared?(resy._is_shared?(resx._is_shared?(+(*this)):resx):resy):resz):resc;\n      } break;\n\n        // Unknow interpolation.\n        //\n      default :\n        throw CImgArgumentException(_cimg_instance\n                                    \"resize(): Invalid specified interpolation %d \"\n                                    \"(should be { -1=raw | 0=none | 1=nearest | 2=average | 3=linear | 4=grid | \"\n                                    \"5=cubic | 6=lanczos }).\",\n                                    cimg_instance,\n                                    interpolation_type);\n      }\n      return res;\n    }\n\n    //! Resize image to dimensions of another image.\n    /**\n       \\param src Reference image used for dimensions.\n       \\param interpolation_type Interpolation method.\n       \\param boundary_conditions Boundary conditions.\n       \\param centering_x Set centering type (only if \\p interpolation_type=0).\n       \\param centering_y Set centering type (only if \\p interpolation_type=0).\n       \\param centering_z Set centering type (only if \\p interpolation_type=0).\n       \\param centering_c Set centering type (only if \\p interpolation_type=0).\n     **/\n    template<typename t>\n    CImg<T>& resize(const CImg<t>& src,\n                    const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                    const float centering_x = 0, const float centering_y = 0,\n                    const float centering_z = 0, const float centering_c = 0) {\n      return resize(src._width,src._height,src._depth,src._spectrum,interpolation_type,boundary_conditions,\n                    centering_x,centering_y,centering_z,centering_c);\n    }\n\n    //! Resize image to dimensions of another image \\newinstance.\n    template<typename t>\n    CImg<T> get_resize(const CImg<t>& src,\n                       const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                       const float centering_x = 0, const float centering_y = 0,\n                       const float centering_z = 0, const float centering_c = 0) const {\n      return get_resize(src._width,src._height,src._depth,src._spectrum,interpolation_type,boundary_conditions,\n                        centering_x,centering_y,centering_z,centering_c);\n    }\n\n    //! Resize image to dimensions of a display window.\n    /**\n       \\param disp Reference display window used for dimensions.\n       \\param interpolation_type Interpolation method.\n       \\param boundary_conditions Boundary conditions.\n       \\param centering_x Set centering type (only if \\p interpolation_type=0).\n       \\param centering_y Set centering type (only if \\p interpolation_type=0).\n       \\param centering_z Set centering type (only if \\p interpolation_type=0).\n       \\param centering_c Set centering type (only if \\p interpolation_type=0).\n     **/\n    CImg<T>& resize(const CImgDisplay& disp,\n                    const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                    const float centering_x = 0, const float centering_y = 0,\n                    const float centering_z = 0, const float centering_c = 0) {\n      return resize(disp.width(),disp.height(),_depth,_spectrum,interpolation_type,boundary_conditions,\n                    centering_x,centering_y,centering_z,centering_c);\n    }\n\n    //! Resize image to dimensions of a display window \\newinstance.\n    CImg<T> get_resize(const CImgDisplay& disp,\n                       const int interpolation_type=1, const unsigned int boundary_conditions=0,\n                       const float centering_x = 0, const float centering_y = 0,\n                       const float centering_z = 0, const float centering_c = 0) const {\n      return get_resize(disp.width(),disp.height(),_depth,_spectrum,interpolation_type,boundary_conditions,\n                        centering_x,centering_y,centering_z,centering_c);\n    }\n\n    //! Resize image to half-size along XY axes, using an optimized filter.\n    CImg<T>& resize_halfXY() {\n      return get_resize_halfXY().move_to(*this);\n    }\n\n    //! Resize image to half-size along XY axes, using an optimized filter \\newinstance.\n    CImg<T> get_resize_halfXY() const {\n      if (is_empty()) return *this;\n      static const Tfloat kernel[9] = { 0.07842776544f, 0.1231940459f, 0.07842776544f,\n                                        0.1231940459f,  0.1935127547f, 0.1231940459f,\n                                        0.07842776544f, 0.1231940459f, 0.07842776544f };\n      CImg<T> I(9), res(_width/2,_height/2,_depth,_spectrum);\n      T *ptrd = res._data;\n      cimg_forZC(*this,z,c) cimg_for3x3(*this,x,y,z,c,I,T)\n        if (x%2 && y%2) *(ptrd++) = (T)\n                          (I[0]*kernel[0] + I[1]*kernel[1] + I[2]*kernel[2] +\n                           I[3]*kernel[3] + I[4]*kernel[4] + I[5]*kernel[5] +\n                           I[6]*kernel[6] + I[7]*kernel[7] + I[8]*kernel[8]);\n      return res;\n    }\n\n    //! Resize image to double-size, using the Scale2X algorithm.\n    /**\n       \\note Use anisotropic upscaling algorithm\n       <a href=\"http://scale2x.sourceforge.net/algorithm.html\">described here</a>.\n    **/\n    CImg<T>& resize_doubleXY() {\n      return get_resize_doubleXY().move_to(*this);\n    }\n\n    //! Resize image to double-size, using the Scale2X algorithm \\newinstance.\n    CImg<T> get_resize_doubleXY() const {\n#define _cimg_gs2x_for3(bound,i) \\\n for (int i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1; \\\n      _n1##i<(int)(bound) || i==--_n1##i; \\\n      _p1##i = i++, ++_n1##i, ptrd1+=(res)._width, ptrd2+=(res)._width)\n\n#define _cimg_gs2x_for3x3(img,x,y,z,c,I,T) \\\n  _cimg_gs2x_for3((img)._height,y) for (int x = 0, \\\n   _p1##x = 0, \\\n   _n1##x = (int)( \\\n   (I[1] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[3] = I[4] = (T)(img)(0,y,z,c)), \\\n   (I[7] = (T)(img)(0,_n1##y,z,c)),     \\\n   1>=(img)._width?(img).width() - 1:1); \\\n   (_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[1] = I[2], \\\n   I[3] = I[4], I[4] = I[5], \\\n   I[7] = I[8], \\\n   _p1##x = x++, ++_n1##x)\n\n      if (is_empty()) return *this;\n      CImg<T> res(_width<<1,_height<<1,_depth,_spectrum);\n      CImg_3x3(I,T);\n      cimg_forZC(*this,z,c) {\n        T\n          *ptrd1 = res.data(0,0,z,c),\n          *ptrd2 = ptrd1 + res._width;\n        _cimg_gs2x_for3x3(*this,x,y,z,c,I,T) {\n          if (Icp!=Icn && Ipc!=Inc) {\n            *(ptrd1++) = Ipc==Icp?Ipc:Icc;\n            *(ptrd1++) = Icp==Inc?Inc:Icc;\n            *(ptrd2++) = Ipc==Icn?Ipc:Icc;\n            *(ptrd2++) = Icn==Inc?Inc:Icc;\n          } else { *(ptrd1++) = Icc; *(ptrd1++) = Icc; *(ptrd2++) = Icc; *(ptrd2++) = Icc; }\n        }\n      }\n      return res;\n    }\n\n    //! Resize image to triple-size, using the Scale3X algorithm.\n    /**\n       \\note Use anisotropic upscaling algorithm\n       <a href=\"http://scale2x.sourceforge.net/algorithm.html\">described here</a>.\n    **/\n    CImg<T>& resize_tripleXY() {\n      return get_resize_tripleXY().move_to(*this);\n    }\n\n    //! Resize image to triple-size, using the Scale3X algorithm \\newinstance.\n    CImg<T> get_resize_tripleXY() const {\n#define _cimg_gs3x_for3(bound,i) \\\n for (int i = 0, _p1##i = 0, \\\n      _n1##i = 1>=(bound)?(int)(bound) - 1:1; \\\n      _n1##i<(int)(bound) || i==--_n1##i; \\\n      _p1##i = i++, ++_n1##i, ptrd1+=2*(res)._width, ptrd2+=2*(res)._width, ptrd3+=2*(res)._width)\n\n#define _cimg_gs3x_for3x3(img,x,y,z,c,I,T) \\\n  _cimg_gs3x_for3((img)._height,y) for (int x = 0, \\\n   _p1##x = 0, \\\n   _n1##x = (int)( \\\n   (I[0] = I[1] = (T)(img)(_p1##x,_p1##y,z,c)), \\\n   (I[3] = I[4] = (T)(img)(0,y,z,c)), \\\n   (I[6] = I[7] = (T)(img)(0,_n1##y,z,c)),      \\\n   1>=(img)._width?(img).width() - 1:1); \\\n   (_n1##x<(img).width() && ( \\\n   (I[2] = (T)(img)(_n1##x,_p1##y,z,c)), \\\n   (I[5] = (T)(img)(_n1##x,y,z,c)), \\\n   (I[8] = (T)(img)(_n1##x,_n1##y,z,c)),1)) || \\\n   x==--_n1##x; \\\n   I[0] = I[1], I[1] = I[2], \\\n   I[3] = I[4], I[4] = I[5], \\\n   I[6] = I[7], I[7] = I[8], \\\n   _p1##x = x++, ++_n1##x)\n\n      if (is_empty()) return *this;\n      CImg<T> res(3*_width,3*_height,_depth,_spectrum);\n      CImg_3x3(I,T);\n      cimg_forZC(*this,z,c) {\n        T\n          *ptrd1 = res.data(0,0,z,c),\n          *ptrd2 = ptrd1 + res._width,\n          *ptrd3 = ptrd2 + res._width;\n        _cimg_gs3x_for3x3(*this,x,y,z,c,I,T) {\n          if (Icp != Icn && Ipc != Inc) {\n            *(ptrd1++) = Ipc==Icp?Ipc:Icc;\n            *(ptrd1++) = (Ipc==Icp && Icc!=Inp) || (Icp==Inc && Icc!=Ipp)?Icp:Icc;\n            *(ptrd1++) = Icp==Inc?Inc:Icc;\n            *(ptrd2++) = (Ipc==Icp && Icc!=Ipn) || (Ipc==Icn && Icc!=Ipp)?Ipc:Icc;\n            *(ptrd2++) = Icc;\n            *(ptrd2++) = (Icp==Inc && Icc!=Inn) || (Icn==Inc && Icc!=Inp)?Inc:Icc;\n            *(ptrd3++) = Ipc==Icn?Ipc:Icc;\n            *(ptrd3++) = (Ipc==Icn && Icc!=Inn) || (Icn==Inc && Icc!=Ipn)?Icn:Icc;\n            *(ptrd3++) = Icn==Inc?Inc:Icc;\n          } else {\n            *(ptrd1++) = Icc; *(ptrd1++) = Icc; *(ptrd1++) = Icc;\n            *(ptrd2++) = Icc; *(ptrd2++) = Icc; *(ptrd2++) = Icc;\n            *(ptrd3++) = Icc; *(ptrd3++) = Icc; *(ptrd3++) = Icc;\n          }\n        }\n      }\n      return res;\n    }\n\n    //! Mirror image content along specified axis.\n    /**\n       \\param axis Mirror axis\n    **/\n    CImg<T>& mirror(const char axis) {\n      if (is_empty()) return *this;\n      T *pf, *pb, *buf = 0;\n      switch (cimg::lowercase(axis)) {\n      case 'x' : {\n        pf = _data; pb = data(_width - 1);\n        const unsigned int width2 = _width/2;\n        for (unsigned int yzv = 0; yzv<_height*_depth*_spectrum; ++yzv) {\n          for (unsigned int x = 0; x<width2; ++x) { const T val = *pf; *(pf++) = *pb; *(pb--) = val; }\n          pf+=_width - width2;\n          pb+=_width + width2;\n        }\n      } break;\n      case 'y' : {\n        buf = new T[_width];\n        pf = _data; pb = data(0,_height - 1);\n        const unsigned int height2 = _height/2;\n        for (unsigned int zv = 0; zv<_depth*_spectrum; ++zv) {\n          for (unsigned int y = 0; y<height2; ++y) {\n            std::memcpy(buf,pf,_width*sizeof(T));\n            std::memcpy(pf,pb,_width*sizeof(T));\n            std::memcpy(pb,buf,_width*sizeof(T));\n            pf+=_width;\n            pb-=_width;\n          }\n          pf+=(ulongT)_width*(_height - height2);\n          pb+=(ulongT)_width*(_height + height2);\n        }\n      } break;\n      case 'z' : {\n        buf = new T[(ulongT)_width*_height];\n        pf = _data; pb = data(0,0,_depth - 1);\n        const unsigned int depth2 = _depth/2;\n        cimg_forC(*this,c) {\n          for (unsigned int z = 0; z<depth2; ++z) {\n            std::memcpy(buf,pf,_width*_height*sizeof(T));\n            std::memcpy(pf,pb,_width*_height*sizeof(T));\n            std::memcpy(pb,buf,_width*_height*sizeof(T));\n            pf+=(ulongT)_width*_height;\n            pb-=(ulongT)_width*_height;\n          }\n          pf+=(ulongT)_width*_height*(_depth - depth2);\n          pb+=(ulongT)_width*_height*(_depth + depth2);\n        }\n      } break;\n      case 'c' : {\n        buf = new T[(ulongT)_width*_height*_depth];\n        pf = _data; pb = data(0,0,0,_spectrum - 1);\n        const unsigned int _spectrum2 = _spectrum/2;\n        for (unsigned int v = 0; v<_spectrum2; ++v) {\n          std::memcpy(buf,pf,_width*_height*_depth*sizeof(T));\n          std::memcpy(pf,pb,_width*_height*_depth*sizeof(T));\n          std::memcpy(pb,buf,_width*_height*_depth*sizeof(T));\n          pf+=(ulongT)_width*_height*_depth;\n          pb-=(ulongT)_width*_height*_depth;\n        }\n      } break;\n      default :\n        throw CImgArgumentException(_cimg_instance\n                                    \"mirror(): Invalid specified axis '%c'.\",\n                                    cimg_instance,\n                                    axis);\n      }\n      delete[] buf;\n      return *this;\n    }\n\n    //! Mirror image content along specified axis \\newinstance.\n    CImg<T> get_mirror(const char axis) const {\n      return (+*this).mirror(axis);\n    }\n\n    //! Mirror image content along specified axes.\n    /**\n       \\param axes Mirror axes, as a C-string.\n       \\note \\c axes may contains multiple characters, e.g. \\c \"xyz\"\n    **/\n    CImg<T>& mirror(const char *const axes) {\n      for (const char *s = axes; *s; ++s) mirror(*s);\n      return *this;\n    }\n\n    //! Mirror image content along specified axes \\newinstance.\n    CImg<T> get_mirror(const char *const axes) const {\n      return (+*this).mirror(axes);\n    }\n\n    //! Shift image content.\n    /**\n       \\param delta_x Amount of displacement along the X-axis.\n       \\param delta_y Amount of displacement along the Y-axis.\n       \\param delta_z Amount of displacement along the Z-axis.\n       \\param delta_c Amount of displacement along the C-axis.\n       \\param boundary_conditions Border condition.\n\n       - \\c boundary_conditions can be:\n          - 0: Zero border condition (Dirichlet).\n          - 1: Nearest neighbors (Neumann).\n          - 2: Repeat Pattern (Fourier style).\n    **/\n    CImg<T>& shift(const int delta_x, const int delta_y=0, const int delta_z=0, const int delta_c=0,\n                   const int boundary_conditions=0) {\n      if (is_empty()) return *this;\n      if (delta_x) // Shift along X-axis\n        switch (boundary_conditions) {\n        case 0 :\n          if (cimg::abs(delta_x)>=width()) return fill((T)0);\n          if (delta_x<0) cimg_forYZC(*this,y,z,c) {\n            std::memmove(data(0,y,z,c),data(-delta_x,y,z,c),(_width + delta_x)*sizeof(T));\n            std::memset(data(_width + delta_x,y,z,c),0,-delta_x*sizeof(T));\n          } else cimg_forYZC(*this,y,z,c) {\n            std::memmove(data(delta_x,y,z,c),data(0,y,z,c),(_width-delta_x)*sizeof(T));\n            std::memset(data(0,y,z,c),0,delta_x*sizeof(T));\n          }\n          break;\n        case 1 :\n          if (delta_x<0) {\n            const int ndelta_x = (-delta_x>=width())?width() - 1:-delta_x;\n            if (!ndelta_x) return *this;\n            cimg_forYZC(*this,y,z,c) {\n              std::memmove(data(0,y,z,c),data(ndelta_x,y,z,c),(_width-ndelta_x)*sizeof(T));\n              T *ptrd = data(_width - 1,y,z,c);\n              const T val = *ptrd;\n              for (int l = 0; l<ndelta_x - 1; ++l) *(--ptrd) = val;\n            }\n          } else {\n            const int ndelta_x = (delta_x>=width())?width() - 1:delta_x;\n            if (!ndelta_x) return *this;\n            cimg_forYZC(*this,y,z,c) {\n              std::memmove(data(ndelta_x,y,z,c),data(0,y,z,c),(_width-ndelta_x)*sizeof(T));\n              T *ptrd = data(0,y,z,c);\n              const T val = *ptrd;\n              for (int l = 0; l<ndelta_x - 1; ++l) *(++ptrd) = val;\n            }\n          }\n          break;\n        default : {\n          const int ml = cimg::mod(-delta_x,width()), ndelta_x = (ml<=width()/2)?ml:(ml-width());\n          if (!ndelta_x) return *this;\n          T *const buf = new T[(unsigned int)cimg::abs(ndelta_x)];\n          if (ndelta_x>0) cimg_forYZC(*this,y,z,c) {\n            std::memcpy(buf,data(0,y,z,c),ndelta_x*sizeof(T));\n            std::memmove(data(0,y,z,c),data(ndelta_x,y,z,c),(_width-ndelta_x)*sizeof(T));\n            std::memcpy(data(_width-ndelta_x,y,z,c),buf,ndelta_x*sizeof(T));\n          } else cimg_forYZC(*this,y,z,c) {\n            std::memcpy(buf,data(_width + ndelta_x,y,z,c),-ndelta_x*sizeof(T));\n            std::memmove(data(-ndelta_x,y,z,c),data(0,y,z,c),(_width + ndelta_x)*sizeof(T));\n            std::memcpy(data(0,y,z,c),buf,-ndelta_x*sizeof(T));\n          }\n          delete[] buf;\n        }\n        }\n\n      if (delta_y) // Shift along Y-axis\n        switch (boundary_conditions) {\n        case 0 :\n          if (cimg::abs(delta_y)>=height()) return fill((T)0);\n          if (delta_y<0) cimg_forZC(*this,z,c) {\n            std::memmove(data(0,0,z,c),data(0,-delta_y,z,c),_width*(_height + delta_y)*sizeof(T));\n            std::memset(data(0,_height + delta_y,z,c),0,-delta_y*_width*sizeof(T));\n          } else cimg_forZC(*this,z,c) {\n            std::memmove(data(0,delta_y,z,c),data(0,0,z,c),_width*(_height-delta_y)*sizeof(T));\n            std::memset(data(0,0,z,c),0,delta_y*_width*sizeof(T));\n          }\n          break;\n        case 1 :\n          if (delta_y<0) {\n            const int ndelta_y = (-delta_y>=height())?height() - 1:-delta_y;\n            if (!ndelta_y) return *this;\n            cimg_forZC(*this,z,c) {\n              std::memmove(data(0,0,z,c),data(0,ndelta_y,z,c),_width*(_height-ndelta_y)*sizeof(T));\n              T *ptrd = data(0,_height-ndelta_y,z,c), *ptrs = data(0,_height - 1,z,c);\n              for (int l = 0; l<ndelta_y - 1; ++l) { std::memcpy(ptrd,ptrs,_width*sizeof(T)); ptrd+=_width; }\n            }\n          } else {\n            const int ndelta_y = (delta_y>=height())?height() - 1:delta_y;\n            if (!ndelta_y) return *this;\n            cimg_forZC(*this,z,c) {\n              std::memmove(data(0,ndelta_y,z,c),data(0,0,z,c),_width*(_height-ndelta_y)*sizeof(T));\n              T *ptrd = data(0,1,z,c), *ptrs = data(0,0,z,c);\n              for (int l = 0; l<ndelta_y - 1; ++l) { std::memcpy(ptrd,ptrs,_width*sizeof(T)); ptrd+=_width; }\n            }\n          }\n          break;\n        default : {\n          const int ml = cimg::mod(-delta_y,height()), ndelta_y = (ml<=height()/2)?ml:(ml-height());\n          if (!ndelta_y) return *this;\n          T *const buf = new T[(size_t)_width*cimg::abs(ndelta_y)];\n          if (ndelta_y>0) cimg_forZC(*this,z,c) {\n            std::memcpy(buf,data(0,0,z,c),_width*ndelta_y*sizeof(T));\n            std::memmove(data(0,0,z,c),data(0,ndelta_y,z,c),_width*(_height-ndelta_y)*sizeof(T));\n            std::memcpy(data(0,_height-ndelta_y,z,c),buf,_width*ndelta_y*sizeof(T));\n          } else cimg_forZC(*this,z,c) {\n            std::memcpy(buf,data(0,_height + ndelta_y,z,c),-ndelta_y*_width*sizeof(T));\n            std::memmove(data(0,-ndelta_y,z,c),data(0,0,z,c),_width*(_height + ndelta_y)*sizeof(T));\n            std::memcpy(data(0,0,z,c),buf,-ndelta_y*_width*sizeof(T));\n          }\n          delete[] buf;\n        }\n        }\n\n      if (delta_z) // Shift along Z-axis\n        switch (boundary_conditions) {\n        case 0 :\n          if (cimg::abs(delta_z)>=depth()) return fill((T)0);\n          if (delta_z<0) cimg_forC(*this,c) {\n            std::memmove(data(0,0,0,c),data(0,0,-delta_z,c),_width*_height*(_depth + delta_z)*sizeof(T));\n            std::memset(data(0,0,_depth + delta_z,c),0,_width*_height*(-delta_z)*sizeof(T));\n          } else cimg_forC(*this,c) {\n            std::memmove(data(0,0,delta_z,c),data(0,0,0,c),_width*_height*(_depth-delta_z)*sizeof(T));\n            std::memset(data(0,0,0,c),0,delta_z*_width*_height*sizeof(T));\n          }\n          break;\n        case 1 :\n          if (delta_z<0) {\n            const int ndelta_z = (-delta_z>=depth())?depth() - 1:-delta_z;\n            if (!ndelta_z) return *this;\n            cimg_forC(*this,c) {\n              std::memmove(data(0,0,0,c),data(0,0,ndelta_z,c),_width*_height*(_depth-ndelta_z)*sizeof(T));\n              T *ptrd = data(0,0,_depth-ndelta_z,c), *ptrs = data(0,0,_depth - 1,c);\n              for (int l = 0; l<ndelta_z - 1; ++l) {\n                std::memcpy(ptrd,ptrs,_width*_height*sizeof(T)); ptrd+=(ulongT)_width*_height;\n              }\n            }\n          } else {\n            const int ndelta_z = (delta_z>=depth())?depth() - 1:delta_z;\n            if (!ndelta_z) return *this;\n            cimg_forC(*this,c) {\n              std::memmove(data(0,0,ndelta_z,c),data(0,0,0,c),_width*_height*(_depth-ndelta_z)*sizeof(T));\n              T *ptrd = data(0,0,1,c), *ptrs = data(0,0,0,c);\n              for (int l = 0; l<ndelta_z - 1; ++l) {\n                std::memcpy(ptrd,ptrs,_width*_height*sizeof(T)); ptrd+=(ulongT)_width*_height;\n              }\n            }\n          }\n          break;\n        default : {\n          const int ml = cimg::mod(-delta_z,depth()), ndelta_z = (ml<=depth()/2)?ml:(ml-depth());\n          if (!ndelta_z) return *this;\n          T *const buf = new T[(size_t)_width*_height*cimg::abs(ndelta_z)];\n          if (ndelta_z>0) cimg_forC(*this,c) {\n            std::memcpy(buf,data(0,0,0,c),_width*_height*ndelta_z*sizeof(T));\n            std::memmove(data(0,0,0,c),data(0,0,ndelta_z,c),_width*_height*(_depth-ndelta_z)*sizeof(T));\n            std::memcpy(data(0,0,_depth-ndelta_z,c),buf,_width*_height*ndelta_z*sizeof(T));\n          } else cimg_forC(*this,c) {\n            std::memcpy(buf,data(0,0,_depth + ndelta_z,c),-ndelta_z*_width*_height*sizeof(T));\n            std::memmove(data(0,0,-ndelta_z,c),data(0,0,0,c),_width*_height*(_depth + ndelta_z)*sizeof(T));\n            std::memcpy(data(0,0,0,c),buf,-ndelta_z*_width*_height*sizeof(T));\n          }\n          delete[] buf;\n        }\n        }\n\n      if (delta_c) // Shift along C-axis\n        switch (boundary_conditions) {\n        case 0 :\n          if (cimg::abs(delta_c)>=spectrum()) return fill((T)0);\n          if (delta_c<0) {\n            std::memmove(_data,data(0,0,0,-delta_c),_width*_height*_depth*(_spectrum + delta_c)*sizeof(T));\n            std::memset(data(0,0,0,_spectrum + delta_c),0,_width*_height*_depth*(-delta_c)*sizeof(T));\n          } else {\n            std::memmove(data(0,0,0,delta_c),_data,_width*_height*_depth*(_spectrum-delta_c)*sizeof(T));\n            std::memset(_data,0,delta_c*_width*_height*_depth*sizeof(T));\n          }\n          break;\n        case 1 :\n          if (delta_c<0) {\n            const int ndelta_c = (-delta_c>=spectrum())?spectrum() - 1:-delta_c;\n            if (!ndelta_c) return *this;\n            std::memmove(_data,data(0,0,0,ndelta_c),_width*_height*_depth*(_spectrum-ndelta_c)*sizeof(T));\n            T *ptrd = data(0,0,0,_spectrum-ndelta_c), *ptrs = data(0,0,0,_spectrum - 1);\n            for (int l = 0; l<ndelta_c - 1; ++l) {\n              std::memcpy(ptrd,ptrs,_width*_height*_depth*sizeof(T)); ptrd+=(ulongT)_width*_height*_depth;\n            }\n          } else {\n            const int ndelta_c = (delta_c>=spectrum())?spectrum() - 1:delta_c;\n            if (!ndelta_c) return *this;\n            std::memmove(data(0,0,0,ndelta_c),_data,_width*_height*_depth*(_spectrum-ndelta_c)*sizeof(T));\n            T *ptrd = data(0,0,0,1);\n            for (int l = 0; l<ndelta_c - 1; ++l) {\n              std::memcpy(ptrd,_data,_width*_height*_depth*sizeof(T)); ptrd+=(ulongT)_width*_height*_depth;\n            }\n          }\n          break;\n        default : {\n          const int ml = cimg::mod(-delta_c,spectrum()), ndelta_c = (ml<=spectrum()/2)?ml:(ml-spectrum());\n          if (!ndelta_c) return *this;\n          T *const buf = new T[(size_t)_width*_height*_depth*cimg::abs(ndelta_c)];\n          if (ndelta_c>0) {\n            std::memcpy(buf,_data,_width*_height*_depth*ndelta_c*sizeof(T));\n            std::memmove(_data,data(0,0,0,ndelta_c),_width*_height*_depth*(_spectrum-ndelta_c)*sizeof(T));\n            std::memcpy(data(0,0,0,_spectrum-ndelta_c),buf,_width*_height*_depth*ndelta_c*sizeof(T));\n          } else {\n            std::memcpy(buf,data(0,0,0,_spectrum + ndelta_c),-ndelta_c*_width*_height*_depth*sizeof(T));\n            std::memmove(data(0,0,0,-ndelta_c),_data,_width*_height*_depth*(_spectrum + ndelta_c)*sizeof(T));\n            std::memcpy(_data,buf,-ndelta_c*_width*_height*_depth*sizeof(T));\n          }\n          delete[] buf;\n        }\n        }\n      return *this;\n    }\n\n    //! Shift image content \\newinstance.\n    CImg<T> get_shift(const int delta_x, const int delta_y=0, const int delta_z=0, const int delta_c=0,\n                          const int boundary_conditions=0) const {\n      return (+*this).shift(delta_x,delta_y,delta_z,delta_c,boundary_conditions);\n    }\n\n    //! Permute axes order.\n    /**\n       \\param order Axes permutations, as a C-string of 4 characters.\n       This function permutes image content regarding the specified axes permutation.\n    **/\n    CImg<T>& permute_axes(const char *const order) {\n      return get_permute_axes(order).move_to(*this);\n    }\n\n    //! Permute axes order \\newinstance.\n    CImg<T> get_permute_axes(const char *const order) const {\n      const T foo = (T)0;\n      return _permute_axes(order,foo);\n    }\n\n    template<typename t>\n    CImg<t> _permute_axes(const char *const order, const t&) const {\n      if (is_empty() || !order) return CImg<t>(*this,false);\n      CImg<t> res;\n      const T* ptrs = _data;\n      unsigned char s_code[4] = { 0,1,2,3 }, n_code[4] = { 0 };\n      for (unsigned int l = 0; order[l]; ++l) {\n        int c = cimg::lowercase(order[l]);\n        if (c!='x' && c!='y' && c!='z' && c!='c') { *s_code = 4; break; }\n        else { ++n_code[c%=4]; s_code[l] = c; }\n      }\n      if (*order && *s_code<4 && *n_code<=1 && n_code[1]<=1 && n_code[2]<=1 && n_code[3]<=1) {\n        const unsigned int code = (s_code[0]<<12) | (s_code[1]<<8) | (s_code[2]<<4) | (s_code[3]);\n        ulongT wh, whd;\n        switch (code) {\n        case 0x0123 : // xyzc\n          return +*this;\n        case 0x0132 : // xycz\n          res.assign(_width,_height,_spectrum,_depth);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(x,y,c,z,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x0213 : // xzyc\n          res.assign(_width,_depth,_height,_spectrum);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(x,z,y,c,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x0231 : // xzcy\n          res.assign(_width,_depth,_spectrum,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(x,z,c,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x0312 : // xcyz\n          res.assign(_width,_spectrum,_height,_depth);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(x,c,y,z,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x0321 : // xczy\n          res.assign(_width,_spectrum,_depth,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(x,c,z,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x1023 : // yxzc\n          res.assign(_height,_width,_depth,_spectrum);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(y,x,z,c,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x1032 : // yxcz\n          res.assign(_height,_width,_spectrum,_depth);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(y,x,c,z,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x1203 : // yzxc\n          res.assign(_height,_depth,_width,_spectrum);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(y,z,x,c,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x1230 : // yzcx\n          res.assign(_height,_depth,_spectrum,_width);\n          switch (_width) {\n          case 1 : {\n            t *ptr_r = res.data(0,0,0,0);\n            for (unsigned int siz = _height*_depth*_spectrum; siz; --siz) {\n              *(ptr_r++) = (t)*(ptrs++);\n            }\n          } break;\n          case 2 : {\n            t *ptr_r = res.data(0,0,0,0), *ptr_g = res.data(0,0,0,1);\n            for (unsigned int siz = _height*_depth*_spectrum; siz; --siz) {\n              *(ptr_r++) = (t)ptrs[0];\n              *(ptr_g++) = (t)ptrs[1];\n              ptrs+=2;\n            }\n          } break;\n          case 3 : { // Optimization for the classical conversion from interleaved RGB to planar RGB\n            t *ptr_r = res.data(0,0,0,0), *ptr_g = res.data(0,0,0,1), *ptr_b = res.data(0,0,0,2);\n            for (unsigned int siz = _height*_depth*_spectrum; siz; --siz) {\n              *(ptr_r++) = (t)ptrs[0];\n              *(ptr_g++) = (t)ptrs[1];\n              *(ptr_b++) = (t)ptrs[2];\n              ptrs+=3;\n            }\n          } break;\n          case 4 : { // Optimization for the classical conversion from interleaved RGBA to planar RGBA\n            t\n              *ptr_r = res.data(0,0,0,0), *ptr_g = res.data(0,0,0,1),\n              *ptr_b = res.data(0,0,0,2), *ptr_a = res.data(0,0,0,3);\n            for (unsigned int siz = _height*_depth*_spectrum; siz; --siz) {\n              *(ptr_r++) = (t)ptrs[0];\n              *(ptr_g++) = (t)ptrs[1];\n              *(ptr_b++) = (t)ptrs[2];\n              *(ptr_a++) = (t)ptrs[3];\n              ptrs+=4;\n            }\n          } break;\n          default : {\n            wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n            cimg_forXYZC(*this,x,y,z,c) res(y,z,c,x,wh,whd) = *(ptrs++);\n            return res;\n          }\n          }\n          break;\n        case 0x1302 : // ycxz\n          res.assign(_height,_spectrum,_width,_depth);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(y,c,x,z,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x1320 : // yczx\n          res.assign(_height,_spectrum,_depth,_width);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(y,c,z,x,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2013 : // zxyc\n          res.assign(_depth,_width,_height,_spectrum);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,x,y,c,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2031 : // zxcy\n          res.assign(_depth,_width,_spectrum,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,x,c,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2103 : // zyxc\n          res.assign(_depth,_height,_width,_spectrum);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,y,x,c,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2130 : // zycx\n          res.assign(_depth,_height,_spectrum,_width);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,y,c,x,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2301 : // zcxy\n          res.assign(_depth,_spectrum,_width,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,c,x,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x2310 : // zcyx\n          res.assign(_depth,_spectrum,_height,_width);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(z,c,y,x,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x3012 : // cxyz\n          res.assign(_spectrum,_width,_height,_depth);\n          switch (_spectrum) {\n          case 1 : {\n            const T *ptr_r = data(0,0,0,0);\n            t *ptrd = res._data;\n            for (ulongT siz = (ulongT)_width*_height*_depth; siz; --siz) *(ptrd++) = (t)*(ptr_r++);\n          } break;\n          case 2 : {\n            const T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1);\n            t *ptrd = res._data;\n            for (ulongT siz = (ulongT)_width*_height*_depth; siz; --siz) {\n              ptrd[0] = (t)*(ptr_r++);\n              ptrd[1] = (t)*(ptr_g++);\n              ptrd+=2;\n            }\n          } break;\n          case 3 : { // Optimization for the classical conversion from planar RGB to interleaved RGB\n            const T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2);\n            t *ptrd = res._data;\n            for (ulongT siz = (ulongT)_width*_height*_depth; siz; --siz) {\n              ptrd[0] = (t)*(ptr_r++);\n              ptrd[1] = (t)*(ptr_g++);\n              ptrd[2] = (t)*(ptr_b++);\n              ptrd+=3;\n            }\n          } break;\n          case 4 : { // Optimization for the classical conversion from planar RGBA to interleaved RGBA\n            const T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2), *ptr_a = data(0,0,0,3);\n            t *ptrd = res._data;\n            for (ulongT siz = (ulongT)_width*_height*_depth; siz; --siz) {\n              ptrd[0] = (t)*(ptr_r++);\n              ptrd[1] = (t)*(ptr_g++);\n              ptrd[2] = (t)*(ptr_b++);\n              ptrd[3] = (t)*(ptr_a++);\n              ptrd+=4;\n            }\n          } break;\n          default : {\n            wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n            cimg_forXYZC(*this,x,y,z,c) res(c,x,y,z,wh,whd) = (t)*(ptrs++);\n          }\n          }\n          break;\n        case 0x3021 : // cxzy\n          res.assign(_spectrum,_width,_depth,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(c,x,z,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x3102 : // cyxz\n          res.assign(_spectrum,_height,_width,_depth);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(c,y,x,z,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x3120 : // cyzx\n          res.assign(_spectrum,_height,_depth,_width);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(c,y,z,x,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x3201 : // czxy\n          res.assign(_spectrum,_depth,_width,_height);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(c,z,x,y,wh,whd) = (t)*(ptrs++);\n          break;\n        case 0x3210 : // czyx\n          res.assign(_spectrum,_depth,_height,_width);\n          wh = (ulongT)res._width*res._height; whd = wh*res._depth;\n          cimg_forXYZC(*this,x,y,z,c) res(c,z,y,x,wh,whd) = (t)*(ptrs++);\n          break;\n        }\n      }\n      if (!res)\n        throw CImgArgumentException(_cimg_instance\n                                    \"permute_axes(): Invalid specified permutation '%s'.\",\n                                    cimg_instance,\n                                    order);\n      return res;\n    }\n\n    //! Unroll pixel values along specified axis.\n    /**\n       \\param axis Unroll axis (can be \\c 'x', \\c 'y', \\c 'z' or c 'c').\n    **/\n    CImg<T>& unroll(const char axis) {\n      const unsigned int siz = (unsigned int)size();\n      if (siz) switch (cimg::lowercase(axis)) {\n      case 'x' : _width = siz; _height = _depth = _spectrum = 1; break;\n      case 'y' : _height = siz; _width = _depth = _spectrum = 1; break;\n      case 'z' : _depth = siz; _width = _height = _spectrum = 1; break;\n      default : _spectrum = siz; _width = _height = _depth = 1;\n      }\n      return *this;\n    }\n\n    //! Unroll pixel values along specified axis \\newinstance.\n    CImg<T> get_unroll(const char axis) const {\n      return (+*this).unroll(axis);\n    }\n\n    //! Rotate image with arbitrary angle.\n    /**\n       \\param angle Rotation angle, in degrees.\n       \\param interpolation Type of interpolation. Can be <tt>{ 0=nearest | 1=linear | 2=cubic }</tt>.\n       \\param boundary Boundary conditions. Can be <tt>{  0=dirichlet | 1=neumann | 2=periodic }</tt>.\n       \\note Most of the time, size of the image is modified.\n    **/\n    CImg<T>& rotate(const float angle, const unsigned int interpolation=1,\n                    const unsigned int boundary_conditions=0) {\n      const float nangle = cimg::mod(angle,360.0f);\n      if (nangle==0.0f) return *this;\n      return get_rotate(nangle,interpolation,boundary_conditions).move_to(*this);\n    }\n\n    //! Rotate image with arbitrary angle \\newinstance.\n    CImg<T> get_rotate(const float angle, const unsigned int interpolation=1,\n                       const unsigned int boundary_conditions=0) const {\n      if (is_empty()) return *this;\n      CImg<T> res;\n      const float nangle = cimg::mod(angle,360.0f);\n      if (boundary_conditions!=1 && cimg::mod(nangle,90.0f)==0) { // Optimized version for orthogonal angles.\n        const int wm1 = width() - 1, hm1 = height() - 1;\n        const int iangle = (int)nangle/90;\n        switch (iangle) {\n        case 1 : { // 90 deg\n          res.assign(_height,_width,_depth,_spectrum);\n          T *ptrd = res._data;\n          cimg_forXYZC(res,x,y,z,c) *(ptrd++) = (*this)(y,hm1 - x,z,c);\n        } break;\n        case 2 : { // 180 deg\n          res.assign(_width,_height,_depth,_spectrum);\n          T *ptrd = res._data;\n          cimg_forXYZC(res,x,y,z,c) *(ptrd++) = (*this)(wm1 - x,hm1 - y,z,c);\n        } break;\n        case 3 : { // 270 deg\n          res.assign(_height,_width,_depth,_spectrum);\n          T *ptrd = res._data;\n          cimg_forXYZC(res,x,y,z,c) *(ptrd++) = (*this)(wm1 - y,x,z,c);\n        } break;\n        default : // 0 deg\n          return *this;\n        }\n      } else { // Generic angle\n        const float\n          rad = (float)(nangle*cimg::PI/180.0),\n          ca = (float)std::cos(rad), sa = (float)std::sin(rad),\n          ux = cimg::abs((_width - 1)*ca), uy = cimg::abs((_width - 1)*sa),\n          vx = cimg::abs((_height - 1)*sa), vy = cimg::abs((_height - 1)*ca),\n          w2 = 0.5f*(_width - 1), h2 = 0.5f*(_height - 1);\n        res.assign((int)cimg::round(1 + ux + vx),(int)cimg::round(1 + uy + vy),_depth,_spectrum);\n        const float rw2 = 0.5f*(res._width - 1), rh2 = 0.5f*(res._height - 1);\n        _rotate(res,nangle,interpolation,boundary_conditions,w2,h2,rw2,rh2);\n      }\n      return res;\n    }\n\n    //! Rotate image with arbitrary angle, around a center point.\n    /**\n       \\param angle Rotation angle, in degrees.\n       \\param cx X-coordinate of the rotation center.\n       \\param cy Y-coordinate of the rotation center.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann | 2=periodic }</tt>.\n       \\param interpolation_type Type of interpolation. Can be <tt>{ 0=nearest | 1=linear | 2=cubic }</tt>.\n    **/\n    CImg<T>& rotate(const float angle, const float cx, const float cy,\n                    const unsigned int interpolation, const unsigned int boundary_conditions=0) {\n      return get_rotate(angle,cx,cy,interpolation,boundary_conditions).move_to(*this);\n    }\n\n    //! Rotate image with arbitrary angle, around a center point \\newinstance.\n    CImg<T> get_rotate(const float angle, const float cx, const float cy,\n                       const unsigned int interpolation, const unsigned int boundary_conditions=0) const {\n      if (is_empty()) return *this;\n      CImg<T> res(_width,_height,_depth,_spectrum);\n      _rotate(res,angle,interpolation,boundary_conditions,cx,cy,cx,cy);\n      return res;\n    }\n\n    // [internal] Perform 2d rotation with arbitrary angle.\n    void _rotate(CImg<T>& res, const float angle,\n                 const unsigned int interpolation, const unsigned int boundary_conditions,\n                 const float w2, const float h2,\n                 const float rw2, const float rh2) const {\n      const float\n        rad = (float)(angle*cimg::PI/180.0),\n        ca = (float)std::cos(rad), sa = (float)std::sin(rad);\n\n      switch (boundary_conditions) {\n      case 0 : { // Dirichlet boundaries\n        switch (interpolation) {\n        case 2 : { // Cubic interpolation\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            const Tfloat val = cubic_atXY(w2 + xc*ca + yc*sa,h2 - xc*sa + yc*ca,z,c,(T)0);\n            res(x,y,z,c) = cimg::type<T>::cut(val);\n          }\n        } break;\n        case 1 : { // Linear interpolation\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            res(x,y,z,c) = (T)linear_atXY(w2 + xc*ca + yc*sa,h2 - xc*sa + yc*ca,z,c,(T)0);\n          }\n        } break;\n        default : { // Nearest-neighbor interpolation\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            res(x,y,z,c) = atXY((int)cimg::round(w2 + xc*ca + yc*sa),\n                                (int)cimg::round(h2 - xc*sa + yc*ca),z,c,(T)0);\n          }\n        }\n        }\n      } break;\n      case 1 : { // Neumann boundaries.\n        switch (interpolation) {\n        case 2 : { // Cubic interpolation.\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            const Tfloat val = _cubic_atXY(w2 + xc*ca + yc*sa,h2 - xc*sa + yc*ca,z,c);\n            res(x,y,z,c) = cimg::type<T>::cut(val);\n          }\n        } break;\n        case 1 : { // Linear interpolation.\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            res(x,y,z,c) = (T)_linear_atXY(w2 + xc*ca + yc*sa,h2 - xc*sa + yc*ca,z,c);\n          }\n        } break;\n        default : { // Nearest-neighbor interpolation.\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZC(res,x,y,z,c) {\n            const float xc = x - rw2, yc = y - rh2;\n            res(x,y,z,c) = _atXY((int)cimg::round(w2 + xc*ca + yc*sa),\n                                 (int)cimg::round(h2 - xc*sa + yc*ca),z,c);\n          }\n        }\n        }\n      } break;\n        default : { // Periodic boundaries.\n          switch (interpolation) {\n          case 2 : { // Cubic interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n            cimg_forXYZC(res,x,y,z,c) {\n              const float xc = x - rw2, yc = y - rh2;\n              const Tfloat val = _cubic_atXY(cimg::mod(w2 + xc*ca + yc*sa,(float)width()),\n                                             cimg::mod(h2 - xc*sa + yc*ca,(float)height()),z,c);\n              res(x,y,z,c) = cimg::type<T>::cut(val);\n            }\n          } break;\n          case 1 : { // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n            cimg_forXYZC(res,x,y,z,c) {\n              const float xc = x - rw2, yc = y - rh2;\n              res(x,y,z,c) = (T)_linear_atXY(cimg::mod(w2 + xc*ca + yc*sa,(float)width()),\n                                             cimg::mod(h2 - xc*sa + yc*ca,(float)height()),z,c);\n            }\n          } break;\n          default : { // Nearest-neighbor interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=2048))\n            cimg_forXYZC(res,x,y,z,c) {\n              const float xc = x - rw2, yc = y - rh2;\n              res(x,y,z,c) = (*this)(cimg::mod((int)cimg::round(w2 + xc*ca + yc*sa),(float)width()),\n                                     cimg::mod((int)cimg::round(h2 - xc*sa + yc*ca),(float)height()),z,c);\n            }\n          }\n          }\n        } break;\n      }\n    }\n\n    //! Rotate volumetric image with arbitrary angle and axis.\n    /**\n       \\param u X-coordinate of the 3d rotation axis.\n       \\param v Y-coordinate of the 3d rotation axis.\n       \\param w Z-coordinate of the 3d rotation axis.\n       \\param angle Rotation angle, in degrees.\n       \\param interpolation Type of interpolation. Can be <tt>{ 0=nearest | 1=linear | 2=cubic }</tt>.\n       \\param boundary Boundary conditions. Can be <tt>{  0=dirichlet | 1=neumann | 2=periodic }</tt>.\n       \\note Most of the time, size of the image is modified.\n    **/\n    CImg<T> rotate(const float u, const float v, const float w, const float angle,\n                   const unsigned int interpolation, const unsigned int boundary_conditions) {\n      const float nangle = cimg::mod(angle,360.0f);\n      if (nangle==0.0f) return *this;\n      return get_rotate(u,v,w,nangle,interpolation,boundary_conditions).move_to(*this);\n    }\n\n    //! Rotate volumetric image with arbitrary angle and axis \\newinstance.\n    CImg<T> get_rotate(const float u, const float v, const float w, const float angle,\n                       const unsigned int interpolation, const unsigned int boundary_conditions) const {\n      if (is_empty()) return *this;\n      CImg<T> res;\n      const float\n        w1 = _width - 1, h1 = _height - 1, d1 = _depth -1,\n        w2 = 0.5f*w1, h2 = 0.5f*h1, d2 = 0.5f*d1;\n      CImg<floatT> R = CImg<floatT>::rotation_matrix(u,v,w,angle);\n      const CImg<Tfloat>\n        X = R*CImg<Tfloat>(8,3,1,1,\n                           0.0f,w1,w1,0.0f,0.0f,w1,w1,0.0f,\n                           0.0f,0.0f,h1,h1,0.0f,0.0f,h1,h1,\n                           0.0f,0.0f,0.0f,0.0f,d1,d1,d1,d1);\n      float\n        xm, xM = X.get_shared_row(0).max_min(xm),\n        ym, yM = X.get_shared_row(1).max_min(ym),\n        zm, zM = X.get_shared_row(2).max_min(zm);\n      const int\n        dx = (int)cimg::round(xM - xm),\n        dy = (int)cimg::round(yM - ym),\n        dz = (int)cimg::round(zM - zm);\n      R.transpose();\n      res.assign(1 + dx,1 + dy,1 + dz,_spectrum);\n      const float rw2 = 0.5f*dx, rh2 = 0.5f*dy, rd2 = 0.5f*dz;\n      _rotate(res,R,interpolation,boundary_conditions,w2,h2,d2,rw2,rh2,rd2);\n      return res;\n    }\n\n    //! Rotate volumetric image with arbitrary angle and axis, around a center point.\n    /**\n       \\param u X-coordinate of the 3d rotation axis.\n       \\param v Y-coordinate of the 3d rotation axis.\n       \\param w Z-coordinate of the 3d rotation axis.\n       \\param cx X-coordinate of the rotation center.\n       \\param cy Y-coordinate of the rotation center.\n       \\param cz Z-coordinate of the rotation center.\n       \\param angle Rotation angle, in degrees.\n       \\param interpolation Type of interpolation. Can be <tt>{ 0=nearest | 1=linear | 2=cubic }</tt>.\n       \\param boundary Boundary conditions. Can be <tt>{  0=dirichlet | 1=neumann | 2=periodic }</tt>.\n       \\note Most of the time, size of the image is modified.\n    **/\n    CImg<T> rotate(const float u, const float v, const float w, const float angle,\n                   const float cx, const float cy, const float cz,\n                   const unsigned int interpolation=1, const unsigned int boundary_conditions=0) {\n      const float nangle = cimg::mod(angle,360.0f);\n      if (nangle==0.0f) return *this;\n      return get_rotate(u,v,w,nangle,cx,cy,cz,interpolation,boundary_conditions).move_to(*this);\n    }\n\n    //! Rotate volumetric image with arbitrary angle and axis, around a center point \\newinstance.\n    CImg<T> get_rotate(const float u, const float v, const float w, const float angle,\n                       const float cx, const float cy, const float cz,\n                       const unsigned int interpolation=1, const unsigned int boundary_conditions=0) const {\n      if (is_empty()) return *this;\n      CImg<T> res(_width,_height,_depth,_spectrum);\n      CImg<floatT> R = CImg<floatT>::rotation_matrix(u,v,w,-angle);\n      _rotate(res,R,interpolation,boundary_conditions,cx,cy,cz,cx,cy,cz);\n      return res;\n    }\n\n    // [internal] Perform 3d rotation with arbitrary axis and angle.\n    void _rotate(CImg<T>& res, const CImg<Tfloat>& R,\n                 const unsigned int interpolation, const unsigned int boundary_conditions,\n                 const float w2, const float h2, const float d2,\n                 const float rw2, const float rh2, const float rd2) const {\n      switch (boundary_conditions) {\n      case 0 : { // Dirichlet boundaries\n        switch (interpolation) {\n        case 2 : { // Cubic interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc,\n              Y = h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc,\n              Z = d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc;\n            cimg_forC(res,c) res(x,y,z,c) = cimg::type<T>::cut(cubic_atXYZ(X,Y,Z,c,(T)0));\n          }\n        } break;\n        case 1 : { // Linear interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc,\n              Y = h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc,\n              Z = d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc;\n            cimg_forC(res,c) res(x,y,z,c) = linear_atXYZ(X,Y,Z,c,(T)0);\n          }\n        } break;\n        default : { // Nearest-neighbor interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float xc = x - rw2, yc = y - rh2, zc = z - rd2;\n            const int\n              X = (int)cimg::round(w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc),\n              Y = (int)cimg::round(h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc),\n              Z = (int)cimg::round(d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc);\n            cimg_forC(res,c) res(x,y,z,c) = atXYZ(X,Y,Z,c,(T)0);\n          }\n        }\n        }\n      } break;\n\n      case 1 : { // Neumann boundaries\n        switch (interpolation) {\n        case 2 : { // Cubic interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc,\n              Y = h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc,\n              Z = d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc;\n            cimg_forC(res,c) res(x,y,z,c) = cimg::type<T>::cut(_cubic_atXYZ(X,Y,Z,c));\n          }\n        } break;\n        case 1 : { // Linear interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc,\n              Y = h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc,\n              Z = d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc;\n            cimg_forC(res,c) res(x,y,z,c) = _linear_atXYZ(X,Y,Z,c);\n          }\n        } break;\n        default : { // Nearest-neighbor interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float xc = x - rw2, yc = y - rh2, zc = z - rd2;\n            const int\n              X = (int)cimg::round(w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc),\n              Y = (int)cimg::round(h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc),\n              Z = (int)cimg::round(d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc);\n            cimg_forC(res,c) res(x,y,z,c) = _atXYZ(X,Y,Z,c);\n          }\n        }\n        }\n      } break;\n\n      default : { // Periodic boundaries\n        switch (interpolation) {\n        case 2 : { // Cubic interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = cimg::mod((float)(w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc),(float)width()),\n              Y = cimg::mod((float)(h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc),(float)height()),\n              Z = cimg::mod((float)(d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc),(float)depth());\n            cimg_forC(res,c) res(x,y,z,c) = cimg::type<T>::cut(_cubic_atXYZ(X,Y,Z,c));\n          }\n        } break;\n        case 1 : { // Linear interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float\n              xc = x - rw2, yc = y - rh2, zc = z - rd2,\n              X = cimg::mod((float)(w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc),(float)width()),\n              Y = cimg::mod((float)(h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc),(float)height()),\n              Z = cimg::mod((float)(d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc),(float)depth());\n            cimg_forC(res,c) res(x,y,z,c) = (T)_linear_atXYZ(X,Y,Z,c);\n          }\n        } break;\n        default : { // Nearest-neighbor interpolation\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res.size()>=2048))\n          cimg_forXYZ(res,x,y,z) {\n            const float xc = x - rw2, yc = y - rh2, zc = z - rd2;\n            const int\n              X = cimg::mod((int)cimg::round(w2 + R(0,0)*xc + R(1,0)*yc + R(2,0)*zc),width()),\n              Y = cimg::mod((int)cimg::round(h2 + R(0,1)*xc + R(1,1)*yc + R(2,1)*zc),height()),\n              Z = cimg::mod((int)cimg::round(d2 + R(0,2)*xc + R(1,2)*yc + R(2,2)*zc),depth());\n            cimg_forC(res,c) res(x,y,z,c) = (*this)(X,Y,Z,c);\n          }\n        }\n        }\n      } break;\n      }\n    }\n\n    //! Warp image content by a warping field.\n    /**\n       \\param warp Warping field.\n       \\param mode Can be { 0=backward-absolute | 1=backward-relative | 2=forward-absolute | 3=foward-relative }\n       \\param is_relative Tells if warping field gives absolute or relative warping coordinates.\n       \\param interpolation Can be <tt>{ 0=nearest | 1=linear | 2=cubic }</tt>.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann | 2=periodic }</tt>.\n    **/\n    template<typename t>\n    CImg<T>& warp(const CImg<t>& warp, const unsigned int mode=0,\n                  const unsigned int interpolation=1, const unsigned int boundary_conditions=0) {\n      return get_warp(warp,mode,interpolation,boundary_conditions).move_to(*this);\n    }\n\n    //! Warp image content by a warping field \\newinstance\n    template<typename t>\n    CImg<T> get_warp(const CImg<t>& warp, const unsigned int mode=0,\n                     const unsigned int interpolation=1, const unsigned int boundary_conditions=0) const {\n      if (is_empty() || !warp) return *this;\n      if (mode && !is_sameXYZ(warp))\n        throw CImgArgumentException(_cimg_instance\n                                    \"warp(): Instance and specified relative warping field (%u,%u,%u,%u,%p) \"\n                                    \"have different XYZ dimensions.\",\n                                    cimg_instance,\n                                    warp._width,warp._height,warp._depth,warp._spectrum,warp._data);\n\n      CImg<T> res(warp._width,warp._height,warp._depth,_spectrum);\n\n      if (warp._spectrum==1) { // 1d warping.\n        if (mode>=3) { // Forward-relative warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atX(*(ptrs++),x + (float)*(ptrs0++),y,z,c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int X = x + (int)cimg::round(*(ptrs0++));\n                if (X>=0 && X<width()) res(X,y,z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==2) { // Forward-absolute warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atX(*(ptrs++),(float)*(ptrs0++),y,z,c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int X = (int)cimg::round(*(ptrs0++));\n                if (X>=0 && X<width()) res(X,y,z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==1) { // Backward-relative warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atX(cimg::mod(x - (float)*(ptrs0++),(float)_width),y,z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atX(x - (float)*(ptrs0++),y,z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)cubic_atX(x - (float)*(ptrs0++),y,z,c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atX(cimg::mod(x - (float)*(ptrs0++),(float)_width),y,z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atX(x - (float)*(ptrs0++),y,z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)linear_atX(x - (float)*(ptrs0++),y,z,c,(T)0);\n              }\n          } else { // Nearest-neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod(x - (int)cimg::round(*(ptrs0++)),(int)_width),y,z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atX(x - (int)*(ptrs0++),y,z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atX(x - (int)*(ptrs0++),y,z,c,(T)0);\n              }\n          }\n        } else { // Backward-absolute warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atX(cimg::mod((float)*(ptrs0++),(float)_width),0,0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atX((float)*(ptrs0++),0,0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)cubic_atX((float)*(ptrs0++),0,0,c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atX(cimg::mod((float)*(ptrs0++),(float)_width),0,0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atX((float)*(ptrs0++),0,0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)linear_atX((float)*(ptrs0++),0,0,c,(T)0);\n              }\n          } else { // Nearest-neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod((int)cimg::round(*(ptrs0++)),(int)_width),0,0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atX((int)*(ptrs0++),0,0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atX((int)*(ptrs0++),0,0,c,(T)0);\n              }\n          }\n        }\n\n      } else if (warp._spectrum==2) { // 2d warping.\n        if (mode>=3) { // Forward-relative warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atXY(*(ptrs++),x + (float)*(ptrs0++),y + (float)*(ptrs1++),z,c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int X = x + (int)cimg::round(*(ptrs0++)), Y = y + (int)cimg::round(*(ptrs1++));\n                if (X>=0 && X<width() && Y>=0 && Y<height()) res(X,Y,z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==2) { // Forward-absolute warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atXY(*(ptrs++),(float)*(ptrs0++),(float)*(ptrs1++),z,c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int X = (int)cimg::round(*(ptrs0++)), Y = (int)cimg::round(*(ptrs1++));\n                if (X>=0 && X<width() && Y>=0 && Y<height()) res(X,Y,z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==1) { // Backward-relative warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXY(cimg::mod(x - (float)*(ptrs0++),(float)_width),\n                                                            cimg::mod(y - (float)*(ptrs1++),(float)_height),z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXY(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)cubic_atXY(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z,c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXY(cimg::mod(x - (float)*(ptrs0++),(float)_width),\n                                                             cimg::mod(y - (float)*(ptrs1++),(float)_height),z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXY(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)linear_atXY(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z,c,(T)0);\n              }\n          } else { // Nearest-neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod(x - (int)cimg::round(*(ptrs0++)),(int)_width),\n                                                     cimg::mod(y - (int)cimg::round(*(ptrs1++)),(int)_height),z,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atXY(x - (int)*(ptrs0++),y - (int)*(ptrs1++),z,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atXY(x - (int)*(ptrs0++),y - (int)*(ptrs1++),z,c,(T)0);\n              }\n          }\n        } else { // Backward-absolute warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXY(cimg::mod((float)*(ptrs0++),(float)_width),\n                                                            cimg::mod((float)*(ptrs1++),(float)_height),0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXY((float)*(ptrs0++),(float)*(ptrs1++),0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)cubic_atXY((float)*(ptrs0++),(float)*(ptrs1++),0,c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXY(cimg::mod((float)*(ptrs0++),(float)_width),\n                                                             cimg::mod((float)*(ptrs1++),(float)_height),0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXY((float)*(ptrs0++),(float)*(ptrs1++),0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)linear_atXY((float)*(ptrs0++),(float)*(ptrs1++),0,c,(T)0);\n              }\n          } else { // Nearest-neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod((int)cimg::round(*(ptrs0++)),(int)_width),\n                                                     cimg::mod((int)cimg::round(*(ptrs1++)),(int)_height),0,c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atXY((int)*(ptrs0++),(int)*(ptrs1++),0,c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1); T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atXY((int)*(ptrs0++),(int)*(ptrs1++),0,c,(T)0);\n              }\n          }\n        }\n\n      } else { // 3d warping.\n        if (mode>=3) { // Forward-relative warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n              const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atXYZ(*(ptrs++),x + (float)*(ptrs0++),y + (float)*(ptrs1++),\n                                                    z + (float)*(ptrs2++),c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n              const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int\n                  X = x + (int)cimg::round(*(ptrs0++)),\n                  Y = y + (int)cimg::round(*(ptrs1++)),\n                  Z = z + (int)cimg::round(*(ptrs2++));\n                if (X>=0 && X<width() && Y>=0 && Y<height() && Z>=0 && Z<depth()) res(X,Y,Z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==2) { // Forward-absolute warp.\n          res.fill((T)0);\n          if (interpolation>=1) // Linear interpolation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n              const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) res.set_linear_atXYZ(*(ptrs++),(float)*(ptrs0++),(float)*(ptrs1++),(float)*(ptrs2++),c);\n            }\n          else // Nearest-neighbor interpolation.\n            cimg_forYZC(res,y,z,c) {\n              const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n              const T *ptrs = data(0,y,z,c);\n              cimg_forX(res,x) {\n                const int\n                  X = (int)cimg::round(*(ptrs0++)),\n                  Y = (int)cimg::round(*(ptrs1++)),\n                  Z = (int)cimg::round(*(ptrs2++));\n                if (X>=0 && X<width() && Y>=0 && Y<height() && Z>=0 && Z<depth()) res(X,Y,Z,c) = *(ptrs++);\n              }\n            }\n        } else if (mode==1) { // Backward-relative warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXYZ(cimg::mod(x - (float)*(ptrs0++),(float)_width),\n                                                             cimg::mod(y - (float)*(ptrs1++),(float)_height),\n                                                             cimg::mod(z - (float)*(ptrs2++),(float)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x)\n                  *(ptrd++) = (T)_cubic_atXYZ(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z - (float)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x)\n                  *(ptrd++) = (T)cubic_atXYZ(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z - (float)*(ptrs2++),c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXYZ(cimg::mod(x - (float)*(ptrs0++),(float)_width),\n                                                              cimg::mod(y - (float)*(ptrs1++),(float)_height),\n                                                              cimg::mod(z - (float)*(ptrs2++),(float)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x)\n                  *(ptrd++) = (T)_linear_atXYZ(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z - (float)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x)\n                  *(ptrd++) = (T)linear_atXYZ(x - (float)*(ptrs0++),y - (float)*(ptrs1++),z - (float)*(ptrs2++),c,(T)0);\n              }\n          } else { // Nearest neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod(x - (int)cimg::round(*(ptrs0++)),(int)_width),\n                                                     cimg::mod(y - (int)cimg::round(*(ptrs1++)),(int)_height),\n                                                     cimg::mod(z - (int)cimg::round(*(ptrs2++)),(int)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atXYZ(x - (int)*(ptrs0++),y - (int)*(ptrs1++),z - (int)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atXYZ(x - (int)*(ptrs0++),y - (int)*(ptrs1++),z - (int)*(ptrs2++),c,(T)0);\n              }\n          }\n        } else { // Backward-absolute warp.\n          if (interpolation==2) { // Cubic interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXYZ(cimg::mod((float)*(ptrs0++),(float)_width),\n                                                             cimg::mod((float)*(ptrs1++),(float)_height),\n                                                             cimg::mod((float)*(ptrs2++),(float)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_cubic_atXYZ((float)*(ptrs0++),(float)*(ptrs1++),(float)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=4096))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)cubic_atXYZ((float)*(ptrs0++),(float)*(ptrs1++),(float)*(ptrs2++),\n                                                            c,(T)0);\n              }\n          } else if (interpolation==1) { // Linear interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXYZ(cimg::mod((float)*(ptrs0++),(float)_width),\n                                                              cimg::mod((float)*(ptrs1++),(float)_height),\n                                                              cimg::mod((float)*(ptrs2++),(float)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)_linear_atXYZ((float)*(ptrs0++),(float)*(ptrs1++),(float)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(res.size()>=1048576))\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (T)linear_atXYZ((float)*(ptrs0++),(float)*(ptrs1++),(float)*(ptrs2++),\n                                                             c,(T)0);\n              }\n          } else { // Nearest-neighbor interpolation.\n            if (boundary_conditions==2) // Periodic boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = (*this)(cimg::mod((int)cimg::round(*(ptrs0++)),(int)_width),\n                                                     cimg::mod((int)cimg::round(*(ptrs1++)),(int)_height),\n                                                     cimg::mod((int)cimg::round(*(ptrs2++)),(int)_depth),c);\n              }\n            else if (boundary_conditions==1) // Neumann boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = _atXYZ((int)*(ptrs0++),(int)*(ptrs1++),(int)*(ptrs2++),c);\n              }\n            else // Dirichlet boundaries.\n              cimg_forYZC(res,y,z,c) {\n                const t *ptrs0 = warp.data(0,y,z,0), *ptrs1 = warp.data(0,y,z,1), *ptrs2 = warp.data(0,y,z,2);\n                T *ptrd = res.data(0,y,z,c);\n                cimg_forX(res,x) *(ptrd++) = atXYZ((int)*(ptrs0++),(int)*(ptrs1++),(int)*(ptrs2++),c,(T)0);\n              }\n          }\n        }\n      }\n      return res;\n    }\n\n    //! Generate a 2d representation of a 3d image, with XY,XZ and YZ views.\n    /**\n       \\param x0 X-coordinate of the projection point.\n       \\param y0 Y-coordinate of the projection point.\n       \\param z0 Z-coordinate of the projection point.\n    **/\n    CImg<T> get_projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) const {\n      if (is_empty() || _depth<2) return +*this;\n      const unsigned int\n        _x0 = (x0>=_width)?_width - 1:x0,\n        _y0 = (y0>=_height)?_height - 1:y0,\n        _z0 = (z0>=_depth)?_depth - 1:z0;\n      const CImg<T>\n        img_xy = get_crop(0,0,_z0,0,_width - 1,_height - 1,_z0,_spectrum - 1),\n        img_zy = get_crop(_x0,0,0,0,_x0,_height - 1,_depth - 1,_spectrum - 1).permute_axes(\"xzyc\").\n        resize(_depth,_height,1,-100,-1),\n        img_xz = get_crop(0,_y0,0,0,_width - 1,_y0,_depth - 1,_spectrum - 1).resize(_width,_depth,1,-100,-1);\n      return CImg<T>(_width + _depth,_height + _depth,1,_spectrum,cimg::min(img_xy.min(),img_zy.min(),img_xz.min())).\n        draw_image(0,0,img_xy).draw_image(img_xy._width,0,img_zy).\n        draw_image(0,img_xy._height,img_xz);\n    }\n\n    //! Construct a 2d representation of a 3d image, with XY,XZ and YZ views \\inplace.\n    CImg<T>& projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) {\n      if (_depth<2) return *this;\n      return get_projections2d(x0,y0,z0).move_to(*this);\n    }\n\n    //! Crop image region.\n    /**\n       \\param x0 = X-coordinate of the upper-left crop rectangle corner.\n       \\param y0 = Y-coordinate of the upper-left crop rectangle corner.\n       \\param z0 = Z-coordinate of the upper-left crop rectangle corner.\n       \\param c0 = C-coordinate of the upper-left crop rectangle corner.\n       \\param x1 = X-coordinate of the lower-right crop rectangle corner.\n       \\param y1 = Y-coordinate of the lower-right crop rectangle corner.\n       \\param z1 = Z-coordinate of the lower-right crop rectangle corner.\n       \\param c1 = C-coordinate of the lower-right crop rectangle corner.\n       \\param boundary_conditions = Dirichlet (false) or Neumann border conditions.\n    **/\n    CImg<T>& crop(const int x0, const int y0, const int z0, const int c0,\n                  const int x1, const int y1, const int z1, const int c1,\n                  const bool boundary_conditions=false) {\n      return get_crop(x0,y0,z0,c0,x1,y1,z1,c1,boundary_conditions).move_to(*this);\n    }\n\n    //! Crop image region \\newinstance.\n    CImg<T> get_crop(const int x0, const int y0, const int z0, const int c0,\n                     const int x1, const int y1, const int z1, const int c1,\n                     const bool boundary_conditions=false) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"crop(): Empty instance.\",\n                                    cimg_instance);\n      const int\n        nx0 = x0<x1?x0:x1, nx1 = x0^x1^nx0,\n        ny0 = y0<y1?y0:y1, ny1 = y0^y1^ny0,\n        nz0 = z0<z1?z0:z1, nz1 = z0^z1^nz0,\n        nc0 = c0<c1?c0:c1, nc1 = c0^c1^nc0;\n      CImg<T> res(1U + nx1 - nx0,1U + ny1 - ny0,1U + nz1 - nz0,1U + nc1 - nc0);\n      if (nx0<0 || nx1>=width() || ny0<0 || ny1>=height() || nz0<0 || nz1>=depth() || nc0<0 || nc1>=spectrum()) {\n        if (boundary_conditions) cimg_forXYZC(res,x,y,z,c) res(x,y,z,c) = _atXYZC(nx0 + x,ny0 + y,nz0 + z,nc0 + c);\n        else res.fill((T)0).draw_image(-nx0,-ny0,-nz0,-nc0,*this);\n      } else res.draw_image(-nx0,-ny0,-nz0,-nc0,*this);\n      return res;\n    }\n\n    //! Crop image region \\overloading.\n    CImg<T>& crop(const int x0, const int y0, const int z0,\n                  const int x1, const int y1, const int z1,\n                  const bool boundary_conditions=false) {\n      return crop(x0,y0,z0,0,x1,y1,z1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Crop image region \\newinstance.\n    CImg<T> get_crop(const int x0, const int y0, const int z0,\n                     const int x1, const int y1, const int z1,\n                     const bool boundary_conditions=false) const {\n      return get_crop(x0,y0,z0,0,x1,y1,z1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Crop image region \\overloading.\n    CImg<T>& crop(const int x0, const int y0,\n                  const int x1, const int y1,\n                  const bool boundary_conditions=false) {\n      return crop(x0,y0,0,0,x1,y1,_depth - 1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Crop image region \\newinstance.\n    CImg<T> get_crop(const int x0, const int y0,\n                     const int x1, const int y1,\n                     const bool boundary_conditions=false) const {\n      return get_crop(x0,y0,0,0,x1,y1,_depth - 1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Crop image region \\overloading.\n    CImg<T>& crop(const int x0, const int x1, const bool boundary_conditions=false) {\n      return crop(x0,0,0,0,x1,_height - 1,_depth - 1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Crop image region \\newinstance.\n    CImg<T> get_crop(const int x0, const int x1, const bool boundary_conditions=false) const {\n      return get_crop(x0,0,0,0,x1,_height - 1,_depth - 1,_spectrum - 1,boundary_conditions);\n    }\n\n    //! Autocrop image region, regarding the specified background value.\n    CImg<T>& autocrop(const T& value, const char *const axes=\"czyx\") {\n      if (is_empty()) return *this;\n      for (const char *s = axes; *s; ++s) {\n        const char axis = cimg::lowercase(*s);\n        const CImg<intT> coords = _autocrop(value,axis);\n        if (coords[0]==-1 && coords[1]==-1) return assign(); // Image has only 'value' pixels.\n        else switch (axis) {\n        case 'x' : {\n          const int x0 = coords[0], x1 = coords[1];\n          if (x0>=0 && x1>=0) crop(x0,x1);\n        } break;\n        case 'y' : {\n          const int y0 = coords[0], y1 = coords[1];\n          if (y0>=0 && y1>=0) crop(0,y0,_width - 1,y1);\n        } break;\n        case 'z' : {\n          const int z0 = coords[0], z1 = coords[1];\n          if (z0>=0 && z1>=0) crop(0,0,z0,_width - 1,_height - 1,z1);\n        } break;\n        default : {\n          const int c0 = coords[0], c1 = coords[1];\n          if (c0>=0 && c1>=0) crop(0,0,0,c0,_width - 1,_height - 1,_depth - 1,c1);\n        }\n        }\n      }\n      return *this;\n    }\n\n    //! Autocrop image region, regarding the specified background value \\newinstance.\n    CImg<T> get_autocrop(const T& value, const char *const axes=\"czyx\") const {\n      return (+*this).autocrop(value,axes);\n    }\n\n    //! Autocrop image region, regarding the specified background color.\n    /**\n       \\param color Color used for the crop. If \\c 0, color is guessed.\n       \\param axes Axes used for the crop.\n    **/\n    CImg<T>& autocrop(const T *const color=0, const char *const axes=\"zyx\") {\n      if (is_empty()) return *this;\n      if (!color) { // Guess color.\n        const CImg<T> col1 = get_vector_at(0,0,0);\n        const unsigned int w = _width, h = _height, d = _depth, s = _spectrum;\n        autocrop(col1,axes);\n        if (_width==w && _height==h && _depth==d && _spectrum==s) {\n          const CImg<T> col2 = get_vector_at(w - 1,h - 1,d - 1);\n          autocrop(col2,axes);\n        }\n        return *this;\n      }\n      for (const char *s = axes; *s; ++s) {\n        const char axis = cimg::lowercase(*s);\n        switch (axis) {\n        case 'x' : {\n          int x0 = width(), x1 = -1;\n          cimg_forC(*this,c) {\n            const CImg<intT> coords = get_shared_channel(c)._autocrop(color[c],'x');\n            const int nx0 = coords[0], nx1 = coords[1];\n            if (nx0>=0 && nx1>=0) { x0 = std::min(x0,nx0); x1 = std::max(x1,nx1); }\n          }\n          if (x0==width() && x1==-1) return assign(); else crop(x0,x1);\n        } break;\n        case 'y' : {\n          int y0 = height(), y1 = -1;\n          cimg_forC(*this,c) {\n            const CImg<intT> coords = get_shared_channel(c)._autocrop(color[c],'y');\n            const int ny0 = coords[0], ny1 = coords[1];\n            if (ny0>=0 && ny1>=0) { y0 = std::min(y0,ny0); y1 = std::max(y1,ny1); }\n          }\n          if (y0==height() && y1==-1) return assign(); else crop(0,y0,_width - 1,y1);\n        } break;\n        default : {\n          int z0 = depth(), z1 = -1;\n          cimg_forC(*this,c) {\n            const CImg<intT> coords = get_shared_channel(c)._autocrop(color[c],'z');\n            const int nz0 = coords[0], nz1 = coords[1];\n            if (nz0>=0 && nz1>=0) { z0 = std::min(z0,nz0); z1 = std::max(z1,nz1); }\n          }\n          if (z0==depth() && z1==-1) return assign(); else crop(0,0,z0,_width - 1,_height - 1,z1);\n        }\n        }\n      }\n      return *this;\n    }\n\n    //! Autocrop image region, regarding the specified background color \\newinstance.\n    CImg<T> get_autocrop(const T *const color=0, const char *const axes=\"zyx\") const {\n      return (+*this).autocrop(color,axes);\n    }\n\n    //! Autocrop image region, regarding the specified background color \\overloading.\n    template<typename t> CImg<T>& autocrop(const CImg<t>& color, const char *const axes=\"zyx\") {\n      return get_autocrop(color,axes).move_to(*this);\n    }\n\n    //! Autocrop image region, regarding the specified background color \\newinstance.\n    template<typename t> CImg<T> get_autocrop(const CImg<t>& color, const char *const axes=\"zyx\") const {\n      return get_autocrop(color._data,axes);\n    }\n\n    CImg<intT> _autocrop(const T& value, const char axis) const {\n      CImg<intT> res;\n      switch (cimg::lowercase(axis)) {\n      case 'x' : {\n        int x0 = -1, x1 = -1;\n        cimg_forX(*this,x) cimg_forYZC(*this,y,z,c)\n          if ((*this)(x,y,z,c)!=value) { x0 = x; x = width(); y = height(); z = depth(); c = spectrum(); }\n        if (x0>=0) {\n          for (int x = width() - 1; x>=0; --x) cimg_forYZC(*this,y,z,c)\n            if ((*this)(x,y,z,c)!=value) { x1 = x; x = 0; y = height(); z = depth(); c = spectrum(); }\n        }\n        res = CImg<intT>::vector(x0,x1);\n      } break;\n      case 'y' : {\n        int y0 = -1, y1 = -1;\n        cimg_forY(*this,y) cimg_forXZC(*this,x,z,c)\n          if ((*this)(x,y,z,c)!=value) { y0 = y; x = width(); y = height(); z = depth(); c = spectrum(); }\n        if (y0>=0) {\n          for (int y = height() - 1; y>=0; --y) cimg_forXZC(*this,x,z,c)\n            if ((*this)(x,y,z,c)!=value) { y1 = y; x = width(); y = 0; z = depth(); c = spectrum(); }\n        }\n        res = CImg<intT>::vector(y0,y1);\n      } break;\n      case 'z' : {\n        int z0 = -1, z1 = -1;\n        cimg_forZ(*this,z) cimg_forXYC(*this,x,y,c)\n          if ((*this)(x,y,z,c)!=value) { z0 = z; x = width(); y = height(); z = depth(); c = spectrum(); }\n        if (z0>=0) {\n          for (int z = depth() - 1; z>=0; --z) cimg_forXYC(*this,x,y,c)\n            if ((*this)(x,y,z,c)!=value) { z1 = z; x = width(); y = height(); z = 0; c = spectrum(); }\n        }\n        res = CImg<intT>::vector(z0,z1);\n      } break;\n      default : {\n        int c0 = -1, c1 = -1;\n        cimg_forC(*this,c) cimg_forXYZ(*this,x,y,z)\n          if ((*this)(x,y,z,c)!=value) { c0 = c; x = width(); y = height(); z = depth(); c = spectrum(); }\n        if (c0>=0) {\n          for (int c = spectrum() - 1; c>=0; --c) cimg_forXYZ(*this,x,y,z)\n            if ((*this)(x,y,z,c)!=value) { c1 = c; x = width(); y = height(); z = depth(); c = 0; }\n        }\n        res = CImg<intT>::vector(c0,c1);\n      }\n      }\n      return res;\n    }\n\n    //! Return specified image column.\n    /**\n       \\param x0 Image column.\n    **/\n    CImg<T> get_column(const int x0) const {\n      return get_columns(x0,x0);\n    }\n\n    //! Return specified image column \\inplace.\n    CImg<T>& column(const int x0) {\n      return columns(x0,x0);\n    }\n\n    //! Return specified range of image columns.\n    /**\n       \\param x0 Starting image column.\n       \\param x1 Ending image column.\n    **/\n    CImg<T>& columns(const int x0, const int x1) {\n      return get_columns(x0,x1).move_to(*this);\n    }\n\n    //! Return specified range of image columns \\inplace.\n    CImg<T> get_columns(const int x0, const int x1) const {\n      return get_crop(x0,0,0,0,x1,height() - 1,depth() - 1,spectrum() - 1);\n    }\n\n    //! Return specified image row.\n    CImg<T> get_row(const int y0) const {\n      return get_rows(y0,y0);\n    }\n\n    //! Return specified image row \\inplace.\n    /**\n       \\param y0 Image row.\n    **/\n    CImg<T>& row(const int y0) {\n      return rows(y0,y0);\n    }\n\n    //! Return specified range of image rows.\n    /**\n       \\param y0 Starting image row.\n       \\param y1 Ending image row.\n    **/\n    CImg<T> get_rows(const int y0, const int y1) const {\n      return get_crop(0,y0,0,0,width() - 1,y1,depth() - 1,spectrum() - 1);\n    }\n\n    //! Return specified range of image rows \\inplace.\n    CImg<T>& rows(const int y0, const int y1) {\n      return get_rows(y0,y1).move_to(*this);\n    }\n\n    //! Return specified image slice.\n    /**\n       \\param z0 Image slice.\n    **/\n    CImg<T> get_slice(const int z0) const {\n      return get_slices(z0,z0);\n    }\n\n    //! Return specified image slice \\inplace.\n    CImg<T>& slice(const int z0) {\n      return slices(z0,z0);\n    }\n\n    //! Return specified range of image slices.\n    /**\n       \\param z0 Starting image slice.\n       \\param z1 Ending image slice.\n    **/\n    CImg<T> get_slices(const int z0, const int z1) const {\n      return get_crop(0,0,z0,0,width() - 1,height() - 1,z1,spectrum() - 1);\n    }\n\n    //! Return specified range of image slices \\inplace.\n    CImg<T>& slices(const int z0, const int z1) {\n      return get_slices(z0,z1).move_to(*this);\n    }\n\n    //! Return specified image channel.\n    /**\n       \\param c0 Image channel.\n    **/\n    CImg<T> get_channel(const int c0) const {\n      return get_channels(c0,c0);\n    }\n\n    //! Return specified image channel \\inplace.\n    CImg<T>& channel(const int c0) {\n      return channels(c0,c0);\n    }\n\n    //! Return specified range of image channels.\n    /**\n       \\param c0 Starting image channel.\n       \\param c1 Ending image channel.\n    **/\n    CImg<T> get_channels(const int c0, const int c1) const {\n      return get_crop(0,0,0,c0,width() - 1,height() - 1,depth() - 1,c1);\n    }\n\n    //! Return specified range of image channels \\inplace.\n    CImg<T>& channels(const int c0, const int c1) {\n      return get_channels(c0,c1).move_to(*this);\n    }\n\n    //! Return stream line of a 2d or 3d vector field.\n    CImg<floatT> get_streamline(const float x, const float y, const float z,\n                                const float L=256, const float dl=0.1f,\n                                const unsigned int interpolation_type=2, const bool is_backward_tracking=false,\n                                const bool is_oriented_only=false) const {\n      if (_spectrum!=2 && _spectrum!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"streamline(): Instance is not a 2d or 3d vector field.\",\n                                    cimg_instance);\n      if (_spectrum==2) {\n        if (is_oriented_only) {\n          typename CImg<T>::_functor4d_streamline2d_oriented func(*this);\n          return streamline(func,x,y,z,L,dl,interpolation_type,is_backward_tracking,true,\n                            0,0,0,_width - 1.0f,_height - 1.0f,0.0f);\n        } else {\n          typename CImg<T>::_functor4d_streamline2d_directed func(*this);\n          return streamline(func,x,y,z,L,dl,interpolation_type,is_backward_tracking,false,\n                            0,0,0,_width - 1.0f,_height - 1.0f,0.0f);\n        }\n      }\n      if (is_oriented_only) {\n        typename CImg<T>::_functor4d_streamline3d_oriented func(*this);\n        return streamline(func,x,y,z,L,dl,interpolation_type,is_backward_tracking,true,\n                          0,0,0,_width - 1.0f,_height - 1.0f,_depth - 1.0f);\n      }\n      typename CImg<T>::_functor4d_streamline3d_directed func(*this);\n      return streamline(func,x,y,z,L,dl,interpolation_type,is_backward_tracking,false,\n                        0,0,0,_width - 1.0f,_height - 1.0f,_depth - 1.0f);\n    }\n\n    //! Return stream line of a 3d vector field.\n    /**\n       \\param func Vector field function.\n       \\param x X-coordinate of the starting point of the streamline.\n       \\param y Y-coordinate of the starting point of the streamline.\n       \\param z Z-coordinate of the starting point of the streamline.\n       \\param L Streamline length.\n       \\param dl Streamline length increment.\n       \\param interpolation_type Type of interpolation.\n         Can be <tt>{ 0=nearest int | 1=linear | 2=2nd-order RK | 3=4th-order RK. }</tt>.\n       \\param is_backward_tracking Tells if the streamline is estimated forward or backward.\n       \\param is_oriented_only Tells if the direction of the vectors must be ignored.\n       \\param x0 X-coordinate of the first bounding-box vertex.\n       \\param y0 Y-coordinate of the first bounding-box vertex.\n       \\param z0 Z-coordinate of the first bounding-box vertex.\n       \\param x1 X-coordinate of the second bounding-box vertex.\n       \\param y1 Y-coordinate of the second bounding-box vertex.\n       \\param z1 Z-coordinate of the second bounding-box vertex.\n    **/\n    template<typename tfunc>\n    static CImg<floatT> streamline(const tfunc& func,\n                                   const float x, const float y, const float z,\n                                   const float L=256, const float dl=0.1f,\n                                   const unsigned int interpolation_type=2, const bool is_backward_tracking=false,\n                                   const bool is_oriented_only=false,\n                                   const float x0=0, const float y0=0, const float z0=0,\n                                   const float x1=0, const float y1=0, const float z1=0) {\n      if (dl<=0)\n        throw CImgArgumentException(\"CImg<%s>::streamline(): Invalid specified integration length %g \"\n                                    \"(should be >0).\",\n                                    pixel_type(),\n                                    dl);\n\n      const bool is_bounded = (x0!=x1 || y0!=y1 || z0!=z1);\n      if (L<=0 || (is_bounded && (x<x0 || x>x1 || y<y0 || y>y1 || z<z0 || z>z1))) return CImg<floatT>();\n      const unsigned int size_L = (unsigned int)cimg::round(L/dl + 1);\n      CImg<floatT> coordinates(size_L,3);\n      const float dl2 = dl/2;\n      float\n        *ptr_x = coordinates.data(0,0),\n        *ptr_y = coordinates.data(0,1),\n        *ptr_z = coordinates.data(0,2),\n        pu = (float)(dl*func(x,y,z,0)),\n        pv = (float)(dl*func(x,y,z,1)),\n        pw = (float)(dl*func(x,y,z,2)),\n        X = x, Y = y, Z = z;\n\n      switch (interpolation_type) {\n      case 0 : { // Nearest integer interpolation.\n        cimg_forX(coordinates,l) {\n          *(ptr_x++) = X; *(ptr_y++) = Y; *(ptr_z++) = Z;\n          const int\n            xi = (int)(X>0?X + 0.5f:X - 0.5f),\n            yi = (int)(Y>0?Y + 0.5f:Y - 0.5f),\n            zi = (int)(Z>0?Z + 0.5f:Z - 0.5f);\n          float\n            u = (float)(dl*func((float)xi,(float)yi,(float)zi,0)),\n            v = (float)(dl*func((float)xi,(float)yi,(float)zi,1)),\n            w = (float)(dl*func((float)xi,(float)yi,(float)zi,2));\n          if (is_oriented_only && u*pu + v*pv + w*pw<0) { u = -u; v = -v; w = -w; }\n          if (is_backward_tracking) { X-=(pu=u); Y-=(pv=v); Z-=(pw=w); } else { X+=(pu=u); Y+=(pv=v); Z+=(pw=w); }\n          if (is_bounded && (X<x0 || X>x1 || Y<y0 || Y>y1 || Z<z0 || Z>z1)) break;\n        }\n      } break;\n      case 1 : { // First-order interpolation.\n        cimg_forX(coordinates,l) {\n          *(ptr_x++) = X; *(ptr_y++) = Y; *(ptr_z++) = Z;\n          float\n            u = (float)(dl*func(X,Y,Z,0)),\n            v = (float)(dl*func(X,Y,Z,1)),\n            w = (float)(dl*func(X,Y,Z,2));\n          if (is_oriented_only && u*pu + v*pv + w*pw<0) { u = -u; v = -v; w = -w; }\n          if (is_backward_tracking) { X-=(pu=u); Y-=(pv=v); Z-=(pw=w); } else { X+=(pu=u); Y+=(pv=v); Z+=(pw=w); }\n          if (is_bounded && (X<x0 || X>x1 || Y<y0 || Y>y1 || Z<z0 || Z>z1)) break;\n        }\n      } break;\n      case 2 : { // Second order interpolation.\n        cimg_forX(coordinates,l) {\n          *(ptr_x++) = X; *(ptr_y++) = Y; *(ptr_z++) = Z;\n          float\n            u0 = (float)(dl2*func(X,Y,Z,0)),\n            v0 = (float)(dl2*func(X,Y,Z,1)),\n            w0 = (float)(dl2*func(X,Y,Z,2));\n          if (is_oriented_only && u0*pu + v0*pv + w0*pw<0) { u0 = -u0; v0 = -v0; w0 = -w0; }\n          float\n            u = (float)(dl*func(X + u0,Y + v0,Z + w0,0)),\n            v = (float)(dl*func(X + u0,Y + v0,Z + w0,1)),\n            w = (float)(dl*func(X + u0,Y + v0,Z + w0,2));\n          if (is_oriented_only && u*pu + v*pv + w*pw<0) { u = -u; v = -v; w = -w; }\n          if (is_backward_tracking) { X-=(pu=u); Y-=(pv=v); Z-=(pw=w); } else { X+=(pu=u); Y+=(pv=v); Z+=(pw=w); }\n          if (is_bounded && (X<x0 || X>x1 || Y<y0 || Y>y1 || Z<z0 || Z>z1)) break;\n        }\n      } break;\n      default : { // Fourth order interpolation.\n        cimg_forX(coordinates,x) {\n          *(ptr_x++) = X; *(ptr_y++) = Y; *(ptr_z++) = Z;\n          float\n            u0 = (float)(dl2*func(X,Y,Z,0)),\n            v0 = (float)(dl2*func(X,Y,Z,1)),\n            w0 = (float)(dl2*func(X,Y,Z,2));\n          if (is_oriented_only && u0*pu + v0*pv + w0*pw<0) { u0 = -u0; v0 = -v0; w0 = -w0; }\n          float\n            u1 = (float)(dl2*func(X + u0,Y + v0,Z + w0,0)),\n            v1 = (float)(dl2*func(X + u0,Y + v0,Z + w0,1)),\n            w1 = (float)(dl2*func(X + u0,Y + v0,Z + w0,2));\n          if (is_oriented_only && u1*pu + v1*pv + w1*pw<0) { u1 = -u1; v1 = -v1; w1 = -w1; }\n          float\n            u2 = (float)(dl2*func(X + u1,Y + v1,Z + w1,0)),\n            v2 = (float)(dl2*func(X + u1,Y + v1,Z + w1,1)),\n            w2 = (float)(dl2*func(X + u1,Y + v1,Z + w1,2));\n          if (is_oriented_only && u2*pu + v2*pv + w2*pw<0) { u2 = -u2; v2 = -v2; w2 = -w2; }\n          float\n            u3 = (float)(dl2*func(X + u2,Y + v2,Z + w2,0)),\n            v3 = (float)(dl2*func(X + u2,Y + v2,Z + w2,1)),\n            w3 = (float)(dl2*func(X + u2,Y + v2,Z + w2,2));\n          if (is_oriented_only && u2*pu + v2*pv + w2*pw<0) { u3 = -u3; v3 = -v3; w3 = -w3; }\n          const float\n            u = (u0 + u3)/3 + (u1 + u2)/1.5f,\n            v = (v0 + v3)/3 + (v1 + v2)/1.5f,\n            w = (w0 + w3)/3 + (w1 + w2)/1.5f;\n          if (is_backward_tracking) { X-=(pu=u); Y-=(pv=v); Z-=(pw=w); } else { X+=(pu=u); Y+=(pv=v); Z+=(pw=w); }\n          if (is_bounded && (X<x0 || X>x1 || Y<y0 || Y>y1 || Z<z0 || Z>z1)) break;\n        }\n      }\n      }\n      if (ptr_x!=coordinates.data(0,1)) coordinates.resize((int)(ptr_x-coordinates.data()),3,1,1,0);\n      return coordinates;\n    }\n\n    //! Return stream line of a 3d vector field \\overloading.\n    static CImg<floatT> streamline(const char *const expression,\n                                   const float x, const float y, const float z,\n                                   const float L=256, const float dl=0.1f,\n                                   const unsigned int interpolation_type=2, const bool is_backward_tracking=true,\n                                   const bool is_oriented_only=false,\n                                   const float x0=0, const float y0=0, const float z0=0,\n                                   const float x1=0, const float y1=0, const float z1=0) {\n      _functor4d_streamline_expr func(expression);\n      return streamline(func,x,y,z,L,dl,interpolation_type,is_backward_tracking,is_oriented_only,x0,y0,z0,x1,y1,z1);\n    }\n\n    struct _functor4d_streamline2d_directed {\n      const CImg<T>& ref;\n      _functor4d_streamline2d_directed(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n        return c<2?(float)ref._linear_atXY(x,y,(int)z,c):0;\n      }\n    };\n\n    struct _functor4d_streamline3d_directed {\n      const CImg<T>& ref;\n      _functor4d_streamline3d_directed(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n        return (float)ref._linear_atXYZ(x,y,z,c);\n      }\n    };\n\n    struct _functor4d_streamline2d_oriented {\n      const CImg<T>& ref;\n      CImg<floatT> *pI;\n      _functor4d_streamline2d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,1,2); }\n      ~_functor4d_streamline2d_oriented() { delete pI; }\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n#define _cimg_vecalign2d(i,j) \\\n        if (I(i,j,0)*I(0,0,0) + I(i,j,1)*I(0,0,1)<0) { I(i,j,0) = -I(i,j,0); I(i,j,1) = -I(i,j,1); }\n        int\n          xi = (int)x - (x>=0?0:1), nxi = xi + 1,\n          yi = (int)y - (y>=0?0:1), nyi = yi + 1,\n          zi = (int)z;\n        const float\n          dx = x - xi,\n          dy = y - yi;\n        if (c==0) {\n          CImg<floatT>& I = *pI;\n          if (xi<0) xi = 0;\n          if (nxi<0) nxi = 0;\n          if (xi>=ref.width()) xi = ref.width() - 1;\n          if (nxi>=ref.width()) nxi = ref.width() - 1;\n          if (yi<0) yi = 0;\n          if (nyi<0) nyi = 0;\n          if (yi>=ref.height()) yi = ref.height() - 1;\n          if (nyi>=ref.height()) nyi = ref.height() - 1;\n          I(0,0,0) = (float)ref(xi,yi,zi,0);   I(0,0,1) = (float)ref(xi,yi,zi,1);\n          I(1,0,0) = (float)ref(nxi,yi,zi,0);  I(1,0,1) = (float)ref(nxi,yi,zi,1);\n          I(1,1,0) = (float)ref(nxi,nyi,zi,0); I(1,1,1) = (float)ref(nxi,nyi,zi,1);\n          I(0,1,0) = (float)ref(xi,nyi,zi,0);  I(0,1,1) = (float)ref(xi,nyi,zi,1);\n          _cimg_vecalign2d(1,0); _cimg_vecalign2d(1,1); _cimg_vecalign2d(0,1);\n        }\n        return c<2?(float)pI->_linear_atXY(dx,dy,0,c):0;\n      }\n    };\n\n    struct _functor4d_streamline3d_oriented {\n      const CImg<T>& ref;\n      CImg<floatT> *pI;\n      _functor4d_streamline3d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,2,3); }\n      ~_functor4d_streamline3d_oriented() { delete pI; }\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n#define _cimg_vecalign3d(i,j,k) if (I(i,j,k,0)*I(0,0,0,0) + I(i,j,k,1)*I(0,0,0,1) + I(i,j,k,2)*I(0,0,0,2)<0) { \\\n  I(i,j,k,0) = -I(i,j,k,0); I(i,j,k,1) = -I(i,j,k,1); I(i,j,k,2) = -I(i,j,k,2); }\n        int\n          xi = (int)x - (x>=0?0:1), nxi = xi + 1,\n          yi = (int)y - (y>=0?0:1), nyi = yi + 1,\n          zi = (int)z - (z>=0?0:1), nzi = zi + 1;\n        const float\n          dx = x - xi,\n          dy = y - yi,\n          dz = z - zi;\n        if (c==0) {\n          CImg<floatT>& I = *pI;\n          if (xi<0) xi = 0;\n          if (nxi<0) nxi = 0;\n          if (xi>=ref.width()) xi = ref.width() - 1;\n          if (nxi>=ref.width()) nxi = ref.width() - 1;\n          if (yi<0) yi = 0;\n          if (nyi<0) nyi = 0;\n          if (yi>=ref.height()) yi = ref.height() - 1;\n          if (nyi>=ref.height()) nyi = ref.height() - 1;\n          if (zi<0) zi = 0;\n          if (nzi<0) nzi = 0;\n          if (zi>=ref.depth()) zi = ref.depth() - 1;\n          if (nzi>=ref.depth()) nzi = ref.depth() - 1;\n          I(0,0,0,0) = (float)ref(xi,yi,zi,0); I(0,0,0,1) = (float)ref(xi,yi,zi,1);\n          I(0,0,0,2) = (float)ref(xi,yi,zi,2); I(1,0,0,0) = (float)ref(nxi,yi,zi,0);\n          I(1,0,0,1) = (float)ref(nxi,yi,zi,1); I(1,0,0,2) = (float)ref(nxi,yi,zi,2);\n          I(1,1,0,0) = (float)ref(nxi,nyi,zi,0); I(1,1,0,1) = (float)ref(nxi,nyi,zi,1);\n          I(1,1,0,2) = (float)ref(nxi,nyi,zi,2); I(0,1,0,0) = (float)ref(xi,nyi,zi,0);\n          I(0,1,0,1) = (float)ref(xi,nyi,zi,1); I(0,1,0,2) = (float)ref(xi,nyi,zi,2);\n          I(0,0,1,0) = (float)ref(xi,yi,nzi,0); I(0,0,1,1) = (float)ref(xi,yi,nzi,1);\n          I(0,0,1,2) = (float)ref(xi,yi,nzi,2); I(1,0,1,0) = (float)ref(nxi,yi,nzi,0);\n          I(1,0,1,1) = (float)ref(nxi,yi,nzi,1);  I(1,0,1,2) = (float)ref(nxi,yi,nzi,2);\n          I(1,1,1,0) = (float)ref(nxi,nyi,nzi,0); I(1,1,1,1) = (float)ref(nxi,nyi,nzi,1);\n          I(1,1,1,2) = (float)ref(nxi,nyi,nzi,2); I(0,1,1,0) = (float)ref(xi,nyi,nzi,0);\n          I(0,1,1,1) = (float)ref(xi,nyi,nzi,1);  I(0,1,1,2) = (float)ref(xi,nyi,nzi,2);\n          _cimg_vecalign3d(1,0,0); _cimg_vecalign3d(1,1,0); _cimg_vecalign3d(0,1,0);\n          _cimg_vecalign3d(0,0,1); _cimg_vecalign3d(1,0,1); _cimg_vecalign3d(1,1,1); _cimg_vecalign3d(0,1,1);\n        }\n        return (float)pI->_linear_atXYZ(dx,dy,dz,c);\n      }\n    };\n\n    struct _functor4d_streamline_expr {\n      _cimg_math_parser *mp;\n      ~_functor4d_streamline_expr() { mp->end(); delete mp; }\n      _functor4d_streamline_expr(const char *const expr):mp(0) {\n        mp = new _cimg_math_parser(expr,\"streamline\",CImg<T>::const_empty(),0);\n      }\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n        return (float)(*mp)(x,y,z,c);\n      }\n    };\n\n    //! Return a shared-memory image referencing a range of pixels of the image instance.\n    /**\n       \\param x0 X-coordinate of the starting pixel.\n       \\param x1 X-coordinate of the ending pixel.\n       \\param y0 Y-coordinate.\n       \\param z0 Z-coordinate.\n       \\param c0 C-coordinate.\n     **/\n    CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,\n                              const unsigned int y0=0, const unsigned int z0=0, const unsigned int c0=0) {\n      const unsigned int\n        beg = (unsigned int)offset(x0,y0,z0,c0),\n        end = (unsigned int)offset(x1,y0,z0,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_points(): Invalid request of a shared-memory subset (%u->%u,%u,%u,%u).\",\n                                    cimg_instance,\n                                    x0,x1,y0,z0,c0);\n\n      return CImg<T>(_data + beg,x1 - x0 + 1,1,1,1,true);\n    }\n\n    //! Return a shared-memory image referencing a range of pixels of the image instance \\const.\n    const CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,\n                                    const unsigned int y0=0, const unsigned int z0=0, const unsigned int c0=0) const {\n      const unsigned int\n        beg = (unsigned int)offset(x0,y0,z0,c0),\n        end = (unsigned int)offset(x1,y0,z0,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_points(): Invalid request of a shared-memory subset (%u->%u,%u,%u,%u).\",\n                                    cimg_instance,\n                                    x0,x1,y0,z0,c0);\n\n      return CImg<T>(_data + beg,x1 - x0 + 1,1,1,1,true);\n    }\n\n    //! Return a shared-memory image referencing a range of rows of the image instance.\n    /**\n       \\param y0 Y-coordinate of the starting row.\n       \\param y1 Y-coordinate of the ending row.\n       \\param z0 Z-coordinate.\n       \\param c0 C-coordinate.\n    **/\n    CImg<T> get_shared_rows(const unsigned int y0, const unsigned int y1,\n                             const unsigned int z0=0, const unsigned int c0=0) {\n      const unsigned int\n        beg = (unsigned int)offset(0,y0,z0,c0),\n        end = (unsigned int)offset(0,y1,z0,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_rows(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,%u->%u,%u,%u).\",\n                                    cimg_instance,\n                                    _width - 1,y0,y1,z0,c0);\n\n      return CImg<T>(_data + beg,_width,y1 - y0 + 1,1,1,true);\n    }\n\n    //! Return a shared-memory image referencing a range of rows of the image instance \\const.\n    const CImg<T> get_shared_rows(const unsigned int y0, const unsigned int y1,\n                                   const unsigned int z0=0, const unsigned int c0=0) const {\n      const unsigned int\n        beg = (unsigned int)offset(0,y0,z0,c0),\n        end = (unsigned int)offset(0,y1,z0,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_rows(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,%u->%u,%u,%u).\",\n                                    cimg_instance,\n                                    _width - 1,y0,y1,z0,c0);\n\n      return CImg<T>(_data + beg,_width,y1 - y0 + 1,1,1,true);\n    }\n\n    //! Return a shared-memory image referencing one row of the image instance.\n    /**\n       \\param y0 Y-coordinate.\n       \\param z0 Z-coordinate.\n       \\param c0 C-coordinate.\n    **/\n    CImg<T> get_shared_row(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) {\n      return get_shared_rows(y0,y0,z0,c0);\n    }\n\n    //! Return a shared-memory image referencing one row of the image instance \\const.\n    const CImg<T> get_shared_row(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) const {\n      return get_shared_rows(y0,y0,z0,c0);\n    }\n\n    //! Return a shared memory image referencing a range of slices of the image instance.\n    /**\n       \\param z0 Z-coordinate of the starting slice.\n       \\param z1 Z-coordinate of the ending slice.\n       \\param c0 C-coordinate.\n    **/\n    CImg<T> get_shared_slices(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) {\n      const unsigned int\n        beg = (unsigned int)offset(0,0,z0,c0),\n        end = (unsigned int)offset(0,0,z1,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_slices(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,0->%u,%u->%u,%u).\",\n                                    cimg_instance,\n                                    _width - 1,_height - 1,z0,z1,c0);\n\n      return CImg<T>(_data + beg,_width,_height,z1 - z0 + 1,1,true);\n    }\n\n    //! Return a shared memory image referencing a range of slices of the image instance \\const.\n    const CImg<T> get_shared_slices(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) const {\n      const unsigned int\n        beg = (unsigned int)offset(0,0,z0,c0),\n        end = (unsigned int)offset(0,0,z1,c0);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_slices(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,0->%u,%u->%u,%u).\",\n                                    cimg_instance,\n                                    _width - 1,_height - 1,z0,z1,c0);\n\n      return CImg<T>(_data + beg,_width,_height,z1 - z0 + 1,1,true);\n    }\n\n    //! Return a shared-memory image referencing one slice of the image instance.\n    /**\n       \\param z0 Z-coordinate.\n       \\param c0 C-coordinate.\n    **/\n    CImg<T> get_shared_slice(const unsigned int z0, const unsigned int c0=0) {\n      return get_shared_slices(z0,z0,c0);\n    }\n\n    //! Return a shared-memory image referencing one slice of the image instance \\const.\n    const CImg<T> get_shared_slice(const unsigned int z0, const unsigned int c0=0) const {\n      return get_shared_slices(z0,z0,c0);\n    }\n\n    //! Return a shared-memory image referencing a range of channels of the image instance.\n    /**\n       \\param c0 C-coordinate of the starting channel.\n       \\param c1 C-coordinate of the ending channel.\n    **/\n    CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) {\n      const unsigned int\n        beg = (unsigned int)offset(0,0,0,c0),\n        end = (unsigned int)offset(0,0,0,c1);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_channels(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,0->%u,0->%u,%u->%u).\",\n                                    cimg_instance,\n                                    _width - 1,_height - 1,_depth - 1,c0,c1);\n\n      return CImg<T>(_data + beg,_width,_height,_depth,c1 - c0 + 1,true);\n    }\n\n    //! Return a shared-memory image referencing a range of channels of the image instance \\const.\n    const CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) const {\n      const unsigned int\n        beg = (unsigned int)offset(0,0,0,c0),\n        end = (unsigned int)offset(0,0,0,c1);\n      if (beg>end || beg>=size() || end>=size())\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_shared_channels(): Invalid request of a shared-memory subset \"\n                                    \"(0->%u,0->%u,0->%u,%u->%u).\",\n                                    cimg_instance,\n                                    _width - 1,_height - 1,_depth - 1,c0,c1);\n\n      return CImg<T>(_data + beg,_width,_height,_depth,c1 - c0 + 1,true);\n    }\n\n    //! Return a shared-memory image referencing one channel of the image instance.\n    /**\n       \\param c0 C-coordinate.\n    **/\n    CImg<T> get_shared_channel(const unsigned int c0) {\n      return get_shared_channels(c0,c0);\n    }\n\n    //! Return a shared-memory image referencing one channel of the image instance \\const.\n    const CImg<T> get_shared_channel(const unsigned int c0) const {\n      return get_shared_channels(c0,c0);\n    }\n\n    //! Return a shared-memory version of the image instance.\n    CImg<T> get_shared() {\n      return CImg<T>(_data,_width,_height,_depth,_spectrum,true);\n    }\n\n    //! Return a shared-memory version of the image instance \\const.\n    const CImg<T> get_shared() const {\n      return CImg<T>(_data,_width,_height,_depth,_spectrum,true);\n    }\n\n    //! Split image into a list along specified axis.\n    /**\n       \\param axis Splitting axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param nb Number of splitted parts.\n       \\note\n       - If \\c nb==0, instance image is splitted into blocs of egal values along the specified axis.\n       - If \\c nb<=0, instance image is splitted into blocs of -\\c nb pixel wide.\n       - If \\c nb>0, instance image is splitted into \\c nb blocs.\n    **/\n    CImgList<T> get_split(const char axis, const int nb=-1) const {\n      CImgList<T> res;\n      if (is_empty()) return res;\n      const char _axis = cimg::lowercase(axis);\n\n      if (nb<0) { // Split by bloc size.\n        const unsigned int dp = (unsigned int)(nb?-nb:1);\n        switch (_axis) {\n        case 'x': {\n          if (_width>dp) {\n            res.assign(_width/dp + (_width%dp?1:0),1,1);\n            const unsigned int pe = _width - dp;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=128 && _height*_depth*_spectrum>=128))\n            for (unsigned int p = 0; p<pe; p+=dp)\n              get_crop(p,0,0,0,p + dp - 1,_height - 1,_depth - 1,_spectrum - 1).move_to(res[p/dp]);\n            get_crop((res._width - 1)*dp,0,0,0,_width - 1,_height - 1,_depth - 1,_spectrum - 1).move_to(res.back());\n          } else res.assign(*this);\n        } break;\n        case 'y': {\n          if (_height>dp) {\n            res.assign(_height/dp + (_height%dp?1:0),1,1);\n            const unsigned int pe = _height - dp;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=128 && _width*_depth*_spectrum>=128))\n            for (unsigned int p = 0; p<pe; p+=dp)\n              get_crop(0,p,0,0,_width - 1,p + dp - 1,_depth - 1,_spectrum - 1).move_to(res[p/dp]);\n            get_crop(0,(res._width - 1)*dp,0,0,_width - 1,_height - 1,_depth - 1,_spectrum - 1).move_to(res.back());\n          } else res.assign(*this);\n        } break;\n        case 'z': {\n          if (_depth>dp) {\n            res.assign(_depth/dp + (_depth%dp?1:0),1,1);\n            const unsigned int pe = _depth - dp;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=128 && _width*_height*_spectrum>=128))\n            for (unsigned int p = 0; p<pe; p+=dp)\n              get_crop(0,0,p,0,_width - 1,_height - 1,p + dp - 1,_spectrum - 1).move_to(res[p/dp]);\n            get_crop(0,0,(res._width - 1)*dp,0,_width - 1,_height - 1,_depth - 1,_spectrum - 1).move_to(res.back());\n          } else res.assign(*this);\n        } break;\n        case 'c' : {\n          if (_spectrum>dp) {\n            res.assign(_spectrum/dp + (_spectrum%dp?1:0),1,1);\n            const unsigned int pe = _spectrum - dp;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=128 && _width*_height*_depth>=128))\n            for (unsigned int p = 0; p<pe; p+=dp)\n              get_crop(0,0,0,p,_width - 1,_height - 1,_depth - 1,p + dp - 1).move_to(res[p/dp]);\n            get_crop(0,0,0,(res._width - 1)*dp,_width - 1,_height - 1,_depth - 1,_spectrum - 1).move_to(res.back());\n          } else res.assign(*this);\n        }\n        }\n      } else if (nb>0) { // Split by number of (non-homogeneous) blocs.\n        const unsigned int siz = _axis=='x'?_width:_axis=='y'?_height:_axis=='z'?_depth:_axis=='c'?_spectrum:0;\n        if ((unsigned int)nb>siz)\n          throw CImgArgumentException(_cimg_instance\n                                      \"get_split(): Instance cannot be split along %c-axis into %u blocs.\",\n                                      cimg_instance,\n                                      axis,nb);\n        if (nb==1) res.assign(*this);\n        else {\n          int err = (int)siz;\n          unsigned int _p = 0;\n          switch (_axis) {\n          case 'x' : {\n            cimg_forX(*this,p) if ((err-=nb)<=0) {\n              get_crop(_p,0,0,0,p,_height - 1,_depth - 1,_spectrum - 1).move_to(res);\n              err+=(int)siz;\n              _p = p + 1U;\n            }\n          } break;\n          case 'y' : {\n            cimg_forY(*this,p) if ((err-=nb)<=0) {\n              get_crop(0,_p,0,0,_width - 1,p,_depth - 1,_spectrum - 1).move_to(res);\n              err+=(int)siz;\n              _p = p + 1U;\n            }\n          } break;\n          case 'z' : {\n            cimg_forZ(*this,p) if ((err-=nb)<=0) {\n              get_crop(0,0,_p,0,_width - 1,_height - 1,p,_spectrum - 1).move_to(res);\n              err+=(int)siz;\n              _p = p + 1U;\n            }\n          } break;\n          case 'c' : {\n            cimg_forC(*this,p) if ((err-=nb)<=0) {\n              get_crop(0,0,0,_p,_width - 1,_height - 1,_depth - 1,p).move_to(res);\n              err+=(int)siz;\n              _p = p + 1U;\n            }\n          }\n          }\n        }\n      } else { // Split by egal values according to specified axis.\n        T current = *_data;\n        switch (_axis) {\n        case 'x' : {\n          int i0 = 0;\n          cimg_forX(*this,i)\n            if ((*this)(i)!=current) { get_columns(i0,i - 1).move_to(res); i0 = i; current = (*this)(i); }\n          get_columns(i0,width() - 1).move_to(res);\n        } break;\n        case 'y' : {\n          int i0 = 0;\n          cimg_forY(*this,i)\n            if ((*this)(0,i)!=current) { get_rows(i0,i - 1).move_to(res); i0 = i; current = (*this)(0,i); }\n          get_rows(i0,height() - 1).move_to(res);\n        } break;\n        case 'z' : {\n          int i0 = 0;\n          cimg_forZ(*this,i)\n            if ((*this)(0,0,i)!=current) { get_slices(i0,i - 1).move_to(res); i0 = i; current = (*this)(0,0,i); }\n          get_slices(i0,depth() - 1).move_to(res);\n        } break;\n        case 'c' : {\n          int i0 = 0;\n          cimg_forC(*this,i)\n            if ((*this)(0,0,0,i)!=current) { get_channels(i0,i - 1).move_to(res); i0 = i; current = (*this)(0,0,0,i); }\n          get_channels(i0,spectrum() - 1).move_to(res);\n        } break;\n        default : {\n          longT i0 = 0;\n          cimg_foroff(*this,i)\n            if ((*this)[i]!=current) {\n              CImg<T>(_data + i0,1,(unsigned int)(i - i0)).move_to(res);\n              i0 = (longT)i; current = (*this)[i];\n            }\n          CImg<T>(_data + i0,1,(unsigned int)(size() - i0)).move_to(res);\n        }\n        }\n      }\n      return res;\n    }\n\n    //! Split image into a list of sub-images, according to a specified splitting value sequence and optionally axis.\n    /**\n       \\param values Splitting value sequence.\n       \\param axis Axis along which the splitting is performed. Can be '0' to ignore axis.\n       \\param keep_values Tells if the splitting sequence must be kept in the splitted blocs.\n     **/\n    template<typename t>\n    CImgList<T> get_split(const CImg<t>& values, const char axis=0, const bool keep_values=true) const {\n      CImgList<T> res;\n      if (is_empty()) return res;\n      const ulongT vsiz = values.size();\n      const char _axis = cimg::lowercase(axis);\n      if (!vsiz) return CImgList<T>(*this);\n      if (vsiz==1) { // Split according to a single value.\n        const T value = (T)*values;\n        switch (_axis) {\n        case 'x' : {\n          unsigned int i0 = 0, i = 0;\n          do {\n            while (i<_width && (*this)(i)==value) ++i;\n            if (i>i0) { if (keep_values) get_columns(i0,i - 1).move_to(res); i0 = i; }\n            while (i<_width && (*this)(i)!=value) ++i;\n            if (i>i0) { get_columns(i0,i - 1).move_to(res); i0 = i; }\n          } while (i<_width);\n        } break;\n        case 'y' : {\n          unsigned int i0 = 0, i = 0;\n          do {\n            while (i<_height && (*this)(0,i)==value) ++i;\n            if (i>i0) { if (keep_values) get_rows(i0,i - 1).move_to(res); i0 = i; }\n            while (i<_height && (*this)(0,i)!=value) ++i;\n            if (i>i0) { get_rows(i0,i - 1).move_to(res); i0 = i; }\n          } while (i<_height);\n        } break;\n        case 'z' : {\n          unsigned int i0 = 0, i = 0;\n          do {\n            while (i<_depth && (*this)(0,0,i)==value) ++i;\n            if (i>i0) { if (keep_values) get_slices(i0,i - 1).move_to(res); i0 = i; }\n            while (i<_depth && (*this)(0,0,i)!=value) ++i;\n            if (i>i0) { get_slices(i0,i - 1).move_to(res); i0 = i; }\n          } while (i<_depth);\n        } break;\n        case 'c' : {\n          unsigned int i0 = 0, i = 0;\n          do {\n            while (i<_spectrum && (*this)(0,0,0,i)==value) ++i;\n            if (i>i0) { if (keep_values) get_channels(i0,i - 1).move_to(res); i0 = i; }\n            while (i<_spectrum && (*this)(0,0,0,i)!=value) ++i;\n            if (i>i0) { get_channels(i0,i - 1).move_to(res); i0 = i; }\n          } while (i<_spectrum);\n        } break;\n        default : {\n          const ulongT siz = size();\n          ulongT i0 = 0, i = 0;\n          do {\n            while (i<siz && (*this)[i]==value) ++i;\n            if (i>i0) { if (keep_values) CImg<T>(_data + i0,1,(unsigned int)(i - i0)).move_to(res); i0 = i; }\n            while (i<siz && (*this)[i]!=value) ++i;\n            if (i>i0) { CImg<T>(_data + i0,1,(unsigned int)(i - i0)).move_to(res); i0 = i; }\n          } while (i<siz);\n        }\n        }\n      } else { // Split according to multiple values.\n        ulongT j = 0;\n        switch (_axis) {\n        case 'x' : {\n          unsigned int i0 = 0, i1 = 0, i = 0;\n          do {\n            if ((*this)(i)==*values) {\n              i1 = i; j = 0;\n              while (i<_width && (*this)(i)==values[j]) { ++i; if (++j>=vsiz) j = 0; }\n              i-=j;\n              if (i>i1) {\n                if (i1>i0) get_columns(i0,i1 - 1).move_to(res);\n                if (keep_values) get_columns(i1,i - 1).move_to(res);\n                i0 = i;\n              } else ++i;\n            } else ++i;\n          } while (i<_width);\n          if (i0<_width) get_columns(i0,width() - 1).move_to(res);\n        } break;\n        case 'y' : {\n          unsigned int i0 = 0, i1 = 0, i = 0;\n          do {\n            if ((*this)(0,i)==*values) {\n              i1 = i; j = 0;\n              while (i<_height && (*this)(0,i)==values[j]) { ++i; if (++j>=vsiz) j = 0; }\n              i-=j;\n              if (i>i1) {\n                if (i1>i0) get_rows(i0,i1 - 1).move_to(res);\n                if (keep_values) get_rows(i1,i - 1).move_to(res);\n                i0 = i;\n              } else ++i;\n            } else ++i;\n          } while (i<_height);\n          if (i0<_height) get_rows(i0,height() - 1).move_to(res);\n        } break;\n        case 'z' : {\n          unsigned int i0 = 0, i1 = 0, i = 0;\n          do {\n            if ((*this)(0,0,i)==*values) {\n              i1 = i; j = 0;\n              while (i<_depth && (*this)(0,0,i)==values[j]) { ++i; if (++j>=vsiz) j = 0; }\n              i-=j;\n              if (i>i1) {\n                if (i1>i0) get_slices(i0,i1 - 1).move_to(res);\n                if (keep_values) get_slices(i1,i - 1).move_to(res);\n                i0 = i;\n              } else ++i;\n            } else ++i;\n          } while (i<_depth);\n          if (i0<_depth) get_slices(i0,depth() - 1).move_to(res);\n        } break;\n        case 'c' : {\n          unsigned int i0 = 0, i1 = 0, i = 0;\n          do {\n            if ((*this)(0,0,0,i)==*values) {\n              i1 = i; j = 0;\n              while (i<_spectrum && (*this)(0,0,0,i)==values[j]) { ++i; if (++j>=vsiz) j = 0; }\n              i-=j;\n              if (i>i1) {\n                if (i1>i0) get_channels(i0,i1 - 1).move_to(res);\n                if (keep_values) get_channels(i1,i - 1).move_to(res);\n                i0 = i;\n              } else ++i;\n            } else ++i;\n          } while (i<_spectrum);\n          if (i0<_spectrum) get_channels(i0,spectrum() - 1).move_to(res);\n        } break;\n        default : {\n          ulongT i0 = 0, i1 = 0, i = 0;\n          const ulongT siz = size();\n          do {\n            if ((*this)[i]==*values) {\n              i1 = i; j = 0;\n              while (i<siz && (*this)[i]==values[j]) { ++i; if (++j>=vsiz) j = 0; }\n              i-=j;\n              if (i>i1) {\n                if (i1>i0) CImg<T>(_data + i0,1,(unsigned int)(i1 - i0)).move_to(res);\n                if (keep_values) CImg<T>(_data + i1,1,(unsigned int)(i - i1)).move_to(res);\n                i0 = i;\n              } else ++i;\n            } else ++i;\n          } while (i<siz);\n          if (i0<siz) CImg<T>(_data + i0,1,(unsigned int)(siz - i0)).move_to(res);\n        } break;\n        }\n      }\n      return res;\n    }\n\n    //! Append two images along specified axis.\n    /**\n       \\param img Image to append with instance image.\n       \\param axis Appending axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param align Append alignment in \\c [0,1].\n    **/\n    template<typename t>\n    CImg<T>& append(const CImg<t>& img, const char axis='x', const float align=0) {\n      if (is_empty()) return assign(img,false);\n      if (!img) return *this;\n      return CImgList<T>(*this,true).insert(img).get_append(axis,align).move_to(*this);\n    }\n\n    //! Append two images along specified axis \\specialization.\n    CImg<T>& append(const CImg<T>& img, const char axis='x', const float align=0) {\n      if (is_empty()) return assign(img,false);\n      if (!img) return *this;\n      return CImgList<T>(*this,img,true).get_append(axis,align).move_to(*this);\n    }\n\n    //! Append two images along specified axis \\const.\n    template<typename t>\n    CImg<_cimg_Tt> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {\n      if (is_empty()) return +img;\n      if (!img) return +*this;\n      return CImgList<_cimg_Tt>(*this,true).insert(img).get_append(axis,align);\n    }\n\n    //! Append two images along specified axis \\specialization.\n    CImg<T> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {\n      if (is_empty()) return +img;\n      if (!img) return +*this;\n      return CImgList<T>(*this,img,true).get_append(axis,align);\n    }\n\n    //@}\n    //---------------------------------------\n    //\n    //! \\name Filtering / Transforms\n    //@{\n    //---------------------------------------\n\n    //! Correlate image by a kernel.\n    /**\n       \\param kernel = the correlation kernel.\n       \\param boundary_conditions = the border condition type (0=zero, 1=dirichlet)\n       \\param is_normalized = enable local normalization.\n       \\note\n       - The correlation of the image instance \\p *this by the kernel \\p kernel is defined to be:\n       res(x,y,z) = sum_{i,j,k} (*this)(x + i,y + j,z + k)*kernel(i,j,k).\n    **/\n    template<typename t>\n    CImg<T>& correlate(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                       const bool is_normalized=false) {\n      if (is_empty() || !kernel) return *this;\n      return get_correlate(kernel,boundary_conditions,is_normalized).move_to(*this);\n    }\n\n    template<typename t>\n    CImg<_cimg_Ttfloat> get_correlate(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                                      const bool is_normalized=false) const {\n      return _correlate(kernel,boundary_conditions,is_normalized,false);\n    }\n\n    //! Correlate image by a kernel \\newinstance.\n    template<typename t>\n    CImg<_cimg_Ttfloat> _correlate(const CImg<t>& kernel, const unsigned int boundary_conditions,\n                                   const bool is_normalized, const bool is_convolution) const {\n      if (is_empty() || !kernel) return *this;\n      typedef _cimg_Ttfloat Ttfloat;\n      CImg<Ttfloat> res(_width,_height,_depth,std::max(_spectrum,kernel._spectrum));\n      cimg_abort_init;\n      if (boundary_conditions && kernel._width==kernel._height &&\n          ((kernel._depth==1 && kernel._width<=5) || (kernel._depth==kernel._width && kernel._width<=3))) {\n        // A special optimization is done for 2x2, 3x3, 4x4, 5x5, 2x2x2 and 3x3x3 kernel (with boundary_conditions=1).\n        CImg<t> _kernel;\n        if (is_convolution) { // Add empty column/row/slice to shift kernel center in case of convolution\n          const int dw = !(kernel.width()%2), dh = !(kernel.height()%2), dd = !(kernel.depth()%2);\n          if (dw || dh || dd)\n            kernel.get_resize(kernel.width() + dw,kernel.height() + dh,kernel.depth() + dd,-100,0,0).\n              move_to(_kernel);\n        }\n        if (!_kernel) _kernel = kernel.get_shared();\n\n        Ttfloat *ptrd = res._data;\n        CImg<T> I;\n        switch (_kernel._depth) {\n        case 3 : {\n          I.assign(27);\n          cimg_forC(res,c) {\n            cimg_abort_test();\n            const CImg<T> _img = get_shared_channel(c%_spectrum);\n            const CImg<t> _K = _kernel.get_shared_channel(c%_kernel._spectrum);\n            if (is_normalized) {\n              const Ttfloat _M = (Ttfloat)_K.magnitude(2), M = _M*_M;\n              cimg_for3x3x3(_img,x,y,z,0,I,T) {\n                const Ttfloat N = M*(I[ 0]*I[ 0] + I[ 1]*I[ 1] + I[ 2]*I[ 2] +\n                                     I[ 3]*I[ 3] + I[ 4]*I[ 4] + I[ 5]*I[ 5] +\n                                     I[ 6]*I[ 6] + I[ 7]*I[ 7] + I[ 8]*I[ 8] +\n                                     I[ 9]*I[ 9] + I[10]*I[10] + I[11]*I[11] +\n                                     I[12]*I[12] + I[13]*I[13] + I[14]*I[14] +\n                                     I[15]*I[15] + I[16]*I[16] + I[17]*I[17] +\n                                     I[18]*I[18] + I[19]*I[19] + I[20]*I[20] +\n                                     I[21]*I[21] + I[22]*I[22] + I[23]*I[23] +\n                                     I[24]*I[24] + I[25]*I[25] + I[26]*I[26]);\n                *(ptrd++) = (Ttfloat)(N?(I[ 0]*_K[ 0] + I[ 1]*_K[ 1] + I[ 2]*_K[ 2] +\n                                         I[ 3]*_K[ 3] + I[ 4]*_K[ 4] + I[ 5]*_K[ 5] +\n                                         I[ 6]*_K[ 6] + I[ 7]*_K[ 7] + I[ 8]*_K[ 8] +\n                                         I[ 9]*_K[ 9] + I[10]*_K[10] + I[11]*_K[11] +\n                                         I[12]*_K[12] + I[13]*_K[13] + I[14]*_K[14] +\n                                         I[15]*_K[15] + I[16]*_K[16] + I[17]*_K[17] +\n                                         I[18]*_K[18] + I[19]*_K[19] + I[20]*_K[20] +\n                                         I[21]*_K[21] + I[22]*_K[22] + I[23]*_K[23] +\n                                         I[24]*_K[24] + I[25]*_K[25] + I[26]*_K[26])/std::sqrt(N):0);\n              }\n            } else cimg_for3x3x3(_img,x,y,z,0,I,T)\n                     *(ptrd++) = (Ttfloat)(I[ 0]*_K[ 0] + I[ 1]*_K[ 1] + I[ 2]*_K[ 2] +\n                                           I[ 3]*_K[ 3] + I[ 4]*_K[ 4] + I[ 5]*_K[ 5] +\n                                           I[ 6]*_K[ 6] + I[ 7]*_K[ 7] + I[ 8]*_K[ 8] +\n                                           I[ 9]*_K[ 9] + I[10]*_K[10] + I[11]*_K[11] +\n                                           I[12]*_K[12] + I[13]*_K[13] + I[14]*_K[14] +\n                                           I[15]*_K[15] + I[16]*_K[16] + I[17]*_K[17] +\n                                           I[18]*_K[18] + I[19]*_K[19] + I[20]*_K[20] +\n                                           I[21]*_K[21] + I[22]*_K[22] + I[23]*_K[23] +\n                                           I[24]*_K[24] + I[25]*_K[25] + I[26]*_K[26]);\n          }\n        } break;\n        case 2 : {\n          I.assign(8);\n          cimg_forC(res,c) {\n            cimg_abort_test();\n            const CImg<T> _img = get_shared_channel(c%_spectrum);\n            const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n            if (is_normalized) {\n              const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n              cimg_for2x2x2(_img,x,y,z,0,I,T) {\n                const Ttfloat N = M*(I[0]*I[0] + I[1]*I[1] +\n                                     I[2]*I[2] + I[3]*I[3] +\n                                     I[4]*I[4] + I[5]*I[5] +\n                                     I[6]*I[6] + I[7]*I[7]);\n                *(ptrd++) = (Ttfloat)(N?(I[0]*K[0] + I[1]*K[1] +\n                                         I[2]*K[2] + I[3]*K[3] +\n                                         I[4]*K[4] + I[5]*K[5] +\n                                         I[6]*K[6] + I[7]*K[7])/std::sqrt(N):0);\n              }\n            } else cimg_for2x2x2(_img,x,y,z,0,I,T)\n                     *(ptrd++) = (Ttfloat)(I[0]*K[0] + I[1]*K[1] +\n                                           I[2]*K[2] + I[3]*K[3] +\n                                           I[4]*K[4] + I[5]*K[5] +\n                                           I[6]*K[6] + I[7]*K[7]);\n          }\n        } break;\n        default :\n        case 1 :\n          switch (_kernel._width) {\n          case 6 : {\n            I.assign(36);\n            cimg_forC(res,c) {\n              cimg_abort_test();\n              const CImg<T> _img = get_shared_channel(c%_spectrum);\n              const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n              if (is_normalized) {\n                const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n                cimg_forZ(_img,z) cimg_for6x6(_img,x,y,z,0,I,T) {\n                  const Ttfloat N = M*(I[ 0]*I[ 0] + I[ 1]*I[ 1] + I[ 2]*I[ 2] + I[ 3]*I[ 3] + I[ 4]*I[ 4] +\n                                       I[ 5]*I[ 5] + I[ 6]*I[ 6] + I[ 7]*I[ 7] + I[ 8]*I[ 8] + I[ 9]*I[ 9] +\n                                       I[10]*I[10] + I[11]*I[11] + I[12]*I[12] + I[13]*I[13] + I[14]*I[14] +\n                                       I[15]*I[15] + I[16]*I[16] + I[17]*I[17] + I[18]*I[18] + I[19]*I[19] +\n                                       I[20]*I[20] + I[21]*I[21] + I[22]*I[22] + I[23]*I[23] + I[24]*I[24] +\n                                       I[25]*I[25] + I[26]*I[26] + I[27]*I[27] + I[28]*I[28] + I[29]*I[29] +\n                                       I[30]*I[30] + I[31]*I[31] + I[32]*I[32] + I[33]*I[33] + I[34]*I[34] +\n                                       I[35]*I[35]);\n                  *(ptrd++) = (Ttfloat)(N?(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                           I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                           I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                           I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15] +\n                                           I[16]*K[16] + I[17]*K[17] + I[18]*K[18] + I[19]*K[19] +\n                                           I[20]*K[20] + I[21]*K[21] + I[22]*K[22] + I[23]*K[23] +\n                                           I[24]*K[24] + I[25]*K[25] + I[26]*K[26] + I[27]*K[27] +\n                                           I[28]*K[28] + I[29]*K[29] + I[30]*K[30] + I[31]*K[31] +\n                                           I[32]*K[32] + I[33]*K[33] + I[34]*K[34] + I[35]*K[35])/\n                                        std::sqrt(N):0);\n                }\n              } else cimg_forZ(_img,z) cimg_for6x6(_img,x,y,z,0,I,T)\n                       *(ptrd++) = (Ttfloat)(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                             I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                             I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                             I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15] +\n                                             I[16]*K[16] + I[17]*K[17] + I[18]*K[18] + I[19]*K[19] +\n                                             I[20]*K[20] + I[21]*K[21] + I[22]*K[22] + I[23]*K[23] +\n                                             I[24]*K[24] + I[25]*K[25] + I[26]*K[26] + I[27]*K[27] +\n                                             I[28]*K[28] + I[29]*K[29] + I[30]*K[30] + I[31]*K[31] +\n                                             I[32]*K[32] + I[33]*K[33] + I[34]*K[34] + I[35]*K[35]);\n            }\n          } break;\n          case 5 : {\n            I.assign(25);\n            cimg_forC(res,c) {\n              cimg_abort_test();\n              const CImg<T> _img = get_shared_channel(c%_spectrum);\n              const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n              if (is_normalized) {\n                const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n                cimg_forZ(_img,z) cimg_for5x5(_img,x,y,z,0,I,T) {\n                  const Ttfloat N = M*(I[ 0]*I[ 0] + I[ 1]*I[ 1] + I[ 2]*I[ 2] + I[ 3]*I[ 3] + I[ 4]*I[ 4] +\n                                       I[ 5]*I[ 5] + I[ 6]*I[ 6] + I[ 7]*I[ 7] + I[ 8]*I[ 8] + I[ 9]*I[ 9] +\n                                       I[10]*I[10] + I[11]*I[11] + I[12]*I[12] + I[13]*I[13] + I[14]*I[14] +\n                                       I[15]*I[15] + I[16]*I[16] + I[17]*I[17] + I[18]*I[18] + I[19]*I[19] +\n                                       I[20]*I[20] + I[21]*I[21] + I[22]*I[22] + I[23]*I[23] + I[24]*I[24]);\n                  *(ptrd++) = (Ttfloat)(N?(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                           I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                           I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                           I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15] +\n                                           I[16]*K[16] + I[17]*K[17] + I[18]*K[18] + I[19]*K[19] +\n                                           I[20]*K[20] + I[21]*K[21] + I[22]*K[22] + I[23]*K[23] +\n                                           I[24]*K[24])/std::sqrt(N):0);\n                }\n              } else cimg_forZ(_img,z) cimg_for5x5(_img,x,y,z,0,I,T)\n                       *(ptrd++) = (Ttfloat)(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                             I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                             I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                             I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15] +\n                                             I[16]*K[16] + I[17]*K[17] + I[18]*K[18] + I[19]*K[19] +\n                                             I[20]*K[20] + I[21]*K[21] + I[22]*K[22] + I[23]*K[23] +\n                                             I[24]*K[24]);\n            }\n          } break;\n          case 4 : {\n            I.assign(16);\n            cimg_forC(res,c) {\n              cimg_abort_test();\n              const CImg<T> _img = get_shared_channel(c%_spectrum);\n              const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n              if (is_normalized) {\n                const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n                cimg_forZ(_img,z) cimg_for4x4(_img,x,y,z,0,I,T) {\n                  const Ttfloat N = M*(I[ 0]*I[ 0] + I[ 1]*I[ 1] + I[ 2]*I[ 2] + I[ 3]*I[ 3] +\n                                       I[ 4]*I[ 4] + I[ 5]*I[ 5] + I[ 6]*I[ 6] + I[ 7]*I[ 7] +\n                                       I[ 8]*I[ 8] + I[ 9]*I[ 9] + I[10]*I[10] + I[11]*I[11] +\n                                       I[12]*I[12] + I[13]*I[13] + I[14]*I[14] + I[15]*I[15]);\n                  *(ptrd++) = (Ttfloat)(N?(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                           I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                           I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                           I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15])/\n                                        std::sqrt(N):0);\n                }\n              } else cimg_forZ(_img,z) cimg_for4x4(_img,x,y,z,0,I,T)\n                       *(ptrd++) = (Ttfloat)(I[ 0]*K[ 0] + I[ 1]*K[ 1] + I[ 2]*K[ 2] + I[ 3]*K[ 3] +\n                                             I[ 4]*K[ 4] + I[ 5]*K[ 5] + I[ 6]*K[ 6] + I[ 7]*K[ 7] +\n                                             I[ 8]*K[ 8] + I[ 9]*K[ 9] + I[10]*K[10] + I[11]*K[11] +\n                                             I[12]*K[12] + I[13]*K[13] + I[14]*K[14] + I[15]*K[15]);\n            }\n          } break;\n          case 3 : {\n            I.assign(9);\n            cimg_forC(res,c) {\n              cimg_abort_test();\n              const CImg<T> _img = get_shared_channel(c%_spectrum);\n              const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n              if (is_normalized) {\n                const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n                cimg_forZ(_img,z) cimg_for3x3(_img,x,y,z,0,I,T) {\n                  const Ttfloat N = M*(I[0]*I[0] + I[1]*I[1] + I[2]*I[2] +\n                                       I[3]*I[3] + I[4]*I[4] + I[5]*I[5] +\n                                       I[6]*I[6] + I[7]*I[7] + I[8]*I[8]);\n                  *(ptrd++) = (Ttfloat)(N?(I[0]*K[0] + I[1]*K[1] + I[2]*K[2] +\n                                           I[3]*K[3] + I[4]*K[4] + I[5]*K[5] +\n                                           I[6]*K[6] + I[7]*K[7] + I[8]*K[8])/std::sqrt(N):0);\n                }\n              } else cimg_forZ(_img,z) cimg_for3x3(_img,x,y,z,0,I,T)\n                       *(ptrd++) = (Ttfloat)(I[0]*K[0] + I[1]*K[1] + I[2]*K[2] +\n                                             I[3]*K[3] + I[4]*K[4] + I[5]*K[5] +\n                                             I[6]*K[6] + I[7]*K[7] + I[8]*K[8]);\n            }\n          } break;\n          case 2 : {\n            I.assign(4);\n            cimg_forC(res,c) {\n              cimg_abort_test();\n              const CImg<T> _img = get_shared_channel(c%_spectrum);\n              const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n              if (is_normalized) {\n                const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n                cimg_forZ(_img,z) cimg_for2x2(_img,x,y,z,0,I,T) {\n                  const Ttfloat N = M*(I[0]*I[0] + I[1]*I[1] +\n                                       I[2]*I[2] + I[3]*I[3]);\n                  *(ptrd++) = (Ttfloat)(N?(I[0]*K[0] + I[1]*K[1] +\n                                           I[2]*K[2] + I[3]*K[3])/std::sqrt(N):0);\n                }\n              } else cimg_forZ(_img,z) cimg_for2x2(_img,x,y,z,0,I,T)\n                       *(ptrd++) = (Ttfloat)(I[0]*K[0] + I[1]*K[1] +\n                                             I[2]*K[2] + I[3]*K[3]);\n            }\n          } break;\n          case 1 :\n            if (is_normalized) res.fill(1);\n            else cimg_forC(res,c) {\n                cimg_abort_test();\n                const CImg<T> _img = get_shared_channel(c%_spectrum);\n                const CImg<t> K = _kernel.get_shared_channel(c%_kernel._spectrum);\n                res.get_shared_channel(c).assign(_img)*=K[0];\n              }\n            break;\n          }\n        }\n      } else { // Generic version for other kernels and boundary conditions.\n        int\n          mx2 = kernel.width()/2, my2 = kernel.height()/2, mz2 = kernel.depth()/2,\n          mx1 = kernel.width() - mx2 - 1, my1 = kernel.height() - my2 - 1, mz1 = kernel.depth() - mz2 - 1;\n        if (is_convolution) cimg::swap(mx1,mx2,my1,my2,mz1,mz2); // Shift kernel center in case of convolution\n        const int\n          mxe = width() - mx2, mye = height() - my2, mze = depth() - mz2;\n        cimg_forC(res,c) cimg_abort_try {\n          cimg_abort_test();\n          const CImg<T> _img = get_shared_channel(c%_spectrum);\n          const CImg<t> K = kernel.get_shared_channel(c%kernel._spectrum);\n          if (is_normalized) { // Normalized correlation.\n            const Ttfloat _M = (Ttfloat)K.magnitude(2), M = _M*_M;\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=32768))\n            for (int z = mz1; z<mze; ++z)\n              for (int y = my1; y<mye; ++y)\n                for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                  cimg_abort_test2();\n                  Ttfloat val = 0, N = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm) {\n                        const Ttfloat _val = (Ttfloat)_img(x + xm,y + ym,z + zm);\n                        val+=_val*K(mx1 + xm,my1 + ym,mz1 + zm);\n                        N+=_val*_val;\n                      }\n                  N*=M;\n                  res(x,y,z,c) = (Ttfloat)(N?val/std::sqrt(N):0);\n                } cimg_abort_catch2()\n            if (boundary_conditions)\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n              cimg_forYZ(res,y,z) cimg_abort_try2 {\n                cimg_abort_test2();\n                for (int x = 0; x<width();\n                     (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                  Ttfloat val = 0, N = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm) {\n                        const Ttfloat _val = (Ttfloat)_img._atXYZ(x + xm,y + ym,z + zm);\n                        val+=_val*K(mx1 + xm,my1 + ym,mz1 + zm);\n                        N+=_val*_val;\n                      }\n                  N*=M;\n                  res(x,y,z,c) = (Ttfloat)(N?val/std::sqrt(N):0);\n                }\n              } cimg_abort_catch2()\n            else\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n              cimg_forYZ(res,y,z) cimg_abort_try2 {\n                cimg_abort_test2();\n                for (int x = 0; x<width();\n                     (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                  Ttfloat val = 0, N = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm) {\n                        const Ttfloat _val = (Ttfloat)_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0);\n                        val+=_val*K(mx1 + xm,my1 + ym,mz1 + zm);\n                        N+=_val*_val;\n                      }\n                  N*=M;\n                  res(x,y,z,c) = (Ttfloat)(N?val/std::sqrt(N):0);\n                }\n              } cimg_abort_catch2()\n          } else { // Classical correlation.\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=32768))\n              for (int z = mz1; z<mze; ++z)\n              for (int y = my1; y<mye; ++y)\n                for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                  cimg_abort_test2();\n                  Ttfloat val = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm)\n                        val+=_img(x + xm,y + ym,z + zm)*K(mx1 + xm,my1 + ym,mz1 + zm);\n                  res(x,y,z,c) = (Ttfloat)val;\n                } cimg_abort_catch2()\n            if (boundary_conditions)\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n              cimg_forYZ(res,y,z) cimg_abort_try2 {\n                cimg_abort_test2();\n                for (int x = 0; x<width();\n                     (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                  Ttfloat val = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm)\n                        val+=_img._atXYZ(x + xm,y + ym,z + zm)*K(mx1 + xm,my1 + ym,mz1 + zm);\n                  res(x,y,z,c) = (Ttfloat)val;\n                }\n              } cimg_abort_catch2()\n            else\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n              cimg_forYZ(res,y,z) cimg_abort_try2 {\n                cimg_abort_test2();\n                for (int x = 0; x<width();\n                     (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                  Ttfloat val = 0;\n                  for (int zm = -mz1; zm<=mz2; ++zm)\n                    for (int ym = -my1; ym<=my2; ++ym)\n                      for (int xm = -mx1; xm<=mx2; ++xm)\n                        val+=_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0)*K(mx1 + xm,my1 + ym,mz1 + zm);\n                  res(x,y,z,c) = (Ttfloat)val;\n                }\n              } cimg_abort_catch2()\n          }\n        } cimg_abort_catch()\n      }\n      cimg_abort_test();\n      return res;\n    }\n\n    //! Convolve image by a kernel.\n    /**\n       \\param kernel = the correlation kernel.\n       \\param boundary_conditions = the border condition type (0=zero, 1=dirichlet)\n       \\param is_normalized = enable local normalization.\n       \\note\n       - The result \\p res of the convolution of an image \\p img by a kernel \\p kernel is defined to be:\n       res(x,y,z) = sum_{i,j,k} img(x-i,y-j,z-k)*kernel(i,j,k)\n    **/\n    template<typename t>\n    CImg<T>& convolve(const CImg<t>& kernel, const unsigned int boundary_conditions=1, const bool is_normalized=false) {\n      if (is_empty() || !kernel) return *this;\n      return get_convolve(kernel,boundary_conditions,is_normalized).move_to(*this);\n    }\n\n    //! Convolve image by a kernel \\newinstance.\n    template<typename t>\n    CImg<_cimg_Ttfloat> get_convolve(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                                     const bool is_normalized=false) const {\n      return _correlate(CImg<t>(kernel._data,kernel.size(),1,1,1,true).get_mirror('x').\n                        resize(kernel,-1),boundary_conditions,is_normalized,true);\n    }\n\n    //! Cumulate image values, optionally along specified axis.\n    /**\n       \\param axis Cumulation axis. Set it to 0 to cumulate all values globally without taking axes into account.\n    **/\n    CImg<T>& cumulate(const char axis=0) {\n      switch (cimg::lowercase(axis)) {\n      case 'x' :\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=512 && _height*_depth*_spectrum>=16))\n        cimg_forYZC(*this,y,z,c) {\n          T *ptrd = data(0,y,z,c);\n          Tlong cumul = (Tlong)0;\n          cimg_forX(*this,x) { cumul+=(Tlong)*ptrd; *(ptrd++) = (T)cumul; }\n        }\n        break;\n      case 'y' : {\n        const ulongT w = (ulongT)_width;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_height>=512 && _width*_depth*_spectrum>=16))\n        cimg_forXZC(*this,x,z,c) {\n          T *ptrd = data(x,0,z,c);\n          Tlong cumul = (Tlong)0;\n          cimg_forY(*this,y) { cumul+=(Tlong)*ptrd; *ptrd = (T)cumul; ptrd+=w; }\n        }\n      } break;\n      case 'z' : {\n        const ulongT wh = (ulongT)_width*_height;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_depth>=512 && _width*_depth*_spectrum>=16))\n        cimg_forXYC(*this,x,y,c) {\n          T *ptrd = data(x,y,0,c);\n          Tlong cumul = (Tlong)0;\n          cimg_forZ(*this,z) { cumul+=(Tlong)*ptrd; *ptrd = (T)cumul; ptrd+=wh; }\n        }\n      } break;\n      case 'c' : {\n        const ulongT whd = (ulongT)_width*_height*_depth;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_spectrum>=512 && _width*_height*_depth>=16))\n        cimg_forXYZ(*this,x,y,z) {\n          T *ptrd = data(x,y,z,0);\n          Tlong cumul = (Tlong)0;\n          cimg_forC(*this,c) { cumul+=(Tlong)*ptrd; *ptrd = (T)cumul; ptrd+=whd; }\n        }\n      } break;\n      default : { // Global cumulation.\n        Tlong cumul = (Tlong)0;\n        cimg_for(*this,ptrd,T) { cumul+=(Tlong)*ptrd; *ptrd = (T)cumul; }\n      }\n      }\n      return *this;\n    }\n\n    //! Cumulate image values, optionally along specified axis \\newinstance.\n    CImg<Tlong> get_cumulate(const char axis=0) const {\n      return CImg<Tlong>(*this,false).cumulate(axis);\n    }\n\n    //! Cumulate image values, along specified axes.\n    /**\n       \\param axes Cumulation axes, as a C-string.\n       \\note \\c axes may contains multiple characters, e.g. \\c \"xyz\"\n    **/\n    CImg<T>& cumulate(const char *const axes) {\n      for (const char *s = axes; *s; ++s) cumulate(*s);\n      return *this;\n    }\n\n    //! Cumulate image values, along specified axes \\newintance.\n    CImg<Tlong> get_cumulate(const char *const axes) const {\n      return CImg<Tlong>(*this,false).cumulate(axes);\n    }\n\n    //! Erode image by a structuring element.\n    /**\n       \\param kernel Structuring element.\n       \\param boundary_conditions Boundary conditions.\n       \\param is_real Do the erosion in real (a.k.a 'non-flat') mode (\\c true) rather than binary mode (\\c false).\n    **/\n    template<typename t>\n    CImg<T>& erode(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                   const bool is_real=false) {\n      if (is_empty() || !kernel) return *this;\n      return get_erode(kernel,boundary_conditions,is_real).move_to(*this);\n    }\n\n    //! Erode image by a structuring element \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_erode(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                             const bool is_real=false) const {\n      if (is_empty() || !kernel) return *this;\n      if (!is_real && kernel==0) return CImg<T>(width(),height(),depth(),spectrum(),0);\n      typedef _cimg_Tt Tt;\n      CImg<Tt> res(_width,_height,_depth,std::max(_spectrum,kernel._spectrum));\n      const int\n        mx2 = kernel.width()/2, my2 = kernel.height()/2, mz2 = kernel.depth()/2,\n        mx1 = kernel.width() - mx2 - 1, my1 = kernel.height() - my2 - 1, mz1 = kernel.depth() - mz2 - 1,\n        mxe = width() - mx2, mye = height() - my2, mze = depth() - mz2;\n      cimg_abort_init;\n      cimg_forC(*this,c) cimg_abort_try {\n        cimg_abort_test();\n        const CImg<T> _img = get_shared_channel(c%_spectrum);\n        const CImg<t> K = kernel.get_shared_channel(c%kernel._spectrum);\n        if (is_real) { // Real erosion\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=32768))\n          for (int z = mz1; z<mze; ++z)\n            for (int y = my1; y<mye; ++y)\n              for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                cimg_abort_test2();\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx1 + xm,my1 + ym,mz1 + zm);\n                      const Tt cval = (Tt)(_img(x + xm,y + ym,z + zm) - mval);\n                      if (cval<min_val) min_val = cval;\n                    }\n                res(x,y,z,c) = min_val;\n              } cimg_abort_catch2()\n          if (boundary_conditions)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx1 + xm,my1 + ym,mz1 + zm);\n                      const Tt cval = (Tt)(_img._atXYZ(x + xm,y + ym,z + zm) - mval);\n                      if (cval<min_val) min_val = cval;\n                    }\n                res(x,y,z,c) = min_val;\n              }\n            } cimg_abort_catch2()\n          else\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx1 + xm,my1 + ym,mz1 + zm);\n                      const Tt cval = (Tt)(_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0) - mval);\n                      if (cval<min_val) min_val = cval;\n                    }\n                res(x,y,z,c) = min_val;\n              }\n            } cimg_abort_catch2()\n\n        } else { // Binary erosion\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=32768))\n          for (int z = mz1; z<mze; ++z)\n            for (int y = my1; y<mye; ++y)\n              for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                cimg_abort_test2();\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx1 + xm,my1 + ym,mz1 + zm)) {\n                        const Tt cval = (Tt)_img(x + xm,y + ym,z + zm);\n                        if (cval<min_val) min_val = cval;\n                      }\n                res(x,y,z,c) = min_val;\n              } cimg_abort_catch2()\n          if (boundary_conditions)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx1 + xm,my1 + ym,mz1 + zm)) {\n                        const T cval = (Tt)_img._atXYZ(x + xm,y + ym,z + zm);\n                        if (cval<min_val) min_val = cval;\n                      }\n                res(x,y,z,c) = min_val;\n              }\n            } cimg_abort_catch2()\n          else\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt min_val = cimg::type<Tt>::max();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx1 + xm,my1 + ym,mz1 + zm)) {\n                        const T cval = (Tt)_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0);\n                        if (cval<min_val) min_val = cval;\n                      }\n                res(x,y,z,c) = min_val;\n              }\n            } cimg_abort_catch2()\n        }\n      } cimg_abort_catch()\n      cimg_abort_test();\n      return res;\n    }\n\n    //! Erode image by a rectangular structuring element of specified size.\n    /**\n       \\param sx Width of the structuring element.\n       \\param sy Height of the structuring element.\n       \\param sz Depth of the structuring element.\n    **/\n    CImg<T>& erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {\n      if (is_empty() || (sx==1 && sy==1 && sz==1)) return *this;\n      if (sx>1 && _width>1) { // Along X-axis.\n        const int L = width(), off = 1, s = (int)sx, _s2 = s/2 + 1, _s1 = s - _s2, s1 = _s1>L?L:_s1, s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forYZC(*this,y,z,c) {\n          T *const ptrdb = buf._data, *ptrd = buf._data, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(0,y,z,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val<=cur) { cur = val; is_first = false; }}\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(0,y,z,c); cur = std::min(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val<=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval<cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval<cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val<=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val<cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val<cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(0,y,z,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n\n      if (sy>1 && _height>1) { // Along Y-axis.\n        const int L = height(), off = width(), s = (int)sy, _s2 = s/2 + 1, _s1 = s - _s2, s1 = _s1>L?L:_s1,\n          s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forXZC(*this,x,z,c) {\n          T *const ptrdb = buf._data, *ptrd = ptrdb, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(x,0,z,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val<=cur) { cur = val; is_first = false; }\n          }\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(x,0,z,c); cur = std::min(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val<=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval<cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval<cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val<=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val<cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val<cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(x,0,z,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n\n      if (sz>1 && _depth>1) { // Along Z-axis.\n        const int L = depth(), off = width()*height(), s = (int)sz, _s2 = s/2 + 1, _s1 = s - _s2, s1 = _s1>L?L:_s1,\n          s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forXYC(*this,x,y,c) {\n          T *const ptrdb = buf._data, *ptrd = ptrdb, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(x,y,0,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val<=cur) { cur = val; is_first = false; }\n          }\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(x,y,0,c); cur = std::min(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val<=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval<cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval<cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val<=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val<cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val<cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(x,y,0,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Erode image by a rectangular structuring element of specified size \\newinstance.\n    CImg<T> get_erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {\n      return (+*this).erode(sx,sy,sz);\n    }\n\n    //! Erode the image by a square structuring element of specified size.\n    /**\n       \\param s Size of the structuring element.\n    **/\n    CImg<T>& erode(const unsigned int s) {\n      return erode(s,s,s);\n    }\n\n    //! Erode the image by a square structuring element of specified size \\newinstance.\n    CImg<T> get_erode(const unsigned int s) const {\n      return (+*this).erode(s);\n    }\n\n    //! Dilate image by a structuring element.\n    /**\n       \\param kernel Structuring element.\n       \\param boundary_conditions Boundary conditions.\n       \\param is_real Do the dilation in real (a.k.a 'non-flat') mode (\\c true) rather than binary mode (\\c false).\n    **/\n    template<typename t>\n    CImg<T>& dilate(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                    const bool is_real=false) {\n      if (is_empty() || !kernel) return *this;\n      return get_dilate(kernel,boundary_conditions,is_real).move_to(*this);\n    }\n\n    //! Dilate image by a structuring element \\newinstance.\n    template<typename t>\n    CImg<_cimg_Tt> get_dilate(const CImg<t>& kernel, const unsigned int boundary_conditions=1,\n                              const bool is_real=false) const {\n      if (is_empty() || !kernel || (!is_real && kernel==0)) return *this;\n      typedef _cimg_Tt Tt;\n      CImg<Tt> res(_width,_height,_depth,_spectrum);\n      const int\n        mx1 = kernel.width()/2, my1 = kernel.height()/2, mz1 = kernel.depth()/2,\n        mx2 = kernel.width() - mx1 - 1, my2 = kernel.height() - my1 - 1, mz2 = kernel.depth() - mz1 - 1,\n        mxe = width() - mx2, mye = height() - my2, mze = depth() - mz2;\n      cimg_abort_init;\n      cimg_forC(*this,c) cimg_abort_try {\n        cimg_abort_test();\n        const CImg<T> _img = get_shared_channel(c%_spectrum);\n        const CImg<t> K = kernel.get_shared_channel(c%kernel._spectrum);\n        if (is_real) { // Real dilation\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=32768))\n          for (int z = mz1; z<mze; ++z)\n            for (int y = my1; y<mye; ++y)\n              for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                cimg_abort_test2();\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx2 - xm,my2 - ym,mz2 - zm);\n                      const Tt cval = (Tt)(_img(x + xm,y + ym,z + zm) + mval);\n                      if (cval>max_val) max_val = cval;\n                    }\n                res(x,y,z,c) = max_val;\n              } cimg_abort_catch2()\n          if (boundary_conditions)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx2 - xm,my2 - ym,mz2 - zm);\n                      const Tt cval = (Tt)(_img._atXYZ(x + xm,y + ym,z + zm) + mval);\n                      if (cval>max_val) max_val = cval;\n                    }\n                res(x,y,z,c) = max_val;\n              }\n            } cimg_abort_catch2()\n          else\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(*this,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm) {\n                      const t mval = K(mx2 - xm,my2 - ym,mz2 - zm);\n                      const Tt cval = (Tt)(_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0) + mval);\n                      if (cval>max_val) max_val = cval;\n                    }\n                res(x,y,z,c) = max_val;\n              }\n            } cimg_abort_catch2()\n        } else { // Binary dilation\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n          for (int z = mz1; z<mze; ++z)\n            for (int y = my1; y<mye; ++y)\n              for (int x = mx1; x<mxe; ++x) cimg_abort_try2 {\n                cimg_abort_test2();\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx2 - xm,my2 - ym,mz2 - zm)) {\n                        const Tt cval = (Tt)_img(x + xm,y + ym,z + zm);\n                        if (cval>max_val) max_val = cval;\n                      }\n                res(x,y,z,c) = max_val;\n              } cimg_abort_catch2()\n          if (boundary_conditions)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx2 - xm,my2 - ym,mz2 - zm)) {\n                        const T cval = (Tt)_img._atXYZ(x + xm,y + ym,z + zm);\n                        if (cval>max_val) max_val = cval;\n                      }\n                res(x,y,z,c) = max_val;\n              }\n            } cimg_abort_catch2()\n          else\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=128))\n            cimg_forYZ(res,y,z) cimg_abort_try2 {\n              cimg_abort_test2();\n              for (int x = 0; x<width(); (y<my1 || y>=mye || z<mz1 || z>=mze)?++x:((x<mx1 - 1 || x>=mxe)?++x:(x=mxe))) {\n                Tt max_val = cimg::type<Tt>::min();\n                for (int zm = -mz1; zm<=mz2; ++zm)\n                  for (int ym = -my1; ym<=my2; ++ym)\n                    for (int xm = -mx1; xm<=mx2; ++xm)\n                      if (K(mx2 - xm,my2 - ym,mz2 - zm)) {\n                        const T cval = (Tt)_img.atXYZ(x + xm,y + ym,z + zm,0,(T)0);\n                        if (cval>max_val) max_val = cval;\n                      }\n                res(x,y,z,c) = max_val;\n              }\n            } cimg_abort_catch2()\n        }\n      } cimg_abort_catch()\n      cimg_abort_test();\n      return res;\n    }\n\n    //! Dilate image by a rectangular structuring element of specified size.\n    /**\n       \\param sx Width of the structuring element.\n       \\param sy Height of the structuring element.\n       \\param sz Depth of the structuring element.\n    **/\n    CImg<T>& dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {\n      if (is_empty() || (sx==1 && sy==1 && sz==1)) return *this;\n      if (sx>1 && _width>1) { // Along X-axis.\n        const int L = width(), off = 1, s = (int)sx, _s1 = s/2, _s2 = s - _s1, s1 = _s1>L?L:_s1, s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forYZC(*this,y,z,c) {\n          T *const ptrdb = buf._data, *ptrd = ptrdb, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(0,y,z,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n          }\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(0,y,z,c); cur = std::max(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval>cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval>cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val>=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val>cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val>cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(0,y,z,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n\n      if (sy>1 && _height>1) { // Along Y-axis.\n        const int L = height(), off = width(), s = (int)sy, _s1 = s/2, _s2 = s - _s1, s1 = _s1>L?L:_s1,\n          s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forXZC(*this,x,z,c) {\n          T *const ptrdb = buf._data, *ptrd = ptrdb, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(x,0,z,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n          }\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(x,0,z,c); cur = std::max(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval>cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval>cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val>=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val>cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val>cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(x,0,z,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n\n      if (sz>1 && _depth>1) { // Along Z-axis.\n        const int L = depth(), off = width()*height(), s = (int)sz, _s1 = s/2, _s2 = s - _s1, s1 = _s1>L?L:_s1,\n          s2 = _s2>L?L:_s2;\n        CImg<T> buf(L);\n        cimg_pragma_openmp(parallel for collapse(3) firstprivate(buf) if (size()>524288))\n        cimg_forXYC(*this,x,y,c) {\n          T *const ptrdb = buf._data, *ptrd = ptrdb, *const ptrde = buf._data + L - 1;\n          const T *const ptrsb = data(x,y,0,c), *ptrs = ptrsb, *const ptrse = ptrs + L*off - off;\n          T cur = *ptrs; ptrs+=off; bool is_first = true;\n          for (int p = s2 - 1; p>0 && ptrs<=ptrse; --p) {\n            const T val = *ptrs; ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n          }\n          *(ptrd++) = cur;\n          if (ptrs>=ptrse) {\n            T *pd = data(x,y,0,c); cur = std::max(cur,*ptrse); cimg_forX(buf,x) { *pd = cur; pd+=off; }\n          } else {\n            for (int p = s1; p>0 && ptrd<=ptrde; --p) {\n              const T val = *ptrs; if (ptrs<ptrse) ptrs+=off; if (val>=cur) { cur = val; is_first = false; }\n              *(ptrd++) = cur;\n            }\n            for (int p = L - s - 1; p>0; --p) {\n              const T val = *ptrs; ptrs+=off;\n              if (is_first) {\n                const T *nptrs = ptrs - off; cur = val;\n                for (int q = s - 2; q>0; --q) { nptrs-=off; const T nval = *nptrs; if (nval>cur) cur = nval; }\n                nptrs-=off; const T nval = *nptrs; if (nval>cur) { cur = nval; is_first = true; } else is_first = false;\n              } else { if (val>=cur) cur = val; else if (cur==*(ptrs-s*off)) is_first = true; }\n              *(ptrd++) = cur;\n            }\n            ptrd = ptrde; ptrs = ptrse; cur = *ptrs; ptrs-=off;\n            for (int p = s1; p>0 && ptrs>=ptrsb; --p) {\n              const T val = *ptrs; ptrs-=off; if (val>cur) cur = val;\n            }\n            *(ptrd--) = cur;\n            for (int p = s2 - 1; p>0 && ptrd>=ptrdb; --p) {\n              const T val = *ptrs; if (ptrs>ptrsb) ptrs-=off; if (val>cur) cur = val; *(ptrd--) = cur;\n            }\n            T *pd = data(x,y,0,c); cimg_for(buf,ps,T) { *pd = *ps; pd+=off; }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Dilate image by a rectangular structuring element of specified size \\newinstance.\n    CImg<T> get_dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {\n      return (+*this).dilate(sx,sy,sz);\n    }\n\n    //! Dilate image by a square structuring element of specified size.\n    /**\n       \\param s Size of the structuring element.\n    **/\n    CImg<T>& dilate(const unsigned int s) {\n      return dilate(s,s,s);\n    }\n\n    //! Dilate image by a square structuring element of specified size \\newinstance.\n    CImg<T> get_dilate(const unsigned int s) const {\n      return (+*this).dilate(s);\n    }\n\n    //! Compute watershed transform.\n    /**\n       \\param priority Priority map.\n       \\param is_high_connectivity Boolean that choose between 4(false)- or 8(true)-connectivity\n       in 2d case, and between 6(false)- or 26(true)-connectivity in 3d case.\n       \\note Non-zero values of the instance instance are propagated to zero-valued ones according to\n       specified the priority map.\n    **/\n    template<typename t>\n    CImg<T>& watershed(const CImg<t>& priority, const bool is_high_connectivity=false) {\n#define _cimg_watershed_init(cond,X,Y,Z) \\\n      if (cond && !(*this)(X,Y,Z)) Q._priority_queue_insert(labels,sizeQ,priority(X,Y,Z),X,Y,Z,nb_seeds)\n\n#define _cimg_watershed_propagate(cond,X,Y,Z) \\\n      if (cond) { \\\n        if ((*this)(X,Y,Z)) { \\\n          ns = labels(X,Y,Z) - 1; xs = seeds(ns,0); ys = seeds(ns,1); zs = seeds(ns,2); \\\n          d = cimg::sqr((float)x - xs) + cimg::sqr((float)y - ys) + cimg::sqr((float)z - zs); \\\n          if (d<dmin) { dmin = d; nmin = ns; label = (*this)(xs,ys,zs); } \\\n        } else Q._priority_queue_insert(labels,sizeQ,priority(X,Y,Z),X,Y,Z,n); \\\n      }\n\n      if (is_empty()) return *this;\n      if (!is_sameXYZ(priority))\n        throw CImgArgumentException(_cimg_instance\n                                    \"watershed(): image instance and specified priority (%u,%u,%u,%u,%p) \"\n                                    \"have different dimensions.\",\n                                    cimg_instance,\n                                    priority._width,priority._height,priority._depth,priority._spectrum,priority._data);\n      if (_spectrum!=1) {\n        cimg_forC(*this,c)\n          get_shared_channel(c).watershed(priority.get_shared_channel(c%priority._spectrum));\n        return *this;\n      }\n\n      CImg<uintT> labels(_width,_height,_depth,1,0), seeds(64,3);\n      CImg<typename cimg::superset2<T,t,int>::type> Q;\n      unsigned int sizeQ = 0;\n      int px, nx, py, ny, pz, nz;\n      bool is_px, is_nx, is_py, is_ny, is_pz, is_nz;\n      const bool is_3d = _depth>1;\n\n      // Find seed points and insert them in priority queue.\n      unsigned int nb_seeds = 0;\n      const T *ptrs = _data;\n      cimg_forXYZ(*this,x,y,z) if (*(ptrs++)) { // 3d version\n        if (nb_seeds>=seeds._width) seeds.resize(2*seeds._width,3,1,1,0);\n        seeds(nb_seeds,0) = x; seeds(nb_seeds,1) = y; seeds(nb_seeds++,2) = z;\n        px = x - 1; nx = x + 1;\n        py = y - 1; ny = y + 1;\n        pz = z - 1; nz = z + 1;\n        is_px = px>=0; is_nx = nx<width();\n        is_py = py>=0; is_ny = ny<height();\n        is_pz = pz>=0; is_nz = nz<depth();\n        _cimg_watershed_init(is_px,px,y,z);\n        _cimg_watershed_init(is_nx,nx,y,z);\n        _cimg_watershed_init(is_py,x,py,z);\n        _cimg_watershed_init(is_ny,x,ny,z);\n        if (is_3d) {\n          _cimg_watershed_init(is_pz,x,y,pz);\n          _cimg_watershed_init(is_nz,x,y,nz);\n        }\n        if (is_high_connectivity) {\n          _cimg_watershed_init(is_px && is_py,px,py,z);\n          _cimg_watershed_init(is_nx && is_py,nx,py,z);\n          _cimg_watershed_init(is_px && is_ny,px,ny,z);\n          _cimg_watershed_init(is_nx && is_ny,nx,ny,z);\n          if (is_3d) {\n            _cimg_watershed_init(is_px && is_pz,px,y,pz);\n            _cimg_watershed_init(is_nx && is_pz,nx,y,pz);\n            _cimg_watershed_init(is_px && is_nz,px,y,nz);\n            _cimg_watershed_init(is_nx && is_nz,nx,y,nz);\n            _cimg_watershed_init(is_py && is_pz,x,py,pz);\n            _cimg_watershed_init(is_ny && is_pz,x,ny,pz);\n            _cimg_watershed_init(is_py && is_nz,x,py,nz);\n            _cimg_watershed_init(is_ny && is_nz,x,ny,nz);\n            _cimg_watershed_init(is_px && is_py && is_pz,px,py,pz);\n            _cimg_watershed_init(is_nx && is_py && is_pz,nx,py,pz);\n            _cimg_watershed_init(is_px && is_ny && is_pz,px,ny,pz);\n            _cimg_watershed_init(is_nx && is_ny && is_pz,nx,ny,pz);\n            _cimg_watershed_init(is_px && is_py && is_nz,px,py,nz);\n            _cimg_watershed_init(is_nx && is_py && is_nz,nx,py,nz);\n            _cimg_watershed_init(is_px && is_ny && is_nz,px,ny,nz);\n            _cimg_watershed_init(is_nx && is_ny && is_nz,nx,ny,nz);\n          }\n        }\n        labels(x,y,z) = nb_seeds;\n      }\n\n      // Start watershed computation.\n      while (sizeQ) {\n\n        // Get and remove point with maximal priority from the queue.\n        const int x = (int)Q(0,1), y = (int)Q(0,2), z = (int)Q(0,3);\n        const unsigned int n = labels(x,y,z);\n        px = x - 1; nx = x + 1;\n        py = y - 1; ny = y + 1;\n        pz = z - 1; nz = z + 1;\n        is_px = px>=0; is_nx = nx<width();\n        is_py = py>=0; is_ny = ny<height();\n        is_pz = pz>=0; is_nz = nz<depth();\n\n        // Check labels of the neighbors.\n        Q._priority_queue_remove(sizeQ);\n\n        unsigned int xs, ys, zs, ns, nmin = 0;\n        float d, dmin = cimg::type<float>::inf();\n        T label = (T)0;\n        _cimg_watershed_propagate(is_px,px,y,z);\n        _cimg_watershed_propagate(is_nx,nx,y,z);\n        _cimg_watershed_propagate(is_py,x,py,z);\n        _cimg_watershed_propagate(is_ny,x,ny,z);\n        if (is_3d) {\n          _cimg_watershed_propagate(is_pz,x,y,pz);\n          _cimg_watershed_propagate(is_nz,x,y,nz);\n        }\n        if (is_high_connectivity) {\n          _cimg_watershed_propagate(is_px && is_py,px,py,z);\n          _cimg_watershed_propagate(is_nx && is_py,nx,py,z);\n          _cimg_watershed_propagate(is_px && is_ny,px,ny,z);\n          _cimg_watershed_propagate(is_nx && is_ny,nx,ny,z);\n          if (is_3d) {\n            _cimg_watershed_propagate(is_px && is_pz,px,y,pz);\n            _cimg_watershed_propagate(is_nx && is_pz,nx,y,pz);\n            _cimg_watershed_propagate(is_px && is_nz,px,y,nz);\n            _cimg_watershed_propagate(is_nx && is_nz,nx,y,nz);\n            _cimg_watershed_propagate(is_py && is_pz,x,py,pz);\n            _cimg_watershed_propagate(is_ny && is_pz,x,ny,pz);\n            _cimg_watershed_propagate(is_py && is_nz,x,py,nz);\n            _cimg_watershed_propagate(is_ny && is_nz,x,ny,nz);\n            _cimg_watershed_propagate(is_px && is_py && is_pz,px,py,pz);\n            _cimg_watershed_propagate(is_nx && is_py && is_pz,nx,py,pz);\n            _cimg_watershed_propagate(is_px && is_ny && is_pz,px,ny,pz);\n            _cimg_watershed_propagate(is_nx && is_ny && is_pz,nx,ny,pz);\n            _cimg_watershed_propagate(is_px && is_py && is_nz,px,py,nz);\n            _cimg_watershed_propagate(is_nx && is_py && is_nz,nx,py,nz);\n            _cimg_watershed_propagate(is_px && is_ny && is_nz,px,ny,nz);\n            _cimg_watershed_propagate(is_nx && is_ny && is_nz,nx,ny,nz);\n          }\n        }\n        (*this)(x,y,z) = label;\n        labels(x,y,z) = ++nmin;\n      }\n      return *this;\n    }\n\n    //! Compute watershed transform \\newinstance.\n    template<typename t>\n    CImg<T> get_watershed(const CImg<t>& priority, const bool is_high_connectivity=false) const {\n      return (+*this).watershed(priority,is_high_connectivity);\n    }\n\n    // [internal] Insert/Remove items in priority queue, for watershed/distance transforms.\n    template<typename tq, typename tv>\n    bool _priority_queue_insert(CImg<tq>& is_queued, unsigned int& siz, const tv value,\n                                const unsigned int x, const unsigned int y, const unsigned int z,\n                                const unsigned int n=1) {\n      if (is_queued(x,y,z)) return false;\n      is_queued(x,y,z) = (tq)n;\n      if (++siz>=_width) { if (!is_empty()) resize(_width*2,4,1,1,0); else assign(64,4); }\n      (*this)(siz - 1,0) = (T)value;\n      (*this)(siz - 1,1) = (T)x;\n      (*this)(siz - 1,2) = (T)y;\n      (*this)(siz - 1,3) = (T)z;\n      for (unsigned int pos = siz - 1, par = 0; pos && value>(*this)(par=(pos + 1)/2 - 1,0); pos = par) {\n        cimg::swap((*this)(pos,0),(*this)(par,0));\n        cimg::swap((*this)(pos,1),(*this)(par,1));\n        cimg::swap((*this)(pos,2),(*this)(par,2));\n        cimg::swap((*this)(pos,3),(*this)(par,3));\n      }\n      return true;\n    }\n\n    CImg<T>& _priority_queue_remove(unsigned int& siz) {\n      (*this)(0,0) = (*this)(--siz,0);\n      (*this)(0,1) = (*this)(siz,1);\n      (*this)(0,2) = (*this)(siz,2);\n      (*this)(0,3) = (*this)(siz,3);\n      const float value = (*this)(0,0);\n      for (unsigned int pos = 0, left = 0, right = 0;\n           ((right=2*(pos + 1),(left=right - 1))<siz && value<(*this)(left,0)) ||\n             (right<siz && value<(*this)(right,0));) {\n        if (right<siz) {\n          if ((*this)(left,0)>(*this)(right,0)) {\n            cimg::swap((*this)(pos,0),(*this)(left,0));\n            cimg::swap((*this)(pos,1),(*this)(left,1));\n            cimg::swap((*this)(pos,2),(*this)(left,2));\n            cimg::swap((*this)(pos,3),(*this)(left,3));\n            pos = left;\n          } else {\n            cimg::swap((*this)(pos,0),(*this)(right,0));\n            cimg::swap((*this)(pos,1),(*this)(right,1));\n            cimg::swap((*this)(pos,2),(*this)(right,2));\n            cimg::swap((*this)(pos,3),(*this)(right,3));\n            pos = right;\n          }\n        } else {\n          cimg::swap((*this)(pos,0),(*this)(left,0));\n          cimg::swap((*this)(pos,1),(*this)(left,1));\n          cimg::swap((*this)(pos,2),(*this)(left,2));\n          cimg::swap((*this)(pos,3),(*this)(left,3));\n          pos = left;\n        }\n      }\n      return *this;\n    }\n\n    //! Apply recursive Deriche filter.\n    /**\n       \\param sigma Standard deviation of the filter.\n       \\param order Order of the filter. Can be <tt>{ 0=smooth-filter | 1=1st-derivative | 2=2nd-derivative }</tt>.\n       \\param axis Axis along which the filter is computed. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.\n    **/\n    CImg<T>& deriche(const float sigma, const unsigned int order=0, const char axis='x',\n                     const bool boundary_conditions=true) {\n#define _cimg_deriche_apply \\\n  CImg<Tfloat> Y(N); \\\n  Tfloat *ptrY = Y._data, yb = 0, yp = 0; \\\n  T xp = (T)0; \\\n  if (boundary_conditions) { xp = *ptrX; yb = yp = (Tfloat)(coefp*xp); } \\\n  for (int m = 0; m<N; ++m) { \\\n    const T xc = *ptrX; ptrX+=off; \\\n    const Tfloat yc = *(ptrY++) = (Tfloat)(a0*xc + a1*xp - b1*yp - b2*yb); \\\n    xp = xc; yb = yp; yp = yc; \\\n  } \\\n  T xn = (T)0, xa = (T)0; \\\n  Tfloat yn = 0, ya = 0; \\\n  if (boundary_conditions) { xn = xa = *(ptrX-off); yn = ya = (Tfloat)coefn*xn; } \\\n  for (int n = N - 1; n>=0; --n) { \\\n    const T xc = *(ptrX-=off); \\\n    const Tfloat yc = (Tfloat)(a2*xn + a3*xa - b1*yn - b2*ya); \\\n    xa = xn; xn = xc; ya = yn; yn = yc; \\\n    *ptrX = (T)(*(--ptrY)+yc); \\\n  }\n      const char naxis = cimg::lowercase(axis);\n      const float nsigma = sigma>=0?sigma:-sigma*(naxis=='x'?_width:naxis=='y'?_height:naxis=='z'?_depth:_spectrum)/100;\n      if (is_empty() || (nsigma<0.1f && !order)) return *this;\n      const float\n        nnsigma = nsigma<0.1f?0.1f:nsigma,\n        alpha = 1.695f/nnsigma,\n        ema = (float)std::exp(-alpha),\n        ema2 = (float)std::exp(-2*alpha),\n        b1 = -2*ema,\n        b2 = ema2;\n      float a0 = 0, a1 = 0, a2 = 0, a3 = 0, coefp = 0, coefn = 0;\n      switch (order) {\n      case 0 : {\n        const float k = (1-ema)*(1-ema)/(1 + 2*alpha*ema-ema2);\n        a0 = k;\n        a1 = k*(alpha - 1)*ema;\n        a2 = k*(alpha + 1)*ema;\n        a3 = -k*ema2;\n      } break;\n      case 1 : {\n        const float k = -(1-ema)*(1-ema)*(1-ema)/(2*(ema + 1)*ema);\n        a0 = a3 = 0;\n        a1 = k*ema;\n        a2 = -a1;\n      } break;\n      case 2 : {\n        const float\n          ea = (float)std::exp(-alpha),\n          k = -(ema2 - 1)/(2*alpha*ema),\n          kn = (-2*(-1 + 3*ea - 3*ea*ea + ea*ea*ea)/(3*ea + 1 + 3*ea*ea + ea*ea*ea));\n        a0 = kn;\n        a1 = -kn*(1 + k*alpha)*ema;\n        a2 = kn*(1 - k*alpha)*ema;\n        a3 = -kn*ema2;\n      } break;\n      default :\n        throw CImgArgumentException(_cimg_instance\n                                    \"deriche(): Invalid specified filter order %u \"\n                                    \"(should be { 0=smoothing | 1=1st-derivative | 2=2nd-derivative }).\",\n                                    cimg_instance,\n                                    order);\n      }\n      coefp = (a0 + a1)/(1 + b1 + b2);\n      coefn = (a2 + a3)/(1 + b1 + b2);\n      switch (naxis) {\n      case 'x' : {\n        const int N = width();\n        const ulongT off = 1U;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forYZC(*this,y,z,c) { T *ptrX = data(0,y,z,c); _cimg_deriche_apply; }\n      } break;\n      case 'y' : {\n        const int N = height();\n        const ulongT off = (ulongT)_width;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXZC(*this,x,z,c) { T *ptrX = data(x,0,z,c); _cimg_deriche_apply; }\n      } break;\n      case 'z' : {\n        const int N = depth();\n        const ulongT off = (ulongT)_width*_height;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYC(*this,x,y,c) { T *ptrX = data(x,y,0,c); _cimg_deriche_apply; }\n      } break;\n      default : {\n        const int N = spectrum();\n        const ulongT off = (ulongT)_width*_height*_depth;\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYZ(*this,x,y,z) { T *ptrX = data(x,y,z,0); _cimg_deriche_apply; }\n      }\n      }\n      return *this;\n    }\n\n    //! Apply recursive Deriche filter \\newinstance.\n    CImg<Tfloat> get_deriche(const float sigma, const unsigned int order=0, const char axis='x',\n                             const bool boundary_conditions=true) const {\n      return CImg<Tfloat>(*this,false).deriche(sigma,order,axis,boundary_conditions);\n    }\n\n    // [internal] Apply a recursive filter (used by CImg<T>::vanvliet()).\n    /*\n       \\param ptr the pointer of the data\n       \\param filter the coefficient of the filter in the following order [n,n - 1,n - 2,n - 3].\n       \\param N size of the data\n       \\param off the offset between two data point\n       \\param order the order of the filter 0 (smoothing), 1st derivtive, 2nd derivative, 3rd derivative\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.\n       \\note Boundary condition using B. Triggs method (IEEE trans on Sig Proc 2005).\n    */\n    static void _cimg_recursive_apply(T *data, const double filter[], const int N, const ulongT off,\n                                      const unsigned int order, const bool boundary_conditions) {\n      double val[4] = { 0 };  // res[n,n - 1,n - 2,n - 3,..] or res[n,n + 1,n + 2,n + 3,..]\n      const double\n        sumsq = filter[0], sum = sumsq * sumsq,\n        a1 = filter[1], a2 = filter[2], a3 = filter[3],\n        scaleM = 1.0 / ( (1.0 + a1 - a2 + a3) * (1.0 - a1 - a2 - a3) * (1.0 + a2 + (a1 - a3) * a3) );\n      double M[9]; // Triggs matrix\n      M[0] = scaleM * (-a3 * a1 + 1.0 - a3 * a3 - a2);\n      M[1] = scaleM * (a3 + a1) * (a2 + a3 * a1);\n      M[2] = scaleM * a3 * (a1 + a3 * a2);\n      M[3] = scaleM * (a1 + a3 * a2);\n      M[4] = -scaleM * (a2 - 1.0) * (a2 + a3 * a1);\n      M[5] = -scaleM * a3 * (a3 * a1 + a3 * a3 + a2 - 1.0);\n      M[6] = scaleM * (a3 * a1 + a2 + a1 * a1 - a2 * a2);\n      M[7] = scaleM * (a1 * a2 + a3 * a2 * a2 - a1 * a3 * a3 - a3 * a3 * a3 - a3 * a2 + a3);\n      M[8] = scaleM * a3 * (a1 + a3 * a2);\n      switch (order) {\n      case 0 : {\n        const double iplus = (boundary_conditions?data[(N - 1)*off]:(T)0);\n        for (int pass = 0; pass<2; ++pass) {\n          if (!pass) {\n            for (int k = 1; k<4; ++k) val[k] = (boundary_conditions?*data/sumsq:0);\n          } else {\n            /* apply Triggs border condition */\n            const double\n              uplus = iplus/(1.0 - a1 - a2 - a3), vplus = uplus/(1.0 - a1 - a2 - a3),\n              unp  = val[1] - uplus, unp1 = val[2] - uplus, unp2 = val[3] - uplus;\n            val[0] = (M[0] * unp + M[1] * unp1 + M[2] * unp2 + vplus) * sum;\n            val[1] = (M[3] * unp + M[4] * unp1 + M[5] * unp2 + vplus) * sum;\n            val[2] = (M[6] * unp + M[7] * unp1 + M[8] * unp2 + vplus) * sum;\n            *data = (T)val[0];\n            data -= off;\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          for (int n = pass; n<N; ++n) {\n            val[0] = (*data);\n            if (pass) val[0] *= sum;\n            for (int k = 1; k<4; ++k) val[0] += val[k] * filter[k];\n            *data = (T)val[0];\n            if (!pass) data += off; else data -= off;\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          if (!pass) data -= off;\n        }\n      } break;\n      case 1 : {\n        double x[3]; // [front,center,back]\n        for (int pass = 0; pass<2; ++pass) {\n          if (!pass) {\n            for (int k = 0; k<3; ++k) x[k] = (boundary_conditions?*data:(T)0);\n            for (int k = 0; k<4; ++k) val[k] = 0;\n          } else {\n            /* apply Triggs border condition */\n            const double\n              unp  = val[1], unp1 = val[2], unp2 = val[3];\n            val[0] = (M[0] * unp + M[1] * unp1 + M[2] * unp2) * sum;\n            val[1] = (M[3] * unp + M[4] * unp1 + M[5] * unp2) * sum;\n            val[2] = (M[6] * unp + M[7] * unp1 + M[8] * unp2) * sum;\n            *data = (T)val[0];\n            data -= off;\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          for (int n = pass; n<N - 1; ++n) {\n            if (!pass) {\n              x[0] = *(data + off);\n              val[0] = 0.5f * (x[0] - x[2]);\n            } else val[0] = (*data) * sum;\n            for (int k = 1; k<4; ++k) val[0] += val[k] * filter[k];\n            *data = (T)val[0];\n            if (!pass) {\n              data += off;\n              for (int k = 2; k>0; --k) x[k] = x[k - 1];\n            } else { data-=off;}\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          *data = (T)0;\n        }\n      } break;\n      case 2: {\n        double x[3]; // [front,center,back]\n        for (int pass = 0; pass<2; ++pass) {\n          if (!pass) {\n            for (int k = 0; k<3; ++k) x[k] = (boundary_conditions?*data:(T)0);\n            for (int k = 0; k<4; ++k) val[k] = 0;\n          } else {\n            /* apply Triggs border condition */\n            const double\n              unp  = val[1], unp1 = val[2], unp2 = val[3];\n            val[0] = (M[0] * unp + M[1] * unp1 + M[2] * unp2) * sum;\n            val[1] = (M[3] * unp + M[4] * unp1 + M[5] * unp2) * sum;\n            val[2] = (M[6] * unp + M[7] * unp1 + M[8] * unp2) * sum;\n            *data = (T)val[0];\n            data -= off;\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          for (int n = pass; n<N - 1; ++n) {\n            if (!pass) { x[0] = *(data + off); val[0] = (x[1] - x[2]); }\n            else { x[0] = *(data - off); val[0] = (x[2] - x[1]) * sum; }\n            for (int k = 1; k<4; ++k) val[0] += val[k]*filter[k];\n            *data = (T)val[0];\n            if (!pass) data += off; else data -= off;\n            for (int k = 2; k>0; --k) x[k] = x[k - 1];\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          *data = (T)0;\n        }\n      } break;\n      case 3: {\n        double x[3]; // [front,center,back]\n        for (int pass = 0; pass<2; ++pass) {\n          if (!pass) {\n            for (int k = 0; k<3; ++k) x[k] = (boundary_conditions?*data:(T)0);\n            for (int k = 0; k<4; ++k) val[k] = 0;\n          } else {\n            /* apply Triggs border condition */\n            const double\n              unp = val[1], unp1 = val[2], unp2 = val[3];\n            val[0] = (M[0] * unp + M[1] * unp1 + M[2] * unp2) * sum;\n            val[1] = (M[3] * unp + M[4] * unp1 + M[5] * unp2) * sum;\n            val[2] = (M[6] * unp + M[7] * unp1 + M[8] * unp2) * sum;\n            *data = (T)val[0];\n            data -= off;\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          for (int n = pass; n<N - 1; ++n) {\n            if (!pass) { x[0] = *(data + off); val[0] = (x[0] - 2*x[1] + x[2]); }\n            else { x[0] = *(data - off); val[0] = 0.5f * (x[2] - x[0]) * sum; }\n            for (int k = 1; k<4; ++k) val[0] += val[k] * filter[k];\n            *data = (T)val[0];\n            if (!pass) data += off; else data -= off;\n            for (int k = 2; k>0; --k) x[k] = x[k - 1];\n            for (int k = 3; k>0; --k) val[k] = val[k - 1];\n          }\n          *data = (T)0;\n        }\n      } break;\n      }\n    }\n\n    //! Van Vliet recursive Gaussian filter.\n    /**\n       \\param sigma standard deviation of the Gaussian filter\n       \\param order the order of the filter 0,1,2,3\n       \\param axis  Axis along which the filter is computed. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.\n       \\note dirichlet boundary condition has a strange behavior\n\n       I.T. Young, L.J. van Vliet, M. van Ginkel, Recursive Gabor filtering.\n       IEEE Trans. Sig. Proc., vol. 50, pp. 2799-2805, 2002.\n\n       (this is an improvement over Young-Van Vliet, Sig. Proc. 44, 1995)\n\n       Boundary conditions (only for order 0) using Triggs matrix, from\n       B. Triggs and M. Sdika. Boundary conditions for Young-van Vliet\n       recursive filtering. IEEE Trans. Signal Processing,\n       vol. 54, pp. 2365-2367, 2006.\n    **/\n    CImg<T>& vanvliet(const float sigma, const unsigned int order, const char axis='x',\n                      const bool boundary_conditions=true) {\n      if (is_empty()) return *this;\n      const char naxis = cimg::lowercase(axis);\n      const float nsigma = sigma>=0?sigma:-sigma*(naxis=='x'?_width:naxis=='y'?_height:naxis=='z'?_depth:_spectrum)/100;\n      if (is_empty() || (nsigma<0.5f && !order)) return *this;\n      const double\n        nnsigma = nsigma<0.5f?0.5f:nsigma,\n        m0 = 1.16680, m1 = 1.10783, m2 = 1.40586,\n        m1sq = m1 * m1, m2sq = m2 * m2,\n        q = (nnsigma<3.556?-0.2568 + 0.5784*nnsigma + 0.0561*nnsigma*nnsigma:2.5091 + 0.9804*(nnsigma - 3.556)),\n        qsq = q * q,\n        scale = (m0 + q) * (m1sq + m2sq + 2 * m1 * q + qsq),\n        b1 = -q * (2 * m0 * m1 + m1sq + m2sq + (2 * m0 + 4 * m1) * q + 3 * qsq) / scale,\n        b2 = qsq * (m0 + 2 * m1 + 3 * q) / scale,\n        b3 = -qsq * q / scale,\n        B = ( m0 * (m1sq + m2sq) ) / scale;\n      double filter[4];\n      filter[0] = B; filter[1] = -b1; filter[2] = -b2; filter[3] = -b3;\n      switch (naxis) {\n      case 'x' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forYZC(*this,y,z,c)\n          _cimg_recursive_apply(data(0,y,z,c),filter,_width,1U,order,boundary_conditions);\n      } break;\n      case 'y' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXZC(*this,x,z,c)\n          _cimg_recursive_apply(data(x,0,z,c),filter,_height,(ulongT)_width,order,boundary_conditions);\n      } break;\n      case 'z' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYC(*this,x,y,c)\n          _cimg_recursive_apply(data(x,y,0,c),filter,_depth,(ulongT)_width*_height,\n                                order,boundary_conditions);\n      } break;\n      default : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYZ(*this,x,y,z)\n          _cimg_recursive_apply(data(x,y,z,0),filter,_spectrum,(ulongT)_width*_height*_depth,\n                                order,boundary_conditions);\n      }\n      }\n      return *this;\n    }\n\n    //! Blur image using Van Vliet recursive Gaussian filter. \\newinstance.\n    CImg<Tfloat> get_vanvliet(const float sigma, const unsigned int order, const char axis='x',\n                              const bool boundary_conditions=true) const {\n      return CImg<Tfloat>(*this,false).vanvliet(sigma,order,axis,boundary_conditions);\n    }\n\n    //! Blur image.\n    /**\n       \\param sigma_x Standard deviation of the blur, along the X-axis.\n       \\param sigma_y Standard deviation of the blur, along the Y-axis.\n       \\param sigma_z Standard deviation of the blur, along the Z-axis.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ false=dirichlet | true=neumann }</tt>.\n       \\param is_gaussian Tells if the blur uses a gaussian (\\c true) or quasi-gaussian (\\c false) kernel.\n       \\note\n       - The blur is computed as a 0-order Deriche filter. This is not a gaussian blur.\n       - This is a recursive algorithm, not depending on the values of the standard deviations.\n       \\see deriche(), vanvliet().\n    **/\n    CImg<T>& blur(const float sigma_x, const float sigma_y, const float sigma_z,\n                  const bool boundary_conditions=true, const bool is_gaussian=false) {\n      if (is_empty()) return *this;\n      if (is_gaussian) {\n        if (_width>1) vanvliet(sigma_x,0,'x',boundary_conditions);\n        if (_height>1) vanvliet(sigma_y,0,'y',boundary_conditions);\n        if (_depth>1) vanvliet(sigma_z,0,'z',boundary_conditions);\n      } else {\n        if (_width>1) deriche(sigma_x,0,'x',boundary_conditions);\n        if (_height>1) deriche(sigma_y,0,'y',boundary_conditions);\n        if (_depth>1) deriche(sigma_z,0,'z',boundary_conditions);\n      }\n      return *this;\n    }\n\n    //! Blur image \\newinstance.\n    CImg<Tfloat> get_blur(const float sigma_x, const float sigma_y, const float sigma_z,\n                          const bool boundary_conditions=true, const bool is_gaussian=false) const {\n      return CImg<Tfloat>(*this,false).blur(sigma_x,sigma_y,sigma_z,boundary_conditions,is_gaussian);\n    }\n\n    //! Blur image isotropically.\n    /**\n       \\param sigma Standard deviation of the blur.\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.a\n       \\see deriche(), vanvliet().\n    **/\n    CImg<T>& blur(const float sigma, const bool boundary_conditions=true, const bool is_gaussian=false) {\n      const float nsigma = sigma>=0?sigma:-sigma*cimg::max(_width,_height,_depth)/100;\n      return blur(nsigma,nsigma,nsigma,boundary_conditions,is_gaussian);\n    }\n\n    //! Blur image isotropically \\newinstance.\n    CImg<Tfloat> get_blur(const float sigma, const bool boundary_conditions=true, const bool is_gaussian=false) const {\n      return CImg<Tfloat>(*this,false).blur(sigma,boundary_conditions,is_gaussian);\n    }\n\n    //! Blur image anisotropically, directed by a field of diffusion tensors.\n    /**\n       \\param G Field of square roots of diffusion tensors/vectors used to drive the smoothing.\n       \\param amplitude Amplitude of the smoothing.\n       \\param dl Spatial discretization.\n       \\param da Angular discretization.\n       \\param gauss_prec Precision of the diffusion process.\n       \\param interpolation_type Interpolation scheme.\n         Can be <tt>{ 0=nearest-neighbor | 1=linear | 2=Runge-Kutta }</tt>.\n       \\param is_fast_approx Tells if a fast approximation of the gaussian function is used or not.\n    **/\n    template<typename t>\n    CImg<T>& blur_anisotropic(const CImg<t>& G,\n                              const float amplitude=60, const float dl=0.8f, const float da=30,\n                              const float gauss_prec=2, const unsigned int interpolation_type=0,\n                              const bool is_fast_approx=1) {\n\n      // Check arguments and init variables\n      if (!is_sameXYZ(G) || (G._spectrum!=3 && G._spectrum!=6))\n        throw CImgArgumentException(_cimg_instance\n                                    \"blur_anisotropic(): Invalid specified diffusion tensor field (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    G._width,G._height,G._depth,G._spectrum,G._data);\n\n      if (is_empty() || amplitude<=0 || dl<0) return *this;\n      const bool is_3d = (G._spectrum==6);\n      T val_min, val_max = max_min(val_min);\n      cimg_abort_init;\n\n      if (da<=0) {  // Iterated oriented Laplacians\n        CImg<Tfloat> velocity(_width,_height,_depth,_spectrum);\n        for (unsigned int iteration = 0; iteration<(unsigned int)amplitude; ++iteration) {\n          Tfloat *ptrd = velocity._data, veloc_max = 0;\n          if (is_3d) // 3d version\n            cimg_forC(*this,c) {\n              cimg_abort_test();\n              CImg_3x3x3(I,Tfloat);\n              cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n                const Tfloat\n                  ixx = Incc + Ipcc - 2*Iccc,\n                  ixy = (Innc + Ippc - Inpc - Ipnc)/4,\n                  ixz = (Incn + Ipcp - Incp - Ipcn)/4,\n                  iyy = Icnc + Icpc - 2*Iccc,\n                  iyz = (Icnn + Icpp - Icnp - Icpn)/4,\n                  izz = Iccn + Iccp - 2*Iccc,\n                  veloc = (Tfloat)(G(x,y,z,0)*ixx + 2*G(x,y,z,1)*ixy + 2*G(x,y,z,2)*ixz +\n                                   G(x,y,z,3)*iyy + 2*G(x,y,z,4)*iyz + G(x,y,z,5)*izz);\n                *(ptrd++) = veloc;\n                if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n              }\n            }\n          else // 2d version\n            cimg_forZC(*this,z,c) {\n              cimg_abort_test();\n              CImg_3x3(I,Tfloat);\n              cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n                const Tfloat\n                  ixx = Inc + Ipc - 2*Icc,\n                  ixy = (Inn + Ipp - Inp - Ipn)/4,\n                  iyy = Icn + Icp - 2*Icc,\n                  veloc = (Tfloat)(G(x,y,0,0)*ixx + 2*G(x,y,0,1)*ixy + G(x,y,0,2)*iyy);\n                *(ptrd++) = veloc;\n                if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n              }\n            }\n          if (veloc_max>0) *this+=(velocity*=dl/veloc_max);\n        }\n      } else { // LIC-based smoothing.\n        const ulongT whd = (ulongT)_width*_height*_depth;\n        const float sqrt2amplitude = (float)std::sqrt(2*amplitude);\n        const int dx1 = width() - 1, dy1 = height() - 1, dz1 = depth() - 1;\n        CImg<Tfloat> res(_width,_height,_depth,_spectrum,0), W(_width,_height,_depth,is_3d?4:3), val(_spectrum,1,1,1,0);\n        int N = 0;\n        if (is_3d) { // 3d version\n          for (float phi = (180%(int)da)/2.0f; phi<=180; phi+=da) {\n            const float phir = (float)(phi*cimg::PI/180), datmp = (float)(da/std::cos(phir)),\n              da2 = datmp<1?360.0f:datmp;\n            for (float theta = 0; theta<360; (theta+=da2),++N) {\n              const float\n                thetar = (float)(theta*cimg::PI/180),\n                vx = (float)(std::cos(thetar)*std::cos(phir)),\n                vy = (float)(std::sin(thetar)*std::cos(phir)),\n                vz = (float)std::sin(phir);\n              const t\n                *pa = G.data(0,0,0,0), *pb = G.data(0,0,0,1), *pc = G.data(0,0,0,2),\n                *pd = G.data(0,0,0,3), *pe = G.data(0,0,0,4), *pf = G.data(0,0,0,5);\n              Tfloat *pd0 = W.data(0,0,0,0), *pd1 = W.data(0,0,0,1), *pd2 = W.data(0,0,0,2), *pd3 = W.data(0,0,0,3);\n              cimg_forXYZ(G,xg,yg,zg) {\n                const t a = *(pa++), b = *(pb++), c = *(pc++), d = *(pd++), e = *(pe++), f = *(pf++);\n                const float\n                  u = (float)(a*vx + b*vy + c*vz),\n                  v = (float)(b*vx + d*vy + e*vz),\n                  w = (float)(c*vx + e*vy + f*vz),\n                  n = 1e-5f + cimg::hypot(u,v,w),\n                  dln = dl/n;\n                *(pd0++) = (Tfloat)(u*dln);\n                *(pd1++) = (Tfloat)(v*dln);\n                *(pd2++) = (Tfloat)(w*dln);\n                *(pd3++) = (Tfloat)n;\n              }\n\n              cimg_abort_test();\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=2)\n                                 firstprivate(val))\n              cimg_forYZ(*this,y,z) cimg_abort_try2 {\n                cimg_abort_test2();\n                cimg_forX(*this,x) {\n                  val.fill(0);\n                  const float\n                    n = (float)W(x,y,z,3),\n                    fsigma = (float)(n*sqrt2amplitude),\n                    fsigma2 = 2*fsigma*fsigma,\n                    length = gauss_prec*fsigma;\n                  float\n                    S = 0,\n                    X = (float)x,\n                    Y = (float)y,\n                    Z = (float)z;\n                  switch (interpolation_type) {\n                  case 0 : { // Nearest neighbor\n                    for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1 && Z>=0 && Z<=dz1; l+=dl) {\n                      const int\n                        cx = (int)(X + 0.5f),\n                        cy = (int)(Y + 0.5f),\n                        cz = (int)(Z + 0.5f);\n                      const float\n                        u = (float)W(cx,cy,cz,0),\n                        v = (float)W(cx,cy,cz,1),\n                        w = (float)W(cx,cy,cz,2);\n                      if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)(*this)(cx,cy,cz,c); ++S; }\n                      else {\n                        const float coef = (float)std::exp(-l*l/fsigma2);\n                        cimg_forC(*this,c) val[c]+=(Tfloat)(coef*(*this)(cx,cy,cz,c));\n                        S+=coef;\n                      }\n                      X+=u; Y+=v; Z+=w;\n                    }\n                  } break;\n                  case 1 : { // Linear interpolation\n                    for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1 && Z>=0 && Z<=dz1; l+=dl) {\n                      const float\n                        u = (float)(W._linear_atXYZ(X,Y,Z,0)),\n                        v = (float)(W._linear_atXYZ(X,Y,Z,1)),\n                        w = (float)(W._linear_atXYZ(X,Y,Z,2));\n                      if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)_linear_atXYZ(X,Y,Z,c); ++S; }\n                      else {\n                        const float coef = (float)std::exp(-l*l/fsigma2);\n                        cimg_forC(*this,c) val[c]+=(Tfloat)(coef*_linear_atXYZ(X,Y,Z,c));\n                        S+=coef;\n                      }\n                      X+=u; Y+=v; Z+=w;\n                    }\n                  } break;\n                  default : { // 2nd order Runge Kutta\n                    for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1 && Z>=0 && Z<=dz1; l+=dl) {\n                      const float\n                        u0 = (float)(0.5f*W._linear_atXYZ(X,Y,Z,0)),\n                        v0 = (float)(0.5f*W._linear_atXYZ(X,Y,Z,1)),\n                        w0 = (float)(0.5f*W._linear_atXYZ(X,Y,Z,2)),\n                        u = (float)(W._linear_atXYZ(X + u0,Y + v0,Z + w0,0)),\n                        v = (float)(W._linear_atXYZ(X + u0,Y + v0,Z + w0,1)),\n                        w = (float)(W._linear_atXYZ(X + u0,Y + v0,Z + w0,2));\n                      if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)_linear_atXYZ(X,Y,Z,c); ++S; }\n                      else {\n                        const float coef = (float)std::exp(-l*l/fsigma2);\n                        cimg_forC(*this,c) val[c]+=(Tfloat)(coef*_linear_atXYZ(X,Y,Z,c));\n                        S+=coef;\n                      }\n                      X+=u; Y+=v; Z+=w;\n                    }\n                  } break;\n                  }\n                  Tfloat *ptrd = res.data(x,y,z);\n                  if (S>0) cimg_forC(res,c) { *ptrd+=val[c]/S; ptrd+=whd; }\n                  else cimg_forC(res,c) { *ptrd+=(Tfloat)((*this)(x,y,z,c)); ptrd+=whd; }\n                }\n              } cimg_abort_catch2()\n            }\n          }\n        } else { // 2d LIC algorithm\n          for (float theta = (360%(int)da)/2.0f; theta<360; (theta+=da),++N) {\n            const float thetar = (float)(theta*cimg::PI/180),\n              vx = (float)(std::cos(thetar)), vy = (float)(std::sin(thetar));\n            const t *pa = G.data(0,0,0,0), *pb = G.data(0,0,0,1), *pc = G.data(0,0,0,2);\n            Tfloat *pd0 = W.data(0,0,0,0), *pd1 = W.data(0,0,0,1), *pd2 = W.data(0,0,0,2);\n            cimg_forXY(G,xg,yg) {\n              const t a = *(pa++), b = *(pb++), c = *(pc++);\n              const float\n                u = (float)(a*vx + b*vy),\n                v = (float)(b*vx + c*vy),\n                n = std::max(1e-5f,cimg::hypot(u,v)),\n                dln = dl/n;\n              *(pd0++) = (Tfloat)(u*dln);\n              *(pd1++) = (Tfloat)(v*dln);\n              *(pd2++) = (Tfloat)n;\n            }\n\n            cimg_abort_test();\n            cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=256 && _height>=2) firstprivate(val))\n            cimg_forY(*this,y) cimg_abort_try2 {\n              cimg_abort_test2();\n              cimg_forX(*this,x) {\n                val.fill(0);\n                const float\n                  n = (float)W(x,y,0,2),\n                  fsigma = (float)(n*sqrt2amplitude),\n                  fsigma2 = 2*fsigma*fsigma,\n                  length = gauss_prec*fsigma;\n                float\n                  S = 0,\n                  X = (float)x,\n                  Y = (float)y;\n                switch (interpolation_type) {\n                case 0 : { // Nearest-neighbor\n                  for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1; l+=dl) {\n                    const int\n                      cx = (int)(X + 0.5f),\n                      cy = (int)(Y + 0.5f);\n                    const float\n                      u = (float)W(cx,cy,0,0),\n                      v = (float)W(cx,cy,0,1);\n                    if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)(*this)(cx,cy,0,c); ++S; }\n                    else {\n                      const float coef = (float)std::exp(-l*l/fsigma2);\n                      cimg_forC(*this,c) val[c]+=(Tfloat)(coef*(*this)(cx,cy,0,c));\n                      S+=coef;\n                    }\n                    X+=u; Y+=v;\n                  }\n                } break;\n                case 1 : { // Linear interpolation\n                  for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1; l+=dl) {\n                    const float\n                      u = (float)(W._linear_atXY(X,Y,0,0)),\n                      v = (float)(W._linear_atXY(X,Y,0,1));\n                    if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)_linear_atXY(X,Y,0,c); ++S; }\n                    else {\n                      const float coef = (float)std::exp(-l*l/fsigma2);\n                      cimg_forC(*this,c) val[c]+=(Tfloat)(coef*_linear_atXY(X,Y,0,c));\n                      S+=coef;\n                    }\n                    X+=u; Y+=v;\n                  }\n                } break;\n                default : { // 2nd-order Runge-kutta interpolation\n                  for (float l = 0; l<length && X>=0 && X<=dx1 && Y>=0 && Y<=dy1; l+=dl) {\n                    const float\n                      u0 = (float)(0.5f*W._linear_atXY(X,Y,0,0)),\n                      v0 = (float)(0.5f*W._linear_atXY(X,Y,0,1)),\n                      u = (float)(W._linear_atXY(X + u0,Y + v0,0,0)),\n                      v = (float)(W._linear_atXY(X + u0,Y + v0,0,1));\n                    if (is_fast_approx) { cimg_forC(*this,c) val[c]+=(Tfloat)_linear_atXY(X,Y,0,c); ++S; }\n                    else {\n                      const float coef = (float)std::exp(-l*l/fsigma2);\n                      cimg_forC(*this,c) val[c]+=(Tfloat)(coef*_linear_atXY(X,Y,0,c));\n                      S+=coef;\n                    }\n                    X+=u; Y+=v;\n                  }\n                }\n                }\n                Tfloat *ptrd = res.data(x,y);\n                if (S>0) cimg_forC(res,c) { *ptrd+=val[c]/S; ptrd+=whd; }\n                else cimg_forC(res,c) { *ptrd+=(Tfloat)((*this)(x,y,0,c)); ptrd+=whd; }\n              }\n            } cimg_abort_catch2()\n          }\n        }\n        const Tfloat *ptrs = res._data;\n        cimg_for(*this,ptrd,T) {\n          const Tfloat val = *(ptrs++)/N;\n          *ptrd = val<val_min?val_min:(val>val_max?val_max:(T)val);\n        }\n      }\n      cimg_abort_test();\n      return *this;\n    }\n\n    //! Blur image anisotropically, directed by a field of diffusion tensors \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_blur_anisotropic(const CImg<t>& G,\n                                      const float amplitude=60, const float dl=0.8f, const float da=30,\n                                      const float gauss_prec=2, const unsigned int interpolation_type=0,\n                                      const bool is_fast_approx=true) const {\n      return CImg<Tfloat>(*this,false).blur_anisotropic(G,amplitude,dl,da,gauss_prec,interpolation_type,is_fast_approx);\n    }\n\n    //! Blur image anisotropically, in an edge-preserving way.\n    /**\n       \\param amplitude Amplitude of the smoothing.\n       \\param sharpness Sharpness.\n       \\param anisotropy Anisotropy.\n       \\param alpha Standard deviation of the gradient blur.\n       \\param sigma Standard deviation of the structure tensor blur.\n       \\param dl Spatial discretization.\n       \\param da Angular discretization.\n       \\param gauss_prec Precision of the diffusion process.\n       \\param interpolation_type Interpolation scheme.\n         Can be <tt>{ 0=nearest-neighbor | 1=linear | 2=Runge-Kutta }</tt>.\n       \\param is_fast_approx Tells if a fast approximation of the gaussian function is used or not.\n     **/\n    CImg<T>& blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,\n                              const float alpha=0.6f, const float sigma=1.1f, const float dl=0.8f, const float da=30,\n                              const float gauss_prec=2, const unsigned int interpolation_type=0,\n                              const bool is_fast_approx=true) {\n      return blur_anisotropic(get_diffusion_tensors(sharpness,anisotropy,alpha,sigma,interpolation_type!=3),\n                              amplitude,dl,da,gauss_prec,interpolation_type,is_fast_approx);\n    }\n\n    //! Blur image anisotropically, in an edge-preserving way \\newinstance.\n    CImg<Tfloat> get_blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,\n                                      const float alpha=0.6f, const float sigma=1.1f, const float dl=0.8f,\n                                      const float da=30, const float gauss_prec=2,\n                                      const unsigned int interpolation_type=0,\n                                      const bool is_fast_approx=true) const {\n      return CImg<Tfloat>(*this,false).blur_anisotropic(amplitude,sharpness,anisotropy,alpha,sigma,dl,da,gauss_prec,\n                                                        interpolation_type,is_fast_approx);\n    }\n\n    //! Blur image, with the joint bilateral filter.\n    /**\n       \\param guide Image used to model the smoothing weights.\n       \\param sigma_x Amount of blur along the X-axis.\n       \\param sigma_y Amount of blur along the Y-axis.\n       \\param sigma_z Amount of blur along the Z-axis.\n       \\param sigma_r Amount of blur along the value axis.\n       \\param sampling_x Amount of downsampling along the X-axis used for the approximation.\n         Defaults (0) to sigma_x.\n       \\param sampling_y Amount of downsampling along the Y-axis used for the approximation.\n         Defaults (0) to sigma_y.\n       \\param sampling_z Amount of downsampling along the Z-axis used for the approximation.\n         Defaults (0) to sigma_z.\n       \\param sampling_r Amount of downsampling along the value axis used for the approximation.\n         Defaults (0) to sigma_r.\n       \\note This algorithm uses the optimisation technique proposed by S. Paris and F. Durand, in ECCV'2006\n       (extended for 3d volumetric images).\n       It is based on the reference implementation http://people.csail.mit.edu/jiawen/software/bilateralFilter.m\n    **/\n    template<typename t>\n    CImg<T>& blur_bilateral(const CImg<t>& guide,\n                            const float sigma_x, const float sigma_y,\n                            const float sigma_z, const float sigma_r,\n                            const float sampling_x, const float sampling_y,\n                            const float sampling_z, const float sampling_r) {\n      if (!is_sameXYZ(guide))\n        throw CImgArgumentException(_cimg_instance\n                                    \"blur_bilateral(): Invalid size for specified guide image (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    guide._width,guide._height,guide._depth,guide._spectrum,guide._data);\n      if (is_empty() || (!sigma_x && !sigma_y && !sigma_z)) return *this;\n      T edge_min, edge_max = guide.max_min(edge_min);\n      if (edge_min==edge_max) return blur(sigma_x,sigma_y,sigma_z);\n      const float\n        edge_delta = (float)(edge_max - edge_min),\n        _sigma_x = sigma_x>=0?sigma_x:-sigma_x*_width/100,\n        _sigma_y = sigma_y>=0?sigma_y:-sigma_y*_height/100,\n        _sigma_z = sigma_z>=0?sigma_z:-sigma_z*_depth/100,\n        __sigma_r = sigma_r>=0?sigma_r:-sigma_r*(edge_max - edge_min)/100,\n        _sigma_r = std::max(0.1f,__sigma_r),\n        _sampling_x = sampling_x?sampling_x:std::max(_sigma_x,1.0f),\n        _sampling_y = sampling_y?sampling_y:std::max(_sigma_y,1.0f),\n        _sampling_z = sampling_z?sampling_z:std::max(_sigma_z,1.0f),\n        _sampling_r = sampling_r?sampling_r:std::max(_sigma_r,edge_delta/256),\n        derived_sigma_x = _sigma_x / _sampling_x,\n        derived_sigma_y = _sigma_y / _sampling_y,\n        derived_sigma_z = _sigma_z / _sampling_z,\n        derived_sigma_r = _sigma_r / _sampling_r;\n      const int\n        padding_x = (int)(2*derived_sigma_x) + 1,\n        padding_y = (int)(2*derived_sigma_y) + 1,\n        padding_z = (int)(2*derived_sigma_z) + 1,\n        padding_r = (int)(2*derived_sigma_r) + 1;\n      const unsigned int\n        bx = (unsigned int)((_width  - 1)/_sampling_x + 1 + 2*padding_x),\n        by = (unsigned int)((_height - 1)/_sampling_y + 1 + 2*padding_y),\n        bz = (unsigned int)((_depth  - 1)/_sampling_z + 1 + 2*padding_z),\n        br = (unsigned int)(edge_delta/_sampling_r + 1 + 2*padding_r);\n      if (bx>0 || by>0 || bz>0 || br>0) {\n        const bool is_3d = (_depth>1);\n        if (is_3d) { // 3d version of the algorithm\n          CImg<floatT> bgrid(bx,by,bz,br), bgridw(bx,by,bz,br);\n          cimg_forC(*this,c) {\n            const CImg<t> _guide = guide.get_shared_channel(c%guide._spectrum);\n            bgrid.fill(0); bgridw.fill(0);\n            cimg_forXYZ(*this,x,y,z) {\n              const T val = (*this)(x,y,z,c);\n              const float edge = (float)_guide(x,y,z);\n              const int\n                X = (int)cimg::round(x/_sampling_x) + padding_x,\n                Y = (int)cimg::round(y/_sampling_y) + padding_y,\n                Z = (int)cimg::round(z/_sampling_z) + padding_z,\n                R = (int)cimg::round((edge - edge_min)/_sampling_r) + padding_r;\n              bgrid(X,Y,Z,R)+=(float)val;\n              bgridw(X,Y,Z,R)+=1;\n            }\n            bgrid.blur(derived_sigma_x,derived_sigma_y,derived_sigma_z,true).deriche(derived_sigma_r,0,'c',false);\n            bgridw.blur(derived_sigma_x,derived_sigma_y,derived_sigma_z,true).deriche(derived_sigma_r,0,'c',false);\n\n            cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(size()>=4096))\n            cimg_forXYZ(*this,x,y,z) {\n              const float edge = (float)_guide(x,y,z);\n              const float\n                X = x/_sampling_x + padding_x,\n                Y = y/_sampling_y + padding_y,\n                Z = z/_sampling_z + padding_z,\n                R = (edge - edge_min)/_sampling_r + padding_r;\n              const float bval0 = bgrid.linear_atXYZC(X,Y,Z,R), bval1 = bgridw.linear_atXYZC(X,Y,Z,R);\n              (*this)(x,y,z,c) = (T)(bval0/bval1);\n            }\n          }\n        } else { // 2d version of the algorithm\n          CImg<floatT> bgrid(bx,by,br,2);\n          cimg_forC(*this,c) {\n            const CImg<t> _guide = guide.get_shared_channel(c%guide._spectrum);\n            bgrid.fill(0);\n            cimg_forXY(*this,x,y) {\n              const T val = (*this)(x,y,c);\n              const float edge = (float)_guide(x,y);\n              const int\n                X = (int)cimg::round(x/_sampling_x) + padding_x,\n                Y = (int)cimg::round(y/_sampling_y) + padding_y,\n                R = (int)cimg::round((edge - edge_min)/_sampling_r) + padding_r;\n              bgrid(X,Y,R,0)+=(float)val;\n              bgrid(X,Y,R,1)+=1;\n            }\n            bgrid.blur(derived_sigma_x,derived_sigma_y,0,true).blur(0,0,derived_sigma_r,false);\n\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(size()>=4096))\n            cimg_forXY(*this,x,y) {\n              const float edge = (float)_guide(x,y);\n              const float\n                X = x/_sampling_x + padding_x,\n                Y = y/_sampling_y + padding_y,\n                R = (edge - edge_min)/_sampling_r + padding_r;\n              const float bval0 = bgrid.linear_atXYZ(X,Y,R,0), bval1 = bgrid.linear_atXYZ(X,Y,R,1);\n              (*this)(x,y,c) = (T)(bval0/bval1);\n            }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Blur image, with the joint bilateral filter \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_blur_bilateral(const CImg<t>& guide,\n                                    const float sigma_x, const float sigma_y,\n                                    const float sigma_z, const float sigma_r,\n                                    const float sampling_x, const float sampling_y,\n                                    const float sampling_z, const float sampling_r) const {\n      return CImg<Tfloat>(*this,false).blur_bilateral(guide,sigma_x,sigma_y,sigma_z,sigma_r,\n                                                      sampling_x,sampling_y,sampling_z,sampling_r);\n    }\n\n    //! Blur image using the joint bilateral filter.\n    /**\n       \\param guide Image used to model the smoothing weights.\n       \\param sigma_s Amount of blur along the XYZ-axes.\n       \\param sigma_r Amount of blur along the value axis.\n       \\param sampling_s Amount of downsampling along the XYZ-axes used for the approximation. Defaults to sigma_s.\n       \\param sampling_r Amount of downsampling along the value axis used for the approximation. Defaults to sigma_r.\n    **/\n    template<typename t>\n    CImg<T>& blur_bilateral(const CImg<t>& guide,\n                            const float sigma_s, const float sigma_r,\n                            const float sampling_s=0, const float sampling_r=0) {\n      const float _sigma_s = sigma_s>=0?sigma_s:-sigma_s*cimg::max(_width,_height,_depth)/100;\n      return blur_bilateral(guide,_sigma_s,_sigma_s,_sigma_s,sigma_r,sampling_s,sampling_s,sampling_s,sampling_r);\n    }\n\n    //! Blur image using the bilateral filter \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_blur_bilateral(const CImg<t>& guide,\n                                    const float sigma_s, const float sigma_r,\n                                    const float sampling_s=0, const float sampling_r=0) const {\n      return CImg<Tfloat>(*this,false).blur_bilateral(guide,sigma_s,sigma_r,sampling_s,sampling_r);\n    }\n\n    // [internal] Apply a box filter (used by CImg<T>::boxfilter() and CImg<T>::blur_box()).\n    /*\n      \\param ptr the pointer of the data\n      \\param N size of the data\n      \\param boxsize Size of the box filter (can be subpixel).\n      \\param off the offset between two data point\n      \\param order the order of the filter 0 (smoothing), 1st derivtive and 2nd derivative.\n      \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.\n    */\n    static void _cimg_blur_box_apply(T *ptr, const float boxsize, const int N, const ulongT off,\n                                     const int order, const bool boundary_conditions,\n                                     const unsigned int nb_iter) {\n      // Smooth.\n      if (boxsize>1 && nb_iter) {\n        const int w2 = (int)(boxsize - 1)/2;\n        const unsigned int winsize = 2*w2 + 1U;\n        const double frac = (boxsize - winsize)/2.;\n        CImg<Tfloat> win(winsize);\n        for (unsigned int iter = 0; iter<nb_iter; ++iter) {\n          Tfloat sum = 0; // window sum\n          for (int x = -w2; x<=w2; ++x) {\n            win[x + w2] = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,x);\n            sum+=win[x + w2];\n          }\n          int ifirst = 0, ilast = 2*w2;\n          Tfloat\n            prev = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,-w2 - 1),\n            next = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,w2 + 1);\n          for (int x = 0; x < N - 1; ++x) {\n            const double sum2 = sum + frac * (prev + next);\n            ptr[x*off] = (T)(sum2/boxsize);\n            prev = win[ifirst];\n            sum-=prev;\n            ifirst = (int)((ifirst + 1)%winsize);\n            ilast = (int)((ilast + 1)%winsize);\n            win[ilast] = next;\n            sum+=next;\n            next = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,x + w2 + 2);\n          }\n          const double sum2 = sum + frac * (prev + next);\n          ptr[(N - 1)*off] = (T)(sum2/boxsize);\n        }\n      }\n\n      // Derive.\n      switch (order) {\n      case 0 :\n        break;\n      case 1 : {\n        Tfloat\n          p = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,-1),\n          c = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,0),\n          n = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,1);\n        for (int x = 0; x<N - 1; ++x) {\n          ptr[x*off] = (T)((n-p)/2.0);\n          p = c;\n          c = n;\n          n = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,x + 2);\n        }\n        ptr[(N - 1)*off] = (T)((n-p)/2.0);\n      } break;\n      case 2: {\n        Tfloat\n          p = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,-1),\n          c = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,0),\n          n = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,1);\n        for (int x = 0; x<N - 1; ++x) {\n          ptr[x*off] = (T)(n - 2*c + p);\n          p = c;\n          c = n;\n          n = __cimg_blur_box_apply(ptr,N,off,boundary_conditions,x + 2);\n        }\n        ptr[(N - 1)*off] = (T)(n - 2*c + p);\n      } break;\n      }\n    }\n\n    static T __cimg_blur_box_apply(T *ptr, const int N, const ulongT off,\n                                   const bool boundary_conditions, const int x) {\n      if (x<0) return boundary_conditions?ptr[0]:T();\n      if (x>=N) return boundary_conditions?ptr[(N - 1)*off]:T();\n      return ptr[x*off];\n    }\n\n    // Apply box filter of order 0,1,2.\n    /**\n      \\param boxsize Size of the box window (can be subpixel)\n      \\param order the order of the filter 0,1 or 2.\n      \\param axis  Axis along which the filter is computed. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.\n    **/\n    CImg<T>& boxfilter(const float boxsize, const int order, const char axis='x',\n                       const bool boundary_conditions=true,\n                       const unsigned int nb_iter=1) {\n      if (is_empty() || !boxsize || (boxsize<=1 && !order)) return *this;\n      const char naxis = cimg::lowercase(axis);\n      const float nboxsize = boxsize>=0?boxsize:-boxsize*\n        (naxis=='x'?_width:naxis=='y'?_height:naxis=='z'?_depth:_spectrum)/100;\n      switch (naxis) {\n      case 'x' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forYZC(*this,y,z,c)\n          _cimg_blur_box_apply(data(0,y,z,c),nboxsize,_width,1U,order,boundary_conditions,nb_iter);\n      } break;\n      case 'y' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXZC(*this,x,z,c)\n          _cimg_blur_box_apply(data(x,0,z,c),nboxsize,_height,(ulongT)_width,order,boundary_conditions,nb_iter);\n      } break;\n      case 'z' : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYC(*this,x,y,c)\n          _cimg_blur_box_apply(data(x,y,0,c),nboxsize,_depth,(ulongT)_width*_height,order,boundary_conditions,nb_iter);\n      } break;\n      default : {\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=256 && _height*_depth*_spectrum>=16))\n        cimg_forXYZ(*this,x,y,z)\n          _cimg_blur_box_apply(data(x,y,z,0),nboxsize,_spectrum,(ulongT)_width*_height*_depth,\n                               order,boundary_conditions,nb_iter);\n      }\n      }\n      return *this;\n    }\n\n    // Apply box filter of order 0,1 or 2 \\newinstance.\n    CImg<Tfloat> get_boxfilter(const float boxsize, const int order, const char axis='x',\n                               const bool boundary_conditions=true,\n                               const unsigned int nb_iter=1) const {\n      return CImg<Tfloat>(*this,false).boxfilter(boxsize,order,axis,boundary_conditions,nb_iter);\n    }\n\n    //! Blur image with a box filter.\n    /**\n       \\param boxsize_x Size of the box window, along the X-axis (can be subpixel).\n       \\param boxsize_y Size of the box window, along the Y-axis (can be subpixel).\n       \\param boxsize_z Size of the box window, along the Z-axis (can be subpixel).\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ false=dirichlet | true=neumann }</tt>.\n       \\note\n       - This is a recursive algorithm, not depending on the values of the box kernel size.\n       \\see blur().\n    **/\n    CImg<T>& blur_box(const float boxsize_x, const float boxsize_y, const float boxsize_z,\n                      const bool boundary_conditions=true,\n                      const unsigned int nb_iter=1) {\n      if (is_empty()) return *this;\n      if (_width>1) boxfilter(boxsize_x,0,'x',boundary_conditions,nb_iter);\n      if (_height>1) boxfilter(boxsize_y,0,'y',boundary_conditions,nb_iter);\n      if (_depth>1) boxfilter(boxsize_z,0,'z',boundary_conditions,nb_iter);\n      return *this;\n    }\n\n    //! Blur image with a box filter \\newinstance.\n    CImg<Tfloat> get_blur_box(const float boxsize_x, const float boxsize_y, const float boxsize_z,\n                              const bool boundary_conditions=true) const {\n      return CImg<Tfloat>(*this,false).blur_box(boxsize_x,boxsize_y,boxsize_z,boundary_conditions);\n    }\n\n    //! Blur image with a box filter.\n    /**\n       \\param boxsize Size of the box window (can be subpixel).\n       \\param boundary_conditions Boundary conditions. Can be <tt>{ 0=dirichlet | 1=neumann }</tt>.a\n       \\see deriche(), vanvliet().\n    **/\n    CImg<T>& blur_box(const float boxsize, const bool boundary_conditions=true) {\n      const float nboxsize = boxsize>=0?boxsize:-boxsize*cimg::max(_width,_height,_depth)/100;\n      return blur_box(nboxsize,nboxsize,nboxsize,boundary_conditions);\n    }\n\n    //! Blur image with a box filter \\newinstance.\n    CImg<Tfloat> get_blur_box(const float boxsize, const bool boundary_conditions=true) const {\n      return CImg<Tfloat>(*this,false).blur_box(boxsize,boundary_conditions);\n    }\n\n    //! Blur image, with the image guided filter.\n    /**\n       \\param guide Image used to guide the smoothing process.\n       \\param radius Spatial radius. If negative, it is expressed as a percentage of the largest image size.\n       \\param regularization Regularization parameter.\n                             If negative, it is expressed as a percentage of the guide value range.\n       \\note This method implements the filtering algorithm described in:\n       He, Kaiming; Sun, Jian; Tang, Xiaoou, \"Guided Image Filtering,\" Pattern Analysis and Machine Intelligence,\n       IEEE Transactions on , vol.35, no.6, pp.1397,1409, June 2013\n    **/\n    template<typename t>\n    CImg<T>& blur_guided(const CImg<t>& guide, const float radius, const float regularization) {\n      return get_blur_guided(guide,radius,regularization).move_to(*this);\n    }\n\n    //! Blur image, with the image guided filter \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_blur_guided(const CImg<t>& guide, const float radius, const float regularization) const {\n      if (!is_sameXYZ(guide))\n        throw CImgArgumentException(_cimg_instance\n                                    \"blur_guided(): Invalid size for specified guide image (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    guide._width,guide._height,guide._depth,guide._spectrum,guide._data);\n      if (is_empty() || !radius) return *this;\n      const int _radius = radius>=0?(int)radius:(int)(-radius*cimg::max(_width,_height,_depth)/100);\n      float _regularization = regularization;\n      if (regularization<0) {\n        T edge_min, edge_max = guide.max_min(edge_min);\n        if (edge_min==edge_max) return *this;\n        _regularization = -regularization*(edge_max - edge_min)/100;\n      }\n      _regularization = std::max(_regularization,0.01f);\n      const unsigned int psize = (unsigned int)(1 + 2*_radius);\n      const CImg<uintT> N = CImg<uintT>(_width,_height,_depth,1,1)._blur_guided(psize);\n      CImg<Tfloat>\n        mean_I = CImg<Tfloat>(guide,false)._blur_guided(psize).div(N),\n        mean_p = CImg<Tfloat>(*this,false)._blur_guided(psize).div(N),\n        cov_Ip = CImg<Tfloat>(*this,false).mul(guide)._blur_guided(psize).div(N)-=mean_p.get_mul(mean_I),\n        var_I = CImg<Tfloat>(guide,false).sqr()._blur_guided(psize).div(N)-=mean_I.get_sqr(),\n        &a = cov_Ip.div(var_I+=_regularization),\n        &b = mean_p-=a.get_mul(mean_I);\n      a._blur_guided(psize).div(N);\n      b._blur_guided(psize).div(N);\n      return a.mul(guide)+=b;\n    }\n\n    // [internal] Perform box filter with dirichlet boundary conditions.\n    CImg<T>& _blur_guided(const unsigned int psize) {\n      const int p1 = (int)psize/2, p2 = (int)psize - p1;\n      if (_depth!=1) {\n        CImg<floatT> cumul = get_cumulate('z'), cumul2 = cumul.get_shift(0,0,p2,0,1);\n        (cumul.shift(0,0,-p1,0,1)-=cumul2).move_to(*this);\n      }\n      if (_height!=1) {\n        CImg<floatT> cumul = get_cumulate('y'), cumul2 = cumul.get_shift(0,p2,0,0,1);\n        (cumul.shift(0,-p1,0,0,1)-=cumul2).move_to(*this);\n      }\n      if (_width!=1) {\n        CImg<floatT> cumul = get_cumulate('x'), cumul2 = cumul.get_shift(p2,0,0,0,1);\n        (cumul.shift(-p1,0,0,0,1)-=cumul2).move_to(*this);\n      }\n      return *this;\n    }\n\n    //! Blur image using patch-based space.\n    /**\n       \\param sigma_s Amount of blur along the XYZ-axes.\n       \\param sigma_p Amount of blur along the value axis.\n       \\param patch_size Size of the patchs.\n       \\param lookup_size Size of the window to search similar patchs.\n       \\param smoothness Smoothness for the patch comparison.\n       \\param is_fast_approx Tells if a fast approximation of the gaussian function is used or not.\n    **/\n    CImg<T>& blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,\n                        const unsigned int lookup_size=4, const float smoothness=0, const bool is_fast_approx=true) {\n      if (is_empty() || !patch_size || !lookup_size) return *this;\n      return get_blur_patch(sigma_s,sigma_p,patch_size,lookup_size,smoothness,is_fast_approx).move_to(*this);\n    }\n\n    //! Blur image using patch-based space \\newinstance.\n    CImg<Tfloat> get_blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,\n                                const unsigned int lookup_size=4, const float smoothness=0,\n                                const bool is_fast_approx=true) const {\n\n#define _cimg_blur_patch3d_fast(N) \\\n      cimg_for##N##XYZ(res,x,y,z) { \\\n        T *pP = P._data; cimg_forC(res,c) { cimg_get##N##x##N##x##N(img,x,y,z,c,pP,T); pP+=N3; } \\\n        const int x0 = x - rsize1, y0 = y - rsize1, z0 = z - rsize1, \\\n          x1 = x + rsize2, y1 = y + rsize2, z1 = z + rsize2; \\\n        float sum_weights = 0; \\\n        cimg_for_in##N##XYZ(res,x0,y0,z0,x1,y1,z1,p,q,r) if (cimg::abs(img(x,y,z,0) - img(p,q,r,0))<sigma_p3) { \\\n          T *pQ = Q._data; cimg_forC(res,c) { cimg_get##N##x##N##x##N(img,p,q,r,c,pQ,T); pQ+=N3; } \\\n          float distance2 = 0; \\\n          pQ = Q._data; cimg_for(P,pP,T) { const float dI = (float)*pP - (float)*(pQ++); distance2+=dI*dI; } \\\n          distance2/=Pnorm; \\\n          const float dx = (float)p - x, dy = (float)q - y, dz = (float)r - z, \\\n            alldist = distance2 + (dx*dx + dy*dy + dz*dz)/sigma_s2, weight = alldist>3?0.0f:1.0f; \\\n          sum_weights+=weight; \\\n          cimg_forC(res,c) res(x,y,z,c)+=weight*(*this)(p,q,r,c); \\\n        } \\\n        if (sum_weights>0) cimg_forC(res,c) res(x,y,z,c)/=sum_weights; \\\n        else cimg_forC(res,c) res(x,y,z,c) = (Tfloat)((*this)(x,y,z,c)); \\\n    }\n\n#define _cimg_blur_patch3d(N) \\\n      cimg_for##N##XYZ(res,x,y,z) { \\\n        T *pP = P._data; cimg_forC(res,c) { cimg_get##N##x##N##x##N(img,x,y,z,c,pP,T); pP+=N3; } \\\n        const int x0 = x - rsize1, y0 = y - rsize1, z0 = z - rsize1, \\\n          x1 = x + rsize2, y1 = y + rsize2, z1 = z + rsize2; \\\n        float sum_weights = 0, weight_max = 0; \\\n        cimg_for_in##N##XYZ(res,x0,y0,z0,x1,y1,z1,p,q,r) if (p!=x || q!=y || r!=z) { \\\n          T *pQ = Q._data; cimg_forC(res,c) { cimg_get##N##x##N##x##N(img,p,q,r,c,pQ,T); pQ+=N3; } \\\n          float distance2 = 0; \\\n          pQ = Q._data; cimg_for(P,pP,T) { const float dI = (float)*pP - (float)*(pQ++); distance2+=dI*dI; } \\\n          distance2/=Pnorm; \\\n          const float dx = (float)p - x, dy = (float)q - y, dz = (float)r - z, \\\n            alldist = distance2 + (dx*dx + dy*dy + dz*dz)/sigma_s2, weight = (float)std::exp(-alldist); \\\n          if (weight>weight_max) weight_max = weight; \\\n          sum_weights+=weight; \\\n          cimg_forC(res,c) res(x,y,z,c)+=weight*(*this)(p,q,r,c); \\\n        } \\\n        sum_weights+=weight_max; cimg_forC(res,c) res(x,y,z,c)+=weight_max*(*this)(x,y,z,c); \\\n        if (sum_weights>0) cimg_forC(res,c) res(x,y,z,c)/=sum_weights; \\\n        else cimg_forC(res,c) res(x,y,z,c) = (Tfloat)((*this)(x,y,z,c)); \\\n      }\n\n#define _cimg_blur_patch2d_fast(N) \\\n        cimg_for##N##XY(res,x,y) { \\\n          T *pP = P._data; cimg_forC(res,c) { cimg_get##N##x##N(img,x,y,0,c,pP,T); pP+=N2; } \\\n          const int x0 = x - rsize1, y0 = y - rsize1, x1 = x + rsize2, y1 = y + rsize2; \\\n          float sum_weights = 0; \\\n          cimg_for_in##N##XY(res,x0,y0,x1,y1,p,q) if (cimg::abs(img(x,y,0,0) - img(p,q,0,0))<sigma_p3) { \\\n            T *pQ = Q._data; cimg_forC(res,c) { cimg_get##N##x##N(img,p,q,0,c,pQ,T); pQ+=N2; } \\\n            float distance2 = 0; \\\n            pQ = Q._data; cimg_for(P,pP,T) { const float dI = (float)*pP - (float)*(pQ++); distance2+=dI*dI; } \\\n            distance2/=Pnorm; \\\n            const float dx = (float)p - x, dy = (float)q - y, \\\n              alldist = distance2 + (dx*dx+dy*dy)/sigma_s2, weight = alldist>3?0.0f:1.0f; \\\n            sum_weights+=weight; \\\n            cimg_forC(res,c) res(x,y,c)+=weight*(*this)(p,q,c); \\\n          } \\\n          if (sum_weights>0) cimg_forC(res,c) res(x,y,c)/=sum_weights; \\\n          else cimg_forC(res,c) res(x,y,c) = (Tfloat)((*this)(x,y,c)); \\\n        }\n\n#define _cimg_blur_patch2d(N) \\\n        cimg_for##N##XY(res,x,y) { \\\n          T *pP = P._data; cimg_forC(res,c) { cimg_get##N##x##N(img,x,y,0,c,pP,T); pP+=N2; } \\\n          const int x0 = x - rsize1, y0 = y - rsize1, x1 = x + rsize2, y1 = y + rsize2; \\\n          float sum_weights = 0, weight_max = 0; \\\n          cimg_for_in##N##XY(res,x0,y0,x1,y1,p,q) if (p!=x || q!=y) { \\\n            T *pQ = Q._data; cimg_forC(res,c) { cimg_get##N##x##N(img,p,q,0,c,pQ,T); pQ+=N2; } \\\n            float distance2 = 0; \\\n            pQ = Q._data; cimg_for(P,pP,T) { const float dI = (float)*pP - (float)*(pQ++); distance2+=dI*dI; } \\\n            distance2/=Pnorm; \\\n            const float dx = (float)p - x, dy = (float)q - y, \\\n              alldist = distance2 + (dx*dx+dy*dy)/sigma_s2, weight = (float)std::exp(-alldist); \\\n            if (weight>weight_max) weight_max = weight; \\\n            sum_weights+=weight; \\\n            cimg_forC(res,c) res(x,y,c)+=weight*(*this)(p,q,c); \\\n          } \\\n          sum_weights+=weight_max; cimg_forC(res,c) res(x,y,c)+=weight_max*(*this)(x,y,c); \\\n          if (sum_weights>0) cimg_forC(res,c) res(x,y,c)/=sum_weights; \\\n          else cimg_forC(res,c) res(x,y,c) = (Tfloat)((*this)(x,y,c)); \\\n    }\n\n      if (is_empty() || !patch_size || !lookup_size) return +*this;\n      CImg<Tfloat> res(_width,_height,_depth,_spectrum,0);\n      const CImg<T> _img = smoothness>0?get_blur(smoothness):CImg<Tfloat>(),&img = smoothness>0?_img:*this;\n      CImg<T> P(patch_size*patch_size*_spectrum), Q(P);\n      const float\n        nsigma_s = sigma_s>=0?sigma_s:-sigma_s*cimg::max(_width,_height,_depth)/100,\n        sigma_s2 = nsigma_s*nsigma_s, sigma_p2 = sigma_p*sigma_p, sigma_p3 = 3*sigma_p,\n        Pnorm = P.size()*sigma_p2;\n      const int rsize2 = (int)lookup_size/2, rsize1 = (int)lookup_size - rsize2 - 1;\n      const unsigned int N2 = patch_size*patch_size, N3 = N2*patch_size;\n      cimg::unused(N2,N3);\n      if (_depth>1) switch (patch_size) { // 3d\n        case 2 : if (is_fast_approx) _cimg_blur_patch3d_fast(2) else _cimg_blur_patch3d(2) break;\n        case 3 : if (is_fast_approx) _cimg_blur_patch3d_fast(3) else _cimg_blur_patch3d(3) break;\n        default : {\n          const int psize2 = (int)patch_size/2, psize1 = (int)patch_size - psize2 - 1;\n          if (is_fast_approx)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(res._width>=32 && res._height*res._depth>=4)\n                               private(P,Q))\n            cimg_forXYZ(res,x,y,z) { // Fast\n              P = img.get_crop(x - psize1,y - psize1,z - psize1,x + psize2,y + psize2,z + psize2,true);\n              const int x0 = x - rsize1, y0 = y - rsize1, z0 = z - rsize1,\n                x1 = x + rsize2, y1 = y + rsize2, z1 = z + rsize2;\n              float sum_weights = 0;\n              cimg_for_inXYZ(res,x0,y0,z0,x1,y1,z1,p,q,r) if (cimg::abs(img(x,y,z,0)-img(p,q,r,0))<sigma_p3) {\n                (Q = img.get_crop(p - psize1,q - psize1,r - psize1,p + psize2,q + psize2,r + psize2,true))-=P;\n                const float\n                  dx = (float)x - p, dy = (float)y - q, dz = (float)z - r,\n                  distance2 = (float)(Q.pow(2).sum()/Pnorm + (dx*dx + dy*dy + dz*dz)/sigma_s2),\n                  weight = distance2>3?0.0f:1.0f;\n                sum_weights+=weight;\n                cimg_forC(res,c) res(x,y,z,c)+=weight*(*this)(p,q,r,c);\n              }\n              if (sum_weights>0) cimg_forC(res,c) res(x,y,z,c)/=sum_weights;\n              else cimg_forC(res,c) res(x,y,z,c) = (Tfloat)((*this)(x,y,z,c));\n            } else\n            cimg_pragma_openmp(parallel for collapse(2)\n                               if (res._width>=32 && res._height*res._depth>=4) firstprivate(P,Q))\n            cimg_forXYZ(res,x,y,z) { // Exact\n              P = img.get_crop(x - psize1,y - psize1,z - psize1,x + psize2,y + psize2,z + psize2,true);\n              const int x0 = x - rsize1, y0 = y - rsize1, z0 = z - rsize1,\n                x1 = x + rsize2, y1 = y + rsize2, z1 = z + rsize2;\n              float sum_weights = 0, weight_max = 0;\n              cimg_for_inXYZ(res,x0,y0,z0,x1,y1,z1,p,q,r) if (p!=x || q!=y || r!=z) {\n                (Q = img.get_crop(p - psize1,q - psize1,r - psize1,p + psize2,q + psize2,r + psize2,true))-=P;\n                const float\n                  dx = (float)x - p, dy = (float)y - q, dz = (float)z - r,\n                  distance2 = (float)(Q.pow(2).sum()/Pnorm + (dx*dx + dy*dy + dz*dz)/sigma_s2),\n                  weight = (float)std::exp(-distance2);\n                if (weight>weight_max) weight_max = weight;\n                sum_weights+=weight;\n                cimg_forC(res,c) res(x,y,z,c)+=weight*(*this)(p,q,r,c);\n              }\n              sum_weights+=weight_max; cimg_forC(res,c) res(x,y,z,c)+=weight_max*(*this)(x,y,z,c);\n              if (sum_weights>0) cimg_forC(res,c) res(x,y,z,c)/=sum_weights;\n              else cimg_forC(res,c) res(x,y,z,c) = (Tfloat)((*this)(x,y,z,c));\n            }\n        }\n        } else switch (patch_size) { // 2d\n        case 2 : if (is_fast_approx) _cimg_blur_patch2d_fast(2) else _cimg_blur_patch2d(2) break;\n        case 3 : if (is_fast_approx) _cimg_blur_patch2d_fast(3) else _cimg_blur_patch2d(3) break;\n        case 4 : if (is_fast_approx) _cimg_blur_patch2d_fast(4) else _cimg_blur_patch2d(4) break;\n        case 5 : if (is_fast_approx) _cimg_blur_patch2d_fast(5) else _cimg_blur_patch2d(5) break;\n        case 6 : if (is_fast_approx) _cimg_blur_patch2d_fast(6) else _cimg_blur_patch2d(6) break;\n        case 7 : if (is_fast_approx) _cimg_blur_patch2d_fast(7) else _cimg_blur_patch2d(7) break;\n        case 8 : if (is_fast_approx) _cimg_blur_patch2d_fast(8) else _cimg_blur_patch2d(8) break;\n        case 9 : if (is_fast_approx) _cimg_blur_patch2d_fast(9) else _cimg_blur_patch2d(9) break;\n        default : { // Fast\n          const int psize2 = (int)patch_size/2, psize1 = (int)patch_size - psize2 - 1;\n          if (is_fast_approx)\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=32 && res._height>=4) firstprivate(P,Q))\n            cimg_forXY(res,x,y) { // 2d fast approximation.\n              P = img.get_crop(x - psize1,y - psize1,x + psize2,y + psize2,true);\n              const int x0 = x - rsize1, y0 = y - rsize1, x1 = x + rsize2, y1 = y + rsize2;\n              float sum_weights = 0;\n              cimg_for_inXY(res,x0,y0,x1,y1,p,q) if (cimg::abs(img(x,y,0)-img(p,q,0))<sigma_p3) {\n                (Q = img.get_crop(p - psize1,q - psize1,p + psize2,q + psize2,true))-=P;\n                const float\n                  dx = (float)x - p, dy = (float)y - q,\n                  distance2 = (float)(Q.pow(2).sum()/Pnorm + (dx*dx + dy*dy)/sigma_s2),\n                  weight = distance2>3?0.0f:1.0f;\n                sum_weights+=weight;\n                cimg_forC(res,c) res(x,y,c)+=weight*(*this)(p,q,c);\n              }\n              if (sum_weights>0) cimg_forC(res,c) res(x,y,c)/=sum_weights;\n              else cimg_forC(res,c) res(x,y,c) = (Tfloat)((*this)(x,y,c));\n            } else\n            cimg_pragma_openmp(parallel for cimg_openmp_if(res._width>=32 && res._height>=4) firstprivate(P,Q))\n            cimg_forXY(res,x,y) { // 2d exact algorithm.\n              P = img.get_crop(x - psize1,y - psize1,x + psize2,y + psize2,true);\n              const int x0 = x - rsize1, y0 = y - rsize1, x1 = x + rsize2, y1 = y + rsize2;\n              float sum_weights = 0, weight_max = 0;\n              cimg_for_inXY(res,x0,y0,x1,y1,p,q) if (p!=x || q!=y) {\n                (Q = img.get_crop(p - psize1,q - psize1,p + psize2,q + psize2,true))-=P;\n                const float\n                  dx = (float)x - p, dy = (float)y - q,\n                  distance2 = (float)(Q.pow(2).sum()/Pnorm + (dx*dx + dy*dy)/sigma_s2),\n                  weight = (float)std::exp(-distance2);\n                if (weight>weight_max) weight_max = weight;\n                sum_weights+=weight;\n                cimg_forC(res,c) res(x,y,c)+=weight*(*this)(p,q,c);\n              }\n              sum_weights+=weight_max; cimg_forC(res,c) res(x,y,c)+=weight_max*(*this)(x,y,c);\n              if (sum_weights>0) cimg_forC(res,c) res(x,y,c)/=sum_weights;\n              else cimg_forC(res,c) res(x,y,0,c) = (Tfloat)((*this)(x,y,c));\n            }\n        }\n        }\n      return res;\n    }\n\n    //! Blur image with the median filter.\n    /**\n       \\param n Size of the median filter.\n       \\param threshold Threshold used to discard pixels too far from the current pixel value in the median computation.\n    **/\n    CImg<T>& blur_median(const unsigned int n, const float threshold=0) {\n      if (!n) return *this;\n      return get_blur_median(n,threshold).move_to(*this);\n    }\n\n    //! Blur image with the median filter \\newinstance.\n    CImg<T> get_blur_median(const unsigned int n, const float threshold=0) const {\n      if (is_empty() || n<=1) return +*this;\n      CImg<T> res(_width,_height,_depth,_spectrum);\n      T *ptrd = res._data;\n      cimg::unused(ptrd);\n      const int hr = (int)n/2, hl = n - hr - 1;\n      if (res._depth!=1) { // 3d\n        if (threshold>0)\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=16 && _height*_depth*_spectrum>=4))\n          cimg_forXYZC(*this,x,y,z,c) { // With threshold.\n            const int\n              x0 = x - hl, y0 = y - hl, z0 = z - hl, x1 = x + hr, y1 = y + hr, z1 = z + hr,\n              nx0 = x0<0?0:x0, ny0 = y0<0?0:y0, nz0 = z0<0?0:z0,\n              nx1 = x1>=width()?width() - 1:x1, ny1 = y1>=height()?height() - 1:y1, nz1 = z1>=depth()?depth() - 1:z1;\n            const float val0 = (float)(*this)(x,y,z,c);\n            CImg<T> values(n*n*n);\n            unsigned int nb_values = 0;\n            T *ptrd = values.data();\n            cimg_for_inXYZ(*this,nx0,ny0,nz0,nx1,ny1,nz1,p,q,r)\n              if (cimg::abs((float)(*this)(p,q,r,c)-val0)<=threshold) { *(ptrd++) = (*this)(p,q,r,c); ++nb_values; }\n            res(x,y,z,c) = values.get_shared_points(0,nb_values - 1).median();\n          }\n        else\n          cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width>=16 && _height*_depth*_spectrum>=4))\n          cimg_forXYZC(*this,x,y,z,c) { // Without threshold.\n            const int\n              x0 = x - hl, y0 = y - hl, z0 = z - hl, x1 = x + hr, y1 = y + hr, z1 = z + hr,\n              nx0 = x0<0?0:x0, ny0 = y0<0?0:y0, nz0 = z0<0?0:z0,\n              nx1 = x1>=width()?width() - 1:x1, ny1 = y1>=height()?height() - 1:y1, nz1 = z1>=depth()?depth() - 1:z1;\n            res(x,y,z,c) = get_crop(nx0,ny0,nz0,c,nx1,ny1,nz1,c).median();\n          }\n      } else {\n#define _cimg_median_sort(a,b) if ((a)>(b)) cimg::swap(a,b)\n        if (res._height!=1) { // 2d\n          if (threshold>0)\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=16 && _height*_spectrum>=4))\n            cimg_forXYC(*this,x,y,c) { // With threshold.\n              const int\n                x0 = x - hl, y0 = y - hl, x1 = x + hr, y1 = y + hr,\n                nx0 = x0<0?0:x0, ny0 = y0<0?0:y0,\n                nx1 = x1>=width()?width() - 1:x1, ny1 = y1>=height()?height() - 1:y1;\n              const float val0 = (float)(*this)(x,y,c);\n              CImg<T> values(n*n);\n              unsigned int nb_values = 0;\n              T *ptrd = values.data();\n              cimg_for_inXY(*this,nx0,ny0,nx1,ny1,p,q)\n                if (cimg::abs((float)(*this)(p,q,c)-val0)<=threshold) { *(ptrd++) = (*this)(p,q,c); ++nb_values; }\n              res(x,y,c) = values.get_shared_points(0,nb_values - 1).median();\n            }\n          else switch (n) { // Without threshold.\n            case 3 : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n              cimg_forC(*this,c) {\n                T I[9] = { (T)0 };\n                cimg_for3x3(*this,x,y,0,c,I,T)\n                  res(x,y,c) = cimg::median(I[0],I[1],I[2],I[3],I[4],I[5],I[6],I[7],I[8]);\n              }\n            } break;\n            case 5 : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n              cimg_forC(*this,c) {\n                T I[25] = { (T)0 };\n                cimg_for5x5(*this,x,y,0,c,I,T)\n                  res(x,y,c) = cimg::median(I[0],I[1],I[2],I[3],I[4],\n                                            I[5],I[6],I[7],I[8],I[9],\n                                            I[10],I[11],I[12],I[13],I[14],\n                                            I[15],I[16],I[17],I[18],I[19],\n                                            I[20],I[21],I[22],I[23],I[24]);\n              }\n            } break;\n            case 7 : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n              cimg_forC(*this,c) {\n                T I[49] = { (T)0 };\n                cimg_for7x7(*this,x,y,0,c,I,T)\n                  res(x,y,c) = cimg::median(I[0],I[1],I[2],I[3],I[4],I[5],I[6],\n                                            I[7],I[8],I[9],I[10],I[11],I[12],I[13],\n                                            I[14],I[15],I[16],I[17],I[18],I[19],I[20],\n                                            I[21],I[22],I[23],I[24],I[25],I[26],I[27],\n                                            I[28],I[29],I[30],I[31],I[32],I[33],I[34],\n                                            I[35],I[36],I[37],I[38],I[39],I[40],I[41],\n                                            I[42],I[43],I[44],I[45],I[46],I[47],I[48]);\n              }\n            } break;\n            default : {\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=16 && _height*_spectrum>=4))\n              cimg_forXYC(*this,x,y,c) {\n                const int\n                  x0 = x - hl, y0 = y - hl, x1 = x + hr, y1 = y + hr,\n                  nx0 = x0<0?0:x0, ny0 = y0<0?0:y0,\n                  nx1 = x1>=width()?width() - 1:x1, ny1 = y1>=height()?height() - 1:y1;\n                res(x,y,c) = get_crop(nx0,ny0,0,c,nx1,ny1,0,c).median();\n              }\n            }\n            }\n        } else { // 1d\n\n          CImg<T> I;\n          if (threshold>0)\n            cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=16 && _spectrum>=2))\n            cimg_forXC(*this,x,c) { // With threshold.\n              const int\n                x0 = x - hl, x1 = x + hr,\n                nx0 = x0<0?0:x0, nx1 = x1>=width()?width() - 1:x1;\n              const float val0 = (float)(*this)(x,c);\n              CImg<T> values(n);\n              unsigned int nb_values = 0;\n              T *ptrd = values.data();\n              cimg_for_inX(*this,nx0,nx1,p)\n                if (cimg::abs((float)(*this)(p,c)-val0)<=threshold) { *(ptrd++) = (*this)(p,c); ++nb_values; }\n              res(x,c) = values.get_shared_points(0,nb_values - 1).median();\n            }\n          else switch (n) { // Without threshold.\n            case 2 : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n              cimg_forC(*this,c) {\n                I.assign(4);\n                cimg_for2x2(*this,x,y,0,c,I,T) res(x,c) = (T)(0.5f*(I[0] + I[1]));\n              }\n            } break;\n            case 3 : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n              cimg_forC(*this,c) {\n                I.assign(9);\n                cimg_for3x3(*this,x,y,0,c,I,T)\n                  res(x,c) = I[3]<I[4]?(I[4]<I[5]?I[4]:(I[3]<I[5]?I[5]:I[3])):(I[3]<I[5]?I[3]:(I[4]<I[5]?I[5]:I[4]));\n              }\n            } break;\n            default : {\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=16 && _spectrum>=2))\n              cimg_forXC(*this,x,c) {\n                const int\n                  x0 = x - hl, x1 = x + hr,\n                  nx0 = x0<0?0:x0, nx1 = x1>=width()?width() - 1:x1;\n                res(x,c) = get_crop(nx0,0,0,c,nx1,0,0,c).median();\n              }\n            }\n            }\n        }\n      }\n      return res;\n    }\n\n    //! Sharpen image.\n    /**\n       \\param amplitude Sharpening amplitude\n       \\param sharpen_type Select sharpening method. Can be <tt>{ false=inverse diffusion | true=shock filters }</tt>.\n       \\param edge Edge threshold (shock filters only).\n       \\param alpha Gradient smoothness (shock filters only).\n       \\param sigma Tensor smoothness (shock filters only).\n    **/\n    CImg<T>& sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1,\n                     const float alpha=0, const float sigma=0) {\n      if (is_empty()) return *this;\n      T val_min, val_max = max_min(val_min);\n      const float nedge = edge/2;\n      CImg<Tfloat> velocity(_width,_height,_depth,_spectrum), _veloc_max(_spectrum);\n\n      if (_depth>1) { // 3d\n        if (sharpen_type) { // Shock filters.\n          CImg<Tfloat> G = (alpha>0?get_blur(alpha).get_structure_tensors():get_structure_tensors());\n          if (sigma>0) G.blur(sigma);\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=32 && _height*_depth>=16))\n          cimg_forYZ(G,y,z) {\n            Tfloat *ptrG0 = G.data(0,y,z,0), *ptrG1 = G.data(0,y,z,1),\n              *ptrG2 = G.data(0,y,z,2), *ptrG3 = G.data(0,y,z,3);\n            CImg<Tfloat> val, vec;\n            cimg_forX(G,x) {\n              G.get_tensor_at(x,y,z).symmetric_eigen(val,vec);\n              if (val[0]<0) val[0] = 0;\n              if (val[1]<0) val[1] = 0;\n              if (val[2]<0) val[2] = 0;\n              *(ptrG0++) = vec(0,0);\n              *(ptrG1++) = vec(0,1);\n              *(ptrG2++) = vec(0,2);\n              *(ptrG3++) = 1 - (Tfloat)std::pow(1 + val[0] + val[1] + val[2],-(Tfloat)nedge);\n            }\n          }\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=512 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat *ptrd = velocity.data(0,0,0,c), veloc_max = 0;\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              const Tfloat\n                u = G(x,y,z,0),\n                v = G(x,y,z,1),\n                w = G(x,y,z,2),\n                amp = G(x,y,z,3),\n                ixx = Incc + Ipcc - 2*Iccc,\n                ixy = (Innc + Ippc - Inpc - Ipnc)/4,\n                ixz = (Incn + Ipcp - Incp - Ipcn)/4,\n                iyy = Icnc + Icpc - 2*Iccc,\n                iyz = (Icnn + Icpp - Icnp - Icpn)/4,\n                izz = Iccn + Iccp - 2*Iccc,\n                ixf = Incc - Iccc,\n                ixb = Iccc - Ipcc,\n                iyf = Icnc - Iccc,\n                iyb = Iccc - Icpc,\n                izf = Iccn - Iccc,\n                izb = Iccc - Iccp,\n                itt = u*u*ixx + v*v*iyy + w*w*izz + 2*u*v*ixy + 2*u*w*ixz + 2*v*w*iyz,\n                it = u*cimg::minmod(ixf,ixb) + v*cimg::minmod(iyf,iyb) + w*cimg::minmod(izf,izb),\n                veloc = -amp*cimg::sign(itt)*cimg::abs(it);\n              *(ptrd++) = veloc;\n              if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n            }\n            _veloc_max[c] = veloc_max;\n          }\n        } else  // Inverse diffusion.\n          cimg_forC(*this,c) {\n            Tfloat *ptrd = velocity.data(0,0,0,c), veloc_max = 0;\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              const Tfloat veloc = -Ipcc - Incc - Icpc - Icnc - Iccp - Iccn + 6*Iccc;\n              *(ptrd++) = veloc;\n              if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n            }\n            _veloc_max[c] = veloc_max;\n          }\n      } else { // 2d.\n        if (sharpen_type) { // Shock filters.\n          CImg<Tfloat> G = (alpha>0?get_blur(alpha).get_structure_tensors():get_structure_tensors());\n          if (sigma>0) G.blur(sigma);\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=32 && _height>=16))\n          cimg_forY(G,y) {\n            CImg<Tfloat> val, vec;\n            Tfloat *ptrG0 = G.data(0,y,0,0), *ptrG1 = G.data(0,y,0,1), *ptrG2 = G.data(0,y,0,2);\n            cimg_forX(G,x) {\n              G.get_tensor_at(x,y).symmetric_eigen(val,vec);\n              if (val[0]<0) val[0] = 0;\n              if (val[1]<0) val[1] = 0;\n              *(ptrG0++) = vec(0,0);\n              *(ptrG1++) = vec(0,1);\n              *(ptrG2++) = 1 - (Tfloat)std::pow(1 + val[0] + val[1],-(Tfloat)nedge);\n            }\n          }\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height>=512 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat *ptrd = velocity.data(0,0,0,c), veloc_max = 0;\n            CImg_3x3(I,Tfloat);\n            cimg_for3x3(*this,x,y,0,c,I,Tfloat) {\n              const Tfloat\n                u = G(x,y,0),\n                v = G(x,y,1),\n                amp = G(x,y,2),\n                ixx = Inc + Ipc - 2*Icc,\n                ixy = (Inn + Ipp - Inp - Ipn)/4,\n                iyy = Icn + Icp - 2*Icc,\n                ixf = Inc - Icc,\n                ixb = Icc - Ipc,\n                iyf = Icn - Icc,\n                iyb = Icc - Icp,\n                itt = u*u*ixx + v*v*iyy + 2*u*v*ixy,\n                it = u*cimg::minmod(ixf,ixb) + v*cimg::minmod(iyf,iyb),\n                veloc = -amp*cimg::sign(itt)*cimg::abs(it);\n              *(ptrd++) = veloc;\n              if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n            }\n            _veloc_max[c] = veloc_max;\n          }\n        } else // Inverse diffusion.\n          cimg_forC(*this,c) {\n            Tfloat *ptrd = velocity.data(0,0,0,c), veloc_max = 0;\n            CImg_3x3(I,Tfloat);\n            cimg_for3x3(*this,x,y,0,c,I,Tfloat) {\n              const Tfloat veloc = -Ipc - Inc - Icp - Icn + 4*Icc;\n              *(ptrd++) = veloc;\n              if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n            }\n            _veloc_max[c] = veloc_max;\n          }\n      }\n      const Tfloat veloc_max = _veloc_max.max();\n      if (veloc_max<=0) return *this;\n      return ((velocity*=amplitude/veloc_max)+=*this).cut(val_min,val_max).move_to(*this);\n    }\n\n    //! Sharpen image \\newinstance.\n    CImg<T> get_sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1,\n                        const float alpha=0, const float sigma=0) const {\n      return (+*this).sharpen(amplitude,sharpen_type,edge,alpha,sigma);\n    }\n\n    //! Return image gradient.\n    /**\n       \\param axes Axes considered for the gradient computation, as a C-string (e.g \"xy\").\n       \\param scheme = Numerical scheme used for the gradient computation:\n       - -1 = Backward finite differences\n       - 0 = Centered finite differences\n       - 1 = Forward finite differences\n       - 2 = Using Sobel kernels\n       - 3 = Using rotation invariant kernels\n       - 4 = Using Deriche recusrsive filter.\n       - 5 = Using Van Vliet recusrsive filter.\n    **/\n    CImgList<Tfloat> get_gradient(const char *const axes=0, const int scheme=3) const {\n      CImgList<Tfloat> grad(2,_width,_height,_depth,_spectrum);\n      bool is_3d = false;\n      if (axes) {\n        for (unsigned int a = 0; axes[a]; ++a) {\n          const char axis = cimg::lowercase(axes[a]);\n          switch (axis) {\n          case 'x' : case 'y' : break;\n          case 'z' : is_3d = true; break;\n          default :\n            throw CImgArgumentException(_cimg_instance\n                                        \"get_gradient(): Invalid specified axis '%c'.\",\n                                        cimg_instance,\n                                        axis);\n          }\n        }\n      } else is_3d = (_depth>1);\n      if (is_3d) {\n        CImg<Tfloat>(_width,_height,_depth,_spectrum).move_to(grad);\n        switch (scheme) { // 3d.\n        case -1 : { // Backward finite differences.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            const ulongT off = (ulongT)c*_width*_height*_depth;\n            Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off, *ptrd2 = grad[2]._data + off;\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              *(ptrd0++) = Iccc - Ipcc;\n              *(ptrd1++) = Iccc - Icpc;\n              *(ptrd2++) = Iccc - Iccp;\n            }\n          }\n        } break;\n        case 1 : { // Forward finite differences.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            const ulongT off = (ulongT)c*_width*_height*_depth;\n            Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off, *ptrd2 = grad[2]._data + off;\n            CImg_2x2x2(I,Tfloat);\n            cimg_for2x2x2(*this,x,y,z,c,I,Tfloat) {\n              *(ptrd0++) = Incc - Iccc;\n              *(ptrd1++) = Icnc - Iccc;\n              *(ptrd2++) = Iccn - Iccc;\n            }\n          }\n        } break;\n        case 4 : { // Deriche filter with low standard variation.\n          grad[0] = get_deriche(0,1,'x');\n          grad[1] = get_deriche(0,1,'y');\n          grad[2] = get_deriche(0,1,'z');\n        } break;\n        case 5 : { // Van Vliet filter with low standard variation.\n          grad[0] = get_vanvliet(0,1,'x');\n          grad[1] = get_vanvliet(0,1,'y');\n          grad[2] = get_vanvliet(0,1,'z');\n        } break;\n        default : { // Central finite differences.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            const ulongT off = (ulongT)c*_width*_height*_depth;\n            Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off, *ptrd2 = grad[2]._data + off;\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              *(ptrd0++) = (Incc - Ipcc)/2;\n              *(ptrd1++) = (Icnc - Icpc)/2;\n              *(ptrd2++) = (Iccn - Iccp)/2;\n            }\n          }\n        }\n        }\n      } else switch (scheme) { // 2d.\n      case -1 : { // Backward finite differences.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off;\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = Icc - Ipc;\n            *(ptrd1++) = Icc - Icp;\n          }\n        }\n      } break;\n      case 1 : { // Forward finite differences.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off;\n          CImg_2x2(I,Tfloat);\n          cimg_for2x2(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = Inc - Icc;\n            *(ptrd1++) = Icn - Icc;\n          }\n        }\n      } break;\n      case 2 : { // Sobel scheme.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off;\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = -Ipp - 2*Ipc - Ipn + Inp + 2*Inc + Inn;\n            *(ptrd1++) = -Ipp - 2*Icp - Inp + Ipn + 2*Icn + Inn;\n          }\n        }\n      } break;\n      case 3 : { // Rotation invariant kernel.\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off;\n          CImg_3x3(I,Tfloat);\n          const Tfloat a = (Tfloat)(0.25f*(2 - std::sqrt(2.0f))), b = (Tfloat)(0.5f*(std::sqrt(2.0f) - 1));\n          cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = -a*Ipp - b*Ipc - a*Ipn + a*Inp + b*Inc + a*Inn;\n            *(ptrd1++) = -a*Ipp - b*Icp - a*Inp + a*Ipn + b*Icn + a*Inn;\n          }\n        }\n      } break;\n      case 4 : { // Van Vliet filter with low standard variation\n        grad[0] = get_deriche(0,1,'x');\n        grad[1] = get_deriche(0,1,'y');\n      } break;\n      case 5 : { // Deriche filter with low standard variation\n        grad[0] = get_vanvliet(0,1,'x');\n        grad[1] = get_vanvliet(0,1,'y');\n      } break;\n      default : { // Central finite differences\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = grad[0]._data + off, *ptrd1 = grad[1]._data + off;\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = (Inc - Ipc)/2;\n            *(ptrd1++) = (Icn - Icp)/2;\n          }\n        }\n      }\n      }\n      if (!axes) return grad;\n      CImgList<Tfloat> res;\n      for (unsigned int l = 0; axes[l]; ++l) {\n        const char axis = cimg::lowercase(axes[l]);\n        switch (axis) {\n        case 'x' : res.insert(grad[0]); break;\n        case 'y' : res.insert(grad[1]); break;\n        case 'z' : res.insert(grad[2]); break;\n        }\n      }\n      grad.assign();\n      return res;\n    }\n\n    //! Return image hessian.\n    /**\n       \\param axes Axes considered for the hessian computation, as a C-string (e.g \"xy\").\n    **/\n    CImgList<Tfloat> get_hessian(const char *const axes=0) const {\n      CImgList<Tfloat> res;\n      const char *naxes = axes, *const def_axes2d = \"xxxyyy\", *const def_axes3d = \"xxxyxzyyyzzz\";\n      if (!axes) naxes = _depth>1?def_axes3d:def_axes2d;\n      const unsigned int lmax = (unsigned int)std::strlen(naxes);\n      if (lmax%2)\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_hessian(): Invalid specified axes '%s'.\",\n                                    cimg_instance,\n                                    naxes);\n\n      res.assign(lmax/2,_width,_height,_depth,_spectrum);\n      if (!cimg::strcasecmp(naxes,def_axes3d)) { // 3d\n\n        cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n        cimg_forC(*this,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth;\n          Tfloat\n            *ptrd0 = res[0]._data + off, *ptrd1 = res[1]._data + off, *ptrd2 = res[2]._data + off,\n            *ptrd3 = res[3]._data + off, *ptrd4 = res[4]._data + off, *ptrd5 = res[5]._data + off;\n          CImg_3x3x3(I,Tfloat);\n          cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = Ipcc + Incc - 2*Iccc;          // Ixx\n            *(ptrd1++) = (Ippc + Innc - Ipnc - Inpc)/4; // Ixy\n            *(ptrd2++) = (Ipcp + Incn - Ipcn - Incp)/4; // Ixz\n            *(ptrd3++) = Icpc + Icnc - 2*Iccc;          // Iyy\n            *(ptrd4++) = (Icpp + Icnn - Icpn - Icnp)/4; // Iyz\n            *(ptrd5++) = Iccn + Iccp - 2*Iccc;          // Izz\n          }\n        }\n      } else if (!cimg::strcasecmp(naxes,def_axes2d)) { // 2d\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forZC(*this,z,c) {\n          const ulongT off = (ulongT)c*_width*_height*_depth + z*_width*_height;\n          Tfloat *ptrd0 = res[0]._data + off, *ptrd1 = res[1]._data + off, *ptrd2 = res[2]._data + off;\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,z,c,I,Tfloat) {\n            *(ptrd0++) = Ipc + Inc - 2*Icc;         // Ixx\n            *(ptrd1++) = (Ipp + Inn - Ipn - Inp)/4; // Ixy\n            *(ptrd2++) = Icp + Icn - 2*Icc;         // Iyy\n          }\n        }\n      } else for (unsigned int l = 0; l<lmax; ) { // Version with custom axes.\n          const unsigned int l2 = l/2;\n          char axis1 = naxes[l++], axis2 = naxes[l++];\n          if (axis1>axis2) cimg::swap(axis1,axis2);\n          bool valid_axis = false;\n          if (axis1=='x' && axis2=='x') { // Ixx\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n            cimg_forZC(*this,z,c) {\n              Tfloat *ptrd = res[l2].data(0,0,z,c);\n              CImg_3x3(I,Tfloat);\n              cimg_for3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = Ipc + Inc - 2*Icc;\n            }\n          }\n          else if (axis1=='x' && axis2=='y') { // Ixy\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n            cimg_forZC(*this,z,c) {\n              Tfloat *ptrd = res[l2].data(0,0,z,c);\n              CImg_3x3(I,Tfloat);\n              cimg_for3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = (Ipp + Inn - Ipn - Inp)/4;\n            }\n          }\n          else if (axis1=='x' && axis2=='z') { // Ixz\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n            cimg_forC(*this,c) {\n              Tfloat *ptrd = res[l2].data(0,0,0,c);\n              CImg_3x3x3(I,Tfloat);\n              cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = (Ipcp + Incn - Ipcn - Incp)/4;\n            }\n          }\n          else if (axis1=='y' && axis2=='y') { // Iyy\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n            cimg_forZC(*this,z,c) {\n              Tfloat *ptrd = res[l2].data(0,0,z,c);\n              CImg_3x3(I,Tfloat);\n              cimg_for3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = Icp + Icn - 2*Icc;\n            }\n          }\n          else if (axis1=='y' && axis2=='z') { // Iyz\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n            cimg_forC(*this,c) {\n              Tfloat *ptrd = res[l2].data(0,0,0,c);\n              CImg_3x3x3(I,Tfloat);\n              cimg_forC(*this,c) cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = (Icpp + Icnn - Icpn - Icnp)/4;\n            }\n          }\n          else if (axis1=='z' && axis2=='z') { // Izz\n            valid_axis = true;\n            cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n            cimg_forC(*this,c) {\n              Tfloat *ptrd = res[l2].data(0,0,0,c);\n              CImg_3x3x3(I,Tfloat);\n              cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = Iccn + Iccp - 2*Iccc;\n            }\n          }\n          else if (!valid_axis)\n            throw CImgArgumentException(_cimg_instance\n                                        \"get_hessian(): Invalid specified axes '%s'.\",\n                                        cimg_instance,\n                                        naxes);\n        }\n      return res;\n    }\n\n    //! Compute image laplacian.\n    CImg<T>& laplacian() {\n      return get_laplacian().move_to(*this);\n    }\n\n    //! Compute image laplacian \\newinstance.\n    CImg<Tfloat> get_laplacian() const {\n      if (is_empty()) return CImg<Tfloat>();\n      CImg<Tfloat> res(_width,_height,_depth,_spectrum);\n      if (_depth>1) { // 3d\n        cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n        cimg_forC(*this,c) {\n          Tfloat *ptrd = res.data(0,0,0,c);\n          CImg_3x3x3(I,Tfloat);\n          cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) *(ptrd++) = Incc + Ipcc + Icnc + Icpc + Iccn + Iccp - 6*Iccc;\n        }\n      } else if (_height>1) { // 2d\n        cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n        cimg_forC(*this,c) {\n          Tfloat *ptrd = res.data(0,0,0,c);\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,0,c,I,Tfloat) *(ptrd++) = Inc + Ipc + Icn + Icp - 4*Icc;\n        }\n      } else { // 1d\n        cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=1048576 && _height*_depth*_spectrum>=2))\n        cimg_forC(*this,c) {\n          Tfloat *ptrd = res.data(0,0,0,c);\n          CImg_3x3(I,Tfloat);\n          cimg_for3x3(*this,x,y,0,c,I,Tfloat) *(ptrd++) = Inc + Ipc - 2*Icc;\n        }\n      }\n      return res;\n    }\n\n    //! Compute the structure tensor field of an image.\n    /**\n       \\param is_fwbw_scheme scheme. Can be <tt>{ false=centered | true=forward-backward }</tt>\n    **/\n    CImg<T>& structure_tensors(const bool is_fwbw_scheme=false) {\n      return get_structure_tensors(is_fwbw_scheme).move_to(*this);\n    }\n\n    //! Compute the structure tensor field of an image \\newinstance.\n    CImg<Tfloat> get_structure_tensors(const bool is_fwbw_scheme=false) const {\n      if (is_empty()) return *this;\n      CImg<Tfloat> res;\n      if (_depth>1) { // 3d\n        res.assign(_width,_height,_depth,6,0);\n        if (!is_fwbw_scheme) { // Classical central finite differences\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat\n              *ptrd0 = res.data(0,0,0,0), *ptrd1 = res.data(0,0,0,1), *ptrd2 = res.data(0,0,0,2),\n              *ptrd3 = res.data(0,0,0,3), *ptrd4 = res.data(0,0,0,4), *ptrd5 = res.data(0,0,0,5);\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              const Tfloat\n                ix = (Incc - Ipcc)/2,\n                iy = (Icnc - Icpc)/2,\n                iz = (Iccn - Iccp)/2;\n              *(ptrd0++)+=ix*ix;\n              *(ptrd1++)+=ix*iy;\n              *(ptrd2++)+=ix*iz;\n              *(ptrd3++)+=iy*iy;\n              *(ptrd4++)+=iy*iz;\n              *(ptrd5++)+=iz*iz;\n            }\n          }\n        } else { // Forward/backward finite differences.\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height*_depth>=1048576 && _spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat\n              *ptrd0 = res.data(0,0,0,0), *ptrd1 = res.data(0,0,0,1), *ptrd2 = res.data(0,0,0,2),\n              *ptrd3 = res.data(0,0,0,3), *ptrd4 = res.data(0,0,0,4), *ptrd5 = res.data(0,0,0,5);\n            CImg_3x3x3(I,Tfloat);\n            cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) {\n              const Tfloat\n                ixf = Incc - Iccc, ixb = Iccc - Ipcc,\n                iyf = Icnc - Iccc, iyb = Iccc - Icpc,\n                izf = Iccn - Iccc, izb = Iccc - Iccp;\n              *(ptrd0++)+=(ixf*ixf + ixb*ixb)/2;\n              *(ptrd1++)+=(ixf*iyf + ixf*iyb + ixb*iyf + ixb*iyb)/4;\n              *(ptrd2++)+=(ixf*izf + ixf*izb + ixb*izf + ixb*izb)/4;\n              *(ptrd3++)+=(iyf*iyf + iyb*iyb)/2;\n              *(ptrd4++)+=(iyf*izf + iyf*izb + iyb*izf + iyb*izb)/4;\n              *(ptrd5++)+=(izf*izf + izb*izb)/2;\n            }\n          }\n        }\n      } else { // 2d\n        res.assign(_width,_height,_depth,3,0);\n        if (!is_fwbw_scheme) { // Classical central finite differences\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat *ptrd0 = res.data(0,0,0,0), *ptrd1 = res.data(0,0,0,1), *ptrd2 = res.data(0,0,0,2);\n            CImg_3x3(I,Tfloat);\n            cimg_for3x3(*this,x,y,0,c,I,Tfloat) {\n              const Tfloat\n                ix = (Inc - Ipc)/2,\n                iy = (Icn - Icp)/2;\n              *(ptrd0++)+=ix*ix;\n              *(ptrd1++)+=ix*iy;\n              *(ptrd2++)+=iy*iy;\n            }\n          }\n        } else { // Forward/backward finite differences (version 2).\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width*_height>=1048576 && _depth*_spectrum>=2))\n          cimg_forC(*this,c) {\n            Tfloat *ptrd0 = res.data(0,0,0,0), *ptrd1 = res.data(0,0,0,1), *ptrd2 = res.data(0,0,0,2);\n            CImg_3x3(I,Tfloat);\n            cimg_for3x3(*this,x,y,0,c,I,Tfloat) {\n              const Tfloat\n                ixf = Inc - Icc, ixb = Icc - Ipc,\n                iyf = Icn - Icc, iyb = Icc - Icp;\n              *(ptrd0++)+=(ixf*ixf + ixb*ixb)/2;\n              *(ptrd1++)+=(ixf*iyf + ixf*iyb + ixb*iyf + ixb*iyb)/4;\n              *(ptrd2++)+=(iyf*iyf + iyb*iyb)/2;\n            }\n          }\n        }\n      }\n      return res;\n    }\n\n    //! Compute field of diffusion tensors for edge-preserving smoothing.\n    /**\n       \\param sharpness Sharpness\n       \\param anisotropy Anisotropy\n       \\param alpha Standard deviation of the gradient blur.\n       \\param sigma Standard deviation of the structure tensor blur.\n       \\param is_sqrt Tells if the square root of the tensor field is computed instead.\n    **/\n    CImg<T>& diffusion_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,\n                               const float alpha=0.6f, const float sigma=1.1f, const bool is_sqrt=false) {\n      CImg<Tfloat> res;\n      const float\n        nsharpness = std::max(sharpness,1e-5f),\n        power1 = (is_sqrt?0.5f:1)*nsharpness,\n        power2 = power1/(1e-7f + 1 - anisotropy);\n      blur(alpha).normalize(0,(T)255);\n\n      if (_depth>1) { // 3d\n        get_structure_tensors().move_to(res).blur(sigma);\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=256 && _height*_depth>=256))\n        cimg_forYZ(*this,y,z) {\n          Tfloat\n            *ptrd0 = res.data(0,y,z,0), *ptrd1 = res.data(0,y,z,1), *ptrd2 = res.data(0,y,z,2),\n            *ptrd3 = res.data(0,y,z,3), *ptrd4 = res.data(0,y,z,4), *ptrd5 = res.data(0,y,z,5);\n          CImg<floatT> val(3), vec(3,3);\n          cimg_forX(*this,x) {\n            res.get_tensor_at(x,y,z).symmetric_eigen(val,vec);\n            const float\n              _l1 = val[2], _l2 = val[1], _l3 = val[0],\n              l1 = _l1>0?_l1:0, l2 = _l2>0?_l2:0, l3 = _l3>0?_l3:0,\n              ux = vec(0,0), uy = vec(0,1), uz = vec(0,2),\n              vx = vec(1,0), vy = vec(1,1), vz = vec(1,2),\n              wx = vec(2,0), wy = vec(2,1), wz = vec(2,2),\n              n1 = (float)std::pow(1 + l1 + l2 + l3,-power1),\n              n2 = (float)std::pow(1 + l1 + l2 + l3,-power2);\n            *(ptrd0++) = n1*(ux*ux + vx*vx) + n2*wx*wx;\n            *(ptrd1++) = n1*(ux*uy + vx*vy) + n2*wx*wy;\n            *(ptrd2++) = n1*(ux*uz + vx*vz) + n2*wx*wz;\n            *(ptrd3++) = n1*(uy*uy + vy*vy) + n2*wy*wy;\n            *(ptrd4++) = n1*(uy*uz + vy*vz) + n2*wy*wz;\n            *(ptrd5++) = n1*(uz*uz + vz*vz) + n2*wz*wz;\n          }\n        }\n      } else { // for 2d images\n        get_structure_tensors().move_to(res).blur(sigma);\n        cimg_pragma_openmp(parallel for cimg_openmp_if(_width>=256 && _height>=256))\n        cimg_forY(*this,y) {\n          Tfloat *ptrd0 = res.data(0,y,0,0), *ptrd1 = res.data(0,y,0,1), *ptrd2 = res.data(0,y,0,2);\n          CImg<floatT> val(2), vec(2,2);\n          cimg_forX(*this,x) {\n            res.get_tensor_at(x,y).symmetric_eigen(val,vec);\n            const float\n              _l1 = val[1], _l2 = val[0],\n              l1 = _l1>0?_l1:0, l2 = _l2>0?_l2:0,\n              ux = vec(1,0), uy = vec(1,1),\n              vx = vec(0,0), vy = vec(0,1),\n              n1 = (float)std::pow(1 + l1 + l2,-power1),\n              n2 = (float)std::pow(1 + l1 + l2,-power2);\n            *(ptrd0++) = n1*ux*ux + n2*vx*vx;\n            *(ptrd1++) = n1*ux*uy + n2*vx*vy;\n            *(ptrd2++) = n1*uy*uy + n2*vy*vy;\n          }\n        }\n      }\n      return res.move_to(*this);\n    }\n\n    //! Compute field of diffusion tensors for edge-preserving smoothing \\newinstance.\n    CImg<Tfloat> get_diffusion_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,\n                                       const float alpha=0.6f, const float sigma=1.1f, const bool is_sqrt=false) const {\n      return CImg<Tfloat>(*this,false).diffusion_tensors(sharpness,anisotropy,alpha,sigma,is_sqrt);\n    }\n\n    //! Estimate displacement field between two images.\n    /**\n       \\param source Reference image.\n       \\param smoothness Smoothness of estimated displacement field.\n       \\param precision Precision required for algorithm convergence.\n       \\param nb_scales Number of scales used to estimate the displacement field.\n       \\param iteration_max Maximum number of iterations allowed for one scale.\n       \\param is_backward If false, match I2(X + U(X)) = I1(X), else match I2(X) = I1(X - U(X)).\n       \\param guide Image used as the initial correspondence estimate for the algorithm.\n       'guide' may have a last channel with boolean values (0=false | other=true) that\n       tells for each pixel if its correspondence vector is constrained to its initial value (constraint mask).\n    **/\n    CImg<T>& displacement(const CImg<T>& source, const float smoothness=0.1f, const float precision=5.0f,\n                          const unsigned int nb_scales=0, const unsigned int iteration_max=10000,\n                          const bool is_backward=false,\n                          const CImg<floatT>& guide=CImg<floatT>::const_empty()) {\n      return get_displacement(source,smoothness,precision,nb_scales,iteration_max,is_backward,guide).\n        move_to(*this);\n    }\n\n    //! Estimate displacement field between two images \\newinstance.\n    CImg<floatT> get_displacement(const CImg<T>& source,\n                                  const float smoothness=0.1f, const float precision=5.0f,\n                                  const unsigned int nb_scales=0, const unsigned int iteration_max=10000,\n                                  const bool is_backward=false,\n                                  const CImg<floatT>& guide=CImg<floatT>::const_empty()) const {\n      if (is_empty() || !source) return +*this;\n      if (!is_sameXYZC(source))\n        throw CImgArgumentException(_cimg_instance\n                                    \"displacement(): Instance and source image (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    source._width,source._height,source._depth,source._spectrum,source._data);\n      if (precision<0)\n        throw CImgArgumentException(_cimg_instance\n                                    \"displacement(): Invalid specified precision %g \"\n                                    \"(should be >=0)\",\n                                    cimg_instance,\n                                    precision);\n\n      const bool is_3d = source._depth>1;\n      const unsigned int constraint = is_3d?3:2;\n\n      if (guide &&\n          (guide._width!=_width || guide._height!=_height || guide._depth!=_depth || guide._spectrum<constraint))\n        throw CImgArgumentException(_cimg_instance\n                                    \"displacement(): Specified guide (%u,%u,%u,%u,%p) \"\n                                    \"has invalid dimensions.\",\n                                    cimg_instance,\n                                    guide._width,guide._height,guide._depth,guide._spectrum,guide._data);\n\n      const unsigned int\n        mins = is_3d?cimg::min(_width,_height,_depth):std::min(_width,_height),\n        _nb_scales = nb_scales>0?nb_scales:\n        (unsigned int)cimg::round(std::log(mins/8.0)/std::log(1.5),1,1);\n\n      const float _precision = (float)std::pow(10.0,-(double)precision);\n      float sm, sM = source.max_min(sm), tm, tM = max_min(tm);\n      const float sdelta = sm==sM?1:(sM - sm), tdelta = tm==tM?1:(tM - tm);\n\n      CImg<floatT> U, V;\n      floatT bound = 0;\n      for (int scale = (int)_nb_scales - 1; scale>=0; --scale) {\n        const float factor = (float)std::pow(1.5,(double)scale);\n        const unsigned int\n          _sw = (unsigned int)(_width/factor), sw = _sw?_sw:1,\n          _sh = (unsigned int)(_height/factor), sh = _sh?_sh:1,\n          _sd = (unsigned int)(_depth/factor), sd = _sd?_sd:1;\n        if (sw<5 && sh<5 && (!is_3d || sd<5)) continue;  // skip too small scales.\n        const CImg<Tfloat>\n          I1 = (source.get_resize(sw,sh,sd,-100,2)-=sm)/=sdelta,\n          I2 = (get_resize(I1,2)-=tm)/=tdelta;\n        if (guide._spectrum>constraint) guide.get_resize(I2._width,I2._height,I2._depth,-100,1).move_to(V);\n        if (U) (U*=1.5f).resize(I2._width,I2._height,I2._depth,-100,3);\n        else {\n          if (guide)\n            guide.get_shared_channels(0,is_3d?2:1).get_resize(I2._width,I2._height,I2._depth,-100,2).move_to(U);\n          else U.assign(I2._width,I2._height,I2._depth,is_3d?3:2,0);\n        }\n\n        float dt = 2, energy = cimg::type<float>::max();\n        const CImgList<Tfloat> dI = is_backward?I1.get_gradient():I2.get_gradient();\n\n        for (unsigned int iteration = 0; iteration<iteration_max; ++iteration) {\n          cimg_abort_test();\n          float _energy = 0;\n\n          if (is_3d) { // 3d version.\n            if (smoothness>=0) // Isotropic regularization.\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_height*_depth>=8 && _width>=16)\n                                 reduction(+:_energy))\n              cimg_forYZ(U,y,z) {\n                const int\n                  _p1y = y?y - 1:0, _n1y = y<U.height() - 1?y + 1:y,\n                  _p1z = z?z - 1:0, _n1z = z<U.depth() - 1?z + 1:z;\n                cimg_for3X(U,x) {\n                  const float\n                    X = is_backward?x - U(x,y,z,0):x + U(x,y,z,0),\n                    Y = is_backward?y - U(x,y,z,1):y + U(x,y,z,1),\n                    Z = is_backward?z - U(x,y,z,2):z + U(x,y,z,2);\n                  float delta_I = 0, _energy_regul = 0;\n                  if (is_backward) cimg_forC(I2,c) delta_I+=(float)(I1.linear_atXYZ(X,Y,Z,c) - I2(x,y,z,c));\n                  else cimg_forC(I2,c) delta_I+=(float)(I1(x,y,z,c) - I2.linear_atXYZ(X,Y,Z,c));\n                  cimg_forC(U,c) {\n                    const float\n                      Ux = 0.5f*(U(_n1x,y,z,c) - U(_p1x,y,z,c)),\n                      Uy = 0.5f*(U(x,_n1y,z,c) - U(x,_p1y,z,c)),\n                      Uz = 0.5f*(U(x,y,_n1z,c) - U(x,y,_p1z,c)),\n                      Uxx = U(_n1x,y,z,c) + U(_p1x,y,z,c),\n                      Uyy = U(x,_n1y,z,c) + U(x,_p1y,z,c),\n                      Uzz = U(x,y,_n1z,c) + U(x,y,_p1z,c);\n                    U(x,y,z,c) = (float)(U(x,y,z,c) + dt*(delta_I*dI[c].linear_atXYZ(X,Y,Z) +\n                                                          smoothness* ( Uxx + Uyy + Uzz)))/(1 + 6*smoothness*dt);\n                    _energy_regul+=Ux*Ux + Uy*Uy + Uz*Uz;\n                  }\n                  if (is_backward) { // Constraint displacement vectors to stay in image.\n                    if (U(x,y,z,0)>x) U(x,y,z,0) = (float)x;\n                    if (U(x,y,z,1)>y) U(x,y,z,1) = (float)y;\n                    if (U(x,y,z,2)>z) U(x,y,z,2) = (float)z;\n                    bound = (float)x - _width; if (U(x,y,z,0)<=bound) U(x,y,z,0) = bound;\n                    bound = (float)y - _height; if (U(x,y,z,1)<=bound) U(x,y,z,1) = bound;\n                    bound = (float)z - _depth; if (U(x,y,z,2)<=bound) U(x,y,z,2) = bound;\n                  } else {\n                    if (U(x,y,z,0)<-x) U(x,y,z,0) = -(float)x;\n                    if (U(x,y,z,1)<-y) U(x,y,z,1) = -(float)y;\n                    if (U(x,y,z,2)<-z) U(x,y,z,2) = -(float)z;\n                    bound = (float)_width - x; if (U(x,y,z,0)>=bound) U(x,y,z,0) = bound;\n                    bound = (float)_height - y; if (U(x,y,z,1)>=bound) U(x,y,z,1) = bound;\n                    bound = (float)_depth - z; if (U(x,y,z,2)>=bound) U(x,y,z,2) = bound;\n                  }\n                  _energy+=delta_I*delta_I + smoothness*_energy_regul;\n                }\n                if (V) cimg_forXYZ(V,x,y,z) if (V(x,y,z,3)) { // Apply constraints.\n                    U(x,y,z,0) = V(x,y,z,0)/factor;\n                    U(x,y,z,1) = V(x,y,z,1)/factor;\n                    U(x,y,z,2) = V(x,y,z,2)/factor;\n                  }\n              } else { // Anisotropic regularization.\n              const float nsmoothness = -smoothness;\n              cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_height*_depth>=8 && _width>=16)\n                                 reduction(+:_energy))\n              cimg_forYZ(U,y,z) {\n                const int\n                  _p1y = y?y - 1:0, _n1y = y<U.height() - 1?y + 1:y,\n                  _p1z = z?z - 1:0, _n1z = z<U.depth() - 1?z + 1:z;\n                cimg_for3X(U,x) {\n                  const float\n                    X = is_backward?x - U(x,y,z,0):x + U(x,y,z,0),\n                    Y = is_backward?y - U(x,y,z,1):y + U(x,y,z,1),\n                    Z = is_backward?z - U(x,y,z,2):z + U(x,y,z,2);\n                  float delta_I = 0, _energy_regul = 0;\n                  if (is_backward) cimg_forC(I2,c) delta_I+=(float)(I1.linear_atXYZ(X,Y,Z,c) - I2(x,y,z,c));\n                  else cimg_forC(I2,c) delta_I+=(float)(I1(x,y,z,c) - I2.linear_atXYZ(X,Y,Z,c));\n                  cimg_forC(U,c) {\n                    const float\n                      Ux = 0.5f*(U(_n1x,y,z,c) - U(_p1x,y,z,c)),\n                      Uy = 0.5f*(U(x,_n1y,z,c) - U(x,_p1y,z,c)),\n                      Uz = 0.5f*(U(x,y,_n1z,c) - U(x,y,_p1z,c)),\n                      N2 = Ux*Ux + Uy*Uy + Uz*Uz,\n                      N = std::sqrt(N2),\n                      N3 = 1e-5f + N2*N,\n                      coef_a = (1 - Ux*Ux/N2)/N,\n                      coef_b = -2*Ux*Uy/N3,\n                      coef_c = -2*Ux*Uz/N3,\n                      coef_d = (1 - Uy*Uy/N2)/N,\n                      coef_e = -2*Uy*Uz/N3,\n                      coef_f = (1 - Uz*Uz/N2)/N,\n                      Uxx = U(_n1x,y,z,c) + U(_p1x,y,z,c),\n                      Uyy = U(x,_n1y,z,c) + U(x,_p1y,z,c),\n                      Uzz = U(x,y,_n1z,c) + U(x,y,_p1z,c),\n                      Uxy = 0.25f*(U(_n1x,_n1y,z,c) + U(_p1x,_p1y,z,c) - U(_n1x,_p1y,z,c) - U(_n1x,_p1y,z,c)),\n                      Uxz = 0.25f*(U(_n1x,y,_n1z,c) + U(_p1x,y,_p1z,c) - U(_n1x,y,_p1z,c) - U(_n1x,y,_p1z,c)),\n                      Uyz = 0.25f*(U(x,_n1y,_n1z,c) + U(x,_p1y,_p1z,c) - U(x,_n1y,_p1z,c) - U(x,_n1y,_p1z,c));\n                    U(x,y,z,c) = (float)(U(x,y,z,c) + dt*(delta_I*dI[c].linear_atXYZ(X,Y,Z) +\n                                                          nsmoothness* ( coef_a*Uxx + coef_b*Uxy +\n                                                                         coef_c*Uxz + coef_d*Uyy +\n                                                                         coef_e*Uyz + coef_f*Uzz ))\n                                         )/(1 + 2*(coef_a + coef_d + coef_f)*nsmoothness*dt);\n                    _energy_regul+=N;\n                  }\n                  if (is_backward) { // Constraint displacement vectors to stay in image.\n                    if (U(x,y,z,0)>x) U(x,y,z,0) = (float)x;\n                    if (U(x,y,z,1)>y) U(x,y,z,1) = (float)y;\n                    if (U(x,y,z,2)>z) U(x,y,z,2) = (float)z;\n                    bound = (float)x - _width; if (U(x,y,z,0)<=bound) U(x,y,z,0) = bound;\n                    bound = (float)y - _height; if (U(x,y,z,1)<=bound) U(x,y,z,1) = bound;\n                    bound = (float)z - _depth; if (U(x,y,z,2)<=bound) U(x,y,z,2) = bound;\n                  } else {\n                    if (U(x,y,z,0)<-x) U(x,y,z,0) = -(float)x;\n                    if (U(x,y,z,1)<-y) U(x,y,z,1) = -(float)y;\n                    if (U(x,y,z,2)<-z) U(x,y,z,2) = -(float)z;\n                    bound = (float)_width - x; if (U(x,y,z,0)>=bound) U(x,y,z,0) = bound;\n                    bound = (float)_height - y; if (U(x,y,z,1)>=bound) U(x,y,z,1) = bound;\n                    bound = (float)_depth - z; if (U(x,y,z,2)>=bound) U(x,y,z,2) = bound;\n                  }\n                  _energy+=delta_I*delta_I + nsmoothness*_energy_regul;\n                }\n                if (V) cimg_forXYZ(V,x,y,z) if (V(x,y,z,3)) { // Apply constraints.\n                    U(x,y,z,0) = V(x,y,z,0)/factor;\n                    U(x,y,z,1) = V(x,y,z,1)/factor;\n                    U(x,y,z,2) = V(x,y,z,2)/factor;\n                  }\n              }\n            }\n          } else { // 2d version.\n            if (smoothness>=0) // Isotropic regularization.\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_height>=8 && _width>=16) reduction(+:_energy))\n              cimg_forY(U,y) {\n                const int _p1y = y?y - 1:0, _n1y = y<U.height() - 1?y + 1:y;\n                cimg_for3X(U,x) {\n                  const float\n                    X = is_backward?x - U(x,y,0):x + U(x,y,0),\n                    Y = is_backward?y - U(x,y,1):y + U(x,y,1);\n                  float delta_I = 0, _energy_regul = 0;\n                  if (is_backward) cimg_forC(I2,c) delta_I+=(float)(I1.linear_atXY(X,Y,c) - I2(x,y,c));\n                  else cimg_forC(I2,c) delta_I+=(float)(I1(x,y,c) - I2.linear_atXY(X,Y,c));\n                  cimg_forC(U,c) {\n                    const float\n                      Ux = 0.5f*(U(_n1x,y,c) - U(_p1x,y,c)),\n                      Uy = 0.5f*(U(x,_n1y,c) - U(x,_p1y,c)),\n                      Uxx = U(_n1x,y,c) + U(_p1x,y,c),\n                      Uyy = U(x,_n1y,c) + U(x,_p1y,c);\n                    U(x,y,c) = (float)(U(x,y,c) + dt*(delta_I*dI[c].linear_atXY(X,Y) +\n                                                      smoothness*( Uxx + Uyy )))/(1 + 4*smoothness*dt);\n                    _energy_regul+=Ux*Ux + Uy*Uy;\n                  }\n                  if (is_backward) { // Constraint displacement vectors to stay in image.\n                    if (U(x,y,0)>x) U(x,y,0) = (float)x;\n                    if (U(x,y,1)>y) U(x,y,1) = (float)y;\n                    bound = (float)x - _width; if (U(x,y,0)<=bound) U(x,y,0) = bound;\n                    bound = (float)y - _height; if (U(x,y,1)<=bound) U(x,y,1) = bound;\n                  } else {\n                    if (U(x,y,0)<-x) U(x,y,0) = -(float)x;\n                    if (U(x,y,1)<-y) U(x,y,1) = -(float)y;\n                    bound = (float)_width - x; if (U(x,y,0)>=bound) U(x,y,0) = bound;\n                    bound = (float)_height - y; if (U(x,y,1)>=bound) U(x,y,1) = bound;\n                  }\n                  _energy+=delta_I*delta_I + smoothness*_energy_regul;\n                }\n                if (V) cimg_forX(V,x) if (V(x,y,2)) { // Apply constraints.\n                    U(x,y,0) = V(x,y,0)/factor;\n                    U(x,y,1) = V(x,y,1)/factor;\n                  }\n              } else { // Anisotropic regularization.\n              const float nsmoothness = -smoothness;\n              cimg_pragma_openmp(parallel for cimg_openmp_if(_height>=8 && _width>=16) reduction(+:_energy))\n              cimg_forY(U,y) {\n                const int _p1y = y?y - 1:0, _n1y = y<U.height() - 1?y + 1:y;\n                cimg_for3X(U,x) {\n                  const float\n                    X = is_backward?x - U(x,y,0):x + U(x,y,0),\n                    Y = is_backward?y - U(x,y,1):y + U(x,y,1);\n                  float delta_I = 0, _energy_regul = 0;\n                  if (is_backward) cimg_forC(I2,c) delta_I+=(float)(I1.linear_atXY(X,Y,c) - I2(x,y,c));\n                  else cimg_forC(I2,c) delta_I+=(float)(I1(x,y,c) - I2.linear_atXY(X,Y,c));\n                  cimg_forC(U,c) {\n                    const float\n                      Ux = 0.5f*(U(_n1x,y,c) - U(_p1x,y,c)),\n                      Uy = 0.5f*(U(x,_n1y,c) - U(x,_p1y,c)),\n                      N2 = Ux*Ux + Uy*Uy,\n                      N = std::sqrt(N2),\n                      N3 = 1e-5f + N2*N,\n                      coef_a = Uy*Uy/N3,\n                      coef_b = -2*Ux*Uy/N3,\n                      coef_c = Ux*Ux/N3,\n                      Uxx = U(_n1x,y,c) + U(_p1x,y,c),\n                      Uyy = U(x,_n1y,c) + U(x,_p1y,c),\n                      Uxy = 0.25f*(U(_n1x,_n1y,c) + U(_p1x,_p1y,c) - U(_n1x,_p1y,c) - U(_n1x,_p1y,c));\n                    U(x,y,c) = (float)(U(x,y,c) + dt*(delta_I*dI[c].linear_atXY(X,Y) +\n                                                      nsmoothness*( coef_a*Uxx + coef_b*Uxy + coef_c*Uyy )))/\n                      (1 + 2*(coef_a + coef_c)*nsmoothness*dt);\n                    _energy_regul+=N;\n                  }\n                  if (is_backward) { // Constraint displacement vectors to stay in image.\n                    if (U(x,y,0)>x) U(x,y,0) = (float)x;\n                    if (U(x,y,1)>y) U(x,y,1) = (float)y;\n                    bound = (float)x - _width; if (U(x,y,0)<=bound) U(x,y,0) = bound;\n                    bound = (float)y - _height; if (U(x,y,1)<=bound) U(x,y,1) = bound;\n                  } else {\n                    if (U(x,y,0)<-x) U(x,y,0) = -(float)x;\n                    if (U(x,y,1)<-y) U(x,y,1) = -(float)y;\n                    bound = (float)_width - x; if (U(x,y,0)>=bound) U(x,y,0) = bound;\n                    bound = (float)_height - y; if (U(x,y,1)>=bound) U(x,y,1) = bound;\n                  }\n                  _energy+=delta_I*delta_I + nsmoothness*_energy_regul;\n                }\n                if (V) cimg_forX(V,x) if (V(x,y,2)) { // Apply constraints.\n                    U(x,y,0) = V(x,y,0)/factor;\n                    U(x,y,1) = V(x,y,1)/factor;\n                  }\n              }\n            }\n          }\n          const float d_energy = (_energy - energy)/(sw*sh*sd);\n          if (d_energy<=0 && -d_energy<_precision) break;\n          if (d_energy>0) dt*=0.5f;\n          energy = _energy;\n        }\n      }\n      return U;\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm.\n    /**\n        \\param patch_image The image containing the reference patches to match with the instance image.\n        \\param patch_width Width of the patch used for matching.\n        \\param patch_height Height of the patch used for matching.\n        \\param patch_depth Depth of the patch used for matching.\n        \\param nb_iterations Number of patch-match iterations.\n        \\param nb_randoms Number of randomization attempts (per pixel).\n        \\param guide Image used as the initial correspondence estimate for the algorithm.\n          'guide' may have a last channel with boolean values (0=false | other=true) that\n          tells for each pixel if its correspondence vector is constrained to its initial value (constraint mask).\n        \\param[out] matching_score Returned as the image of matching scores.\n        \\note\n        The patch-match algorithm is described in this paper:\n        Connelly Barnes, Eli Shechtman, Adam Finkelstein, Dan B Goldman(2009),\n        PatchMatch: A Randomized Correspondence Algorithm for Structural Image Editing\n    **/\n    template<typename t1, typename t2>\n    CImg<T>& patchmatch(const CImg<T>& patch_image,\n                        const unsigned int patch_width,\n                        const unsigned int patch_height,\n                        const unsigned int patch_depth,\n                        const unsigned int nb_iterations,\n                        const unsigned int nb_randoms,\n                        const CImg<t1> &guide,\n                        CImg<t2> &matching_score) {\n      return get_patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                            nb_iterations,nb_randoms,guide,matching_score).move_to(*this);\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm \\newinstance.\n    template<typename t1, typename t2>\n    CImg<intT> get_patchmatch(const CImg<T>& patch_image,\n                              const unsigned int patch_width,\n                              const unsigned int patch_height,\n                              const unsigned int patch_depth,\n                              const unsigned int nb_iterations,\n                              const unsigned int nb_randoms,\n                              const CImg<t1> &guide,\n                              CImg<t2> &matching_score) const {\n      return _patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                         nb_iterations,nb_randoms,\n                         guide,true,matching_score);\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm \\overloading.\n    template<typename t>\n    CImg<T>& patchmatch(const CImg<T>& patch_image,\n                        const unsigned int patch_width,\n                        const unsigned int patch_height,\n                        const unsigned int patch_depth,\n                        const unsigned int nb_iterations,\n                        const unsigned int nb_randoms,\n                        const CImg<t> &guide) {\n      return get_patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                            nb_iterations,nb_randoms,guide).move_to(*this);\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm \\overloading.\n    template<typename t>\n    CImg<intT> get_patchmatch(const CImg<T>& patch_image,\n                              const unsigned int patch_width,\n                              const unsigned int patch_height,\n                              const unsigned int patch_depth,\n                              const unsigned int nb_iterations,\n                              const unsigned int nb_randoms,\n                              const CImg<t> &guide) const {\n      return _patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                         nb_iterations,nb_randoms,\n                         guide,false,CImg<T>::empty());\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm \\overloading.\n    CImg<T>& patchmatch(const CImg<T>& patch_image,\n                        const unsigned int patch_width,\n                        const unsigned int patch_height,\n                        const unsigned int patch_depth=1,\n                        const unsigned int nb_iterations=5,\n                        const unsigned int nb_randoms=5) {\n      return get_patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                            nb_iterations,nb_randoms).move_to(*this);\n    }\n\n    //! Compute correspondence map between two images, using the patch-match algorithm \\overloading.\n    CImg<intT> get_patchmatch(const CImg<T>& patch_image,\n                              const unsigned int patch_width,\n                              const unsigned int patch_height,\n                              const unsigned int patch_depth=1,\n                              const unsigned int nb_iterations=5,\n                              const unsigned int nb_randoms=5) const {\n      return _patchmatch(patch_image,patch_width,patch_height,patch_depth,\n                         nb_iterations,nb_randoms,\n                         CImg<T>::const_empty(),\n                         false,CImg<T>::empty());\n    }\n\n    template<typename t1, typename t2>\n    CImg<intT> _patchmatch(const CImg<T>& patch_image,\n                           const unsigned int patch_width,\n                           const unsigned int patch_height,\n                           const unsigned int patch_depth,\n                           const unsigned int nb_iterations,\n                           const unsigned int nb_randoms,\n                           const CImg<t1> &guide,\n                           const bool is_matching_score,\n                           CImg<t2> &matching_score) const {\n      if (is_empty()) return CImg<intT>::const_empty();\n      if (patch_image._spectrum!=_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"patchmatch(): Instance image and specified patch image (%u,%u,%u,%u,%p) \"\n                                    \"have different spectrums.\",\n                                    cimg_instance,\n                                    patch_image._width,patch_image._height,patch_image._depth,patch_image._spectrum,\n                                    patch_image._data);\n      if (patch_width>_width || patch_height>_height || patch_depth>_depth)\n        throw CImgArgumentException(_cimg_instance\n                                    \"patchmatch(): Specified patch size %ux%ux%u is bigger than the dimensions \"\n                                    \"of the instance image.\",\n                                    cimg_instance,patch_width,patch_height,patch_depth);\n      if (patch_width>patch_image._width || patch_height>patch_image._height || patch_depth>patch_image._depth)\n        throw CImgArgumentException(_cimg_instance\n                                    \"patchmatch(): Specified patch size %ux%ux%u is bigger than the dimensions \"\n                                    \"of the patch image image (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,patch_width,patch_height,patch_depth,\n                                    patch_image._width,patch_image._height,patch_image._depth,patch_image._spectrum,\n                                    patch_image._data);\n      const unsigned int\n        _constraint = patch_image._depth>1?3:2,\n        constraint = guide._spectrum>_constraint?_constraint:0;\n\n      if (guide &&\n          (guide._width!=_width || guide._height!=_height || guide._depth!=_depth || guide._spectrum<_constraint))\n        throw CImgArgumentException(_cimg_instance\n                                    \"patchmatch(): Specified guide (%u,%u,%u,%u,%p) has invalid dimensions \"\n                                    \"considering instance and patch image image (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    guide._width,guide._height,guide._depth,guide._spectrum,guide._data,\n                                    patch_image._width,patch_image._height,patch_image._depth,patch_image._spectrum,\n                                    patch_image._data);\n\n      CImg<intT> map(_width,_height,_depth,patch_image._depth>1?3:2);\n      CImg<floatT> score(_width,_height,_depth);\n      const int\n        psizew = (int)patch_width, psizew1 = psizew/2, psizew2 = psizew - psizew1 - 1,\n        psizeh = (int)patch_height, psizeh1 = psizeh/2, psizeh2 = psizeh - psizeh1 - 1,\n        psized = (int)patch_depth, psized1 = psized/2, psized2 = psized - psized1 - 1;\n\n      if (_depth>1 || patch_image._depth>1) { // 3d version.\n\n        // Initialize correspondence map.\n        if (guide) cimg_forXYZ(*this,x,y,z) { // User-defined initialization.\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()), cy2 = psizeh - cy1 - 1,\n              cz1 = z<=psized1?z:(z<depth() - psized2?psized1:psized + z - depth()), cz2 = psized - cz1 - 1,\n              u = std::min(std::max((int)guide(x,y,z,0),cx1),patch_image.width() - 1 - cx2),\n              v = std::min(std::max((int)guide(x,y,z,1),cy1),patch_image.height() - 1 - cy2),\n              w = std::min(std::max((int)guide(x,y,z,2),cz1),patch_image.depth() - 1 - cz2);\n            map(x,y,z,0) = u;\n            map(x,y,z,1) = v;\n            map(x,y,z,2) = w;\n            score(x,y,z) = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                       x - cx1,y - cy1,z - cz1,\n                                       u - cx1,v - cy1,w - cz1,cimg::type<float>::inf());\n          } else cimg_forXYZ(*this,x,y,z) { // Random initialization.\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()), cy2 = psizeh - cy1 - 1,\n              cz1 = z<=psized1?z:(z<depth() - psized2?psized1:psized + z - depth()), cz2 = psized - cz1 - 1,\n              u = (int)cimg::round(cimg::rand(cx1,patch_image.width() - 1 - cx2)),\n              v = (int)cimg::round(cimg::rand(cy1,patch_image.height() - 1 - cy2)),\n              w = (int)cimg::round(cimg::rand(cz1,patch_image.depth() - 1 - cz2));\n            map(x,y,z,0) = u;\n            map(x,y,z,1) = v;\n            map(x,y,z,2) = w;\n            score(x,y,z) = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                       x - cx1,y - cy1,z - cz1,\n                                       u - cx1,v - cy1,w - cz1,cimg::type<float>::inf());\n          }\n\n        // Start iteration loop.\n        for (unsigned int iter = 0; iter<nb_iterations; ++iter) {\n          cimg_abort_test();\n          const bool is_even = !(iter%2);\n\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>64 && iter<nb_iterations-2))\n          cimg_forXYZ(*this,X,Y,Z) {\n            const int\n              x = is_even?X:width() - 1 - X,\n              y = is_even?Y:height() - 1 - Y,\n              z = is_even?Z:depth() - 1 - Z;\n            if (score(x,y,z)<=1e-5 || (constraint && guide(x,y,z,constraint)!=0)) continue;\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()), cy2 = psizeh - cy1 - 1,\n              cz1 = z<=psized1?z:(z<depth() - psized2?psized1:psized + z - depth()), cz2 = psized - cz1 - 1,\n              xp = x - cx1,\n              yp = y - cy1,\n              zp = z - cz1;\n\n            // Propagation.\n            if (is_even) {\n              if (x>0) { // Compare with left neighbor.\n                const int u = map(x - 1,y,z,0), v = map(x - 1,y,z,1), w = map(x - 1,y,z,2);\n                if (u>=cx1 - 1 && u<patch_image.width() - 1 - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2 &&\n                    w>=cz1 && w<patch_image.depth() - cz2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u + 1 - cx1,v - cy1,w - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u + 1; map(x,y,z,1) = v; map(x,y,z,2) = w; }\n                }\n              }\n              if (y>0) { // Compare with up neighbor.\n                const int u = map(x,y - 1,z,0), v = map(x,y - 1,z,1), w = map(x,y - 1,z,2);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 - 1 && v<patch_image.height() - 1 - cy2 &&\n                    w>=cz1 && w<patch_image.depth() - cx2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u - cx1,v + 1 - cy1,w - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u; map(x,y,z,1) = v + 1; map(x,y,z,2) = w; }\n                }\n              }\n              if (z>0) { // Compare with backward neighbor.\n                const int u = map(x,y,z - 1,0), v = map(x,y,z - 1,1), w = map(x,y,z - 1,2);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2 &&\n                    w>=cz1 - 1 && w<patch_image.depth() - 1 - cz2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u - cx1,v - cy1,w + 1 - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u; map(x,y,z,1) = v; map(x,y,z,2) = w + 1; }\n                }\n              }\n            } else {\n              if (x<width() - 1) { // Compare with right neighbor.\n                const int u = map(x + 1,y,z,0), v = map(x + 1,y,z,1), w = map(x + 1,y,z,2);\n                if (u>=cx1 + 1 && u<patch_image.width() + 1 - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2 &&\n                    w>=cz1 && w<patch_image.depth() - cz2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u - 1 - cx1,v - cy1,w - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u - 1; map(x,y,z,1) = v; map(x,y,z,2) = w; }\n                }\n              }\n              if (y<height() - 1) { // Compare with bottom neighbor.\n                const int u = map(x,y + 1,z,0), v = map(x,y + 1,z,1), w = map(x,y + 1,z,2);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 + 1 && v<patch_image.height() + 1 - cy2 &&\n                    w>=cz1 && w<patch_image.depth() - cz2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u - cx1,v - 1 - cy1,w - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u; map(x,y,z,1) = v - 1; map(x,y,z,2) = w; }\n                }\n              }\n              if (z<depth() - 1) { // Compare with forward neighbor.\n                const int u = map(x,y,z + 1,0), v = map(x,y,z + 1,1), w = map(x,y,z + 1,2);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2 &&\n                    w>=cz1 + 1 && w<patch_image.depth() + 1 - cz2) {\n                  const float\n                    current_score = score(x,y,z),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                    xp,yp,zp,u - cx1,v - cy1,w - 1 - cz1,current_score);\n                  if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = u; map(x,y,z,1) = v; map(x,y,z,2) = w - 1; }\n                }\n              }\n            }\n\n            // Randomization.\n            const int u = map(x,y,z,0), v = map(x,y,z,1), w = map(x,y,z,2);\n            float dw = (float)patch_image.width(), dh = (float)patch_image.height(), dd = (float)patch_image.depth();\n            for (unsigned int i = 0; i<nb_randoms; ++i) {\n              const int\n                ui = (int)cimg::round(cimg::rand(std::max((float)cx1,u - dw),\n                                                 std::min(patch_image.width() - 1.0f - cx2,u + dw))),\n                vi = (int)cimg::round(cimg::rand(std::max((float)cy1,v - dh),\n                                                 std::min(patch_image.height() - 1.0f - cy2,v + dh))),\n                wi = (int)cimg::round(cimg::rand(std::max((float)cz1,w - dd),\n                                                 std::min(patch_image.depth() - 1.0f - cz2,w + dd)));\n              if (ui!=u || vi!=v || wi!=w) {\n                const float\n                  current_score = score(x,y,z),\n                  D = _patchmatch(*this,patch_image,patch_width,patch_height,patch_depth,\n                                  xp,yp,zp,ui - cx1,vi - cy1,wi - cz1,current_score);\n                if (D<current_score) { score(x,y,z) = D; map(x,y,z,0) = ui; map(x,y,z,1) = vi; map(x,y,z,2) = wi; }\n                dw = std::max(5.0f,dw*0.5f); dh = std::max(5.0f,dh*0.5f); dd = std::max(5.0f,dd*0.5f);\n              }\n            }\n          }\n        }\n\n      } else { // 2d version.\n\n        // Initialize correspondence map.\n        if (guide) cimg_forXY(*this,x,y) { // Random initialization.\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()) , cy2 = psizeh - cy1 - 1,\n              u = std::min(std::max((int)guide(x,y,0),cx1),patch_image.width() - 1 - cx2),\n              v = std::min(std::max((int)guide(x,y,1),cy1),patch_image.height() - 1 - cy2);\n            map(x,y,0) = u;\n            map(x,y,1) = v;\n            score(x,y) = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                     x - cx1,y - cy1,u - cx1,v - cy1,cimg::type<float>::inf());\n          } else cimg_forXY(*this,x,y) { // Random initialization.\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()) , cy2 = psizeh - cy1 - 1,\n              u = (int)cimg::round(cimg::rand(cx1,patch_image.width() - 1 - cx2)),\n              v = (int)cimg::round(cimg::rand(cy1,patch_image.height() - 1 - cy2));\n            map(x,y,0) = u;\n            map(x,y,1) = v;\n            score(x,y) = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                     x - cx1,y - cy1,u - cx1,v - cy1,cimg::type<float>::inf());\n          }\n\n        // Start iteration loop.\n        for (unsigned int iter = 0; iter<nb_iterations; ++iter) {\n          const bool is_even = !(iter%2);\n\n          cimg_pragma_openmp(parallel for cimg_openmp_if(_width>64 && iter<nb_iterations-2))\n          cimg_forXY(*this,X,Y) {\n            const int\n              x = is_even?X:width() - 1 - X,\n              y = is_even?Y:height() - 1 - Y;\n            if (score(x,y)<=1e-5 || (constraint && guide(x,y,constraint)!=0)) continue;\n            const int\n              cx1 = x<=psizew1?x:(x<width() - psizew2?psizew1:psizew + x - width()), cx2 = psizew - cx1 - 1,\n              cy1 = y<=psizeh1?y:(y<height() - psizeh2?psizeh1:psizeh + y - height()) , cy2 = psizeh - cy1 - 1,\n              xp = x - cx1,\n              yp = y - cy1;\n\n            // Propagation.\n            if (is_even) {\n              if (x>0) { // Compare with left neighbor.\n                const int u = map(x - 1,y,0), v = map(x - 1,y,1);\n                if (u>=cx1 - 1 && u<patch_image.width() - 1 - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2) {\n                  const float\n                    current_score = score(x,y),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                    xp,yp,u + 1 - cx1,v - cy1,current_score);\n                  if (D<current_score) { score(x,y) = D; map(x,y,0) = u + 1; map(x,y,1) = v; }\n                }\n              }\n              if (y>0) { // Compare with up neighbor.\n                const int u = map(x,y - 1,0), v = map(x,y - 1,1);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 - 1 && v<patch_image.height() - 1 - cy2) {\n                  const float\n                    current_score = score(x,y),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                    xp,yp,u - cx1,v + 1 - cy1,current_score);\n                  if (D<current_score) { score(x,y) = D; map(x,y,0) = u; map(x,y,1) = v + 1; }\n                }\n              }\n            } else {\n              if (x<width() - 1) { // Compare with right neighbor.\n                const int u = map(x + 1,y,0), v = map(x + 1,y,1);\n                if (u>=cx1 + 1 && u<patch_image.width() + 1 - cx2 &&\n                    v>=cy1 && v<patch_image.height() - cy2) {\n                  const float\n                    current_score = score(x,y),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                    xp,yp,u - 1 - cx1,v - cy1,current_score);\n                  if (D<current_score) { score(x,y) = D; map(x,y,0) = u - 1; map(x,y,1) = v; }\n                }\n              }\n              if (y<height() - 1) { // Compare with bottom neighbor.\n                const int u = map(x,y + 1,0), v = map(x,y + 1,1);\n                if (u>=cx1 && u<patch_image.width() - cx2 &&\n                    v>=cy1 + 1 && v<patch_image.height() + 1 - cy2) {\n                  const float\n                    current_score = score(x,y),\n                    D = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                    xp,yp,u - cx1,v - 1 - cy1,current_score);\n                  if (D<current_score) { score(x,y) = D; map(x,y,0) = u; map(x,y,1) = v - 1; }\n                }\n              }\n            }\n\n            // Randomization.\n            const int u = map(x,y,0), v = map(x,y,1);\n            float dw = (float)patch_image.width(), dh = (float)patch_image.height();\n            for (unsigned int i = 0; i<nb_randoms; ++i) {\n              const int\n                ui = (int)cimg::round(cimg::rand(std::max((float)cx1,u - dw),\n                                                 std::min(patch_image.width() - 1.0f - cx2,u + dw))),\n                vi = (int)cimg::round(cimg::rand(std::max((float)cy1,v - dh),\n                                                 std::min(patch_image.height() - 1.0f - cy2,v + dh)));\n              if (ui!=u || vi!=v) {\n                const float\n                  current_score = score(x,y),\n                  D = _patchmatch(*this,patch_image,patch_width,patch_height,\n                                  xp,yp,ui - cx1,vi - cy1,current_score);\n                if (D<current_score) { score(x,y) = D; map(x,y,0) = ui; map(x,y,1) = vi; }\n                dw = std::max(5.0f,dw*0.5f); dh = std::max(5.0f,dh*0.5f);\n              }\n            }\n          }\n        }\n      }\n      if (is_matching_score) score.move_to(matching_score);\n      return map;\n    }\n\n    // Compute SSD between two patches in different images.\n    static float _patchmatch(const CImg<T>& img1, const CImg<T>& img2,\n                             const unsigned int psizew, const unsigned int psizeh,\n                             const int x1, const int y1,\n                             const int x2, const int y2,\n                             const float max_ssd) { // 2d version.\n      const T *p1 = img1.data(x1,y1), *p2 = img2.data(x2,y2);\n      const ulongT\n        offx1 = (ulongT)img1._width - psizew,\n        offx2 = (ulongT)img2._width - psizew,\n        offy1 = (ulongT)img1._width*img1._height - psizeh*img1._width,\n        offy2 = (ulongT)img2._width*img2._height - psizeh*img2._width;\n      float ssd = 0;\n      cimg_forC(img1,c) {\n        for (unsigned int j = 0; j<psizeh; ++j) {\n          for (unsigned int i = 0; i<psizew; ++i)\n            ssd += cimg::sqr(*(p1++) - *(p2++));\n          if (ssd>max_ssd) return max_ssd;\n          p1+=offx1; p2+=offx2;\n        }\n        p1+=offy1; p2+=offy2;\n      }\n      return ssd;\n    }\n\n    static float _patchmatch(const CImg<T>& img1, const CImg<T>& img2,\n                             const unsigned int psizew, const unsigned int psizeh, const unsigned int psized,\n                             const int x1, const int y1, const int z1,\n                             const int x2, const int y2, const int z2,\n                             const float max_ssd) { // 3d version.\n      const T *p1 = img1.data(x1,y1,z1), *p2 = img2.data(x2,y2,z2);\n      const ulongT\n        offx1 = (ulongT)img1._width - psizew,\n        offx2 = (ulongT)img2._width - psizew,\n        offy1 = (ulongT)img1._width*img1._height - psizeh*img1._width - psizew,\n        offy2 = (ulongT)img2._width*img2._height - psizeh*img2._width - psizew,\n        offz1 = (ulongT)img1._width*img1._height*img1._depth - psized*img1._width*img1._height -\n        psizeh*img1._width - psizew,\n        offz2 = (ulongT)img2._width*img2._height*img2._depth - psized*img2._width*img2._height -\n        psizeh*img2._width - psizew;\n      float ssd = 0;\n      cimg_forC(img1,c) {\n        for (unsigned int k = 0; k<psized; ++k) {\n          for (unsigned int j = 0; j<psizeh; ++j) {\n            for (unsigned int i = 0; i<psizew; ++i)\n              ssd += cimg::sqr(*(p1++) - *(p2++));\n            if (ssd>max_ssd) return max_ssd;\n            p1+=offx1; p2+=offx2;\n          }\n          p1+=offy1; p2+=offy2;\n        }\n        p1+=offz1; p2+=offz2;\n      }\n      return ssd;\n    }\n\n    //! Compute Euclidean distance function to a specified value.\n    /**\n        \\param value Reference value.\n        \\param metric Type of metric. Can be <tt>{ 0=Chebyshev | 1=Manhattan | 2=Euclidean | 3=Squared-euclidean }</tt>.\n        \\note\n        The distance transform implementation has been submitted by A. Meijster, and implements\n        the article 'W.H. Hesselink, A. Meijster, J.B.T.M. Roerdink,\n                     \"A general algorithm for computing distance transforms in linear time.\",\n                     In: Mathematical Morphology and its Applications to Image and Signal Processing,\n                     J. Goutsias, L. Vincent, and D.S. Bloomberg (eds.), Kluwer, 2000, pp. 331-340.'\n         The submitted code has then been modified to fit CImg coding style and constraints.\n    **/\n    CImg<T>& distance(const T& value, const unsigned int metric=2) {\n      if (is_empty()) return *this;\n      if (cimg::type<Tint>::string()!=cimg::type<T>::string()) // For datatype < int.\n        return CImg<Tint>(*this,false).distance((Tint)value,metric).\n          cut((Tint)cimg::type<T>::min(),(Tint)cimg::type<T>::max()).move_to(*this);\n      bool is_value = false;\n      cimg_for(*this,ptr,T) *ptr = *ptr==value?is_value=true,(T)0:(T)std::max(0,99999999); // (avoid VC++ warning)\n      if (!is_value) return fill(cimg::type<T>::max());\n      switch (metric) {\n      case 0 : return _distance_core(_distance_sep_cdt,_distance_dist_cdt);          // Chebyshev.\n      case 1 : return _distance_core(_distance_sep_mdt,_distance_dist_mdt);          // Manhattan.\n      case 3 : return _distance_core(_distance_sep_edt,_distance_dist_edt);          // Squared Euclidean.\n      default : return _distance_core(_distance_sep_edt,_distance_dist_edt).sqrt();  // Euclidean.\n      }\n      return *this;\n    }\n\n    //! Compute distance to a specified value \\newinstance.\n    CImg<Tfloat> get_distance(const T& value, const unsigned int metric=2) const {\n      return CImg<Tfloat>(*this,false).distance((Tfloat)value,metric);\n    }\n\n    static longT _distance_sep_edt(const longT i, const longT u, const longT *const g) {\n      return (u*u - i*i + g[u] - g[i])/(2*(u - i));\n    }\n\n    static longT _distance_dist_edt(const longT x, const longT i, const longT *const g) {\n      return (x - i)*(x - i) + g[i];\n    }\n\n    static longT _distance_sep_mdt(const longT i, const longT u, const longT *const g) {\n      return (u - i<=g[u] - g[i]?999999999:(g[u] - g[i] + u + i)/2);\n    }\n\n    static longT _distance_dist_mdt(const longT x, const longT i, const longT *const g) {\n      return (x<i?i - x:x - i) + g[i];\n    }\n\n    static longT _distance_sep_cdt(const longT i, const longT u, const longT *const g) {\n      const longT h = (i + u)/2;\n      if (g[i]<=g[u]) { return h<i + g[u]?i + g[u]:h; }\n      return h<u - g[i]?h:u - g[i];\n    }\n\n    static longT _distance_dist_cdt(const longT x, const longT i, const longT *const g) {\n      const longT d = x<i?i - x:x - i;\n      return d<g[i]?g[i]:d;\n    }\n\n    static void _distance_scan(const unsigned int len,\n                               const longT *const g,\n                               longT (*const sep)(const longT, const longT, const longT *const),\n                               longT (*const f)(const longT, const longT, const longT *const),\n                               longT *const s,\n                               longT *const t,\n                               longT *const dt) {\n      longT q = s[0] = t[0] = 0;\n      for (int u = 1; u<(int)len; ++u) { // Forward scan.\n        while ((q>=0) && f(t[q],s[q],g)>f(t[q],u,g)) { --q; }\n        if (q<0) { q = 0; s[0] = u; }\n        else { const longT w = 1 + sep(s[q], u, g); if (w<(longT)len) { ++q; s[q] = u; t[q] = w; }}\n      }\n      for (int u = (int)len - 1; u>=0; --u) { dt[u] = f(u,s[q],g); if (u==t[q]) --q; } // Backward scan.\n    }\n\n    CImg<T>& _distance_core(longT (*const sep)(const longT, const longT, const longT *const),\n                            longT (*const f)(const longT, const longT, const longT *const)) {\n // Check for g++ 4.9.X, as OpenMP seems to crash for this particular function. I have no clues why.\n#define cimg_is_gcc49x (__GNUC__==4 && __GNUC_MINOR__==9)\n\n      const ulongT wh = (ulongT)_width*_height;\n#if defined(cimg_use_openmp) && !cimg_is_gcc49x\n      cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n#endif\n      cimg_forC(*this,c) {\n        CImg<longT> g(_width), dt(_width), s(_width), t(_width);\n        CImg<T> img = get_shared_channel(c);\n#if defined(cimg_use_openmp) && !cimg_is_gcc49x\n        cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_width>=512 && _height*_depth>=16)\n                           firstprivate(g,dt,s,t))\n#endif\n        cimg_forYZ(*this,y,z) { // Over X-direction.\n          cimg_forX(*this,x) g[x] = (longT)img(x,y,z,0,wh);\n          _distance_scan(_width,g,sep,f,s,t,dt);\n          cimg_forX(*this,x) img(x,y,z,0,wh) = (T)dt[x];\n        }\n        if (_height>1) {\n          g.assign(_height); dt.assign(_height); s.assign(_height); t.assign(_height);\n#if defined(cimg_use_openmp) && !cimg_is_gcc49x\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_height>=512 && _width*_depth>=16)\n                             firstprivate(g,dt,s,t))\n#endif\n          cimg_forXZ(*this,x,z) { // Over Y-direction.\n            cimg_forY(*this,y) g[y] = (longT)img(x,y,z,0,wh);\n            _distance_scan(_height,g,sep,f,s,t,dt);\n            cimg_forY(*this,y) img(x,y,z,0,wh) = (T)dt[y];\n          }\n        }\n        if (_depth>1) {\n          g.assign(_depth); dt.assign(_depth); s.assign(_depth); t.assign(_depth);\n#if defined(cimg_use_openmp) && !cimg_is_gcc49x\n          cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if(_depth>=512 && _width*_height>=16)\n                             firstprivate(g,dt,s,t))\n#endif\n          cimg_forXY(*this,x,y) { // Over Z-direction.\n            cimg_forZ(*this,z) g[z] = (longT)img(x,y,z,0,wh);\n            _distance_scan(_depth,g,sep,f,s,t,dt);\n            cimg_forZ(*this,z) img(x,y,z,0,wh) = (T)dt[z];\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Compute chamfer distance to a specified value, with a custom metric.\n    /**\n       \\param value Reference value.\n       \\param metric_mask Metric mask.\n       \\note The algorithm code has been initially proposed by A. Meijster, and modified by D. Tschumperlé.\n    **/\n    template<typename t>\n    CImg<T>& distance(const T& value, const CImg<t>& metric_mask) {\n      if (is_empty()) return *this;\n      bool is_value = false;\n      cimg_for(*this,ptr,T) *ptr = *ptr==value?is_value=true,0:(T)999999999;\n      if (!is_value) return fill(cimg::type<T>::max());\n      const ulongT wh = (ulongT)_width*_height;\n      cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2))\n      cimg_forC(*this,c) {\n        CImg<T> img = get_shared_channel(c);\n        cimg_pragma_openmp(parallel for collapse(3) cimg_openmp_if(_width*_height*_depth>=1024))\n        cimg_forXYZ(metric_mask,dx,dy,dz) {\n          const t weight = metric_mask(dx,dy,dz);\n          if (weight) {\n            for (int z = dz, nz = 0; z<depth(); ++z,++nz) { // Forward scan.\n              for (int y = dy , ny = 0; y<height(); ++y,++ny) {\n                for (int x = dx, nx = 0; x<width(); ++x,++nx) {\n                  const T dd = img(nx,ny,nz,0,wh) + weight;\n                  if (dd<img(x,y,z,0,wh)) img(x,y,z,0,wh) = dd;\n                }\n              }\n            }\n            for (int z = depth() - 1 - dz, nz = depth() - 1; z>=0; --z,--nz) { // Backward scan.\n              for (int y = height() - 1 - dy, ny = height() - 1; y>=0; --y,--ny) {\n                for (int x = width() - 1 - dx, nx = width() - 1; x>=0; --x,--nx) {\n                  const T dd = img(nx,ny,nz,0,wh) + weight;\n                  if (dd<img(x,y,z,0,wh)) img(x,y,z,0,wh) = dd;\n                }\n              }\n            }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Compute chamfer distance to a specified value, with a custom metric \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_distance(const T& value, const CImg<t>& metric_mask) const {\n      return CImg<Tfloat>(*this,false).distance(value,metric_mask);\n    }\n\n    //! Compute distance to a specified value, according to a custom metric (use dijkstra algorithm).\n    /**\n       \\param value Reference value.\n       \\param metric Field of distance potentials.\n       \\param is_high_connectivity Tells if the algorithm uses low or high connectivity.\n     **/\n    template<typename t, typename to>\n    CImg<T>& distance_dijkstra(const T& value, const CImg<t>& metric, const bool is_high_connectivity,\n                               CImg<to>& return_path) {\n      return get_distance_dijkstra(value,metric,is_high_connectivity,return_path).move_to(*this);\n    }\n\n    //! Compute distance map to a specified value, according to a custom metric (use dijkstra algorithm) \\newinstance.\n    template<typename t, typename to>\n    CImg<typename cimg::superset<t,long>::type>\n    get_distance_dijkstra(const T& value, const CImg<t>& metric, const bool is_high_connectivity,\n                          CImg<to>& return_path) const {\n      if (is_empty()) return return_path.assign();\n      if (!is_sameXYZ(metric))\n        throw CImgArgumentException(_cimg_instance\n                                    \"distance_dijkstra(): image instance and metric map (%u,%u,%u,%u) \"\n                                    \"have incompatible dimensions.\",\n                                    cimg_instance,\n                                    metric._width,metric._height,metric._depth,metric._spectrum);\n      typedef typename cimg::superset<t,long>::type td;  // Type used for computing cumulative distances.\n      CImg<td> result(_width,_height,_depth,_spectrum), Q;\n      CImg<boolT> is_queued(_width,_height,_depth,1);\n      if (return_path) return_path.assign(_width,_height,_depth,_spectrum);\n\n      cimg_forC(*this,c) {\n        const CImg<T> img = get_shared_channel(c);\n        const CImg<t> met = metric.get_shared_channel(c%metric._spectrum);\n        CImg<td> res = result.get_shared_channel(c);\n        CImg<to> path = return_path?return_path.get_shared_channel(c):CImg<to>();\n        unsigned int sizeQ = 0;\n\n        // Detect initial seeds.\n        is_queued.fill(0);\n        cimg_forXYZ(img,x,y,z) if (img(x,y,z)==value) {\n          Q._priority_queue_insert(is_queued,sizeQ,0,x,y,z);\n          res(x,y,z) = 0;\n          if (path) path(x,y,z) = (to)0;\n        }\n\n        // Start distance propagation.\n        while (sizeQ) {\n\n          // Get and remove point with minimal potential from the queue.\n          const int x = (int)Q(0,1), y = (int)Q(0,2), z = (int)Q(0,3);\n          const td P = (td)-Q(0,0);\n          Q._priority_queue_remove(sizeQ);\n\n          // Update neighbors.\n          td npot = 0;\n          if (x - 1>=0 && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x - 1,y,z) + P),x - 1,y,z)) {\n            res(x - 1,y,z) = npot; if (path) path(x - 1,y,z) = (to)2;\n          }\n          if (x + 1<width() && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x + 1,y,z) + P),x + 1,y,z)) {\n            res(x + 1,y,z) = npot; if (path) path(x + 1,y,z) = (to)1;\n          }\n          if (y - 1>=0 && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x,y - 1,z) + P),x,y - 1,z)) {\n            res(x,y - 1,z) = npot; if (path) path(x,y - 1,z) = (to)8;\n          }\n          if (y + 1<height() && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x,y + 1,z) + P),x,y + 1,z)) {\n            res(x,y + 1,z) = npot; if (path) path(x,y + 1,z) = (to)4;\n          }\n          if (z - 1>=0 && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x,y,z - 1) + P),x,y,z - 1)) {\n            res(x,y,z - 1) = npot; if (path) path(x,y,z - 1) = (to)32;\n          }\n          if (z + 1<depth() && Q._priority_queue_insert(is_queued,sizeQ,-(npot=met(x,y,z + 1) + P),x,y,z + 1)) {\n            res(x,y,z + 1) = npot; if (path) path(x,y,z + 1) = (to)16;\n          }\n\n          if (is_high_connectivity) {\n            const float sqrt2 = std::sqrt(2.0f), sqrt3 = std::sqrt(3.0f);\n\n            // Diagonal neighbors on slice z.\n            if (x - 1>=0 && y - 1>=0 &&\n                Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x - 1,y - 1,z) + P)),x - 1,y - 1,z)) {\n              res(x - 1,y - 1,z) = npot; if (path) path(x - 1,y - 1,z) = (to)10;\n            }\n            if (x + 1<width() && y - 1>=0 &&\n                Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x + 1,y - 1,z) + P)),x + 1,y - 1,z)) {\n              res(x + 1,y - 1,z) = npot; if (path) path(x + 1,y - 1,z) = (to)9;\n            }\n            if (x - 1>=0 && y + 1<height() &&\n                Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x - 1,y + 1,z) + P)),x - 1,y + 1,z)) {\n              res(x - 1,y + 1,z) = npot; if (path) path(x - 1,y + 1,z) = (to)6;\n            }\n            if (x + 1<width() && y + 1<height() &&\n                Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x + 1,y + 1,z) + P)),x + 1,y + 1,z)) {\n              res(x + 1,y + 1,z) = npot; if (path) path(x + 1,y + 1,z) = (to)5;\n            }\n\n            if (z - 1>=0) { // Diagonal neighbors on slice z - 1.\n              if (x - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x - 1,y,z - 1) + P)),x - 1,y,z - 1)) {\n                res(x - 1,y,z - 1) = npot; if (path) path(x - 1,y,z - 1) = (to)34;\n              }\n              if (x + 1<width() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x + 1,y,z - 1) + P)),x + 1,y,z - 1)) {\n                res(x + 1,y,z - 1) = npot; if (path) path(x + 1,y,z - 1) = (to)33;\n              }\n              if (y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x,y - 1,z - 1) + P)),x,y - 1,z - 1)) {\n                res(x,y - 1,z - 1) = npot; if (path) path(x,y - 1,z - 1) = (to)40;\n              }\n              if (y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x,y + 1,z - 1) + P)),x,y + 1,z - 1)) {\n                res(x,y + 1,z - 1) = npot; if (path) path(x,y + 1,z - 1) = (to)36;\n              }\n              if (x - 1>=0 && y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x - 1,y - 1,z - 1) + P)),\n                                           x - 1,y - 1,z - 1)) {\n                res(x - 1,y - 1,z - 1) = npot; if (path) path(x - 1,y - 1,z - 1) = (to)42;\n              }\n              if (x + 1<width() && y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x + 1,y - 1,z - 1) + P)),\n                                           x + 1,y - 1,z - 1)) {\n                res(x + 1,y - 1,z - 1) = npot; if (path) path(x + 1,y - 1,z - 1) = (to)41;\n              }\n              if (x - 1>=0 && y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x - 1,y + 1,z - 1) + P)),\n                                           x - 1,y + 1,z - 1)) {\n                res(x - 1,y + 1,z - 1) = npot; if (path) path(x - 1,y + 1,z - 1) = (to)38;\n              }\n              if (x + 1<width() && y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x + 1,y + 1,z - 1) + P)),\n                                           x + 1,y + 1,z - 1)) {\n                res(x + 1,y + 1,z - 1) = npot; if (path) path(x + 1,y + 1,z - 1) = (to)37;\n              }\n            }\n\n            if (z + 1<depth()) { // Diagonal neighbors on slice z + 1.\n              if (x - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x - 1,y,z + 1) + P)),x - 1,y,z + 1)) {\n                res(x - 1,y,z + 1) = npot; if (path) path(x - 1,y,z + 1) = (to)18;\n              }\n              if (x + 1<width() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x + 1,y,z + 1) + P)),x + 1,y,z + 1)) {\n                res(x + 1,y,z + 1) = npot; if (path) path(x + 1,y,z + 1) = (to)17;\n              }\n              if (y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x,y - 1,z + 1) + P)),x,y - 1,z + 1)) {\n                res(x,y - 1,z + 1) = npot; if (path) path(x,y - 1,z + 1) = (to)24;\n              }\n              if (y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt2*met(x,y + 1,z + 1) + P)),x,y + 1,z + 1)) {\n                res(x,y + 1,z + 1) = npot; if (path) path(x,y + 1,z + 1) = (to)20;\n              }\n              if (x - 1>=0 && y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x - 1,y - 1,z + 1) + P)),\n                                           x - 1,y - 1,z + 1)) {\n                res(x - 1,y - 1,z + 1) = npot; if (path) path(x - 1,y - 1,z + 1) = (to)26;\n              }\n              if (x + 1<width() && y - 1>=0 &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x + 1,y - 1,z + 1) + P)),\n                                           x + 1,y - 1,z + 1)) {\n                res(x + 1,y - 1,z + 1) = npot; if (path) path(x + 1,y - 1,z + 1) = (to)25;\n              }\n              if (x - 1>=0 && y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x - 1,y + 1,z + 1) + P)),\n                                           x - 1,y + 1,z + 1)) {\n                res(x - 1,y + 1,z + 1) = npot; if (path) path(x - 1,y + 1,z + 1) = (to)22;\n              }\n              if (x + 1<width() && y + 1<height() &&\n                  Q._priority_queue_insert(is_queued,sizeQ,-(npot=(td)(sqrt3*met(x + 1,y + 1,z + 1) + P)),\n                                           x + 1,y + 1,z + 1)) {\n                res(x + 1,y + 1,z + 1) = npot; if (path) path(x + 1,y + 1,z + 1) = (to)21;\n              }\n            }\n          }\n        }\n      }\n      return result;\n    }\n\n    //! Compute distance map to a specified value, according to a custom metric (use dijkstra algorithm). \\overloading.\n    template<typename t>\n    CImg<T>& distance_dijkstra(const T& value, const CImg<t>& metric,\n                               const bool is_high_connectivity=false) {\n      return get_distance_dijkstra(value,metric,is_high_connectivity).move_to(*this);\n    }\n\n    //! Compute distance map to a specified value, according to a custom metric (use dijkstra algorithm). \\newinstance.\n    template<typename t>\n    CImg<Tfloat> get_distance_dijkstra(const T& value, const CImg<t>& metric,\n                                       const bool is_high_connectivity=false) const {\n      CImg<T> return_path;\n      return get_distance_dijkstra(value,metric,is_high_connectivity,return_path);\n    }\n\n    //! Compute distance map to one source point, according to a custom metric (use fast marching algorithm).\n    /**\n       \\param value Reference value.\n       \\param metric Field of distance potentials.\n     **/\n    template<typename t>\n    CImg<T>& distance_eikonal(const T& value, const CImg<t>& metric) {\n      return get_distance_eikonal(value,metric).move_to(*this);\n    }\n\n    //! Compute distance map to one source point, according to a custom metric (use fast marching algorithm).\n    template<typename t>\n    CImg<Tfloat> get_distance_eikonal(const T& value, const CImg<t>& metric) const {\n      if (is_empty()) return *this;\n      if (!is_sameXYZ(metric))\n        throw CImgArgumentException(_cimg_instance\n                                    \"distance_eikonal(): image instance and metric map (%u,%u,%u,%u) have \"\n                                    \"incompatible dimensions.\",\n                                    cimg_instance,\n                                    metric._width,metric._height,metric._depth,metric._spectrum);\n      CImg<Tfloat> result(_width,_height,_depth,_spectrum,cimg::type<Tfloat>::max()), Q;\n      CImg<charT> state(_width,_height,_depth); // -1=far away, 0=narrow, 1=frozen.\n\n      cimg_pragma_openmp(parallel for cimg_openmp_if(_spectrum>=2) firstprivate(Q,state))\n      cimg_forC(*this,c) {\n        const CImg<T> img = get_shared_channel(c);\n        const CImg<t> met = metric.get_shared_channel(c%metric._spectrum);\n        CImg<Tfloat> res = result.get_shared_channel(c);\n        unsigned int sizeQ = 0;\n        state.fill(-1);\n\n        // Detect initial seeds.\n        Tfloat *ptr1 = res._data; char *ptr2 = state._data;\n        cimg_for(img,ptr0,T) { if (*ptr0==value) { *ptr1 = 0; *ptr2 = 1; } ++ptr1; ++ptr2; }\n\n        // Initialize seeds neighbors.\n        ptr2 = state._data;\n        cimg_forXYZ(img,x,y,z) if (*(ptr2++)==1) {\n          if (x - 1>=0 && state(x - 1,y,z)==-1) {\n            const Tfloat dist = res(x - 1,y,z) = __distance_eikonal(res,met(x - 1,y,z),x - 1,y,z);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x - 1,y,z);\n          }\n          if (x + 1<width() && state(x + 1,y,z)==-1) {\n            const Tfloat dist = res(x + 1,y,z) = __distance_eikonal(res,met(x + 1,y,z),x + 1,y,z);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x + 1,y,z);\n          }\n          if (y - 1>=0 && state(x,y - 1,z)==-1) {\n            const Tfloat dist = res(x,y - 1,z) = __distance_eikonal(res,met(x,y - 1,z),x,y - 1,z);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y - 1,z);\n          }\n          if (y + 1<height() && state(x,y + 1,z)==-1) {\n            const Tfloat dist = res(x,y + 1,z) = __distance_eikonal(res,met(x,y + 1,z),x,y + 1,z);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y + 1,z);\n          }\n          if (z - 1>=0 && state(x,y,z - 1)==-1) {\n            const Tfloat dist = res(x,y,z - 1) = __distance_eikonal(res,met(x,y,z - 1),x,y,z - 1);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y,z - 1);\n          }\n          if (z + 1<depth() && state(x,y,z + 1)==-1) {\n            const Tfloat dist = res(x,y,z + 1) = __distance_eikonal(res,met(x,y,z + 1),x,y,z + 1);\n            Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y,z + 1);\n          }\n        }\n\n        // Propagate front.\n        while (sizeQ) {\n          int x = -1, y = -1, z = -1;\n          while (sizeQ && x<0) {\n            x = (int)Q(0,1); y = (int)Q(0,2); z = (int)Q(0,3);\n            Q._priority_queue_remove(sizeQ);\n            if (state(x,y,z)==1) x = -1; else state(x,y,z) = 1;\n          }\n          if (x>=0) {\n            if (x - 1>=0 && state(x - 1,y,z)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x - 1,y,z),x - 1,y,z);\n              if (dist<res(x - 1,y,z)) {\n                res(x - 1,y,z) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x - 1,y,z);\n              }\n            }\n            if (x + 1<width() && state(x + 1,y,z)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x + 1,y,z),x + 1,y,z);\n              if (dist<res(x + 1,y,z)) {\n                res(x + 1,y,z) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x + 1,y,z);\n              }\n            }\n            if (y - 1>=0 && state(x,y - 1,z)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x,y - 1,z),x,y - 1,z);\n              if (dist<res(x,y - 1,z)) {\n                res(x,y - 1,z) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y - 1,z);\n              }\n            }\n            if (y + 1<height() && state(x,y + 1,z)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x,y + 1,z),x,y + 1,z);\n              if (dist<res(x,y + 1,z)) {\n                res(x,y + 1,z) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y + 1,z);\n              }\n            }\n            if (z - 1>=0 && state(x,y,z - 1)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x,y,z - 1),x,y,z - 1);\n              if (dist<res(x,y,z - 1)) {\n                res(x,y,z - 1) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y,z - 1);\n              }\n            }\n            if (z + 1<depth() && state(x,y,z + 1)!=1) {\n              const Tfloat dist = __distance_eikonal(res,met(x,y,z + 1),x,y,z + 1);\n              if (dist<res(x,y,z + 1)) {\n                res(x,y,z + 1) = dist; Q._eik_priority_queue_insert(state,sizeQ,-dist,x,y,z + 1);\n              }\n            }\n          }\n        }\n      }\n      return result;\n    }\n\n    // Locally solve eikonal equation.\n    Tfloat __distance_eikonal(const CImg<Tfloat>& res, const Tfloat P,\n                              const int x=0, const int y=0, const int z=0) const {\n      const Tfloat M = (Tfloat)cimg::type<T>::max();\n      T T1 = (T)std::min(x - 1>=0?res(x - 1,y,z):M,x + 1<width()?res(x + 1,y,z):M);\n      Tfloat root = 0;\n      if (_depth>1) { // 3d.\n        T\n          T2 = (T)std::min(y - 1>=0?res(x,y - 1,z):M,y + 1<height()?res(x,y + 1,z):M),\n          T3 = (T)std::min(z - 1>=0?res(x,y,z - 1):M,z + 1<depth()?res(x,y,z + 1):M);\n        if (T1>T2) cimg::swap(T1,T2);\n        if (T2>T3) cimg::swap(T2,T3);\n        if (T1>T2) cimg::swap(T1,T2);\n        if (P<=0) return (Tfloat)T1;\n        if (T3<M && ___distance_eikonal(3,-2*(T1 + T2 + T3),T1*T1 + T2*T2 + T3*T3 - P*P,root))\n          return std::max((Tfloat)T3,root);\n        if (T2<M && ___distance_eikonal(2,-2*(T1 + T2),T1*T1 + T2*T2 - P*P,root))\n          return std::max((Tfloat)T2,root);\n        return P + T1;\n      } else if (_height>1) { // 2d.\n        T T2 = (T)std::min(y - 1>=0?res(x,y - 1,z):M,y + 1<height()?res(x,y + 1,z):M);\n        if (T1>T2) cimg::swap(T1,T2);\n        if (P<=0) return (Tfloat)T1;\n        if (T2<M && ___distance_eikonal(2,-2*(T1 + T2),T1*T1 + T2*T2 - P*P,root))\n          return std::max((Tfloat)T2,root);\n        return P + T1;\n      } else { // 1d.\n        if (P<=0) return (Tfloat)T1;\n        return P + T1;\n      }\n      return 0;\n    }\n\n    // Find max root of a 2nd-order polynomial.\n    static bool ___distance_eikonal(const Tfloat a, const Tfloat b, const Tfloat c, Tfloat &root) {\n      const Tfloat delta = b*b - 4*a*c;\n      if (delta<0) return false;\n      root = 0.5f*(-b + std::sqrt(delta))/a;\n      return true;\n    }\n\n    // Insert new point in heap.\n    template<typename t>\n    void _eik_priority_queue_insert(CImg<charT>& state, unsigned int& siz, const t value,\n                                    const unsigned int x, const unsigned int y, const unsigned int z) {\n      if (state(x,y,z)>0) return;\n      state(x,y,z) = 0;\n      if (++siz>=_width) { if (!is_empty()) resize(_width*2,4,1,1,0); else assign(64,4); }\n      (*this)(siz - 1,0) = (T)value; (*this)(siz - 1,1) = (T)x; (*this)(siz - 1,2) = (T)y; (*this)(siz - 1,3) = (T)z;\n      for (unsigned int pos = siz - 1, par = 0; pos && value>(*this)(par=(pos + 1)/2 - 1,0); pos = par) {\n        cimg::swap((*this)(pos,0),(*this)(par,0)); cimg::swap((*this)(pos,1),(*this)(par,1));\n        cimg::swap((*this)(pos,2),(*this)(par,2)); cimg::swap((*this)(pos,3),(*this)(par,3));\n      }\n    }\n\n    //! Compute distance function to 0-valued isophotes, using the Eikonal PDE.\n    /**\n       \\param nb_iterations Number of PDE iterations.\n       \\param band_size Size of the narrow band.\n       \\param time_step Time step of the PDE iterations.\n    **/\n    CImg<T>& distance_eikonal(const unsigned int nb_iterations, const float band_size=0, const float time_step=0.5f) {\n      if (is_empty()) return *this;\n      CImg<Tfloat> velocity(*this);\n      for (unsigned int iteration = 0; iteration<nb_iterations; ++iteration) {\n        Tfloat *ptrd = velocity._data, veloc_max = 0;\n        if (_depth>1) { // 3d\n          CImg_3x3x3(I,Tfloat);\n          cimg_forC(*this,c) cimg_for3x3x3(*this,x,y,z,c,I,Tfloat) if (band_size<=0 || cimg::abs(Iccc)<band_size) {\n            const Tfloat\n              gx = (Incc - Ipcc)/2,\n              gy = (Icnc - Icpc)/2,\n              gz = (Iccn - Iccp)/2,\n              sgn = -cimg::sign(Iccc),\n              ix = gx*sgn>0?(Incc - Iccc):(Iccc - Ipcc),\n              iy = gy*sgn>0?(Icnc - Iccc):(Iccc - Icpc),\n              iz = gz*sgn>0?(Iccn - Iccc):(Iccc - Iccp),\n              ng = 1e-5f + cimg::hypot(gx,gy,gz),\n              ngx = gx/ng,\n              ngy = gy/ng,\n              ngz = gz/ng,\n              veloc = sgn*(ngx*ix + ngy*iy + ngz*iz - 1);\n            *(ptrd++) = veloc;\n            if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n          } else *(ptrd++) = 0;\n        } else { // 2d version\n          CImg_3x3(I,Tfloat);\n          cimg_forC(*this,c) cimg_for3x3(*this,x,y,0,c,I,Tfloat) if (band_size<=0 || cimg::abs(Icc)<band_size) {\n            const Tfloat\n              gx = (Inc - Ipc)/2,\n              gy = (Icn - Icp)/2,\n              sgn = -cimg::sign(Icc),\n              ix = gx*sgn>0?(Inc - Icc):(Icc - Ipc),\n              iy = gy*sgn>0?(Icn - Icc):(Icc - Icp),\n              ng = std::max((Tfloat)1e-5,cimg::hypot(gx,gy)),\n              ngx = gx/ng,\n              ngy = gy/ng,\n              veloc = sgn*(ngx*ix + ngy*iy - 1);\n            *(ptrd++) = veloc;\n            if (veloc>veloc_max) veloc_max = veloc; else if (-veloc>veloc_max) veloc_max = -veloc;\n          } else *(ptrd++) = 0;\n        }\n        if (veloc_max>0) *this+=(velocity*=time_step/veloc_max);\n      }\n      return *this;\n    }\n\n    //! Compute distance function to 0-valued isophotes, using the Eikonal PDE \\newinstance.\n    CImg<Tfloat> get_distance_eikonal(const unsigned int nb_iterations, const float band_size=0,\n                                      const float time_step=0.5f) const {\n      return CImg<Tfloat>(*this,false).distance_eikonal(nb_iterations,band_size,time_step);\n    }\n\n    //! Compute Haar multiscale wavelet transform.\n    /**\n       \\param axis Axis considered for the transform.\n       \\param invert Set inverse of direct transform.\n       \\param nb_scales Number of scales used for the transform.\n    **/\n    CImg<T>& haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) {\n      return get_haar(axis,invert,nb_scales).move_to(*this);\n    }\n\n    //! Compute Haar multiscale wavelet transform \\newinstance.\n    CImg<Tfloat> get_haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) const {\n      if (is_empty() || !nb_scales) return +*this;\n      CImg<Tfloat> res;\n      const Tfloat sqrt2 = std::sqrt(2.0f);\n      if (nb_scales==1) {\n        switch (cimg::lowercase(axis)) { // Single scale transform\n        case 'x' : {\n          const unsigned int w = _width/2;\n          if (w) {\n            if ((w%2) && w!=1)\n              throw CImgInstanceException(_cimg_instance\n                                          \"haar(): Sub-image width %u is not even.\",\n                                          cimg_instance,\n                                          w);\n\n            res.assign(_width,_height,_depth,_spectrum);\n            if (invert) cimg_forYZC(*this,y,z,c) { // Inverse transform along X\n              for (unsigned int x = 0, xw = w, x2 = 0; x<w; ++x, ++xw) {\n                const Tfloat val0 = (Tfloat)(*this)(x,y,z,c), val1 = (Tfloat)(*this)(xw,y,z,c);\n                res(x2++,y,z,c) = (val0 - val1)/sqrt2;\n                res(x2++,y,z,c) = (val0 + val1)/sqrt2;\n              }\n            } else cimg_forYZC(*this,y,z,c) { // Direct transform along X\n              for (unsigned int x = 0, xw = w, x2 = 0; x<w; ++x, ++xw) {\n                const Tfloat val0 = (Tfloat)(*this)(x2++,y,z,c), val1 = (Tfloat)(*this)(x2++,y,z,c);\n                res(x,y,z,c) = (val0 + val1)/sqrt2;\n                res(xw,y,z,c) = (val1 - val0)/sqrt2;\n              }\n            }\n          } else return *this;\n        } break;\n        case 'y' : {\n          const unsigned int h = _height/2;\n          if (h) {\n            if ((h%2) && h!=1)\n              throw CImgInstanceException(_cimg_instance\n                                          \"haar(): Sub-image height %u is not even.\",\n                                          cimg_instance,\n                                          h);\n\n            res.assign(_width,_height,_depth,_spectrum);\n            if (invert) cimg_forXZC(*this,x,z,c) { // Inverse transform along Y\n              for (unsigned int y = 0, yh = h, y2 = 0; y<h; ++y, ++yh) {\n                const Tfloat val0 = (Tfloat)(*this)(x,y,z,c), val1 = (Tfloat)(*this)(x,yh,z,c);\n                res(x,y2++,z,c) = (val0 - val1)/sqrt2;\n                res(x,y2++,z,c) = (val0 + val1)/sqrt2;\n              }\n            } else cimg_forXZC(*this,x,z,c) {\n              for (unsigned int y = 0, yh = h, y2 = 0; y<h; ++y, ++yh) { // Direct transform along Y\n                const Tfloat val0 = (Tfloat)(*this)(x,y2++,z,c), val1 = (Tfloat)(*this)(x,y2++,z,c);\n                res(x,y,z,c)  = (val0 + val1)/sqrt2;\n                res(x,yh,z,c) = (val1 - val0)/sqrt2;\n              }\n            }\n          } else return *this;\n        } break;\n        case 'z' : {\n          const unsigned int d = _depth/2;\n          if (d) {\n            if ((d%2) && d!=1)\n              throw CImgInstanceException(_cimg_instance\n                                          \"haar(): Sub-image depth %u is not even.\",\n                                          cimg_instance,\n                                          d);\n\n            res.assign(_width,_height,_depth,_spectrum);\n            if (invert) cimg_forXYC(*this,x,y,c) { // Inverse transform along Z\n              for (unsigned int z = 0, zd = d, z2 = 0; z<d; ++z, ++zd) {\n                const Tfloat val0 = (Tfloat)(*this)(x,y,z,c), val1 = (Tfloat)(*this)(x,y,zd,c);\n                res(x,y,z2++,c) = (val0 - val1)/sqrt2;\n                res(x,y,z2++,c) = (val0 + val1)/sqrt2;\n              }\n            } else cimg_forXYC(*this,x,y,c) {\n              for (unsigned int z = 0, zd = d, z2 = 0; z<d; ++z, ++zd) { // Direct transform along Z\n                const Tfloat val0 = (Tfloat)(*this)(x,y,z2++,c), val1 = (Tfloat)(*this)(x,y,z2++,c);\n                res(x,y,z,c)  = (val0 + val1)/sqrt2;\n                res(x,y,zd,c) = (val1 - val0)/sqrt2;\n              }\n            }\n          } else return *this;\n        } break;\n        default :\n          throw CImgArgumentException(_cimg_instance\n                                      \"haar(): Invalid specified axis '%c' \"\n                                      \"(should be { x | y | z }).\",\n                                      cimg_instance,\n                                      axis);\n        }\n      } else { // Multi-scale version\n        if (invert) {\n          res.assign(*this);\n          switch (cimg::lowercase(axis)) {\n          case 'x' : {\n            unsigned int w = _width;\n            for (unsigned int s = 1; w && s<nb_scales; ++s) w/=2;\n            for (w = w?w:1; w<=_width; w*=2) res.draw_image(res.get_crop(0,w - 1).get_haar('x',true,1));\n          } break;\n          case 'y' : {\n            unsigned int h = _width;\n            for (unsigned int s = 1; h && s<nb_scales; ++s) h/=2;\n            for (h = h?h:1; h<=_height; h*=2) res.draw_image(res.get_crop(0,0,_width - 1,h - 1).get_haar('y',true,1));\n          } break;\n          case 'z' : {\n            unsigned int d = _depth;\n            for (unsigned int s = 1; d && s<nb_scales; ++s) d/=2;\n            for (d = d?d:1; d<=_depth; d*=2)\n              res.draw_image(res.get_crop(0,0,0,_width - 1,_height - 1,d - 1).get_haar('z',true,1));\n          } break;\n          default :\n            throw CImgArgumentException(_cimg_instance\n                                        \"haar(): Invalid specified axis '%c' \"\n                                        \"(should be { x | y | z }).\",\n                                        cimg_instance,\n                                        axis);\n          }\n        } else { // Direct transform\n          res = get_haar(axis,false,1);\n          switch (cimg::lowercase(axis)) {\n          case 'x' : {\n            for (unsigned int s = 1, w = _width/2; w && s<nb_scales; ++s, w/=2)\n              res.draw_image(res.get_crop(0,w - 1).get_haar('x',false,1));\n          } break;\n          case 'y' : {\n            for (unsigned int s = 1, h = _height/2; h && s<nb_scales; ++s, h/=2)\n              res.draw_image(res.get_crop(0,0,_width - 1,h - 1).get_haar('y',false,1));\n          } break;\n          case 'z' : {\n            for (unsigned int s = 1, d = _depth/2; d && s<nb_scales; ++s, d/=2)\n              res.draw_image(res.get_crop(0,0,0,_width - 1,_height - 1,d - 1).get_haar('z',false,1));\n          } break;\n          default :\n            throw CImgArgumentException(_cimg_instance\n                                        \"haar(): Invalid specified axis '%c' \"\n                                        \"(should be { x | y | z }).\",\n                                        cimg_instance,\n                                        axis);\n          }\n        }\n      }\n      return res;\n    }\n\n    //! Compute Haar multiscale wavelet transform \\overloading.\n    /**\n       \\param invert Set inverse of direct transform.\n       \\param nb_scales Number of scales used for the transform.\n    **/\n    CImg<T>& haar(const bool invert=false, const unsigned int nb_scales=1) {\n      return get_haar(invert,nb_scales).move_to(*this);\n    }\n\n    //! Compute Haar multiscale wavelet transform \\newinstance.\n    CImg<Tfloat> get_haar(const bool invert=false, const unsigned int nb_scales=1) const {\n      CImg<Tfloat> res;\n      if (nb_scales==1) { // Single scale transform\n        if (_width>1) get_haar('x',invert,1).move_to(res);\n        if (_height>1) { if (res) res.haar('y',invert,1); else get_haar('y',invert,1).move_to(res); }\n        if (_depth>1) { if (res) res.haar('z',invert,1); else get_haar('z',invert,1).move_to(res); }\n        if (res) return res;\n      } else { // Multi-scale transform\n        if (invert) { // Inverse transform\n          res.assign(*this);\n          if (_width>1) {\n            if (_height>1) {\n              if (_depth>1) {\n                unsigned int w = _width, h = _height, d = _depth;\n                for (unsigned int s = 1; w && h && d && s<nb_scales; ++s) { w/=2; h/=2; d/=2; }\n                for (w = w?w:1, h = h?h:1, d = d?d:1; w<=_width && h<=_height && d<=_depth; w*=2, h*=2, d*=2)\n                  res.draw_image(res.get_crop(0,0,0,w - 1,h - 1,d - 1).get_haar(true,1));\n              } else {\n                unsigned int w = _width, h = _height;\n                for (unsigned int s = 1; w && h && s<nb_scales; ++s) { w/=2; h/=2; }\n                for (w = w?w:1, h = h?h:1; w<=_width && h<=_height; w*=2, h*=2)\n                  res.draw_image(res.get_crop(0,0,0,w - 1,h - 1,0).get_haar(true,1));\n              }\n            } else {\n              if (_depth>1) {\n                unsigned int w = _width, d = _depth;\n                for (unsigned int s = 1; w && d && s<nb_scales; ++s) { w/=2; d/=2; }\n                for (w = w?w:1, d = d?d:1; w<=_width && d<=_depth; w*=2, d*=2)\n                  res.draw_image(res.get_crop(0,0,0,w - 1,0,d - 1).get_haar(true,1));\n              } else {\n                unsigned int w = _width;\n                for (unsigned int s = 1; w && s<nb_scales; ++s) w/=2;\n                for (w = w?w:1; w<=_width; w*=2)\n                  res.draw_image(res.get_crop(0,0,0,w - 1,0,0).get_haar(true,1));\n              }\n            }\n          } else {\n            if (_height>1) {\n              if (_depth>1) {\n                unsigned int h = _height, d = _depth;\n                for (unsigned int s = 1; h && d && s<nb_scales; ++s) { h/=2; d/=2; }\n                for (h = h?h:1, d = d?d:1; h<=_height && d<=_depth; h*=2, d*=2)\n                  res.draw_image(res.get_crop(0,0,0,0,h - 1,d - 1).get_haar(true,1));\n              } else {\n                unsigned int h = _height;\n                for (unsigned int s = 1; h && s<nb_scales; ++s) h/=2;\n                for (h = h?h:1; h<=_height; h*=2)\n                  res.draw_image(res.get_crop(0,0,0,0,h - 1,0).get_haar(true,1));\n              }\n            } else {\n              if (_depth>1) {\n                unsigned int d = _depth;\n                for (unsigned int s = 1; d && s<nb_scales; ++s) d/=2;\n                for (d = d?d:1; d<=_depth; d*=2)\n                  res.draw_image(res.get_crop(0,0,0,0,0,d - 1).get_haar(true,1));\n              } else return *this;\n            }\n          }\n        } else { // Direct transform\n          res = get_haar(false,1);\n          if (_width>1) {\n            if (_height>1) {\n              if (_depth>1)\n                for (unsigned int s = 1, w = _width/2, h = _height/2, d = _depth/2; w && h && d && s<nb_scales;\n                     ++s, w/=2, h/=2, d/=2)\n                  res.draw_image(res.get_crop(0,0,0,w - 1,h - 1,d - 1).haar(false,1));\n              else for (unsigned int s = 1, w = _width/2, h = _height/2; w && h && s<nb_scales; ++s, w/=2, h/=2)\n                     res.draw_image(res.get_crop(0,0,0,w - 1,h - 1,0).haar(false,1));\n            } else {\n              if (_depth>1) for (unsigned int s = 1, w = _width/2, d = _depth/2; w && d && s<nb_scales; ++s, w/=2, d/=2)\n                              res.draw_image(res.get_crop(0,0,0,w - 1,0,d - 1).haar(false,1));\n              else for (unsigned int s = 1, w = _width/2; w && s<nb_scales; ++s, w/=2)\n                     res.draw_image(res.get_crop(0,0,0,w - 1,0,0).haar(false,1));\n            }\n          } else {\n            if (_height>1) {\n              if (_depth>1)\n                for (unsigned int s = 1, h = _height/2, d = _depth/2; h && d && s<nb_scales; ++s, h/=2, d/=2)\n                  res.draw_image(res.get_crop(0,0,0,0,h - 1,d - 1).haar(false,1));\n              else for (unsigned int s = 1, h = _height/2; h && s<nb_scales; ++s, h/=2)\n                     res.draw_image(res.get_crop(0,0,0,0,h - 1,0).haar(false,1));\n            } else {\n              if (_depth>1) for (unsigned int s = 1, d = _depth/2; d && s<nb_scales; ++s, d/=2)\n                              res.draw_image(res.get_crop(0,0,0,0,0,d - 1).haar(false,1));\n              else return *this;\n            }\n          }\n        }\n        return res;\n      }\n      return *this;\n    }\n\n    //! Compute 1d Fast Fourier Transform, along a specified axis.\n    /**\n       \\param axis Axis along which the FFT is computed.\n       \\param is_invert Tells if the forward (\\c false) or inverse (\\c true) FFT is computed.\n    **/\n    CImgList<Tfloat> get_FFT(const char axis, const bool is_invert=false) const {\n      CImgList<Tfloat> res(*this,CImg<Tfloat>());\n      CImg<Tfloat>::FFT(res[0],res[1],axis,is_invert);\n      return res;\n    }\n\n    //! Compute n-d Fast Fourier Transform.\n    /*\n      \\param is_invert Tells if the forward (\\c false) or inverse (\\c true) FFT is computed.\n    **/\n    CImgList<Tfloat> get_FFT(const bool is_invert=false) const {\n      CImgList<Tfloat> res(*this,CImg<Tfloat>());\n      CImg<Tfloat>::FFT(res[0],res[1],is_invert);\n      return res;\n    }\n\n    //! Compute 1d Fast Fourier Transform, along a specified axis.\n    /**\n       \\param[in,out] real Real part of the pixel values.\n       \\param[in,out] imag Imaginary part of the pixel values.\n       \\param axis Axis along which the FFT is computed.\n       \\param is_invert Tells if the forward (\\c false) or inverse (\\c true) FFT is computed.\n    **/\n    static void FFT(CImg<T>& real, CImg<T>& imag, const char axis, const bool is_invert=false) {\n      if (!real)\n        throw CImgInstanceException(\"CImg<%s>::FFT(): Specified real part is empty.\",\n                                    pixel_type());\n\n      if (!imag) imag.assign(real._width,real._height,real._depth,real._spectrum,(T)0);\n      if (!real.is_sameXYZC(imag))\n        throw CImgInstanceException(\"CImg<%s>::FFT(): Specified real part (%u,%u,%u,%u,%p) and \"\n                                    \"imaginary part (%u,%u,%u,%u,%p) have different dimensions.\",\n                                    pixel_type(),\n                                    real._width,real._height,real._depth,real._spectrum,real._data,\n                                    imag._width,imag._height,imag._depth,imag._spectrum,imag._data);\n#ifdef cimg_use_fftw3\n      cimg::mutex(12);\n      fftw_complex *data_in;\n      fftw_plan data_plan;\n\n      switch (cimg::lowercase(axis)) {\n      case 'x' : { // Fourier along X, using FFTW library.\n        data_in = (fftw_complex*)fftw_malloc(sizeof(fftw_complex)*real._width);\n        if (!data_in) throw CImgInstanceException(\"CImgList<%s>::FFT(): Failed to allocate memory (%s) \"\n                                                  \"for computing FFT of image (%u,%u,%u,%u) along the X-axis.\",\n                                                  pixel_type(),\n                                                  cimg::strbuffersize(sizeof(fftw_complex)*real._width),\n                                                  real._width,real._height,real._depth,real._spectrum);\n\n        data_plan = fftw_plan_dft_1d(real._width,data_in,data_in,is_invert?FFTW_BACKWARD:FFTW_FORWARD,FFTW_ESTIMATE);\n        cimg_forYZC(real,y,z,c) {\n          T *ptrr = real.data(0,y,z,c), *ptri = imag.data(0,y,z,c);\n          double *ptrd = (double*)data_in;\n          cimg_forX(real,x) { *(ptrd++) = (double)*(ptrr++); *(ptrd++) = (double)*(ptri++); }\n          fftw_execute(data_plan);\n          const unsigned int fact = real._width;\n          if (is_invert) cimg_forX(real,x) { *(--ptri) = (T)(*(--ptrd)/fact); *(--ptrr) = (T)(*(--ptrd)/fact); }\n          else cimg_forX(real,x) { *(--ptri) = (T)*(--ptrd); *(--ptrr) = (T)*(--ptrd); }\n        }\n      } break;\n      case 'y' : { // Fourier along Y, using FFTW library.\n        data_in = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * real._height);\n        if (!data_in) throw CImgInstanceException(\"CImgList<%s>::FFT(): Failed to allocate memory (%s) \"\n                                                  \"for computing FFT of image (%u,%u,%u,%u) along the Y-axis.\",\n                                                  pixel_type(),\n                                                  cimg::strbuffersize(sizeof(fftw_complex)*real._height),\n                                                  real._width,real._height,real._depth,real._spectrum);\n\n        data_plan = fftw_plan_dft_1d(real._height,data_in,data_in,is_invert?FFTW_BACKWARD:FFTW_FORWARD,FFTW_ESTIMATE);\n        const unsigned int off = real._width;\n        cimg_forXZC(real,x,z,c) {\n          T *ptrr = real.data(x,0,z,c), *ptri = imag.data(x,0,z,c);\n          double *ptrd = (double*)data_in;\n          cimg_forY(real,y) { *(ptrd++) = (double)*ptrr; *(ptrd++) = (double)*ptri; ptrr+=off; ptri+=off; }\n          fftw_execute(data_plan);\n          const unsigned int fact = real._height;\n          if (is_invert)\n            cimg_forY(real,y) { ptrr-=off; ptri-=off; *ptri = (T)(*(--ptrd)/fact); *ptrr = (T)(*(--ptrd)/fact); }\n          else cimg_forY(real,y) { ptrr-=off; ptri-=off; *ptri = (T)*(--ptrd); *ptrr = (T)*(--ptrd); }\n        }\n      } break;\n      case 'z' : { // Fourier along Z, using FFTW library.\n        data_in = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * real._depth);\n        if (!data_in) throw CImgInstanceException(\"CImgList<%s>::FFT(): Failed to allocate memory (%s) \"\n                                                  \"for computing FFT of image (%u,%u,%u,%u) along the Z-axis.\",\n                                                  pixel_type(),\n                                                  cimg::strbuffersize(sizeof(fftw_complex)*real._depth),\n                                                  real._width,real._height,real._depth,real._spectrum);\n\n        data_plan = fftw_plan_dft_1d(real._depth,data_in,data_in,is_invert?FFTW_BACKWARD:FFTW_FORWARD,FFTW_ESTIMATE);\n        const ulongT off = (ulongT)real._width*real._height;\n        cimg_forXYC(real,x,y,c) {\n          T *ptrr = real.data(x,y,0,c), *ptri = imag.data(x,y,0,c);\n          double *ptrd = (double*)data_in;\n          cimg_forZ(real,z) { *(ptrd++) = (double)*ptrr; *(ptrd++) = (double)*ptri; ptrr+=off; ptri+=off; }\n          fftw_execute(data_plan);\n          const unsigned int fact = real._depth;\n          if (is_invert)\n            cimg_forZ(real,z) { ptrr-=off; ptri-=off; *ptri = (T)(*(--ptrd)/fact); *ptrr = (T)(*(--ptrd)/fact); }\n          else cimg_forZ(real,z) { ptrr-=off; ptri-=off; *ptri = (T)*(--ptrd); *ptrr = (T)*(--ptrd); }\n        }\n      } break;\n      default :\n        throw CImgArgumentException(\"CImgList<%s>::FFT(): Invalid specified axis '%c' for real and imaginary parts \"\n                                    \"(%u,%u,%u,%u) \"\n                                    \"(should be { x | y | z }).\",\n                                    pixel_type(),axis,\n                                    real._width,real._height,real._depth,real._spectrum);\n      }\n      fftw_destroy_plan(data_plan);\n      fftw_free(data_in);\n      cimg::mutex(12,0);\n#else\n      switch (cimg::lowercase(axis)) {\n      case 'x' : { // Fourier along X, using built-in functions.\n        const unsigned int N = real._width, N2 = N>>1;\n        if (((N - 1)&N) && N!=1)\n          throw CImgInstanceException(\"CImgList<%s>::FFT(): Specified real and imaginary parts (%u,%u,%u,%u) \"\n                                      \"have non 2^N dimension along the X-axis.\",\n                                      pixel_type(),\n                                      real._width,real._height,real._depth,real._spectrum);\n\n        for (unsigned int i = 0, j = 0; i<N2; ++i) {\n          if (j>i) cimg_forYZC(real,y,z,c) {\n              cimg::swap(real(i,y,z,c),real(j,y,z,c));\n              cimg::swap(imag(i,y,z,c),imag(j,y,z,c));\n              if (j<N2) {\n                const unsigned int ri = N - 1 - i, rj = N - 1 - j;\n                cimg::swap(real(ri,y,z,c),real(rj,y,z,c));\n                cimg::swap(imag(ri,y,z,c),imag(rj,y,z,c));\n              }\n            }\n          for (unsigned int m = N, n = N2; (j+=n)>=m; j-=m, m = n, n>>=1) {}\n        }\n        for (unsigned int delta = 2; delta<=N; delta<<=1) {\n          const unsigned int delta2 = delta>>1;\n          for (unsigned int i = 0; i<N; i+=delta) {\n            float wr = 1, wi = 0;\n            const float\n              angle = (float)((is_invert?+1:-1)*2*cimg::PI/delta),\n              ca = (float)std::cos(angle),\n              sa = (float)std::sin(angle);\n            for (unsigned int k = 0; k<delta2; ++k) {\n              const unsigned int j = i + k, nj = j + delta2;\n              cimg_forYZC(real,y,z,c) {\n                T &ir = real(j,y,z,c), &ii = imag(j,y,z,c), &nir = real(nj,y,z,c), &nii = imag(nj,y,z,c);\n                const float tmpr = (float)(wr*nir - wi*nii), tmpi = (float)(wr*nii + wi*nir);\n                nir = (T)(ir - tmpr);\n                nii = (T)(ii - tmpi);\n                ir+=(T)tmpr;\n                ii+=(T)tmpi;\n              }\n              const float nwr = wr*ca-wi*sa;\n              wi = wi*ca + wr*sa;\n              wr = nwr;\n            }\n          }\n        }\n        if (is_invert) { real/=N; imag/=N; }\n      } break;\n      case 'y' : { // Fourier along Y, using built-in functions.\n        const unsigned int N = real._height, N2 = N>>1;\n        if (((N - 1)&N) && N!=1)\n          throw CImgInstanceException(\"CImgList<%s>::FFT(): Specified real and imaginary parts (%u,%u,%u,%u) \"\n                                      \"have non 2^N dimension along the Y-axis.\",\n                                      pixel_type(),\n                                      real._width,real._height,real._depth,real._spectrum);\n\n        for (unsigned int i = 0, j = 0; i<N2; ++i) {\n          if (j>i) cimg_forXZC(real,x,z,c) {\n              cimg::swap(real(x,i,z,c),real(x,j,z,c));\n              cimg::swap(imag(x,i,z,c),imag(x,j,z,c));\n              if (j<N2) {\n                const unsigned int ri = N - 1 - i, rj = N - 1 - j;\n                cimg::swap(real(x,ri,z,c),real(x,rj,z,c));\n                cimg::swap(imag(x,ri,z,c),imag(x,rj,z,c));\n              }\n            }\n          for (unsigned int m = N, n = N2; (j+=n)>=m; j-=m, m = n, n>>=1) {}\n        }\n        for (unsigned int delta = 2; delta<=N; delta<<=1) {\n          const unsigned int delta2 = (delta>>1);\n          for (unsigned int i = 0; i<N; i+=delta) {\n            float wr = 1, wi = 0;\n            const float\n              angle = (float)((is_invert?+1:-1)*2*cimg::PI/delta),\n              ca = (float)std::cos(angle),\n              sa = (float)std::sin(angle);\n            for (unsigned int k = 0; k<delta2; ++k) {\n              const unsigned int j = i + k, nj = j + delta2;\n              cimg_forXZC(real,x,z,c) {\n                T &ir = real(x,j,z,c), &ii = imag(x,j,z,c), &nir = real(x,nj,z,c), &nii = imag(x,nj,z,c);\n                const float tmpr = (float)(wr*nir - wi*nii), tmpi = (float)(wr*nii + wi*nir);\n                nir = (T)(ir - tmpr);\n                nii = (T)(ii - tmpi);\n                ir+=(T)tmpr;\n                ii+=(T)tmpi;\n              }\n              const float nwr = wr*ca-wi*sa;\n              wi = wi*ca + wr*sa;\n              wr = nwr;\n            }\n          }\n        }\n        if (is_invert) { real/=N; imag/=N; }\n      } break;\n      case 'z' : { // Fourier along Z, using built-in functions.\n        const unsigned int N = real._depth, N2 = N>>1;\n        if (((N - 1)&N) && N!=1)\n          throw CImgInstanceException(\"CImgList<%s>::FFT(): Specified real and imaginary parts (%u,%u,%u,%u) \"\n                                      \"have non 2^N dimension along the Z-axis.\",\n                                      pixel_type(),\n                                      real._width,real._height,real._depth,real._spectrum);\n\n        for (unsigned int i = 0, j = 0; i<N2; ++i) {\n          if (j>i) cimg_forXYC(real,x,y,c) {\n              cimg::swap(real(x,y,i,c),real(x,y,j,c));\n              cimg::swap(imag(x,y,i,c),imag(x,y,j,c));\n              if (j<N2) {\n                const unsigned int ri = N - 1 - i, rj = N - 1 - j;\n                cimg::swap(real(x,y,ri,c),real(x,y,rj,c));\n                cimg::swap(imag(x,y,ri,c),imag(x,y,rj,c));\n              }\n            }\n          for (unsigned int m = N, n = N2; (j+=n)>=m; j-=m, m = n, n>>=1) {}\n        }\n        for (unsigned int delta = 2; delta<=N; delta<<=1) {\n          const unsigned int delta2 = (delta>>1);\n          for (unsigned int i = 0; i<N; i+=delta) {\n            float wr = 1, wi = 0;\n            const float\n              angle = (float)((is_invert?+1:-1)*2*cimg::PI/delta),\n              ca = (float)std::cos(angle),\n              sa = (float)std::sin(angle);\n            for (unsigned int k = 0; k<delta2; ++k) {\n              const unsigned int j = i + k, nj = j + delta2;\n              cimg_forXYC(real,x,y,c) {\n                T &ir = real(x,y,j,c), &ii = imag(x,y,j,c), &nir = real(x,y,nj,c), &nii = imag(x,y,nj,c);\n                const float tmpr = (float)(wr*nir - wi*nii), tmpi = (float)(wr*nii + wi*nir);\n                nir = (T)(ir - tmpr);\n                nii = (T)(ii - tmpi);\n                ir+=(T)tmpr;\n                ii+=(T)tmpi;\n              }\n              const float nwr = wr*ca-wi*sa;\n              wi = wi*ca + wr*sa;\n              wr = nwr;\n            }\n          }\n        }\n        if (is_invert) { real/=N; imag/=N; }\n      } break;\n      default :\n        throw CImgArgumentException(\"CImgList<%s>::FFT(): Invalid specified axis '%c' for real and imaginary parts \"\n                                    \"(%u,%u,%u,%u) \"\n                                    \"(should be { x | y | z }).\",\n                                    pixel_type(),axis,\n                                    real._width,real._height,real._depth,real._spectrum);\n      }\n#endif\n    }\n\n    //! Compute n-d Fast Fourier Transform.\n    /**\n       \\param[in,out] real Real part of the pixel values.\n       \\param[in,out] imag Imaginary part of the pixel values.\n       \\param is_invert Tells if the forward (\\c false) or inverse (\\c true) FFT is computed.\n       \\param nb_threads Number of parallel threads used for the computation.\n         Use \\c 0 to set this to the number of available cpus.\n    **/\n    static void FFT(CImg<T>& real, CImg<T>& imag, const bool is_invert=false, const unsigned int nb_threads=0) {\n      if (!real)\n        throw CImgInstanceException(\"CImgList<%s>::FFT(): Empty specified real part.\",\n                                    pixel_type());\n\n      if (!imag) imag.assign(real._width,real._height,real._depth,real._spectrum,(T)0);\n      if (!real.is_sameXYZC(imag))\n        throw CImgInstanceException(\"CImgList<%s>::FFT(): Specified real part (%u,%u,%u,%u,%p) and \"\n                                    \"imaginary part (%u,%u,%u,%u,%p) have different dimensions.\",\n                                    pixel_type(),\n                                    real._width,real._height,real._depth,real._spectrum,real._data,\n                                    imag._width,imag._height,imag._depth,imag._spectrum,imag._data);\n\n#ifdef cimg_use_fftw3\n      cimg::mutex(12);\n#ifndef cimg_use_fftw3_singlethread\n      const unsigned int _nb_threads = nb_threads?nb_threads:cimg::nb_cpus();\n      static int fftw_st = fftw_init_threads();\n      cimg::unused(fftw_st);\n      fftw_plan_with_nthreads(_nb_threads);\n#else\n      cimg::unused(nb_threads);\n#endif\n      fftw_complex *data_in = (fftw_complex*)fftw_malloc(sizeof(fftw_complex)*real._width*real._height*real._depth);\n      if (!data_in) throw CImgInstanceException(\"CImgList<%s>::FFT(): Failed to allocate memory (%s) \"\n                                                \"for computing FFT of image (%u,%u,%u,%u).\",\n                                                pixel_type(),\n                                                cimg::strbuffersize(sizeof(fftw_complex)*real._width*\n                                                                    real._height*real._depth*real._spectrum),\n                                                real._width,real._height,real._depth,real._spectrum);\n\n      fftw_plan data_plan;\n      const ulongT w = (ulongT)real._width, wh = w*real._height, whd = wh*real._depth;\n      data_plan = fftw_plan_dft_3d(real._width,real._height,real._depth,data_in,data_in,\n                                   is_invert?FFTW_BACKWARD:FFTW_FORWARD,FFTW_ESTIMATE);\n      cimg_forC(real,c) {\n        T *ptrr = real.data(0,0,0,c), *ptri = imag.data(0,0,0,c);\n        double *ptrd = (double*)data_in;\n        for (unsigned int x = 0; x<real._width; ++x, ptrr-=wh - 1, ptri-=wh - 1)\n          for (unsigned int y = 0; y<real._height; ++y, ptrr-=whd-w, ptri-=whd-w)\n            for (unsigned int z = 0; z<real._depth; ++z, ptrr+=wh, ptri+=wh) {\n              *(ptrd++) = (double)*ptrr; *(ptrd++) = (double)*ptri;\n            }\n        fftw_execute(data_plan);\n        ptrd = (double*)data_in;\n        ptrr = real.data(0,0,0,c);\n        ptri = imag.data(0,0,0,c);\n        if (!is_invert) for (unsigned int x = 0; x<real._width; ++x, ptrr-=wh - 1, ptri-=wh - 1)\n          for (unsigned int y = 0; y<real._height; ++y, ptrr-=whd-w, ptri-=whd-w)\n            for (unsigned int z = 0; z<real._depth; ++z, ptrr+=wh, ptri+=wh) {\n              *ptrr = (T)*(ptrd++); *ptri = (T)*(ptrd++);\n            }\n        else for (unsigned int x = 0; x<real._width; ++x, ptrr-=wh - 1, ptri-=wh - 1)\n          for (unsigned int y = 0; y<real._height; ++y, ptrr-=whd-w, ptri-=whd-w)\n            for (unsigned int z = 0; z<real._depth; ++z, ptrr+=wh, ptri+=wh) {\n              *ptrr = (T)(*(ptrd++)/whd); *ptri = (T)(*(ptrd++)/whd);\n            }\n      }\n      fftw_destroy_plan(data_plan);\n      fftw_free(data_in);\n#ifndef cimg_use_fftw3_singlethread\n      fftw_cleanup_threads();\n#endif\n      cimg::mutex(12,0);\n#else\n      cimg::unused(nb_threads);\n      if (real._depth>1) FFT(real,imag,'z',is_invert);\n      if (real._height>1) FFT(real,imag,'y',is_invert);\n      if (real._width>1) FFT(real,imag,'x',is_invert);\n#endif\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name 3d Objects Management\n    //@{\n    //-------------------------------------\n\n    //! Shift 3d object's vertices.\n    /**\n       \\param tx X-coordinate of the 3d displacement vector.\n       \\param ty Y-coordinate of the 3d displacement vector.\n       \\param tz Z-coordinate of the 3d displacement vector.\n    **/\n    CImg<T>& shift_object3d(const float tx, const float ty=0, const float tz=0) {\n      if (_height!=3 || _depth>1 || _spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"shift_object3d(): Instance is not a set of 3d vertices.\",\n                                    cimg_instance);\n\n      get_shared_row(0)+=tx; get_shared_row(1)+=ty; get_shared_row(2)+=tz;\n      return *this;\n    }\n\n    //! Shift 3d object's vertices \\newinstance.\n    CImg<Tfloat> get_shift_object3d(const float tx, const float ty=0, const float tz=0) const {\n      return CImg<Tfloat>(*this,false).shift_object3d(tx,ty,tz);\n    }\n\n    //! Shift 3d object's vertices, so that it becomes centered.\n    /**\n       \\note The object center is computed as its barycenter.\n    **/\n    CImg<T>& shift_object3d() {\n      if (_height!=3 || _depth>1 || _spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"shift_object3d(): Instance is not a set of 3d vertices.\",\n                                    cimg_instance);\n\n      CImg<T> xcoords = get_shared_row(0), ycoords = get_shared_row(1), zcoords = get_shared_row(2);\n      float\n        xm, xM = (float)xcoords.max_min(xm),\n        ym, yM = (float)ycoords.max_min(ym),\n        zm, zM = (float)zcoords.max_min(zm);\n      xcoords-=(xm + xM)/2; ycoords-=(ym + yM)/2; zcoords-=(zm + zM)/2;\n      return *this;\n    }\n\n    //! Shift 3d object's vertices, so that it becomes centered \\newinstance.\n    CImg<Tfloat> get_shift_object3d() const {\n      return CImg<Tfloat>(*this,false).shift_object3d();\n    }\n\n    //! Resize 3d object.\n    /**\n       \\param sx Width of the 3d object's bounding box.\n       \\param sy Height of the 3d object's bounding box.\n       \\param sz Depth of the 3d object's bounding box.\n    **/\n    CImg<T>& resize_object3d(const float sx, const float sy=-100, const float sz=-100) {\n      if (_height!=3 || _depth>1 || _spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"resize_object3d(): Instance is not a set of 3d vertices.\",\n                                    cimg_instance);\n\n      CImg<T> xcoords = get_shared_row(0), ycoords = get_shared_row(1), zcoords = get_shared_row(2);\n      float\n        xm, xM = (float)xcoords.max_min(xm),\n        ym, yM = (float)ycoords.max_min(ym),\n        zm, zM = (float)zcoords.max_min(zm);\n      if (xm<xM) { if (sx>0) xcoords*=sx/(xM-xm); else xcoords*=-sx/100; }\n      if (ym<yM) { if (sy>0) ycoords*=sy/(yM-ym); else ycoords*=-sy/100; }\n      if (zm<zM) { if (sz>0) zcoords*=sz/(zM-zm); else zcoords*=-sz/100; }\n      return *this;\n    }\n\n    //! Resize 3d object \\newinstance.\n    CImg<Tfloat> get_resize_object3d(const float sx, const float sy=-100, const float sz=-100) const {\n      return CImg<Tfloat>(*this,false).resize_object3d(sx,sy,sz);\n    }\n\n    //! Resize 3d object to unit size.\n    CImg<T> resize_object3d() {\n      if (_height!=3 || _depth>1 || _spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"resize_object3d(): Instance is not a set of 3d vertices.\",\n                                    cimg_instance);\n\n      CImg<T> xcoords = get_shared_row(0), ycoords = get_shared_row(1), zcoords = get_shared_row(2);\n      float\n        xm, xM = (float)xcoords.max_min(xm),\n        ym, yM = (float)ycoords.max_min(ym),\n        zm, zM = (float)zcoords.max_min(zm);\n      const float dx = xM - xm, dy = yM - ym, dz = zM - zm, dmax = cimg::max(dx,dy,dz);\n      if (dmax>0) { xcoords/=dmax; ycoords/=dmax; zcoords/=dmax; }\n      return *this;\n    }\n\n    //! Resize 3d object to unit size \\newinstance.\n    CImg<Tfloat> get_resize_object3d() const {\n      return CImg<Tfloat>(*this,false).resize_object3d();\n    }\n\n    //! Merge two 3d objects together.\n    /**\n       \\param[in,out] primitives Primitives data of the current 3d object.\n       \\param obj_vertices Vertices data of the additional 3d object.\n       \\param obj_primitives Primitives data of the additional 3d object.\n    **/\n    template<typename tf, typename tp, typename tff>\n    CImg<T>& append_object3d(CImgList<tf>& primitives, const CImg<tp>& obj_vertices,\n                             const CImgList<tff>& obj_primitives) {\n      if (!obj_vertices || !obj_primitives) return *this;\n      if (obj_vertices._height!=3 || obj_vertices._depth>1 || obj_vertices._spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"append_object3d(): Specified vertice image (%u,%u,%u,%u,%p) is not a \"\n                                    \"set of 3d vertices.\",\n                                    cimg_instance,\n                                    obj_vertices._width,obj_vertices._height,\n                                    obj_vertices._depth,obj_vertices._spectrum,obj_vertices._data);\n\n      if (is_empty()) { primitives.assign(obj_primitives); return assign(obj_vertices); }\n      if (_height!=3 || _depth>1 || _spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"append_object3d(): Instance is not a set of 3d vertices.\",\n                                    cimg_instance);\n\n      const unsigned int P = _width;\n      append(obj_vertices,'x');\n      const unsigned int N = primitives._width;\n      primitives.insert(obj_primitives);\n      for (unsigned int i = N; i<primitives._width; ++i) {\n        CImg<tf> &p = primitives[i];\n        switch (p.size()) {\n        case 1 : p[0]+=P; break; // Point.\n        case 5 : p[0]+=P; p[1]+=P; break; // Sphere.\n        case 2 : case 6 : p[0]+=P; p[1]+=P; break; // Segment.\n        case 3 : case 9 : p[0]+=P; p[1]+=P; p[2]+=P; break; // Triangle.\n        case 4 : case 12 : p[0]+=P; p[1]+=P; p[2]+=P; p[3]+=P; break; // Rectangle.\n        }\n      }\n      return *this;\n    }\n\n    //! Texturize primitives of a 3d object.\n    /**\n       \\param[in,out] primitives Primitives data of the 3d object.\n       \\param[in,out] colors Colors data of the 3d object.\n       \\param texture Texture image to map to 3d object.\n       \\param coords Texture-mapping coordinates.\n    **/\n    template<typename tp, typename tc, typename tt, typename tx>\n    const CImg<T>& texturize_object3d(CImgList<tp>& primitives, CImgList<tc>& colors,\n                                      const CImg<tt>& texture, const CImg<tx>& coords=CImg<tx>::const_empty()) const {\n      if (is_empty()) return *this;\n      if (_height!=3)\n        throw CImgInstanceException(_cimg_instance\n                                    \"texturize_object3d(): image instance is not a set of 3d points.\",\n                                    cimg_instance);\n      if (coords && (coords._width!=_width || coords._height!=2))\n        throw CImgArgumentException(_cimg_instance\n                                    \"texturize_object3d(): Invalid specified texture coordinates (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    coords._width,coords._height,coords._depth,coords._spectrum,coords._data);\n      CImg<intT> _coords;\n      if (!coords) { // If no texture coordinates specified, do a default XY-projection.\n        _coords.assign(_width,2);\n        float\n          xmin, xmax = (float)get_shared_row(0).max_min(xmin),\n          ymin, ymax = (float)get_shared_row(1).max_min(ymin),\n          dx = xmax>xmin?xmax-xmin:1,\n          dy = ymax>ymin?ymax-ymin:1;\n        cimg_forX(*this,p) {\n          _coords(p,0) = (int)(((*this)(p,0) - xmin)*texture._width/dx);\n          _coords(p,1) = (int)(((*this)(p,1) - ymin)*texture._height/dy);\n        }\n      } else _coords = coords;\n\n      int texture_ind = -1;\n      cimglist_for(primitives,l) {\n        CImg<tp> &p = primitives[l];\n        const unsigned int siz = p.size();\n        switch (siz) {\n        case 1 : { // Point.\n          const unsigned int i0 = (unsigned int)p[0];\n          const int x0 = _coords(i0,0), y0 = _coords(i0,1);\n          texture.get_vector_at(x0<=0?0:x0>=texture.width()?texture.width() - 1:x0,\n                                y0<=0?0:y0>=texture.height()?texture.height() - 1:y0).move_to(colors[l]);\n        } break;\n        case 2 : case 6 : { // Line.\n          const unsigned int i0 = (unsigned int)p[0], i1 = (unsigned int)p[1];\n          const int\n            x0 = _coords(i0,0), y0 = _coords(i0,1),\n            x1 = _coords(i1,0), y1 = _coords(i1,1);\n          if (texture_ind<0) colors[texture_ind=l].assign(texture,false);\n          else colors[l].assign(colors[texture_ind],true);\n          CImg<tp>::vector(i0,i1,x0,y0,x1,y1).move_to(p);\n        } break;\n        case 3 : case 9 : { // Triangle.\n          const unsigned int i0 = (unsigned int)p[0], i1 = (unsigned int)p[1], i2 = (unsigned int)p[2];\n          const int\n            x0 = _coords(i0,0), y0 = _coords(i0,1),\n            x1 = _coords(i1,0), y1 = _coords(i1,1),\n            x2 = _coords(i2,0), y2 = _coords(i2,1);\n          if (texture_ind<0) colors[texture_ind=l].assign(texture,false);\n          else colors[l].assign(colors[texture_ind],true);\n          CImg<tp>::vector(i0,i1,i2,x0,y0,x1,y1,x2,y2).move_to(p);\n        } break;\n        case 4 : case 12 : { // Quadrangle.\n          const unsigned int\n            i0 = (unsigned int)p[0], i1 = (unsigned int)p[1], i2 = (unsigned int)p[2], i3 = (unsigned int)p[3];\n          const int\n            x0 = _coords(i0,0), y0 = _coords(i0,1),\n            x1 = _coords(i1,0), y1 = _coords(i1,1),\n            x2 = _coords(i2,0), y2 = _coords(i2,1),\n            x3 = _coords(i3,0), y3 = _coords(i3,1);\n          if (texture_ind<0) colors[texture_ind=l].assign(texture,false);\n          else colors[l].assign(colors[texture_ind],true);\n          CImg<tp>::vector(i0,i1,i2,i3,x0,y0,x1,y1,x2,y2,x3,y3).move_to(p);\n        } break;\n        }\n      }\n      return *this;\n    }\n\n    //! Generate a 3d elevation of the image instance.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param[out] colors The returned list of the 3d object colors.\n       \\param elevation The input elevation map.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");\n       CImgList<unsigned int> faces3d;\n       CImgList<unsigned char> colors3d;\n       const CImg<float> points3d = img.get_elevation3d(faces3d,colors3d,img.get_norm()*0.2);\n       CImg<unsigned char>().display_object3d(\"Elevation3d\",points3d,faces3d,colors3d);\n       \\endcode\n       \\image html ref_elevation3d.jpg\n    **/\n    template<typename tf, typename tc, typename te>\n    CImg<floatT> get_elevation3d(CImgList<tf>& primitives, CImgList<tc>& colors, const CImg<te>& elevation) const {\n      if (!is_sameXY(elevation) || elevation._depth>1 || elevation._spectrum>1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"get_elevation3d(): Instance and specified elevation (%u,%u,%u,%u,%p) \"\n                                    \"have incompatible dimensions.\",\n                                    cimg_instance,\n                                    elevation._width,elevation._height,elevation._depth,\n                                    elevation._spectrum,elevation._data);\n      if (is_empty()) return *this;\n      float m, M = (float)max_min(m);\n      if (M==m) ++M;\n      colors.assign();\n      const unsigned int size_x1 = _width - 1, size_y1 = _height - 1;\n      for (unsigned int y = 0; y<size_y1; ++y)\n        for (unsigned int x = 0; x<size_x1; ++x) {\n          const unsigned char\n            r = (unsigned char)(((*this)(x,y,0) - m)*255/(M-m)),\n            g = (unsigned char)(_spectrum>1?((*this)(x,y,1) - m)*255/(M-m):r),\n            b = (unsigned char)(_spectrum>2?((*this)(x,y,2) - m)*255/(M-m):_spectrum>1?0:r);\n          CImg<tc>::vector((tc)r,(tc)g,(tc)b).move_to(colors);\n        }\n      const typename CImg<te>::_functor2d_int func(elevation);\n      return elevation3d(primitives,func,0,0,_width - 1.0f,_height - 1.0f,_width,_height);\n    }\n\n    //! Generate the 3d projection planes of the image instance.\n    /**\n       \\param[out] primitives Primitives data of the returned 3d object.\n       \\param[out] colors Colors data of the returned 3d object.\n       \\param x0 X-coordinate of the projection point.\n       \\param y0 Y-coordinate of the projection point.\n       \\param z0 Z-coordinate of the projection point.\n       \\param normalize_colors Tells if the created textures have normalized colors.\n    **/\n    template<typename tf, typename tc>\n    CImg<floatT> get_projections3d(CImgList<tf>& primitives, CImgList<tc>& colors,\n                                   const unsigned int x0, const unsigned int y0, const unsigned int z0,\n                                   const bool normalize_colors=false) const {\n      float m = 0, M = 0, delta = 1;\n      if (normalize_colors) { m = (float)min_max(M); delta = 255/(m==M?1:M-m); }\n      const unsigned int\n        _x0 = (x0>=_width)?_width - 1:x0,\n        _y0 = (y0>=_height)?_height - 1:y0,\n        _z0 = (z0>=_depth)?_depth - 1:z0;\n      CImg<tc> img_xy, img_xz, img_yz;\n      if (normalize_colors) {\n        ((get_crop(0,0,_z0,0,_width - 1,_height - 1,_z0,_spectrum - 1)-=m)*=delta).move_to(img_xy);\n        ((get_crop(0,_y0,0,0,_width - 1,_y0,_depth - 1,_spectrum - 1)-=m)*=delta).resize(_width,_depth,1,-100,-1).\n          move_to(img_xz);\n        ((get_crop(_x0,0,0,0,_x0,_height - 1,_depth - 1,_spectrum - 1)-=m)*=delta).resize(_height,_depth,1,-100,-1).\n          move_to(img_yz);\n      } else {\n        get_crop(0,0,_z0,0,_width - 1,_height - 1,_z0,_spectrum - 1).move_to(img_xy);\n        get_crop(0,_y0,0,0,_width - 1,_y0,_depth - 1,_spectrum - 1).resize(_width,_depth,1,-100,-1).move_to(img_xz);\n        get_crop(_x0,0,0,0,_x0,_height - 1,_depth - 1,_spectrum - 1).resize(_height,_depth,1,-100,-1).move_to(img_yz);\n      }\n      CImg<floatT> points(12,3,1,1,\n                          0,_width - 1,_width - 1,0,   0,_width - 1,_width - 1,0, _x0,_x0,_x0,_x0,\n                          0,0,_height - 1,_height - 1, _y0,_y0,_y0,_y0,       0,_height - 1,_height - 1,0,\n                          _z0,_z0,_z0,_z0,         0,0,_depth - 1,_depth - 1, 0,0,_depth - 1,_depth - 1);\n      primitives.assign();\n      CImg<tf>::vector(0,1,2,3,0,0,img_xy._width - 1,0,img_xy._width - 1,img_xy._height - 1,0,img_xy._height - 1).\n        move_to(primitives);\n      CImg<tf>::vector(4,5,6,7,0,0,img_xz._width - 1,0,img_xz._width - 1,img_xz._height - 1,0,img_xz._height - 1).\n        move_to(primitives);\n      CImg<tf>::vector(8,9,10,11,0,0,img_yz._width - 1,0,img_yz._width - 1,img_yz._height - 1,0,img_yz._height - 1).\n        move_to(primitives);\n      colors.assign();\n      img_xy.move_to(colors);\n      img_xz.move_to(colors);\n      img_yz.move_to(colors);\n      return points;\n    }\n\n    //! Generate a isoline of the image instance as a 3d object.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param isovalue The returned list of the 3d object colors.\n       \\param size_x The number of subdivisions along the X-axis.\n       \\param size_y The number of subdisivions along the Y-axis.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       const CImg<float> img(\"reference.jpg\");\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = img.get_isoline3d(faces3d,100);\n       CImg<unsigned char>().display_object3d(\"Isoline3d\",points3d,faces3d,colors3d);\n       \\endcode\n       \\image html ref_isoline3d.jpg\n    **/\n    template<typename tf>\n    CImg<floatT> get_isoline3d(CImgList<tf>& primitives, const float isovalue,\n                               const int size_x=-100, const int size_y=-100) const {\n      if (_spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"get_isoline3d(): Instance is not a scalar image.\",\n                                    cimg_instance);\n      if (_depth>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"get_isoline3d(): Instance is not a 2d image.\",\n                                    cimg_instance);\n      primitives.assign();\n      if (is_empty()) return *this;\n      CImg<floatT> vertices;\n      if ((size_x==-100 && size_y==-100) || (size_x==width() && size_y==height())) {\n        const _functor2d_int func(*this);\n        vertices = isoline3d(primitives,func,isovalue,0,0,width() - 1.0f,height() - 1.0f,width(),height());\n      } else {\n        const _functor2d_float func(*this);\n        vertices = isoline3d(primitives,func,isovalue,0,0,width() - 1.0f,height() - 1.0f,size_x,size_y);\n      }\n      return vertices;\n    }\n\n    //! Generate an isosurface of the image instance as a 3d object.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param isovalue The returned list of the 3d object colors.\n       \\param size_x Number of subdivisions along the X-axis.\n       \\param size_y Number of subdisivions along the Y-axis.\n       \\param size_z Number of subdisivions along the Z-axis.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       const CImg<float> img = CImg<unsigned char>(\"reference.jpg\").resize(-100,-100,20);\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = img.get_isosurface3d(faces3d,100);\n       CImg<unsigned char>().display_object3d(\"Isosurface3d\",points3d,faces3d,colors3d);\n       \\endcode\n       \\image html ref_isosurface3d.jpg\n    **/\n    template<typename tf>\n    CImg<floatT> get_isosurface3d(CImgList<tf>& primitives, const float isovalue,\n                                  const int size_x=-100, const int size_y=-100, const int size_z=-100) const {\n      if (_spectrum>1)\n        throw CImgInstanceException(_cimg_instance\n                                    \"get_isosurface3d(): Instance is not a scalar image.\",\n                                    cimg_instance);\n      primitives.assign();\n      if (is_empty()) return *this;\n      CImg<floatT> vertices;\n      if ((size_x==-100 && size_y==-100 && size_z==-100) || (size_x==width() && size_y==height() && size_z==depth())) {\n        const _functor3d_int func(*this);\n        vertices = isosurface3d(primitives,func,isovalue,0,0,0,width() - 1.0f,height() - 1.0f,depth() - 1.0f,\n                                width(),height(),depth());\n      } else {\n        const _functor3d_float func(*this);\n        vertices = isosurface3d(primitives,func,isovalue,0,0,0,width() - 1.0f,height() - 1.0f,depth() - 1.0f,\n                                size_x,size_y,size_z);\n      }\n      return vertices;\n    }\n\n    //! Compute 3d elevation of a function as a 3d object.\n    /**\n       \\param[out] primitives Primitives data of the resulting 3d object.\n       \\param func Elevation function. Is of type <tt>float (*func)(const float x,const float y)</tt>.\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param size_x Resolution of the function along the X-axis.\n       \\param size_y Resolution of the function along the Y-axis.\n    **/\n    template<typename tf, typename tfunc>\n    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const tfunc& func,\n                                    const float x0, const float y0, const float x1, const float y1,\n                                    const int size_x=256, const int size_y=256) {\n      const float\n        nx0 = x0<x1?x0:x1, ny0 = y0<y1?y0:y1,\n        nx1 = x0<x1?x1:x0, ny1 = y0<y1?y1:y0;\n      const unsigned int\n        _nsize_x = (unsigned int)(size_x>=0?size_x:(nx1-nx0)*-size_x/100),\n        nsize_x = _nsize_x?_nsize_x:1, nsize_x1 = nsize_x - 1,\n        _nsize_y = (unsigned int)(size_y>=0?size_y:(ny1-ny0)*-size_y/100),\n        nsize_y = _nsize_y?_nsize_y:1, nsize_y1 = nsize_y - 1;\n      if (nsize_x<2 || nsize_y<2)\n        throw CImgArgumentException(\"CImg<%s>::elevation3d(): Invalid specified size (%d,%d).\",\n                                    pixel_type(),\n                                    nsize_x,nsize_y);\n\n      CImg<floatT> vertices(nsize_x*nsize_y,3);\n      floatT *ptr_x = vertices.data(0,0), *ptr_y = vertices.data(0,1), *ptr_z = vertices.data(0,2);\n      for (unsigned int y = 0; y<nsize_y; ++y) {\n        const float Y = ny0 + y*(ny1-ny0)/nsize_y1;\n        for (unsigned int x = 0; x<nsize_x; ++x) {\n          const float X = nx0 + x*(nx1-nx0)/nsize_x1;\n          *(ptr_x++) = (float)x;\n          *(ptr_y++) = (float)y;\n          *(ptr_z++) = (float)func(X,Y);\n        }\n      }\n      primitives.assign(nsize_x1*nsize_y1,1,4);\n      for (unsigned int p = 0, y = 0; y<nsize_y1; ++y) {\n        const unsigned int yw = y*nsize_x;\n        for (unsigned int x = 0; x<nsize_x1; ++x) {\n          const unsigned int xpyw = x + yw, xpyww = xpyw + nsize_x;\n          primitives[p++].fill(xpyw,xpyww,xpyww + 1,xpyw + 1);\n        }\n      }\n      return vertices;\n    }\n\n    //! Compute 3d elevation of a function, as a 3d object \\overloading.\n    template<typename tf>\n    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const char *const expression,\n                                    const float x0, const float y0, const float x1, const float y1,\n                                    const int size_x=256, const int size_y=256) {\n      const _functor2d_expr func(expression);\n      return elevation3d(primitives,func,x0,y0,x1,y1,size_x,size_y);\n    }\n\n    //! Compute 0-isolines of a function, as a 3d object.\n    /**\n       \\param[out] primitives Primitives data of the resulting 3d object.\n       \\param func Elevation function. Is of type <tt>float (*func)(const float x,const float y)</tt>.\n       \\param isovalue Isovalue to extract from function.\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param size_x Resolution of the function along the X-axis.\n       \\param size_y Resolution of the function along the Y-axis.\n       \\note Use the marching squares algorithm for extracting the isolines.\n     **/\n    template<typename tf, typename tfunc>\n    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,\n                                  const float x0, const float y0, const float x1, const float y1,\n                                  const int size_x=256, const int size_y=256) {\n      static const unsigned int edges[16] = { 0x0, 0x9, 0x3, 0xa, 0x6, 0xf, 0x5, 0xc, 0xc,\n                                              0x5, 0xf, 0x6, 0xa, 0x3, 0x9, 0x0 };\n      static const int segments[16][4] = { { -1,-1,-1,-1 }, { 0,3,-1,-1 }, { 0,1,-1,-1 }, { 1,3,-1,-1 },\n                                           { 1,2,-1,-1 },   { 0,1,2,3 },   { 0,2,-1,-1 }, { 2,3,-1,-1 },\n                                           { 2,3,-1,-1 },   { 0,2,-1,-1},  { 0,3,1,2 },   { 1,2,-1,-1 },\n                                           { 1,3,-1,-1 },   { 0,1,-1,-1},  { 0,3,-1,-1},  { -1,-1,-1,-1 } };\n      const unsigned int\n        _nx = (unsigned int)(size_x>=0?size_x:cimg::round((x1-x0)*-size_x/100 + 1)),\n        _ny = (unsigned int)(size_y>=0?size_y:cimg::round((y1-y0)*-size_y/100 + 1)),\n        nx = _nx?_nx:1,\n        ny = _ny?_ny:1,\n        nxm1 = nx - 1,\n        nym1 = ny - 1;\n      primitives.assign();\n      if (!nxm1 || !nym1) return CImg<floatT>();\n      const float dx = (x1 - x0)/nxm1, dy = (y1 - y0)/nym1;\n      CImgList<floatT> vertices;\n      CImg<intT> indices1(nx,1,1,2,-1), indices2(nx,1,1,2);\n      CImg<floatT> values1(nx), values2(nx);\n      float X = x0, Y = y0, nX = X + dx, nY = Y + dy;\n\n      // Fill first line with values\n      cimg_forX(values1,x) { values1(x) = (float)func(X,Y); X+=dx; }\n\n      // Run the marching squares algorithm\n      for (unsigned int yi = 0, nyi = 1; yi<nym1; ++yi, ++nyi, Y=nY, nY+=dy) {\n        X = x0; nX = X + dx;\n        indices2.fill(-1);\n        for (unsigned int xi = 0, nxi = 1; xi<nxm1; ++xi, ++nxi, X=nX, nX+=dx) {\n\n          // Determine square configuration\n          const float\n            val0 = values1(xi),\n            val1 = values1(nxi),\n            val2 = values2(nxi) = (float)func(nX,nY),\n            val3 = values2(xi) = (float)func(X,nY);\n          const unsigned int\n            configuration = (val0<isovalue?1U:0U) | (val1<isovalue?2U:0U) |\n            (val2<isovalue?4U:0U) | (val3<isovalue?8U:0U),\n            edge = edges[configuration];\n\n          // Compute intersection vertices\n          if (edge) {\n            if ((edge&1) && indices1(xi,0)<0) {\n              const float Xi = X + (isovalue-val0)*dx/(val1-val0);\n              indices1(xi,0) = vertices.width();\n              CImg<floatT>::vector(Xi,Y,0).move_to(vertices);\n            }\n            if ((edge&2) && indices1(nxi,1)<0) {\n              const float Yi = Y + (isovalue-val1)*dy/(val2-val1);\n              indices1(nxi,1) = vertices.width();\n              CImg<floatT>::vector(nX,Yi,0).move_to(vertices);\n            }\n            if ((edge&4) && indices2(xi,0)<0) {\n              const float Xi = X + (isovalue-val3)*dx/(val2-val3);\n              indices2(xi,0) = vertices.width();\n              CImg<floatT>::vector(Xi,nY,0).move_to(vertices);\n            }\n            if ((edge&8) && indices1(xi,1)<0) {\n              const float Yi = Y + (isovalue-val0)*dy/(val3-val0);\n              indices1(xi,1) = vertices.width();\n              CImg<floatT>::vector(X,Yi,0).move_to(vertices);\n            }\n\n            // Create segments\n            for (const int *segment = segments[configuration]; *segment!=-1; ) {\n              const unsigned int p0 = (unsigned int)*(segment++), p1 = (unsigned int)*(segment++);\n              const tf\n                i0 = (tf)(_isoline3d_indice(p0,indices1,indices2,xi,nxi)),\n                i1 = (tf)(_isoline3d_indice(p1,indices1,indices2,xi,nxi));\n              CImg<tf>::vector(i0,i1).move_to(primitives);\n            }\n          }\n        }\n        values1.swap(values2);\n        indices1.swap(indices2);\n      }\n      return vertices>'x';\n    }\n\n    //! Compute isolines of a function, as a 3d object \\overloading.\n    template<typename tf>\n    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,\n                                  const float x0, const float y0, const float x1, const float y1,\n                                  const int size_x=256, const int size_y=256) {\n      const _functor2d_expr func(expression);\n      return isoline3d(primitives,func,isovalue,x0,y0,x1,y1,size_x,size_y);\n    }\n\n    template<typename t>\n    static int _isoline3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,\n                                 const unsigned int x, const unsigned int nx) {\n      switch (edge) {\n      case 0 : return (int)indices1(x,0);\n      case 1 : return (int)indices1(nx,1);\n      case 2 : return (int)indices2(x,0);\n      case 3 : return (int)indices1(x,1);\n      }\n      return 0;\n    }\n\n    //! Compute isosurface of a function, as a 3d object.\n    /**\n       \\param[out] primitives Primitives data of the resulting 3d object.\n       \\param func Implicit function. Is of type <tt>float (*func)(const float x, const float y, const float z)</tt>.\n       \\param isovalue Isovalue to extract.\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param z0 Z-coordinate of the starting point.\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param z1 Z-coordinate of the ending point.\n       \\param size_x Resolution of the elevation function along the X-axis.\n       \\param size_y Resolution of the elevation function along the Y-axis.\n       \\param size_z Resolution of the elevation function along the Z-axis.\n       \\note Use the marching cubes algorithm for extracting the isosurface.\n     **/\n    template<typename tf, typename tfunc>\n    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,\n                                     const float x0, const float y0, const float z0,\n                                     const float x1, const float y1, const float z1,\n                                     const int size_x=32, const int size_y=32, const int size_z=32) {\n      static const unsigned int edges[256] = {\n        0x000, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\n        0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\n        0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\n        0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\n        0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\n        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\n        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\n        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc , 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\n        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\n        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\n        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\n        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,\n        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,\n        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,\n        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,\n        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x000\n      };\n\n      static const int triangles[256][16] = {\n        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1 },\n        { 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1 },\n        { 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1 },\n        { 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1 },\n        { 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1 },\n        { 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1 },\n        { 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1 },\n        { 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1 },\n        { 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1 },\n        { 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1 },\n        { 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1 },\n        { 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1 },\n        { 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1 },\n        { 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1 },\n        { 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1 },\n        { 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1 },\n        { 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1 },\n        { 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1 },\n        { 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1 },\n        { 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1 },\n        { 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1 },\n        { 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1 },\n        { 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1 },\n        { 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1 },\n        { 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1 },\n        { 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1 },\n        { 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1 },\n        { 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1 },\n        { 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1 },\n        { 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1 },\n        { 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1 },\n        { 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1 },\n        { 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1 },\n        { 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1 },\n        { 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1 },\n        { 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1 },\n        { 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1 },\n        { 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1 },\n        { 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1 },\n        { 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1 },\n        { 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1 },\n        { 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1 },\n        { 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1 },\n        { 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1 },\n        { 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1 },\n        { 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1 },\n        { 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1 },\n        { 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1 },\n        { 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1 },\n        { 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1 },\n        { 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1 },\n        { 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1 },\n        { 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1 },\n        { 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1 },\n        { 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1 },\n        { 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1 },\n        { 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1 },\n        { 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1 },\n        { 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1 },\n        { 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1 },\n        { 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1 },\n        { 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1 },\n        { 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1 },\n        { 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1 },\n        { 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1 },\n        { 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1 },\n        { 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1 },\n        { 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1 },\n        { 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1 },\n        { 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1 },\n        { 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1 },\n        { 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1 },\n        { 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1 },\n        { 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1 },\n        { 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1 },\n        { 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1 },\n        { 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1 },\n        { 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1 },\n        { 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1 },\n        { 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1 },\n        { 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1 },\n        { 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1 },\n        { 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1 },\n        { 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1 },\n        { 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1 },\n        { 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1 },\n        { 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1 },\n        { 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1 },\n        { 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1 },\n        { 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1 },\n        { 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1 },\n        { 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1 },\n        { 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1 },\n        { 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1 },\n        { 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1 },\n        { 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1 },\n        { 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1 },\n        { 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1 },\n        { 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1 },\n        { 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1 },\n        { 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1 },\n        { 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1 },\n        { 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1 },\n        { 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1 },\n        { 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1 },\n        { 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1 },\n        { 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1 },\n        { 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1 },\n        { 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1 },\n        { 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1 },\n        { 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },\n        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }\n      };\n\n      const unsigned int\n        _nx = (unsigned int)(size_x>=0?size_x:cimg::round((x1-x0)*-size_x/100 + 1)),\n        _ny = (unsigned int)(size_y>=0?size_y:cimg::round((y1-y0)*-size_y/100 + 1)),\n        _nz = (unsigned int)(size_z>=0?size_z:cimg::round((z1-z0)*-size_z/100 + 1)),\n        nx = _nx?_nx:1,\n        ny = _ny?_ny:1,\n        nz = _nz?_nz:1,\n        nxm1 = nx - 1,\n        nym1 = ny - 1,\n        nzm1 = nz - 1;\n      primitives.assign();\n      if (!nxm1 || !nym1 || !nzm1) return CImg<floatT>();\n      const float dx = (x1 - x0)/nxm1, dy = (y1 - y0)/nym1, dz = (z1 - z0)/nzm1;\n      CImgList<floatT> vertices;\n      CImg<intT> indices1(nx,ny,1,3,-1), indices2(indices1);\n      CImg<floatT> values1(nx,ny), values2(nx,ny);\n      float X = 0, Y = 0, Z = 0, nX = 0, nY = 0, nZ = 0;\n\n      // Fill the first plane with function values\n      Y = y0;\n      cimg_forY(values1,y) {\n        X = x0;\n        cimg_forX(values1,x) { values1(x,y) = (float)func(X,Y,z0); X+=dx; }\n        Y+=dy;\n      }\n\n      // Run Marching Cubes algorithm\n      Z = z0; nZ = Z + dz;\n      for (unsigned int zi = 0; zi<nzm1; ++zi, Z = nZ, nZ+=dz) {\n        Y = y0; nY = Y + dy;\n        indices2.fill(-1);\n        for (unsigned int yi = 0, nyi = 1; yi<nym1; ++yi, ++nyi, Y = nY, nY+=dy) {\n          X = x0; nX = X + dx;\n          for (unsigned int xi = 0, nxi = 1; xi<nxm1; ++xi, ++nxi, X = nX, nX+=dx) {\n\n            // Determine cube configuration\n            const float\n              val0 = values1(xi,yi),\n              val1 = values1(nxi,yi),\n              val2 = values1(nxi,nyi),\n              val3 = values1(xi,nyi),\n              val4 = values2(xi,yi) = (float)func(X,Y,nZ),\n              val5 = values2(nxi,yi) = (float)func(nX,Y,nZ),\n              val6 = values2(nxi,nyi) = (float)func(nX,nY,nZ),\n              val7 = values2(xi,nyi) = (float)func(X,nY,nZ);\n\n            const unsigned int configuration =\n              (val0<isovalue?1U:0U)  | (val1<isovalue?2U:0U)  | (val2<isovalue?4U:0U)  | (val3<isovalue?8U:0U) |\n              (val4<isovalue?16U:0U) | (val5<isovalue?32U:0U) | (val6<isovalue?64U:0U) | (val7<isovalue?128U:0U),\n              edge = edges[configuration];\n\n            // Compute intersection vertices\n            if (edge) {\n              if ((edge&1) && indices1(xi,yi,0)<0) {\n                const float Xi = X + (isovalue-val0)*dx/(val1-val0);\n                indices1(xi,yi,0) = vertices.width();\n                CImg<floatT>::vector(Xi,Y,Z).move_to(vertices);\n              }\n              if ((edge&2) && indices1(nxi,yi,1)<0) {\n                const float Yi = Y + (isovalue-val1)*dy/(val2-val1);\n                indices1(nxi,yi,1) = vertices.width();\n                CImg<floatT>::vector(nX,Yi,Z).move_to(vertices);\n              }\n              if ((edge&4) && indices1(xi,nyi,0)<0) {\n                const float Xi = X + (isovalue-val3)*dx/(val2-val3);\n                indices1(xi,nyi,0) = vertices.width();\n                CImg<floatT>::vector(Xi,nY,Z).move_to(vertices);\n              }\n              if ((edge&8) && indices1(xi,yi,1)<0) {\n                const float Yi = Y + (isovalue-val0)*dy/(val3-val0);\n                indices1(xi,yi,1) = vertices.width();\n                CImg<floatT>::vector(X,Yi,Z).move_to(vertices);\n              }\n              if ((edge&16) && indices2(xi,yi,0)<0) {\n                const float Xi = X + (isovalue-val4)*dx/(val5-val4);\n                indices2(xi,yi,0) = vertices.width();\n                CImg<floatT>::vector(Xi,Y,nZ).move_to(vertices);\n              }\n              if ((edge&32) && indices2(nxi,yi,1)<0) {\n                const float Yi = Y + (isovalue-val5)*dy/(val6-val5);\n                indices2(nxi,yi,1) = vertices.width();\n                CImg<floatT>::vector(nX,Yi,nZ).move_to(vertices);\n              }\n              if ((edge&64) && indices2(xi,nyi,0)<0) {\n                const float Xi = X + (isovalue-val7)*dx/(val6-val7);\n                indices2(xi,nyi,0) = vertices.width();\n                CImg<floatT>::vector(Xi,nY,nZ).move_to(vertices);\n              }\n              if ((edge&128) && indices2(xi,yi,1)<0)  {\n                const float Yi = Y + (isovalue-val4)*dy/(val7-val4);\n                indices2(xi,yi,1) = vertices.width();\n                CImg<floatT>::vector(X,Yi,nZ).move_to(vertices);\n              }\n              if ((edge&256) && indices1(xi,yi,2)<0) {\n                const float Zi = Z+ (isovalue-val0)*dz/(val4-val0);\n                indices1(xi,yi,2) = vertices.width();\n                CImg<floatT>::vector(X,Y,Zi).move_to(vertices);\n              }\n              if ((edge&512) && indices1(nxi,yi,2)<0)  {\n                const float Zi = Z + (isovalue-val1)*dz/(val5-val1);\n                indices1(nxi,yi,2) = vertices.width();\n                CImg<floatT>::vector(nX,Y,Zi).move_to(vertices);\n              }\n              if ((edge&1024) && indices1(nxi,nyi,2)<0) {\n                const float Zi = Z + (isovalue-val2)*dz/(val6-val2);\n                indices1(nxi,nyi,2) = vertices.width();\n                CImg<floatT>::vector(nX,nY,Zi).move_to(vertices);\n              }\n              if ((edge&2048) && indices1(xi,nyi,2)<0) {\n                const float Zi = Z + (isovalue-val3)*dz/(val7-val3);\n                indices1(xi,nyi,2) = vertices.width();\n                CImg<floatT>::vector(X,nY,Zi).move_to(vertices);\n              }\n\n              // Create triangles\n              for (const int *triangle = triangles[configuration]; *triangle!=-1; ) {\n                const unsigned int\n                  p0 = (unsigned int)*(triangle++),\n                  p1 = (unsigned int)*(triangle++),\n                  p2 = (unsigned int)*(triangle++);\n                const tf\n                  i0 = (tf)(_isosurface3d_indice(p0,indices1,indices2,xi,yi,nxi,nyi)),\n                  i1 = (tf)(_isosurface3d_indice(p1,indices1,indices2,xi,yi,nxi,nyi)),\n                  i2 = (tf)(_isosurface3d_indice(p2,indices1,indices2,xi,yi,nxi,nyi));\n                CImg<tf>::vector(i0,i2,i1).move_to(primitives);\n              }\n            }\n          }\n        }\n        cimg::swap(values1,values2);\n        cimg::swap(indices1,indices2);\n      }\n      return vertices>'x';\n    }\n\n    //! Compute isosurface of a function, as a 3d object \\overloading.\n    template<typename tf>\n    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,\n                                     const float x0, const float y0, const float z0,\n                                     const float x1, const float y1, const float z1,\n                                     const int dx=32, const int dy=32, const int dz=32) {\n      const _functor3d_expr func(expression);\n      return isosurface3d(primitives,func,isovalue,x0,y0,z0,x1,y1,z1,dx,dy,dz);\n    }\n\n    template<typename t>\n    static int _isosurface3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,\n                                    const unsigned int x, const unsigned int y,\n                                    const unsigned int nx, const unsigned int ny) {\n      switch (edge) {\n      case 0 : return indices1(x,y,0);\n      case 1 : return indices1(nx,y,1);\n      case 2 : return indices1(x,ny,0);\n      case 3 : return indices1(x,y,1);\n      case 4 : return indices2(x,y,0);\n      case 5 : return indices2(nx,y,1);\n      case 6 : return indices2(x,ny,0);\n      case 7 : return indices2(x,y,1);\n      case 8 : return indices1(x,y,2);\n      case 9 : return indices1(nx,y,2);\n      case 10 : return indices1(nx,ny,2);\n      case 11 : return indices1(x,ny,2);\n      }\n      return 0;\n    }\n\n    // Define functors for accessing image values (used in previous functions).\n    struct _functor2d_int {\n      const CImg<T>& ref;\n      _functor2d_int(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y) const {\n        return (float)ref((int)x,(int)y);\n      }\n    };\n\n    struct _functor2d_float {\n      const CImg<T>& ref;\n      _functor2d_float(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y) const {\n        return (float)ref._linear_atXY(x,y);\n      }\n    };\n\n    struct _functor2d_expr {\n      _cimg_math_parser *mp;\n      ~_functor2d_expr() { mp->end(); delete mp; }\n      _functor2d_expr(const char *const expr):mp(0) {\n        mp = new _cimg_math_parser(expr,0,CImg<T>::const_empty(),0);\n      }\n      float operator()(const float x, const float y) const {\n        return (float)(*mp)(x,y,0,0);\n      }\n    };\n\n    struct _functor3d_int {\n      const CImg<T>& ref;\n      _functor3d_int(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y, const float z) const {\n        return (float)ref((int)x,(int)y,(int)z);\n      }\n    };\n\n    struct _functor3d_float {\n      const CImg<T>& ref;\n      _functor3d_float(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y, const float z) const {\n        return (float)ref._linear_atXYZ(x,y,z);\n      }\n    };\n\n    struct _functor3d_expr {\n      _cimg_math_parser *mp;\n      ~_functor3d_expr() { mp->end(); delete mp; }\n      _functor3d_expr(const char *const expr):mp(0) {\n        mp = new _cimg_math_parser(expr,0,CImg<T>::const_empty(),0);\n      }\n      float operator()(const float x, const float y, const float z) const {\n        return (float)(*mp)(x,y,z,0);\n      }\n    };\n\n    struct _functor4d_int {\n      const CImg<T>& ref;\n      _functor4d_int(const CImg<T>& pref):ref(pref) {}\n      float operator()(const float x, const float y, const float z, const unsigned int c) const {\n        return (float)ref((int)x,(int)y,(int)z,c);\n      }\n    };\n\n    //! Generate a 3d box object.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param size_x The width of the box (dimension along the X-axis).\n       \\param size_y The height of the box (dimension along the Y-axis).\n       \\param size_z The depth of the box (dimension along the Z-axis).\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::box3d(faces3d,10,20,30);\n       CImg<unsigned char>().display_object3d(\"Box3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_box3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> box3d(CImgList<tf>& primitives,\n                              const float size_x=200, const float size_y=100, const float size_z=100) {\n      primitives.assign(6,1,4,1,1, 0,3,2,1, 4,5,6,7, 0,1,5,4, 3,7,6,2, 0,4,7,3, 1,2,6,5);\n      return CImg<floatT>(8,3,1,1,\n                          0.,size_x,size_x,    0.,    0.,size_x,size_x,    0.,\n                          0.,    0.,size_y,size_y,    0.,    0.,size_y,size_y,\n                          0.,    0.,    0.,    0.,size_z,size_z,size_z,size_z);\n    }\n\n    //! Generate a 3d cone.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param radius The radius of the cone basis.\n       \\param size_z The cone's height.\n       \\param subdivisions The number of basis angular subdivisions.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::cone3d(faces3d,50);\n       CImg<unsigned char>().display_object3d(\"Cone3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_cone3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> cone3d(CImgList<tf>& primitives,\n                               const float radius=50, const float size_z=100, const unsigned int subdivisions=24) {\n      primitives.assign();\n      if (!subdivisions) return CImg<floatT>();\n      CImgList<floatT> vertices(2,1,3,1,1,\n                                0.,0.,size_z,\n                                0.,0.,0.);\n      for (float delta = 360.0f/subdivisions, angle = 0; angle<360; angle+=delta) {\n        const float a = (float)(angle*cimg::PI/180);\n        CImg<floatT>::vector((float)(radius*std::cos(a)),(float)(radius*std::sin(a)),0).move_to(vertices);\n      }\n      const unsigned int nbr = vertices._width - 2;\n      for (unsigned int p = 0; p<nbr; ++p) {\n        const unsigned int curr = 2 + p, next = 2 + ((p + 1)%nbr);\n        CImg<tf>::vector(1,next,curr).move_to(primitives);\n        CImg<tf>::vector(0,curr,next).move_to(primitives);\n      }\n      return vertices>'x';\n    }\n\n    //! Generate a 3d cylinder.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param radius The radius of the cylinder basis.\n       \\param size_z The cylinder's height.\n       \\param subdivisions The number of basis angular subdivisions.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::cylinder3d(faces3d,50);\n       CImg<unsigned char>().display_object3d(\"Cylinder3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_cylinder3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> cylinder3d(CImgList<tf>& primitives,\n                                   const float radius=50, const float size_z=100, const unsigned int subdivisions=24) {\n      primitives.assign();\n      if (!subdivisions) return CImg<floatT>();\n      CImgList<floatT> vertices(2,1,3,1,1,\n                                0.,0.,0.,\n                                0.,0.,size_z);\n      for (float delta = 360.0f/subdivisions, angle = 0; angle<360; angle+=delta) {\n        const float a = (float)(angle*cimg::PI/180);\n        CImg<floatT>::vector((float)(radius*std::cos(a)),(float)(radius*std::sin(a)),0.0f).move_to(vertices);\n        CImg<floatT>::vector((float)(radius*std::cos(a)),(float)(radius*std::sin(a)),size_z).move_to(vertices);\n      }\n      const unsigned int nbr = (vertices._width - 2)/2;\n      for (unsigned int p = 0; p<nbr; ++p) {\n        const unsigned int curr = 2 + 2*p, next = 2 + (2*((p + 1)%nbr));\n        CImg<tf>::vector(0,next,curr).move_to(primitives);\n        CImg<tf>::vector(1,curr + 1,next + 1).move_to(primitives);\n        CImg<tf>::vector(curr,next,next + 1,curr + 1).move_to(primitives);\n      }\n      return vertices>'x';\n    }\n\n    //! Generate a 3d torus.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param radius1 The large radius.\n       \\param radius2 The small radius.\n       \\param subdivisions1 The number of angular subdivisions for the large radius.\n       \\param subdivisions2 The number of angular subdivisions for the small radius.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::torus3d(faces3d,20,4);\n       CImg<unsigned char>().display_object3d(\"Torus3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_torus3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> torus3d(CImgList<tf>& primitives,\n                                const float radius1=100, const float radius2=30,\n                                const unsigned int subdivisions1=24, const unsigned int subdivisions2=12) {\n      primitives.assign();\n      if (!subdivisions1 || !subdivisions2) return CImg<floatT>();\n      CImgList<floatT> vertices;\n      for (unsigned int v = 0; v<subdivisions1; ++v) {\n        const float\n          beta = (float)(v*2*cimg::PI/subdivisions1),\n          xc = radius1*(float)std::cos(beta),\n          yc = radius1*(float)std::sin(beta);\n        for (unsigned int u = 0; u<subdivisions2; ++u) {\n          const float\n            alpha = (float)(u*2*cimg::PI/subdivisions2),\n            x = xc + radius2*(float)(std::cos(alpha)*std::cos(beta)),\n            y = yc + radius2*(float)(std::cos(alpha)*std::sin(beta)),\n            z = radius2*(float)std::sin(alpha);\n          CImg<floatT>::vector(x,y,z).move_to(vertices);\n        }\n      }\n      for (unsigned int vv = 0; vv<subdivisions1; ++vv) {\n        const unsigned int nv = (vv + 1)%subdivisions1;\n        for (unsigned int uu = 0; uu<subdivisions2; ++uu) {\n          const unsigned int nu = (uu + 1)%subdivisions2, svv = subdivisions2*vv, snv = subdivisions2*nv;\n          CImg<tf>::vector(svv + nu,svv + uu,snv + uu,snv + nu).move_to(primitives);\n        }\n      }\n      return vertices>'x';\n    }\n\n    //! Generate a 3d XY-plane.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param size_x The width of the plane (dimension along the X-axis).\n       \\param size_y The height of the plane (dimensions along the Y-axis).\n       \\param subdivisions_x The number of planar subdivisions along the X-axis.\n       \\param subdivisions_y The number of planar subdivisions along the Y-axis.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::plane3d(faces3d,100,50);\n       CImg<unsigned char>().display_object3d(\"Plane3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_plane3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> plane3d(CImgList<tf>& primitives,\n                                const float size_x=100, const float size_y=100,\n                                const unsigned int subdivisions_x=10, const unsigned int subdivisions_y=10) {\n      primitives.assign();\n      if (!subdivisions_x || !subdivisions_y) return CImg<floatT>();\n      CImgList<floatT> vertices;\n      const unsigned int w = subdivisions_x + 1, h = subdivisions_y + 1;\n      const float fx = (float)size_x/w, fy = (float)size_y/h;\n      for (unsigned int y = 0; y<h; ++y) for (unsigned int x = 0; x<w; ++x)\n        CImg<floatT>::vector(fx*x,fy*y,0).move_to(vertices);\n      for (unsigned int y = 0; y<subdivisions_y; ++y) for (unsigned int x = 0; x<subdivisions_x; ++x) {\n        const int off1 = x + y*w, off2 = x + 1 + y*w, off3 = x + 1 + (y + 1)*w, off4 = x + (y + 1)*w;\n        CImg<tf>::vector(off1,off4,off3,off2).move_to(primitives);\n      }\n      return vertices>'x';\n    }\n\n    //! Generate a 3d sphere.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param radius The radius of the sphere (dimension along the X-axis).\n       \\param subdivisions The number of recursive subdivisions from an initial icosahedron.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> points3d = CImg<float>::sphere3d(faces3d,100,4);\n       CImg<unsigned char>().display_object3d(\"Sphere3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_sphere3d.jpg\n    **/\n    template<typename tf>\n    static CImg<floatT> sphere3d(CImgList<tf>& primitives,\n                                 const float radius=50, const unsigned int subdivisions=3) {\n\n      // Create initial icosahedron\n      primitives.assign();\n      const double tmp = (1 + std::sqrt(5.0f))/2, a = 1.0/std::sqrt(1 + tmp*tmp), b = tmp*a;\n      CImgList<floatT> vertices(12,1,3,1,1, b,a,0.0, -b,a,0.0, -b,-a,0.0, b,-a,0.0, a,0.0,b, a,0.0,-b,\n                                -a,0.0,-b, -a,0.0,b, 0.0,b,a, 0.0,-b,a, 0.0,-b,-a, 0.0,b,-a);\n      primitives.assign(20,1,3,1,1, 4,8,7, 4,7,9, 5,6,11, 5,10,6, 0,4,3, 0,3,5, 2,7,1, 2,1,6,\n                        8,0,11, 8,11,1, 9,10,3, 9,2,10, 8,4,0, 11,0,5, 4,9,3,\n                        5,3,10, 7,8,1, 6,1,11, 7,2,9, 6,10,2);\n      // edge - length/2\n      float he = (float)a;\n\n      // Recurse subdivisions\n      for (unsigned int i = 0; i<subdivisions; ++i) {\n        const unsigned int L = primitives._width;\n        he/=2;\n        const float he2 = he*he;\n        for (unsigned int l = 0; l<L; ++l) {\n          const unsigned int\n            p0 = (unsigned int)primitives(0,0), p1 = (unsigned int)primitives(0,1), p2 = (unsigned int)primitives(0,2);\n          const float\n            x0 = vertices(p0,0), y0 = vertices(p0,1), z0 = vertices(p0,2),\n            x1 = vertices(p1,0), y1 = vertices(p1,1), z1 = vertices(p1,2),\n            x2 = vertices(p2,0), y2 = vertices(p2,1), z2 = vertices(p2,2),\n            tnx0 = (x0 + x1)/2, tny0 = (y0 + y1)/2, tnz0 = (z0 + z1)/2,\n            nn0 = cimg::hypot(tnx0,tny0,tnz0),\n            tnx1 = (x0 + x2)/2, tny1 = (y0 + y2)/2, tnz1 = (z0 + z2)/2,\n            nn1 = cimg::hypot(tnx1,tny1,tnz1),\n            tnx2 = (x1 + x2)/2, tny2 = (y1 + y2)/2, tnz2 = (z1 + z2)/2,\n            nn2 = cimg::hypot(tnx2,tny2,tnz2),\n            nx0 = tnx0/nn0, ny0 = tny0/nn0, nz0 = tnz0/nn0,\n            nx1 = tnx1/nn1, ny1 = tny1/nn1, nz1 = tnz1/nn1,\n            nx2 = tnx2/nn2, ny2 = tny2/nn2, nz2 = tnz2/nn2;\n          int i0 = -1, i1 = -1, i2 = -1;\n          cimglist_for(vertices,p) {\n            const float x = (float)vertices(p,0), y = (float)vertices(p,1), z = (float)vertices(p,2);\n            if (cimg::sqr(x-nx0) + cimg::sqr(y-ny0) + cimg::sqr(z-nz0)<he2) i0 = p;\n            if (cimg::sqr(x-nx1) + cimg::sqr(y-ny1) + cimg::sqr(z-nz1)<he2) i1 = p;\n            if (cimg::sqr(x-nx2) + cimg::sqr(y-ny2) + cimg::sqr(z-nz2)<he2) i2 = p;\n          }\n          if (i0<0) { CImg<floatT>::vector(nx0,ny0,nz0).move_to(vertices); i0 = vertices.width() - 1; }\n          if (i1<0) { CImg<floatT>::vector(nx1,ny1,nz1).move_to(vertices); i1 = vertices.width() - 1; }\n          if (i2<0) { CImg<floatT>::vector(nx2,ny2,nz2).move_to(vertices); i2 = vertices.width() - 1; }\n          primitives.remove(0);\n          CImg<tf>::vector(p0,i0,i1).move_to(primitives);\n          CImg<tf>::vector((tf)i0,(tf)p1,(tf)i2).move_to(primitives);\n          CImg<tf>::vector((tf)i1,(tf)i2,(tf)p2).move_to(primitives);\n          CImg<tf>::vector((tf)i1,(tf)i0,(tf)i2).move_to(primitives);\n        }\n      }\n      return (vertices>'x')*=radius;\n    }\n\n    //! Generate a 3d ellipsoid.\n    /**\n       \\param[out] primitives The returned list of the 3d object primitives\n                              (template type \\e tf should be at least \\e unsigned \\e int).\n       \\param tensor The tensor which gives the shape and size of the ellipsoid.\n       \\param subdivisions The number of recursive subdivisions from an initial stretched icosahedron.\n       \\return The N vertices (xi,yi,zi) of the 3d object as a Nx3 CImg<float> image (0<=i<=N - 1).\n       \\par Example\n       \\code\n       CImgList<unsigned int> faces3d;\n       const CImg<float> tensor = CImg<float>::diagonal(10,7,3),\n                         points3d = CImg<float>::ellipsoid3d(faces3d,tensor,4);\n       CImg<unsigned char>().display_object3d(\"Ellipsoid3d\",points3d,faces3d);\n       \\endcode\n       \\image html ref_ellipsoid3d.jpg\n    **/\n    template<typename tf, typename t>\n    static CImg<floatT> ellipsoid3d(CImgList<tf>& primitives,\n                                    const CImg<t>& tensor, const unsigned int subdivisions=3) {\n      primitives.assign();\n      if (!subdivisions) return CImg<floatT>();\n      CImg<floatT> S, V;\n      tensor.symmetric_eigen(S,V);\n      const float orient =\n        (V(0,1)*V(1,2) - V(0,2)*V(1,1))*V(2,0) +\n        (V(0,2)*V(1,0) - V(0,0)*V(1,2))*V(2,1) +\n        (V(0,0)*V(1,1) - V(0,1)*V(1,0))*V(2,2);\n      if (orient<0) { V(2,0) = -V(2,0); V(2,1) = -V(2,1); V(2,2) = -V(2,2); }\n      const float l0 = S[0], l1 = S[1], l2 = S[2];\n      CImg<floatT> vertices = sphere3d(primitives,1.0,subdivisions);\n      vertices.get_shared_row(0)*=l0;\n      vertices.get_shared_row(1)*=l1;\n      vertices.get_shared_row(2)*=l2;\n      return V*vertices;\n    }\n\n    //! Convert 3d object into a CImg3d representation.\n    /**\n       \\param primitives Primitives data of the 3d object.\n       \\param colors Colors data of the 3d object.\n       \\param opacities Opacities data of the 3d object.\n       \\param full_check Tells if full checking of the 3d object must be performed.\n    **/\n    template<typename tp, typename tc, typename to>\n    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives,\n                              const CImgList<tc>& colors,\n                              const to& opacities,\n                              const bool full_check=true) {\n      return get_object3dtoCImg3d(primitives,colors,opacities,full_check).move_to(*this);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    template<typename tp, typename tc>\n    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives,\n                              const CImgList<tc>& colors,\n                              const bool full_check=true) {\n      return get_object3dtoCImg3d(primitives,colors,full_check).move_to(*this);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    template<typename tp>\n    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives,\n                              const bool full_check=true) {\n      return get_object3dtoCImg3d(primitives,full_check).move_to(*this);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    CImg<T>& object3dtoCImg3d(const bool full_check=true) {\n      return get_object3dtoCImg3d(full_check).move_to(*this);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\newinstance.\n    template<typename tp, typename tc, typename to>\n    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives,\n                                      const CImgList<tc>& colors,\n                                      const to& opacities,\n                                      const bool full_check=true) const {\n      CImg<charT> error_message(1024);\n      if (!is_object3d(primitives,colors,opacities,full_check,error_message))\n        throw CImgInstanceException(_cimg_instance\n                                    \"object3dtoCImg3d(): Invalid specified 3d object (%u,%u) (%s).\",\n                                    cimg_instance,_width,primitives._width,error_message.data());\n      CImg<floatT> res(1,_size_object3dtoCImg3d(primitives,colors,opacities));\n      float *ptrd = res._data;\n\n      // Put magick number.\n      *(ptrd++) = 'C' + 0.5f; *(ptrd++) = 'I' + 0.5f; *(ptrd++) = 'm' + 0.5f;\n      *(ptrd++) = 'g' + 0.5f; *(ptrd++) = '3' + 0.5f; *(ptrd++) = 'd' + 0.5f;\n\n      // Put number of vertices and primitives.\n      *(ptrd++) = cimg::uint2float(_width);\n      *(ptrd++) = cimg::uint2float(primitives._width);\n\n      // Put vertex data.\n      if (is_empty() || !primitives) return res;\n      const T *ptrx = data(0,0), *ptry = data(0,1), *ptrz = data(0,2);\n      cimg_forX(*this,p) {\n        *(ptrd++) = (float)*(ptrx++);\n        *(ptrd++) = (float)*(ptry++);\n        *(ptrd++) = (float)*(ptrz++);\n      }\n\n      // Put primitive data.\n      cimglist_for(primitives,p) {\n        *(ptrd++) = (float)primitives[p].size();\n        const tp *ptrp = primitives[p]._data;\n        cimg_foroff(primitives[p],i) *(ptrd++) = cimg::uint2float((unsigned int)*(ptrp++));\n      }\n\n      // Put color/texture data.\n      const unsigned int csiz = std::min(colors._width,primitives._width);\n      for (int c = 0; c<(int)csiz; ++c) {\n        const CImg<tc>& color = colors[c];\n        const tc *ptrc = color._data;\n        if (color.size()==3) { *(ptrd++) = (float)*(ptrc++); *(ptrd++) = (float)*(ptrc++); *(ptrd++) = (float)*ptrc; }\n        else {\n          *(ptrd++) = -128.0f;\n          int shared_ind = -1;\n          if (color.is_shared()) for (int i = 0; i<c; ++i) if (ptrc==colors[i]._data) { shared_ind = i; break; }\n          if (shared_ind<0) {\n            *(ptrd++) = (float)color._width;\n            *(ptrd++) = (float)color._height;\n            *(ptrd++) = (float)color._spectrum;\n            cimg_foroff(color,l) *(ptrd++) = (float)*(ptrc++);\n          } else {\n            *(ptrd++) = (float)shared_ind;\n            *(ptrd++) = 0;\n            *(ptrd++) = 0;\n          }\n        }\n      }\n      const int csiz2 = primitives.width() - colors.width();\n      for (int c = 0; c<csiz2; ++c) { *(ptrd++) = 200.0f; *(ptrd++) = 200.0f; *(ptrd++) = 200.0f; }\n\n      // Put opacity data.\n      ptrd = _object3dtoCImg3d(opacities,ptrd);\n      const float *ptre = res.end();\n      while (ptrd<ptre) *(ptrd++) = 1.0f;\n      return res;\n    }\n\n    template<typename to>\n    float* _object3dtoCImg3d(const CImgList<to>& opacities, float *ptrd) const {\n      cimglist_for(opacities,o) {\n        const CImg<to>& opacity = opacities[o];\n        const to *ptro = opacity._data;\n        if (opacity.size()==1) *(ptrd++) = (float)*ptro;\n        else {\n          *(ptrd++) = -128.0f;\n          int shared_ind = -1;\n          if (opacity.is_shared()) for (int i = 0; i<o; ++i) if (ptro==opacities[i]._data) { shared_ind = i; break; }\n          if (shared_ind<0) {\n            *(ptrd++) = (float)opacity._width;\n            *(ptrd++) = (float)opacity._height;\n            *(ptrd++) = (float)opacity._spectrum;\n            cimg_foroff(opacity,l) *(ptrd++) = (float)*(ptro++);\n          } else {\n            *(ptrd++) = (float)shared_ind;\n            *(ptrd++) = 0;\n            *(ptrd++) = 0;\n          }\n        }\n      }\n      return ptrd;\n    }\n\n    template<typename to>\n    float* _object3dtoCImg3d(const CImg<to>& opacities, float *ptrd) const {\n      const to *ptro = opacities._data;\n      cimg_foroff(opacities,o) *(ptrd++) = (float)*(ptro++);\n      return ptrd;\n    }\n\n    template<typename tp, typename tc, typename to>\n    unsigned int _size_object3dtoCImg3d(const CImgList<tp>& primitives,\n                                        const CImgList<tc>& colors,\n                                        const CImgList<to>& opacities) const {\n      unsigned int siz = 8U + 3*_width;\n      cimglist_for(primitives,p) siz+=primitives[p].size() + 1;\n      for (int c = std::min(primitives.width(),colors.width()) - 1; c>=0; --c) {\n        if (colors[c].is_shared()) siz+=4;\n        else { const unsigned int csiz = colors[c].size(); siz+=(csiz!=3)?4 + csiz:3; }\n      }\n      if (colors._width<primitives._width) siz+=3*(primitives._width - colors._width);\n      cimglist_for(opacities,o) {\n        if (opacities[o].is_shared()) siz+=4;\n        else { const unsigned int osiz = opacities[o].size(); siz+=(osiz!=1)?4 + osiz:1; }\n      }\n      siz+=primitives._width - opacities._width;\n      return siz;\n    }\n\n    template<typename tp, typename tc, typename to>\n    unsigned int _size_object3dtoCImg3d(const CImgList<tp>& primitives,\n                                        const CImgList<tc>& colors,\n                                        const CImg<to>& opacities) const {\n      unsigned int siz = 8U + 3*_width;\n      cimglist_for(primitives,p) siz+=primitives[p].size() + 1;\n      for (int c = std::min(primitives.width(),colors.width()) - 1; c>=0; --c) {\n        const unsigned int csiz = colors[c].size(); siz+=(csiz!=3)?4 + csiz:3;\n      }\n      if (colors._width<primitives._width) siz+=3*(primitives._width - colors._width);\n      siz+=primitives.size();\n      cimg::unused(opacities);\n      return siz;\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    template<typename tp, typename tc>\n    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives,\n                                      const CImgList<tc>& colors,\n                                      const bool full_check=true) const {\n      CImgList<T> opacities;\n      return get_object3dtoCImg3d(primitives,colors,opacities,full_check);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    template<typename tp>\n    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives,\n                                      const bool full_check=true) const {\n      CImgList<T> colors, opacities;\n      return get_object3dtoCImg3d(primitives,colors,opacities,full_check);\n    }\n\n    //! Convert 3d object into a CImg3d representation \\overloading.\n    CImg<floatT> get_object3dtoCImg3d(const bool full_check=true) const {\n      CImgList<T> opacities, colors;\n      CImgList<uintT> primitives(width(),1,1,1,1);\n      cimglist_for(primitives,p) primitives(p,0) = p;\n      return get_object3dtoCImg3d(primitives,colors,opacities,full_check);\n    }\n\n    //! Convert CImg3d representation into a 3d object.\n    /**\n       \\param[out] primitives Primitives data of the 3d object.\n       \\param[out] colors Colors data of the 3d object.\n       \\param[out] opacities Opacities data of the 3d object.\n       \\param full_check Tells if full checking of the 3d object must be performed.\n    **/\n    template<typename tp, typename tc, typename to>\n    CImg<T>& CImg3dtoobject3d(CImgList<tp>& primitives,\n                              CImgList<tc>& colors,\n                              CImgList<to>& opacities,\n                              const bool full_check=true) {\n      return get_CImg3dtoobject3d(primitives,colors,opacities,full_check).move_to(*this);\n    }\n\n    //! Convert CImg3d representation into a 3d object \\newinstance.\n    template<typename tp, typename tc, typename to>\n    CImg<T> get_CImg3dtoobject3d(CImgList<tp>& primitives,\n                                 CImgList<tc>& colors,\n                                 CImgList<to>& opacities,\n                                 const bool full_check=true) const {\n      CImg<charT> error_message(1024);\n      if (!is_CImg3d(full_check,error_message))\n        throw CImgInstanceException(_cimg_instance\n                                    \"CImg3dtoobject3d(): image instance is not a CImg3d (%s).\",\n                                    cimg_instance,error_message.data());\n      const T *ptrs = _data + 6;\n      const unsigned int\n        nb_points = cimg::float2uint((float)*(ptrs++)),\n        nb_primitives = cimg::float2uint((float)*(ptrs++));\n      const CImg<T> points = CImg<T>(ptrs,3,nb_points,1,1,true).get_transpose();\n      ptrs+=3*nb_points;\n      primitives.assign(nb_primitives);\n      cimglist_for(primitives,p) {\n        const unsigned int nb_inds = (unsigned int)*(ptrs++);\n        primitives[p].assign(1,nb_inds);\n        tp *ptrp = primitives[p]._data;\n        for (unsigned int i = 0; i<nb_inds; ++i) *(ptrp++) = (tp)cimg::float2uint((float)*(ptrs++));\n      }\n      colors.assign(nb_primitives);\n      cimglist_for(colors,c) {\n        if (*ptrs==(T)-128) {\n          ++ptrs;\n          const unsigned int w = (unsigned int)*(ptrs++), h = (unsigned int)*(ptrs++), s = (unsigned int)*(ptrs++);\n          if (!h && !s) colors[c].assign(colors[w],true);\n          else { colors[c].assign(ptrs,w,h,1,s,false); ptrs+=w*h*s; }\n        } else { colors[c].assign(ptrs,1,1,1,3,false); ptrs+=3; }\n      }\n      opacities.assign(nb_primitives);\n      cimglist_for(opacities,o) {\n        if (*ptrs==(T)-128) {\n          ++ptrs;\n          const unsigned int w = (unsigned int)*(ptrs++), h = (unsigned int)*(ptrs++), s = (unsigned int)*(ptrs++);\n          if (!h && !s) opacities[o].assign(opacities[w],true);\n          else { opacities[o].assign(ptrs,w,h,1,s,false); ptrs+=w*h*s; }\n        } else opacities[o].assign(1,1,1,1,*(ptrs++));\n      }\n      return points;\n    }\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Drawing Functions\n    //@{\n    //---------------------------\n\n#define cimg_init_scanline(color,opacity) \\\n    const float _sc_nopacity = cimg::abs((float)opacity), _sc_copacity = 1 - std::max((float)opacity,0.0f); \\\n    const ulongT _sc_whd = (ulongT)_width*_height*_depth\n\n#define cimg_draw_scanline(x0,x1,y,color,opacity,brightness) \\\n    _draw_scanline(x0,x1,y,color,opacity,brightness,_sc_nopacity,_sc_copacity,_sc_whd)\n\n    // [internal] The following _draw_scanline() routines are *non user-friendly functions*,\n    // used only for internal purpose.\n    // Pre-requisites: x0<=x1, y-coordinate is valid, col is valid.\n    template<typename tc>\n    CImg<T>& _draw_scanline(const int x0, const int x1, const int y,\n                            const tc *const color, const float opacity,\n                            const float brightness,\n                            const float nopacity, const float copacity, const ulongT whd) {\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const int nx0 = x0>0?x0:0, nx1 = x1<width()?x1:width() - 1, dx = nx1 - nx0;\n      if (dx>=0) {\n        const tc *col = color;\n        const ulongT off = whd - dx - 1;\n        T *ptrd = data(nx0,y);\n        if (opacity>=1) { // ** Opaque drawing **\n          if (brightness==1) { // Brightness==1\n            if (sizeof(T)!=1) cimg_forC(*this,c) {\n                const T val = (T)*(col++);\n                for (int x = dx; x>=0; --x) *(ptrd++) = val;\n                ptrd+=off;\n              } else cimg_forC(*this,c) {\n                const T val = (T)*(col++);\n                std::memset(ptrd,(int)val,dx + 1);\n                ptrd+=whd;\n              }\n          } else if (brightness<1) { // Brightness<1\n            if (sizeof(T)!=1) cimg_forC(*this,c) {\n                const T val = (T)(*(col++)*brightness);\n                for (int x = dx; x>=0; --x) *(ptrd++) = val;\n                ptrd+=off;\n              } else cimg_forC(*this,c) {\n                const T val = (T)(*(col++)*brightness);\n                std::memset(ptrd,(int)val,dx + 1);\n                ptrd+=whd;\n              }\n          } else { // Brightness>1\n            if (sizeof(T)!=1) cimg_forC(*this,c) {\n                const T val = (T)((2-brightness)**(col++) + (brightness - 1)*maxval);\n                for (int x = dx; x>=0; --x) *(ptrd++) = val;\n                ptrd+=off;\n              } else cimg_forC(*this,c) {\n                const T val = (T)((2-brightness)**(col++) + (brightness - 1)*maxval);\n                std::memset(ptrd,(int)val,dx + 1);\n                ptrd+=whd;\n              }\n          }\n        } else { // ** Transparent drawing **\n          if (brightness==1) { // Brightness==1\n            cimg_forC(*this,c) {\n              const Tfloat val = *(col++)*nopacity;\n              for (int x = dx; x>=0; --x) { *ptrd = (T)(val + *ptrd*copacity); ++ptrd; }\n              ptrd+=off;\n            }\n          } else if (brightness<=1) { // Brightness<1\n            cimg_forC(*this,c) {\n              const Tfloat val = *(col++)*brightness*nopacity;\n              for (int x = dx; x>=0; --x) { *ptrd = (T)(val + *ptrd*copacity); ++ptrd; }\n              ptrd+=off;\n            }\n          } else { // Brightness>1\n            cimg_forC(*this,c) {\n              const Tfloat val = ((2-brightness)**(col++) + (brightness - 1)*maxval)*nopacity;\n              for (int x = dx; x>=0; --x) { *ptrd = (T)(val + *ptrd*copacity); ++ptrd; }\n              ptrd+=off;\n            }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a 3d point.\n    /**\n       \\param x0 X-coordinate of the point.\n       \\param y0 Y-coordinate of the point.\n       \\param z0 Z-coordinate of the point.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\note\n       - To set pixel values without clipping needs, you should use the faster CImg::operator()() function.\n       \\par Example:\n       \\code\n       CImg<unsigned char> img(100,100,1,3,0);\n       const unsigned char color[] = { 255,128,64 };\n       img.draw_point(50,50,color);\n       \\endcode\n    **/\n    template<typename tc>\n    CImg<T>& draw_point(const int x0, const int y0, const int z0,\n                        const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_point(): Specified color is (null).\",\n                                    cimg_instance);\n      if (x0>=0 && y0>=0 && z0>=0 && x0<width() && y0<height() && z0<depth()) {\n        const ulongT whd = (ulongT)_width*_height*_depth;\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        T *ptrd = data(x0,y0,z0,0);\n        const tc *col = color;\n        if (opacity>=1) cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=whd; }\n        else cimg_forC(*this,c) { *ptrd = (T)(*(col++)*nopacity + *ptrd*copacity); ptrd+=whd; }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d point \\simplification.\n    template<typename tc>\n    CImg<T>& draw_point(const int x0, const int y0,\n                        const tc *const color, const float opacity=1) {\n      return draw_point(x0,y0,0,color,opacity);\n    }\n\n    // Draw a points cloud.\n    /**\n       \\param points Image of vertices coordinates.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_point(const CImg<t>& points,\n                        const tc *const color, const float opacity=1) {\n      if (is_empty() || !points) return *this;\n      switch (points._height) {\n      case 0 : case 1 :\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_point(): Invalid specified point set (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    points._width,points._height,points._depth,points._spectrum,points._data);\n      case 2 : {\n        cimg_forX(points,i) draw_point((int)points(i,0),(int)points(i,1),color,opacity);\n      } break;\n      default : {\n        cimg_forX(points,i) draw_point((int)points(i,0),(int)points(i,1),(int)points(i,2),color,opacity);\n      }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d line.\n    /**\n       \\param x0 X-coordinate of the starting line point.\n       \\param y0 Y-coordinate of the starting line point.\n       \\param x1 X-coordinate of the ending line point.\n       \\param y1 Y-coordinate of the ending line point.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if a reinitialization of the hash state must be done.\n       \\note\n       - Line routine uses Bresenham's algorithm.\n       - Set \\p init_hatch = false to draw consecutive hatched segments without breaking the line pattern.\n       \\par Example:\n       \\code\n       CImg<unsigned char> img(100,100,1,3,0);\n       const unsigned char color[] = { 255,128,64 };\n        img.draw_line(40,40,80,70,color);\n       \\endcode\n    **/\n    template<typename tc>\n    CImg<T>& draw_line(const int x0, const int y0,\n                       const int x1, const int y1,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Specified color is (null).\",\n                                    cimg_instance);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      const bool xdir = x0<x1, ydir = y0<y1;\n      int\n        nx0 = x0, nx1 = x1, ny0 = y0, ny1 = y1,\n        &xleft = xdir?nx0:nx1, &yleft = xdir?ny0:ny1,\n        &xright = xdir?nx1:nx0, &yright = xdir?ny1:ny0,\n        &xup = ydir?nx0:nx1, &yup = ydir?ny0:ny1,\n        &xdown = ydir?nx1:nx0, &ydown = ydir?ny1:ny0;\n      if (xright<0 || xleft>=width()) return *this;\n      if (xleft<0) { yleft-=(int)((float)xleft*((float)yright - yleft)/((float)xright - xleft)); xleft = 0; }\n      if (xright>=width()) {\n        yright-=(int)(((float)xright - width())*((float)yright - yleft)/((float)xright - xleft));\n        xright = width() - 1;\n      }\n      if (ydown<0 || yup>=height()) return *this;\n      if (yup<0) { xup-=(int)((float)yup*((float)xdown - xup)/((float)ydown - yup)); yup = 0; }\n      if (ydown>=height()) {\n        xdown-=(int)(((float)ydown - height())*((float)xdown - xup)/((float)ydown - yup));\n        ydown = height() - 1;\n      }\n      T *ptrd0 = data(nx0,ny0);\n      int dx = xright - xleft, dy = ydown - yup;\n      const bool steep = dy>dx;\n      if (steep) cimg::swap(nx0,ny0,nx1,ny1,dx,dy);\n      const longT\n        offx = (longT)(nx0<nx1?1:-1)*(steep?width():1),\n        offy = (longT)(ny0<ny1?1:-1)*(steep?1:width());\n      const ulongT wh = (ulongT)_width*_height;\n      if (opacity>=1) {\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            T *ptrd = ptrd0; const tc* col = color;\n            cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=wh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          T *ptrd = ptrd0; const tc* col = color; cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=wh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            T *ptrd = ptrd0; const tc* col = color;\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**(col++) + *ptrd*copacity); ptrd+=wh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          T *ptrd = ptrd0; const tc* col = color;\n          cimg_forC(*this,c) { *ptrd = (T)(nopacity**(col++) + *ptrd*copacity); ptrd+=wh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d line, with z-buffering.\n    /**\n       \\param zbuffer Zbuffer image.\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param z0 Z-coordinate of the starting point\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param z1 Z-coordinate of the ending point.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if a reinitialization of the hash state must be done.\n    **/\n    template<typename tz,typename tc>\n    CImg<T>& draw_line(CImg<tz>& zbuffer,\n                       const int x0, const int y0, const float z0,\n                       const int x1, const int y1, const float z1,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Specified color is (null).\",\n                                    cimg_instance);\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      const bool xdir = x0<x1, ydir = y0<y1;\n      int\n        nx0 = x0, nx1 = x1, ny0 = y0, ny1 = y1,\n        &xleft = xdir?nx0:nx1, &yleft = xdir?ny0:ny1,\n        &xright = xdir?nx1:nx0, &yright = xdir?ny1:ny0,\n        &xup = ydir?nx0:nx1, &yup = ydir?ny0:ny1,\n        &xdown = ydir?nx1:nx0, &ydown = ydir?ny1:ny0;\n      tzfloat\n        Z0 = 1/(tzfloat)z0, Z1 = 1/(tzfloat)z1, nz0 = Z0, nz1 = Z1, dz = Z1 - Z0,\n        &zleft = xdir?nz0:nz1,\n        &zright = xdir?nz1:nz0,\n        &zup = ydir?nz0:nz1,\n        &zdown = ydir?nz1:nz0;\n      if (xright<0 || xleft>=width()) return *this;\n      if (xleft<0) {\n        const float D = (float)xright - xleft;\n        yleft-=(int)((float)xleft*((float)yright - yleft)/D);\n        zleft-=(tzfloat)xleft*(zright - zleft)/D;\n        xleft = 0;\n      }\n      if (xright>=width()) {\n        const float d = (float)xright - width(), D = (float)xright - xleft;\n        yright-=(int)(d*((float)yright - yleft)/D);\n        zright-=(tzfloat)d*(zright - zleft)/D;\n        xright = width() - 1;\n      }\n      if (ydown<0 || yup>=height()) return *this;\n      if (yup<0) {\n        const float D = (float)ydown - yup;\n        xup-=(int)((float)yup*((float)xdown - xup)/D);\n        zup-=(tzfloat)yup*(zdown - zup)/D;\n        yup = 0;\n      }\n      if (ydown>=height()) {\n        const float d = (float)ydown - height(), D = (float)ydown - yup;\n        xdown-=(int)(d*((float)xdown - xup)/D);\n        zdown-=(tzfloat)d*(zdown - zup)/D;\n        ydown = height() - 1;\n      }\n      T *ptrd0 = data(nx0,ny0);\n      tz *ptrz = zbuffer.data(nx0,ny0);\n      int dx = xright - xleft, dy = ydown - yup;\n      const bool steep = dy>dx;\n      if (steep) cimg::swap(nx0,ny0,nx1,ny1,dx,dy);\n      const longT\n        offx = (longT)(nx0<nx1?1:-1)*(steep?width():1),\n        offy = (longT)(ny0<ny1?1:-1)*(steep?1:width());\n      const ulongT\n        wh = (ulongT)_width*_height,\n        ndx = (ulongT)(dx>0?dx:1);\n      if (opacity>=1) {\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz && pattern&hatch) {\n            *ptrz = (tz)z;\n            T *ptrd = ptrd0; const tc *col = color;\n            cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=wh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz) {\n            *ptrz = (tz)z;\n            T *ptrd = ptrd0; const tc *col = color;\n            cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=wh; }\n          }\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz && pattern&hatch) {\n            *ptrz = (tz)z;\n            T *ptrd = ptrd0; const tc *col = color;\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**(col++) + *ptrd*copacity); ptrd+=wh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz) {\n            *ptrz = (tz)z;\n            T *ptrd = ptrd0; const tc *col = color;\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**(col++) + *ptrd*copacity); ptrd+=wh; }\n          }\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a 3d line.\n    /**\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param z0 Z-coordinate of the starting point\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param z1 Z-coordinate of the ending point.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if a reinitialization of the hash state must be done.\n    **/\n    template<typename tc>\n    CImg<T>& draw_line(const int x0, const int y0, const int z0,\n                       const int x1, const int y1, const int z1,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Specified color is (null).\",\n                                    cimg_instance);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      int nx0 = x0, ny0 = y0, nz0 = z0, nx1 = x1, ny1 = y1, nz1 = z1;\n      if (nx0>nx1) cimg::swap(nx0,nx1,ny0,ny1,nz0,nz1);\n      if (nx1<0 || nx0>=width()) return *this;\n      if (nx0<0) {\n        const float D = 1.0f + nx1 - nx0;\n        ny0-=(int)((float)nx0*(1.0f + ny1 - ny0)/D);\n        nz0-=(int)((float)nx0*(1.0f + nz1 - nz0)/D);\n        nx0 = 0;\n      }\n      if (nx1>=width()) {\n        const float d = (float)nx1 - width(), D = 1.0f + nx1 - nx0;\n        ny1+=(int)(d*(1.0f + ny0 - ny1)/D);\n        nz1+=(int)(d*(1.0f + nz0 - nz1)/D);\n        nx1 = width() - 1;\n      }\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nz0,nz1);\n      if (ny1<0 || ny0>=height()) return *this;\n      if (ny0<0) {\n        const float D = 1.0f + ny1 - ny0;\n        nx0-=(int)((float)ny0*(1.0f + nx1 - nx0)/D);\n        nz0-=(int)((float)ny0*(1.0f + nz1 - nz0)/D);\n        ny0 = 0;\n      }\n      if (ny1>=height()) {\n        const float d = (float)ny1 - height(), D = 1.0f + ny1 - ny0;\n        nx1+=(int)(d*(1.0f + nx0 - nx1)/D);\n        nz1+=(int)(d*(1.0f + nz0 - nz1)/D);\n        ny1 = height() - 1;\n      }\n      if (nz0>nz1) cimg::swap(nx0,nx1,ny0,ny1,nz0,nz1);\n      if (nz1<0 || nz0>=depth()) return *this;\n      if (nz0<0) {\n        const float D = 1.0f + nz1 - nz0;\n        nx0-=(int)((float)nz0*(1.0f + nx1 - nx0)/D);\n        ny0-=(int)((float)nz0*(1.0f + ny1 - ny0)/D);\n        nz0 = 0;\n      }\n      if (nz1>=depth()) {\n        const float d = (float)nz1 - depth(), D = 1.0f + nz1 - nz0;\n        nx1+=(int)(d*(1.0f + nx0 - nx1)/D);\n        ny1+=(int)(d*(1.0f + ny0 - ny1)/D);\n        nz1 = depth() - 1;\n      }\n      const unsigned int dmax = (unsigned int)cimg::max(cimg::abs(nx1 - nx0),cimg::abs(ny1 - ny0),nz1 - nz0);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      const float px = (nx1 - nx0)/(float)dmax, py = (ny1 - ny0)/(float)dmax, pz = (nz1 - nz0)/(float)dmax;\n      float x = (float)nx0, y = (float)ny0, z = (float)nz0;\n      if (opacity>=1) for (unsigned int t = 0; t<=dmax; ++t) {\n        if (!(~pattern) || (~pattern && pattern&hatch)) {\n          T* ptrd = data((unsigned int)x,(unsigned int)y,(unsigned int)z);\n          const tc *col = color; cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=whd; }\n        }\n        x+=px; y+=py; z+=pz; if (pattern) { hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1); }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        for (unsigned int t = 0; t<=dmax; ++t) {\n          if (!(~pattern) || (~pattern && pattern&hatch)) {\n            T* ptrd = data((unsigned int)x,(unsigned int)y,(unsigned int)z);\n            const tc *col = color; cimg_forC(*this,c) { *ptrd = (T)(*(col++)*nopacity + *ptrd*copacity); ptrd+=whd; }\n          }\n          x+=px; y+=py; z+=pz; if (pattern) { hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1); }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a textured 2d line.\n    /**\n       \\param x0 X-coordinate of the starting line point.\n       \\param y0 Y-coordinate of the starting line point.\n       \\param x1 X-coordinate of the ending line point.\n       \\param y1 Y-coordinate of the ending line point.\n       \\param texture Texture image defining the pixel colors.\n       \\param tx0 X-coordinate of the starting texture point.\n       \\param ty0 Y-coordinate of the starting texture point.\n       \\param tx1 X-coordinate of the ending texture point.\n       \\param ty1 Y-coordinate of the ending texture point.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if the hash variable must be reinitialized.\n       \\note\n       - Line routine uses the well known Bresenham's algorithm.\n       \\par Example:\n       \\code\n       CImg<unsigned char> img(100,100,1,3,0), texture(\"texture256x256.ppm\");\n       const unsigned char color[] = { 255,128,64 };\n       img.draw_line(40,40,80,70,texture,0,0,255,255);\n       \\endcode\n    **/\n    template<typename tc>\n    CImg<T>& draw_line(const int x0, const int y0,\n                       const int x1, const int y1,\n                       const CImg<tc>& texture,\n                       const int tx0, const int ty0,\n                       const int tx1, const int ty1,\n                       const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty()) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture)) return draw_line(x0,y0,x1,y1,+texture,tx0,ty0,tx1,ty1,opacity,pattern,init_hatch);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      const bool xdir = x0<x1, ydir = y0<y1;\n      int\n        dtx = tx1-tx0, dty = ty1-ty0,\n        nx0 = x0, nx1 = x1, ny0 = y0, ny1 = y1,\n        tnx0 = tx0, tnx1 = tx1, tny0 = ty0, tny1 = ty1,\n        &xleft = xdir?nx0:nx1, &yleft = xdir?ny0:ny1, &xright = xdir?nx1:nx0, &yright = xdir?ny1:ny0,\n        &txleft = xdir?tnx0:tnx1, &tyleft = xdir?tny0:tny1, &txright = xdir?tnx1:tnx0, &tyright = xdir?tny1:tny0,\n        &xup = ydir?nx0:nx1, &yup = ydir?ny0:ny1, &xdown = ydir?nx1:nx0, &ydown = ydir?ny1:ny0,\n        &txup = ydir?tnx0:tnx1, &tyup = ydir?tny0:tny1, &txdown = ydir?tnx1:tnx0, &tydown = ydir?tny1:tny0;\n      if (xright<0 || xleft>=width()) return *this;\n      if (xleft<0) {\n        const float D = (float)xright - xleft;\n        yleft-=(int)((float)xleft*((float)yright - yleft)/D);\n        txleft-=(int)((float)xleft*((float)txright - txleft)/D);\n        tyleft-=(int)((float)xleft*((float)tyright - tyleft)/D);\n        xleft = 0;\n      }\n      if (xright>=width()) {\n        const float d = (float)xright - width(), D = (float)xright - xleft;\n        yright-=(int)(d*((float)yright - yleft)/D);\n        txright-=(int)(d*((float)txright - txleft)/D);\n        tyright-=(int)(d*((float)tyright - tyleft)/D);\n        xright = width() - 1;\n      }\n      if (ydown<0 || yup>=height()) return *this;\n      if (yup<0) {\n        const float D = (float)ydown - yup;\n        xup-=(int)((float)yup*((float)xdown - xup)/D);\n        txup-=(int)((float)yup*((float)txdown - txup)/D);\n        tyup-=(int)((float)yup*((float)tydown - tyup)/D);\n        yup = 0;\n      }\n      if (ydown>=height()) {\n        const float d = (float)ydown - height(), D = (float)ydown - yup;\n        xdown-=(int)(d*((float)xdown - xup)/D);\n        txdown-=(int)(d*((float)txdown - txup)/D);\n        tydown-=(int)(d*((float)tydown - tyup)/D);\n        ydown = height() - 1;\n      }\n      T *ptrd0 = data(nx0,ny0);\n      int dx = xright - xleft, dy = ydown - yup;\n      const bool steep = dy>dx;\n      if (steep) cimg::swap(nx0,ny0,nx1,ny1,dx,dy);\n      const longT\n        offx = (longT)(nx0<nx1?1:-1)*(steep?width():1),\n        offy = (longT)(ny0<ny1?1:-1)*(steep?1:width()),\n        ndx = (longT)(dx>0?dx:1);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height;\n\n      if (opacity>=1) {\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            T *ptrd = ptrd0;\n            const int tx = tx0 + x*dtx/ndx, ty = ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY(tx,ty);\n            cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          T *ptrd = ptrd0;\n          const int tx = tx0 + x*dtx/ndx, ty = ty0 + x*dty/ndx;\n          const tc *col = &texture._atXY(tx,ty);\n          cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          T *ptrd = ptrd0;\n          if (pattern&hatch) {\n            const int tx = tx0 + x*dtx/ndx, ty = ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY(tx,ty);\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          T *ptrd = ptrd0;\n          const int tx = tx0 + x*dtx/ndx, ty = ty0 + x*dty/ndx;\n          const tc *col = &texture._atXY(tx,ty);\n          cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a textured 2d line, with perspective correction.\n    /**\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param z0 Z-coordinate of the starting point\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param z1 Z-coordinate of the ending point.\n       \\param texture Texture image defining the pixel colors.\n       \\param tx0 X-coordinate of the starting texture point.\n       \\param ty0 Y-coordinate of the starting texture point.\n       \\param tx1 X-coordinate of the ending texture point.\n       \\param ty1 Y-coordinate of the ending texture point.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if the hash variable must be reinitialized.\n    **/\n    template<typename tc>\n    CImg<T>& draw_line(const int x0, const int y0, const float z0,\n                       const int x1, const int y1, const float z1,\n                       const CImg<tc>& texture,\n                       const int tx0, const int ty0,\n                       const int tx1, const int ty1,\n                       const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty() && z0<=0 && z1<=0) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_line(x0,y0,z0,x1,y1,z1,+texture,tx0,ty0,tx1,ty1,opacity,pattern,init_hatch);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      const bool xdir = x0<x1, ydir = y0<y1;\n      int\n        nx0 = x0, nx1 = x1, ny0 = y0, ny1 = y1,\n        &xleft = xdir?nx0:nx1, &yleft = xdir?ny0:ny1,\n        &xright = xdir?nx1:nx0, &yright = xdir?ny1:ny0,\n        &xup = ydir?nx0:nx1, &yup = ydir?ny0:ny1,\n        &xdown = ydir?nx1:nx0, &ydown = ydir?ny1:ny0;\n      float\n        Tx0 = tx0/z0, Tx1 = tx1/z1,\n        Ty0 = ty0/z0, Ty1 = ty1/z1,\n        Z0 = 1/z0, Z1 = 1/z1,\n        dz = Z1 - Z0, dtx = Tx1 - Tx0, dty = Ty1 - Ty0,\n        tnx0 = Tx0, tnx1 = Tx1, tny0 = Ty0, tny1 = Ty1, nz0 = Z0, nz1 = Z1,\n        &zleft = xdir?nz0:nz1, &txleft = xdir?tnx0:tnx1, &tyleft = xdir?tny0:tny1,\n        &zright = xdir?nz1:nz0, &txright = xdir?tnx1:tnx0, &tyright = xdir?tny1:tny0,\n        &zup = ydir?nz0:nz1, &txup = ydir?tnx0:tnx1, &tyup = ydir?tny0:tny1,\n        &zdown = ydir?nz1:nz0, &txdown = ydir?tnx1:tnx0, &tydown = ydir?tny1:tny0;\n      if (xright<0 || xleft>=width()) return *this;\n      if (xleft<0) {\n        const float D = (float)xright - xleft;\n        yleft-=(int)((float)xleft*((float)yright - yleft)/D);\n        zleft-=(float)xleft*(zright - zleft)/D;\n        txleft-=(float)xleft*(txright - txleft)/D;\n        tyleft-=(float)xleft*(tyright - tyleft)/D;\n        xleft = 0;\n      }\n      if (xright>=width()) {\n        const float d = (float)xright - width(), D = (float)xright - xleft;\n        yright-=(int)(d*((float)yright - yleft)/D);\n        zright-=d*(zright - zleft)/D;\n        txright-=d*(txright - txleft)/D;\n        tyright-=d*(tyright - tyleft)/D;\n        xright = width() - 1;\n      }\n      if (ydown<0 || yup>=height()) return *this;\n      if (yup<0) {\n        const float D = (float)ydown - yup;\n        xup-=(int)((float)yup*((float)xdown - xup)/D);\n        zup-=(float)yup*(zdown - zup)/D;\n        txup-=(float)yup*(txdown - txup)/D;\n        tyup-=(float)yup*(tydown - tyup)/D;\n        yup = 0;\n      }\n      if (ydown>=height()) {\n        const float d = (float)ydown - height(), D = (float)ydown - yup;\n        xdown-=(int)(d*((float)xdown - xup)/D);\n        zdown-=d*(zdown - zup)/D;\n        txdown-=d*(txdown - txup)/D;\n        tydown-=d*(tydown - tyup)/D;\n        ydown = height() - 1;\n      }\n      T *ptrd0 = data(nx0,ny0);\n      int dx = xright - xleft, dy = ydown - yup;\n      const bool steep = dy>dx;\n      if (steep) cimg::swap(nx0,ny0,nx1,ny1,dx,dy);\n      const longT\n        offx = (longT)(nx0<nx1?1:-1)*(steep?width():1),\n        offy = (longT)(ny0<ny1?1:-1)*(steep?1:width()),\n        ndx = (longT)(dx>0?dx:1);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height;\n\n      if (opacity>=1) {\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            const float z = Z0 + x*dz/ndx, tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n            T *ptrd = ptrd0;\n            cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const float z = Z0 + x*dz/ndx, tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n          const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n          T *ptrd = ptrd0;\n          cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            const float z = Z0 + x*dz/ndx, tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n            T *ptrd = ptrd0;\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const float z = Z0 + x*dz/ndx, tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n          const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n          T *ptrd = ptrd0;\n          cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n          ptrd0+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; error+=dx; }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a textured 2d line, with perspective correction and z-buffering.\n    /**\n       \\param zbuffer Z-buffer image.\n       \\param x0 X-coordinate of the starting point.\n       \\param y0 Y-coordinate of the starting point.\n       \\param z0 Z-coordinate of the starting point\n       \\param x1 X-coordinate of the ending point.\n       \\param y1 Y-coordinate of the ending point.\n       \\param z1 Z-coordinate of the ending point.\n       \\param texture Texture image defining the pixel colors.\n       \\param tx0 X-coordinate of the starting texture point.\n       \\param ty0 Y-coordinate of the starting texture point.\n       \\param tx1 X-coordinate of the ending texture point.\n       \\param ty1 Y-coordinate of the ending texture point.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch Tells if the hash variable must be reinitialized.\n    **/\n    template<typename tz, typename tc>\n    CImg<T>& draw_line(CImg<tz>& zbuffer,\n                       const int x0, const int y0, const float z0,\n                       const int x1, const int y1, const float z1,\n                       const CImg<tc>& texture,\n                       const int tx0, const int ty0,\n                       const int tx1, const int ty1,\n                       const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0) return *this;\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_line(zbuffer,x0,y0,z0,x1,y1,z1,+texture,tx0,ty0,tx1,ty1,opacity,pattern,init_hatch);\n      static unsigned int hatch = ~0U - (~0U>>1);\n      if (init_hatch) hatch = ~0U - (~0U>>1);\n      const bool xdir = x0<x1, ydir = y0<y1;\n      int\n        nx0 = x0, nx1 = x1, ny0 = y0, ny1 = y1,\n        &xleft = xdir?nx0:nx1, &yleft = xdir?ny0:ny1,\n        &xright = xdir?nx1:nx0, &yright = xdir?ny1:ny0,\n        &xup = ydir?nx0:nx1, &yup = ydir?ny0:ny1,\n        &xdown = ydir?nx1:nx0, &ydown = ydir?ny1:ny0;\n      float\n        Tx0 = tx0/z0, Tx1 = tx1/z1,\n        Ty0 = ty0/z0, Ty1 = ty1/z1,\n        dtx = Tx1 - Tx0, dty = Ty1 - Ty0,\n        tnx0 = Tx0, tnx1 = Tx1, tny0 = Ty0, tny1 = Ty1,\n        &txleft = xdir?tnx0:tnx1, &tyleft = xdir?tny0:tny1,\n        &txright = xdir?tnx1:tnx0, &tyright = xdir?tny1:tny0,\n        &txup = ydir?tnx0:tnx1, &tyup = ydir?tny0:tny1,\n        &txdown = ydir?tnx1:tnx0, &tydown = ydir?tny1:tny0;\n      tzfloat\n        Z0 = 1/(tzfloat)z0, Z1 = 1/(tzfloat)z1,\n        dz = Z1 - Z0,  nz0 = Z0, nz1 = Z1,\n        &zleft = xdir?nz0:nz1,\n        &zright = xdir?nz1:nz0,\n        &zup = ydir?nz0:nz1,\n        &zdown = ydir?nz1:nz0;\n      if (xright<0 || xleft>=width()) return *this;\n      if (xleft<0) {\n        const float D = (float)xright - xleft;\n        yleft-=(int)((float)xleft*((float)yright - yleft)/D);\n        zleft-=(float)xleft*(zright - zleft)/D;\n        txleft-=(float)xleft*(txright - txleft)/D;\n        tyleft-=(float)xleft*(tyright - tyleft)/D;\n        xleft = 0;\n      }\n      if (xright>=width()) {\n        const float d = (float)xright - width(), D = (float)xright - xleft;\n        yright-=(int)(d*((float)yright - yleft)/D);\n        zright-=d*(zright - zleft)/D;\n        txright-=d*(txright - txleft)/D;\n        tyright-=d*(tyright - tyleft)/D;\n        xright = width() - 1;\n      }\n      if (ydown<0 || yup>=height()) return *this;\n      if (yup<0) {\n        const float D = (float)ydown - yup;\n        xup-=(int)((float)yup*((float)xdown - xup)/D);\n        zup-=yup*(zdown - zup)/D;\n        txup-=yup*(txdown - txup)/D;\n        tyup-=yup*(tydown - tyup)/D;\n        yup = 0;\n      }\n      if (ydown>=height()) {\n        const float d = (float)ydown - height(), D = (float)ydown - yup;\n        xdown-=(int)(d*((float)xdown - xup)/D);\n        zdown-=d*(zdown - zup)/D;\n        txdown-=d*(txdown - txup)/D;\n        tydown-=d*(tydown - tyup)/D;\n        ydown = height() - 1;\n      }\n      T *ptrd0 = data(nx0,ny0);\n      tz *ptrz = zbuffer.data(nx0,ny0);\n      int dx = xright - xleft, dy = ydown - yup;\n      const bool steep = dy>dx;\n      if (steep) cimg::swap(nx0,ny0,nx1,ny1,dx,dy);\n      const longT\n        offx = (longT)(nx0<nx1?1:-1)*(steep?width():1),\n        offy = (longT)(ny0<ny1?1:-1)*(steep?1:width()),\n        ndx = (longT)(dx>0?dx:1);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height;\n\n      if (opacity>=1) {\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            const tzfloat z = Z0 + x*dz/ndx;\n            if (z>=(tzfloat)*ptrz) {\n              *ptrz = (tz)z;\n              const float tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n              const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n              T *ptrd = ptrd0;\n              cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n            }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz) {\n            *ptrz = (tz)z;\n            const float tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n            T *ptrd = ptrd0;\n            cimg_forC(*this,c) { *ptrd = (T)*col; ptrd+=whd; col+=twh; }\n          }\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        }\n      } else {\n        const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n        if (~pattern) for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          if (pattern&hatch) {\n            const tzfloat z = Z0 + x*dz/ndx;\n            if (z>=(tzfloat)*ptrz) {\n              *ptrz = (tz)z;\n              const float tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n              const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n              T *ptrd = ptrd0;\n              cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n            }\n          }\n          hatch>>=1; if (!hatch) hatch = ~0U - (~0U>>1);\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        } else for (int error = dx>>1, x = 0; x<=dx; ++x) {\n          const tzfloat z = Z0 + x*dz/ndx;\n          if (z>=(tzfloat)*ptrz) {\n            *ptrz = (tz)z;\n            const float tx = Tx0 + x*dtx/ndx, ty = Ty0 + x*dty/ndx;\n            const tc *col = &texture._atXY((int)(tx/z),(int)(ty/z));\n            T *ptrd = ptrd0;\n            cimg_forC(*this,c) { *ptrd = (T)(nopacity**col + *ptrd*copacity); ptrd+=whd; col+=twh; }\n          }\n          ptrd0+=offx; ptrz+=offx;\n          if ((error-=dy)<0) { ptrd0+=offy; ptrz+=offy; error+=dx; }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a set of consecutive lines.\n    /**\n       \\param points Coordinates of vertices, stored as a list of vectors.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch If set to true, init hatch motif.\n       \\note\n       - This function uses several call to the single CImg::draw_line() procedure,\n       depending on the vectors size in \\p points.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_line(const CImg<t>& points,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty() || !points || points._width<2) return *this;\n      bool ninit_hatch = init_hatch;\n      switch (points._height) {\n      case 0 : case 1 :\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_line(): Invalid specified point set (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    points._width,points._height,points._depth,points._spectrum,points._data);\n\n      case 2 : {\n        const int x0 = (int)points(0,0), y0 = (int)points(0,1);\n        int ox = x0, oy = y0;\n        for (unsigned int i = 1; i<points._width; ++i) {\n          const int x = (int)points(i,0), y = (int)points(i,1);\n          draw_line(ox,oy,x,y,color,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y;\n        }\n      } break;\n      default : {\n        const int x0 = (int)points(0,0), y0 = (int)points(0,1), z0 = (int)points(0,2);\n        int ox = x0, oy = y0, oz = z0;\n        for (unsigned int i = 1; i<points._width; ++i) {\n          const int x = (int)points(i,0), y = (int)points(i,1), z = (int)points(i,2);\n          draw_line(ox,oy,oz,x,y,z,color,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y; oz = z;\n        }\n      }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d arrow.\n    /**\n       \\param x0 X-coordinate of the starting arrow point (tail).\n       \\param y0 Y-coordinate of the starting arrow point (tail).\n       \\param x1 X-coordinate of the ending arrow point (head).\n       \\param y1 Y-coordinate of the ending arrow point (head).\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param angle Aperture angle of the arrow head.\n       \\param length Length of the arrow head. If negative, describes a percentage of the arrow length.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n    **/\n    template<typename tc>\n    CImg<T>& draw_arrow(const int x0, const int y0,\n                        const int x1, const int y1,\n                        const tc *const color, const float opacity=1,\n                        const float angle=30, const float length=-10,\n                        const unsigned int pattern=~0U) {\n      if (is_empty()) return *this;\n      const float u = (float)(x0 - x1), v = (float)(y0 - y1), sq = u*u + v*v,\n        deg = (float)(angle*cimg::PI/180), ang = (sq>0)?(float)std::atan2(v,u):0.0f,\n        l = (length>=0)?length:-length*(float)std::sqrt(sq)/100;\n      if (sq>0) {\n        const float\n            cl = (float)std::cos(ang - deg), sl = (float)std::sin(ang - deg),\n            cr = (float)std::cos(ang + deg), sr = (float)std::sin(ang + deg);\n        const int\n          xl = x1 + (int)(l*cl), yl = y1 + (int)(l*sl),\n          xr = x1 + (int)(l*cr), yr = y1 + (int)(l*sr),\n          xc = x1 + (int)((l + 1)*(cl + cr))/2, yc = y1 + (int)((l + 1)*(sl + sr))/2;\n        draw_line(x0,y0,xc,yc,color,opacity,pattern).draw_triangle(x1,y1,xl,yl,xr,yr,color,opacity);\n      } else draw_point(x0,y0,color,opacity);\n      return *this;\n    }\n\n    //! Draw a 2d spline.\n    /**\n       \\param x0 X-coordinate of the starting curve point\n       \\param y0 Y-coordinate of the starting curve point\n       \\param u0 X-coordinate of the starting velocity\n       \\param v0 Y-coordinate of the starting velocity\n       \\param x1 X-coordinate of the ending curve point\n       \\param y1 Y-coordinate of the ending curve point\n       \\param u1 X-coordinate of the ending velocity\n       \\param v1 Y-coordinate of the ending velocity\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param precision Curve drawing precision.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch If \\c true, init hatch motif.\n       \\note\n       - The curve is a 2d cubic Bezier spline, from the set of specified starting/ending points\n       and corresponding velocity vectors.\n       - The spline is drawn as a serie of connected segments. The \\p precision parameter sets the\n       average number of pixels in each drawn segment.\n       - A cubic Bezier curve is sometimes defined by a set of 4 points { (\\p x0,\\p y0), (\\p xa,\\p ya),\n         (\\p xb,\\p yb), (\\p x1,\\p y1) } where (\\p x0,\\p y0) is the starting point, (\\p x1,\\p y1) is the ending point\n         and (\\p xa,\\p ya), (\\p xb,\\p yb) are two\n       \\e control points.\n       The starting and ending velocities (\\p u0,\\p v0) and (\\p u1,\\p v1) can be deduced easily from\n       the control points as\n       \\p u0 = (\\p xa - \\p x0), \\p v0 = (\\p ya - \\p y0), \\p u1 = (\\p x1 - \\p xb) and \\p v1 = (\\p y1 - \\p yb).\n       \\par Example:\n       \\code\n       CImg<unsigned char> img(100,100,1,3,0);\n       const unsigned char color[] = { 255,255,255 };\n       img.draw_spline(30,30,0,100,90,40,0,-100,color);\n       \\endcode\n    **/\n    template<typename tc>\n    CImg<T>& draw_spline(const int x0, const int y0, const float u0, const float v0,\n                         const int x1, const int y1, const float u1, const float v1,\n                         const tc *const color, const float opacity=1,\n                         const float precision=0.25, const unsigned int pattern=~0U,\n                         const bool init_hatch=true) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_spline(): Specified color is (null).\",\n                                    cimg_instance);\n      if (x0==x1 && y0==y1) return draw_point(x0,y0,color,opacity);\n      bool ninit_hatch = init_hatch;\n      const float\n        ax = u0 + u1 + 2*(x0 - x1),\n        bx = 3*(x1 - x0) - 2*u0 - u1,\n        ay = v0 + v1 + 2*(y0 - y1),\n        by = 3*(y1 - y0) - 2*v0 - v1,\n        _precision = 1/(cimg::hypot((float)x0 - x1,(float)y0 - y1)*(precision>0?precision:1));\n      int ox = x0, oy = y0;\n      for (float t = 0; t<1; t+=_precision) {\n        const float t2 = t*t, t3 = t2*t;\n        const int\n          nx = (int)(ax*t3 + bx*t2 + u0*t + x0),\n          ny = (int)(ay*t3 + by*t2 + v0*t + y0);\n        draw_line(ox,oy,nx,ny,color,opacity,pattern,ninit_hatch);\n        ninit_hatch = false;\n        ox = nx; oy = ny;\n      }\n      return draw_line(ox,oy,x1,y1,color,opacity,pattern,false);\n    }\n\n    //! Draw a 3d spline \\overloading.\n    /**\n       \\note\n       - Similar to CImg::draw_spline() for a 3d spline in a volumetric image.\n    **/\n    template<typename tc>\n    CImg<T>& draw_spline(const int x0, const int y0, const int z0, const float u0, const float v0, const float w0,\n                         const int x1, const int y1, const int z1, const float u1, const float v1, const float w1,\n                         const tc *const color, const float opacity=1,\n                         const float precision=4, const unsigned int pattern=~0U,\n                         const bool init_hatch=true) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_spline(): Specified color is (null).\",\n                                    cimg_instance);\n      if (x0==x1 && y0==y1 && z0==z1) return draw_point(x0,y0,z0,color,opacity);\n      bool ninit_hatch = init_hatch;\n      const float\n        ax = u0 + u1 + 2*(x0 - x1),\n        bx = 3*(x1 - x0) - 2*u0 - u1,\n        ay = v0 + v1 + 2*(y0 - y1),\n        by = 3*(y1 - y0) - 2*v0 - v1,\n        az = w0 + w1 + 2*(z0 - z1),\n        bz = 3*(z1 - z0) - 2*w0 - w1,\n        _precision = 1/(cimg::hypot((float)x0 - x1,(float)y0 - y1)*(precision>0?precision:1));\n      int ox = x0, oy = y0, oz = z0;\n      for (float t = 0; t<1; t+=_precision) {\n        const float t2 = t*t, t3 = t2*t;\n        const int\n          nx = (int)(ax*t3 + bx*t2 + u0*t + x0),\n          ny = (int)(ay*t3 + by*t2 + v0*t + y0),\n          nz = (int)(az*t3 + bz*t2 + w0*t + z0);\n        draw_line(ox,oy,oz,nx,ny,nz,color,opacity,pattern,ninit_hatch);\n        ninit_hatch = false;\n        ox = nx; oy = ny; oz = nz;\n      }\n      return draw_line(ox,oy,oz,x1,y1,z1,color,opacity,pattern,false);\n    }\n\n    //! Draw a textured 2d spline.\n    /**\n       \\param x0 X-coordinate of the starting curve point\n       \\param y0 Y-coordinate of the starting curve point\n       \\param u0 X-coordinate of the starting velocity\n       \\param v0 Y-coordinate of the starting velocity\n       \\param x1 X-coordinate of the ending curve point\n       \\param y1 Y-coordinate of the ending curve point\n       \\param u1 X-coordinate of the ending velocity\n       \\param v1 Y-coordinate of the ending velocity\n       \\param texture Texture image defining line pixel colors.\n       \\param tx0 X-coordinate of the starting texture point.\n       \\param ty0 Y-coordinate of the starting texture point.\n       \\param tx1 X-coordinate of the ending texture point.\n       \\param ty1 Y-coordinate of the ending texture point.\n       \\param precision Curve drawing precision.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch if \\c true, reinit hatch motif.\n    **/\n    template<typename t>\n    CImg<T>& draw_spline(const int x0, const int y0, const float u0, const float v0,\n                         const int x1, const int y1, const float u1, const float v1,\n                         const CImg<t>& texture,\n                         const int tx0, const int ty0, const int tx1, const int ty1,\n                         const float opacity=1,\n                         const float precision=4, const unsigned int pattern=~0U,\n                         const bool init_hatch=true) {\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_spline(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_empty()) return *this;\n      if (is_overlapped(texture))\n        return draw_spline(x0,y0,u0,v0,x1,y1,u1,v1,+texture,tx0,ty0,tx1,ty1,precision,opacity,pattern,init_hatch);\n      if (x0==x1 && y0==y1)\n        return draw_point(x0,y0,texture.get_vector_at(x0<=0?0:x0>=texture.width()?texture.width() - 1:x0,\n                                                      y0<=0?0:y0>=texture.height()?texture.height() - 1:y0),opacity);\n      bool ninit_hatch = init_hatch;\n      const float\n        ax = u0 + u1 + 2*(x0 - x1),\n        bx = 3*(x1 - x0) - 2*u0 - u1,\n        ay = v0 + v1 + 2*(y0 - y1),\n        by = 3*(y1 - y0) - 2*v0 - v1,\n        _precision = 1/(cimg::hypot((float)x0 - x1,(float)y0 - y1)*(precision>0?precision:1));\n      int ox = x0, oy = y0, otx = tx0, oty = ty0;\n      for (float t1 = 0; t1<1; t1+=_precision) {\n        const float t2 = t1*t1, t3 = t2*t1;\n        const int\n          nx = (int)(ax*t3 + bx*t2 + u0*t1 + x0),\n          ny = (int)(ay*t3 + by*t2 + v0*t1 + y0),\n          ntx = tx0 + (int)((tx1 - tx0)*t1),\n          nty = ty0 + (int)((ty1 - ty0)*t1);\n        draw_line(ox,oy,nx,ny,texture,otx,oty,ntx,nty,opacity,pattern,ninit_hatch);\n        ninit_hatch = false;\n        ox = nx; oy = ny; otx = ntx; oty = nty;\n      }\n      return draw_line(ox,oy,x1,y1,texture,otx,oty,tx1,ty1,opacity,pattern,false);\n    }\n\n    //! Draw a set of consecutive splines.\n    /**\n       \\param points Vertices data.\n       \\param tangents Tangents data.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param is_closed_set Tells if the drawn spline set is closed.\n       \\param precision Precision of the drawing.\n       \\param pattern An integer whose bits describe the line pattern.\n       \\param init_hatch If \\c true, init hatch motif.\n    **/\n    template<typename tp, typename tt, typename tc>\n    CImg<T>& draw_spline(const CImg<tp>& points, const CImg<tt>& tangents,\n                         const tc *const color, const float opacity=1,\n                         const bool is_closed_set=false, const float precision=4,\n                         const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty() || !points || !tangents || points._width<2 || tangents._width<2) return *this;\n      bool ninit_hatch = init_hatch;\n      switch (points._height) {\n      case 0 : case 1 :\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_spline(): Invalid specified point set (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    points._width,points._height,points._depth,points._spectrum,points._data);\n\n      case 2 : {\n        const int x0 = (int)points(0,0), y0 = (int)points(0,1);\n        const float u0 = (float)tangents(0,0), v0 = (float)tangents(0,1);\n        int ox = x0, oy = y0;\n        float ou = u0, ov = v0;\n        for (unsigned int i = 1; i<points._width; ++i) {\n          const int x = (int)points(i,0), y = (int)points(i,1);\n          const float u = (float)tangents(i,0), v = (float)tangents(i,1);\n          draw_spline(ox,oy,ou,ov,x,y,u,v,color,precision,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y; ou = u; ov = v;\n        }\n        if (is_closed_set) draw_spline(ox,oy,ou,ov,x0,y0,u0,v0,color,precision,opacity,pattern,false);\n      } break;\n      default : {\n        const int x0 = (int)points(0,0), y0 = (int)points(0,1), z0 = (int)points(0,2);\n        const float u0 = (float)tangents(0,0), v0 = (float)tangents(0,1), w0 = (float)tangents(0,2);\n        int ox = x0, oy = y0, oz = z0;\n        float ou = u0, ov = v0, ow = w0;\n        for (unsigned int i = 1; i<points._width; ++i) {\n          const int x = (int)points(i,0), y = (int)points(i,1), z = (int)points(i,2);\n          const float u = (float)tangents(i,0), v = (float)tangents(i,1), w = (float)tangents(i,2);\n          draw_spline(ox,oy,oz,ou,ov,ow,x,y,z,u,v,w,color,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y; oz = z; ou = u; ov = v; ow = w;\n        }\n        if (is_closed_set) draw_spline(ox,oy,oz,ou,ov,ow,x0,y0,z0,u0,v0,w0,color,precision,opacity,pattern,false);\n      }\n      }\n      return *this;\n    }\n\n    //! Draw a set of consecutive splines \\overloading.\n    /**\n       Similar to previous function, with the point tangents automatically estimated from the given points set.\n    **/\n    template<typename tp, typename tc>\n    CImg<T>& draw_spline(const CImg<tp>& points,\n                         const tc *const color, const float opacity=1,\n                         const bool is_closed_set=false, const float precision=4,\n                         const unsigned int pattern=~0U, const bool init_hatch=true) {\n      if (is_empty() || !points || points._width<2) return *this;\n      CImg<Tfloat> tangents;\n      switch (points._height) {\n      case 0 : case 1 :\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_spline(): Invalid specified point set (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    points._width,points._height,points._depth,points._spectrum,points._data);\n      case 2 : {\n        tangents.assign(points._width,points._height);\n        cimg_forX(points,p) {\n          const unsigned int\n            p0 = is_closed_set?(p + points._width - 1)%points._width:(p?p - 1:0),\n            p1 = is_closed_set?(p + 1)%points._width:(p + 1<points._width?p + 1:p);\n          const float\n            x = (float)points(p,0),\n            y = (float)points(p,1),\n            x0 = (float)points(p0,0),\n            y0 = (float)points(p0,1),\n            x1 = (float)points(p1,0),\n            y1 = (float)points(p1,1),\n            u0 = x - x0,\n            v0 = y - y0,\n            n0 = 1e-8f + cimg::hypot(u0,v0),\n            u1 = x1 - x,\n            v1 = y1 - y,\n            n1 = 1e-8f + cimg::hypot(u1,v1),\n            u = u0/n0 + u1/n1,\n            v = v0/n0 + v1/n1,\n            n = 1e-8f + cimg::hypot(u,v),\n            fact = 0.5f*(n0 + n1);\n          tangents(p,0) = (Tfloat)(fact*u/n);\n          tangents(p,1) = (Tfloat)(fact*v/n);\n        }\n      } break;\n      default : {\n        tangents.assign(points._width,points._height);\n        cimg_forX(points,p) {\n          const unsigned int\n            p0 = is_closed_set?(p + points._width - 1)%points._width:(p?p - 1:0),\n            p1 = is_closed_set?(p + 1)%points._width:(p + 1<points._width?p + 1:p);\n          const float\n            x = (float)points(p,0),\n            y = (float)points(p,1),\n            z = (float)points(p,2),\n            x0 = (float)points(p0,0),\n            y0 = (float)points(p0,1),\n            z0 = (float)points(p0,2),\n            x1 = (float)points(p1,0),\n            y1 = (float)points(p1,1),\n            z1 = (float)points(p1,2),\n            u0 = x - x0,\n            v0 = y - y0,\n            w0 = z - z0,\n            n0 = 1e-8f + cimg::hypot(u0,v0,w0),\n            u1 = x1 - x,\n            v1 = y1 - y,\n            w1 = z1 - z,\n            n1 = 1e-8f + cimg::hypot(u1,v1,w1),\n            u = u0/n0 + u1/n1,\n            v = v0/n0 + v1/n1,\n            w = w0/n0 + w1/n1,\n            n = 1e-8f + cimg::hypot(u,v,w),\n            fact = 0.5f*(n0 + n1);\n          tangents(p,0) = (Tfloat)(fact*u/n);\n          tangents(p,1) = (Tfloat)(fact*v/n);\n          tangents(p,2) = (Tfloat)(fact*w/n);\n        }\n      }\n      }\n      return draw_spline(points,tangents,color,opacity,is_closed_set,precision,pattern,init_hatch);\n    }\n\n    // Inner macro for drawing triangles.\n#define _cimg_for_triangle1(img,xl,xr,y,x0,y0,x1,y1,x2,y2) \\\n        for (int y = y0<0?0:y0, \\\n               xr = y0>=0?x0:(x0 - y0*(x2 - x0)/(y2 - y0)), \\\n               xl = y1>=0?(y0>=0?(y0==y1?x1:x0):(x0 - y0*(x1 - x0)/(y1 - y0))):(x1 - y1*(x2 - x1)/(y2 - y1)), \\\n               _sxn=1, \\\n               _sxr=1, \\\n               _sxl=1, \\\n               _dxn = x2>x1?x2-x1:(_sxn=-1,x1 - x2), \\\n               _dxr = x2>x0?x2-x0:(_sxr=-1,x0 - x2), \\\n               _dxl = x1>x0?x1-x0:(_sxl=-1,x0 - x1), \\\n               _dyn = y2-y1, \\\n               _dyr = y2-y0, \\\n               _dyl = y1-y0, \\\n               _counter = (_dxn-=_dyn?_dyn*(_dxn/_dyn):0, \\\n                           _dxr-=_dyr?_dyr*(_dxr/_dyr):0, \\\n                           _dxl-=_dyl?_dyl*(_dxl/_dyl):0, \\\n                           std::min((int)(img)._height - y - 1,y2 - y)), \\\n               _errn = _dyn/2, \\\n               _errr = _dyr/2, \\\n               _errl = _dyl/2, \\\n               _rxn = _dyn?(x2-x1)/_dyn:0, \\\n               _rxr = _dyr?(x2-x0)/_dyr:0, \\\n               _rxl = (y0!=y1 && y1>0)?(_dyl?(x1-x0)/_dyl:0): \\\n                                       (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxn); \\\n             _counter>=0; --_counter, ++y, \\\n               xr+=_rxr+((_errr-=_dxr)<0?_errr+=_dyr,_sxr:0), \\\n               xl+=(y!=y1)?_rxl+((_errl-=_dxl)<0?(_errl+=_dyl,_sxl):0): \\\n                           (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxl=_rxn, x1-xl))\n\n#define _cimg_for_triangle2(img,xl,cl,xr,cr,y,x0,y0,c0,x1,y1,c1,x2,y2,c2) \\\n        for (int y = y0<0?0:y0, \\\n               xr = y0>=0?x0:(x0 - y0*(x2 - x0)/(y2 - y0)), \\\n               cr = y0>=0?c0:(c0 - y0*(c2 - c0)/(y2 - y0)), \\\n               xl = y1>=0?(y0>=0?(y0==y1?x1:x0):(x0 - y0*(x1 - x0)/(y1 - y0))):(x1 - y1*(x2 - x1)/(y2 - y1)), \\\n               cl = y1>=0?(y0>=0?(y0==y1?c1:c0):(c0 - y0*(c1 - c0)/(y1 - y0))):(c1 - y1*(c2 - c1)/(y2 - y1)), \\\n               _sxn=1, _scn=1, \\\n               _sxr=1, _scr=1, \\\n               _sxl=1, _scl=1, \\\n               _dxn = x2>x1?x2-x1:(_sxn=-1,x1 - x2), \\\n               _dxr = x2>x0?x2-x0:(_sxr=-1,x0 - x2), \\\n               _dxl = x1>x0?x1-x0:(_sxl=-1,x0 - x1), \\\n               _dcn = c2>c1?c2-c1:(_scn=-1,c1 - c2), \\\n               _dcr = c2>c0?c2-c0:(_scr=-1,c0 - c2), \\\n               _dcl = c1>c0?c1-c0:(_scl=-1,c0 - c1), \\\n               _dyn = y2-y1, \\\n               _dyr = y2-y0, \\\n               _dyl = y1-y0, \\\n               _counter =(_dxn-=_dyn?_dyn*(_dxn/_dyn):0, \\\n                          _dxr-=_dyr?_dyr*(_dxr/_dyr):0, \\\n                          _dxl-=_dyl?_dyl*(_dxl/_dyl):0, \\\n                          _dcn-=_dyn?_dyn*(_dcn/_dyn):0, \\\n                          _dcr-=_dyr?_dyr*(_dcr/_dyr):0, \\\n                          _dcl-=_dyl?_dyl*(_dcl/_dyl):0, \\\n                          std::min((int)(img)._height - y - 1,y2 - y)), \\\n               _errn = _dyn/2, _errcn = _errn, \\\n               _errr = _dyr/2, _errcr = _errr, \\\n               _errl = _dyl/2, _errcl = _errl, \\\n               _rxn = _dyn?(x2 - x1)/_dyn:0, \\\n               _rcn = _dyn?(c2 - c1)/_dyn:0, \\\n               _rxr = _dyr?(x2 - x0)/_dyr:0, \\\n               _rcr = _dyr?(c2 - c0)/_dyr:0, \\\n               _rxl = (y0!=y1 && y1>0)?(_dyl?(x1-x0)/_dyl:0): \\\n                                       (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxn), \\\n               _rcl = (y0!=y1 && y1>0)?(_dyl?(c1-c0)/_dyl:0): \\\n                                       (_errcl=_errcn, _dcl=_dcn, _dyl=_dyn, _scl=_scn, _rcn ); \\\n             _counter>=0; --_counter, ++y, \\\n               xr+=_rxr+((_errr-=_dxr)<0?_errr+=_dyr,_sxr:0), \\\n               cr+=_rcr+((_errcr-=_dcr)<0?_errcr+=_dyr,_scr:0), \\\n               xl+=(y!=y1)?(cl+=_rcl+((_errcl-=_dcl)<0?(_errcl+=_dyl,_scl):0), \\\n                           _rxl+((_errl-=_dxl)<0?(_errl+=_dyl,_sxl):0)): \\\n               (_errcl=_errcn, _dcl=_dcn, _dyl=_dyn, _scl=_scn, _rcl=_rcn, cl=c1, \\\n                _errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxl=_rxn, x1-xl))\n\n#define _cimg_for_triangle3(img,xl,txl,tyl,xr,txr,tyr,y,x0,y0,tx0,ty0,x1,y1,tx1,ty1,x2,y2,tx2,ty2) \\\n        for (int y = y0<0?0:y0, \\\n               xr = y0>=0?x0:(x0 - y0*(x2 - x0)/(y2 - y0)), \\\n               txr = y0>=0?tx0:(tx0 - y0*(tx2 - tx0)/(y2 - y0)), \\\n               tyr = y0>=0?ty0:(ty0 - y0*(ty2 - ty0)/(y2 - y0)), \\\n               xl = y1>=0?(y0>=0?(y0==y1?x1:x0):(x0 - y0*(x1 - x0)/(y1 - y0))):(x1 - y1*(x2 - x1)/(y2 - y1)), \\\n               txl = y1>=0?(y0>=0?(y0==y1?tx1:tx0):(tx0 - y0*(tx1 - tx0)/(y1 - y0))):(tx1 - y1*(tx2 - tx1)/(y2 - y1)), \\\n               tyl = y1>=0?(y0>=0?(y0==y1?ty1:ty0):(ty0 - y0*(ty1 - ty0)/(y1 - y0))):(ty1 - y1*(ty2 - ty1)/(y2 - y1)), \\\n               _sxn=1, _stxn=1, _styn=1, \\\n               _sxr=1, _stxr=1, _styr=1, \\\n               _sxl=1, _stxl=1, _styl=1, \\\n               _dxn = x2>x1?x2 - x1:(_sxn=-1,x1 - x2), \\\n               _dxr = x2>x0?x2 - x0:(_sxr=-1,x0 - x2), \\\n               _dxl = x1>x0?x1 - x0:(_sxl=-1,x0 - x1), \\\n               _dtxn = tx2>tx1?tx2 - tx1:(_stxn=-1,tx1 - tx2), \\\n               _dtxr = tx2>tx0?tx2 - tx0:(_stxr=-1,tx0 - tx2), \\\n               _dtxl = tx1>tx0?tx1 - tx0:(_stxl=-1,tx0 - tx1), \\\n               _dtyn = ty2>ty1?ty2 - ty1:(_styn=-1,ty1 - ty2), \\\n               _dtyr = ty2>ty0?ty2 - ty0:(_styr=-1,ty0 - ty2), \\\n               _dtyl = ty1>ty0?ty1 - ty0:(_styl=-1,ty0 - ty1), \\\n               _dyn = y2-y1, \\\n               _dyr = y2-y0, \\\n               _dyl = y1-y0, \\\n               _counter =(_dxn-=_dyn?_dyn*(_dxn/_dyn):0, \\\n                          _dxr-=_dyr?_dyr*(_dxr/_dyr):0, \\\n                          _dxl-=_dyl?_dyl*(_dxl/_dyl):0, \\\n                          _dtxn-=_dyn?_dyn*(_dtxn/_dyn):0, \\\n                          _dtxr-=_dyr?_dyr*(_dtxr/_dyr):0, \\\n                          _dtxl-=_dyl?_dyl*(_dtxl/_dyl):0, \\\n                          _dtyn-=_dyn?_dyn*(_dtyn/_dyn):0, \\\n                          _dtyr-=_dyr?_dyr*(_dtyr/_dyr):0, \\\n                          _dtyl-=_dyl?_dyl*(_dtyl/_dyl):0, \\\n                          std::min((int)(img)._height - y - 1,y2 - y)), \\\n               _errn = _dyn/2, _errtxn = _errn, _errtyn = _errn, \\\n               _errr = _dyr/2, _errtxr = _errr, _errtyr = _errr, \\\n               _errl = _dyl/2, _errtxl = _errl, _errtyl = _errl, \\\n               _rxn = _dyn?(x2 - x1)/_dyn:0, \\\n               _rtxn = _dyn?(tx2 - tx1)/_dyn:0, \\\n               _rtyn = _dyn?(ty2 - ty1)/_dyn:0, \\\n               _rxr = _dyr?(x2 - x0)/_dyr:0, \\\n               _rtxr = _dyr?(tx2 - tx0)/_dyr:0, \\\n               _rtyr = _dyr?(ty2 - ty0)/_dyr:0, \\\n               _rxl = (y0!=y1 && y1>0)?(_dyl?(x1 - x0)/_dyl:0): \\\n                                       (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxn), \\\n               _rtxl = (y0!=y1 && y1>0)?(_dyl?(tx1 - tx0)/_dyl:0): \\\n                                       (_errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxn ), \\\n               _rtyl = (y0!=y1 && y1>0)?(_dyl?(ty1 - ty0)/_dyl:0): \\\n                                       (_errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyn ); \\\n             _counter>=0; --_counter, ++y, \\\n               xr+=_rxr+((_errr-=_dxr)<0?_errr+=_dyr,_sxr:0), \\\n               txr+=_rtxr+((_errtxr-=_dtxr)<0?_errtxr+=_dyr,_stxr:0), \\\n               tyr+=_rtyr+((_errtyr-=_dtyr)<0?_errtyr+=_dyr,_styr:0), \\\n               xl+=(y!=y1)?(txl+=_rtxl+((_errtxl-=_dtxl)<0?(_errtxl+=_dyl,_stxl):0), \\\n                            tyl+=_rtyl+((_errtyl-=_dtyl)<0?(_errtyl+=_dyl,_styl):0), \\\n                           _rxl+((_errl-=_dxl)<0?(_errl+=_dyl,_sxl):0)): \\\n               (_errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxl=_rtxn, txl=tx1, \\\n                _errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyl=_rtyn, tyl=ty1,\\\n                _errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxl=_rxn, x1 - xl))\n\n#define _cimg_for_triangle4(img,xl,cl,txl,tyl,xr,cr,txr,tyr,y,x0,y0,c0,tx0,ty0,x1,y1,c1,tx1,ty1,x2,y2,c2,tx2,ty2) \\\n        for (int y = y0<0?0:y0, \\\n               xr = y0>=0?x0:(x0 - y0*(x2 - x0)/(y2 - y0)), \\\n               cr = y0>=0?c0:(c0 - y0*(c2 - c0)/(y2 - y0)), \\\n               txr = y0>=0?tx0:(tx0 - y0*(tx2 - tx0)/(y2 - y0)), \\\n               tyr = y0>=0?ty0:(ty0 - y0*(ty2 - ty0)/(y2 - y0)), \\\n               xl = y1>=0?(y0>=0?(y0==y1?x1:x0):(x0 - y0*(x1 - x0)/(y1 - y0))):(x1 - y1*(x2 - x1)/(y2 - y1)), \\\n               cl = y1>=0?(y0>=0?(y0==y1?c1:c0):(c0 - y0*(c1 - c0)/(y1 - y0))):(c1 - y1*(c2 - c1)/(y2 - y1)), \\\n               txl = y1>=0?(y0>=0?(y0==y1?tx1:tx0):(tx0 - y0*(tx1 - tx0)/(y1 - y0))):(tx1 - y1*(tx2 - tx1)/(y2 - y1)), \\\n               tyl = y1>=0?(y0>=0?(y0==y1?ty1:ty0):(ty0 - y0*(ty1 - ty0)/(y1 - y0))):(ty1 - y1*(ty2 - ty1)/(y2 - y1)), \\\n               _sxn=1, _scn=1, _stxn=1, _styn=1, \\\n               _sxr=1, _scr=1, _stxr=1, _styr=1, \\\n               _sxl=1, _scl=1, _stxl=1, _styl=1, \\\n               _dxn = x2>x1?x2 - x1:(_sxn=-1,x1 - x2), \\\n               _dxr = x2>x0?x2 - x0:(_sxr=-1,x0 - x2), \\\n               _dxl = x1>x0?x1 - x0:(_sxl=-1,x0 - x1), \\\n               _dcn = c2>c1?c2 - c1:(_scn=-1,c1 - c2), \\\n               _dcr = c2>c0?c2 - c0:(_scr=-1,c0 - c2), \\\n               _dcl = c1>c0?c1 - c0:(_scl=-1,c0 - c1), \\\n               _dtxn = tx2>tx1?tx2 - tx1:(_stxn=-1,tx1 - tx2), \\\n               _dtxr = tx2>tx0?tx2 - tx0:(_stxr=-1,tx0 - tx2), \\\n               _dtxl = tx1>tx0?tx1 - tx0:(_stxl=-1,tx0 - tx1), \\\n               _dtyn = ty2>ty1?ty2 - ty1:(_styn=-1,ty1 - ty2), \\\n               _dtyr = ty2>ty0?ty2 - ty0:(_styr=-1,ty0 - ty2), \\\n               _dtyl = ty1>ty0?ty1 - ty0:(_styl=-1,ty0 - ty1), \\\n               _dyn = y2 - y1, \\\n               _dyr = y2 - y0, \\\n               _dyl = y1 - y0, \\\n               _counter =(_dxn-=_dyn?_dyn*(_dxn/_dyn):0, \\\n                          _dxr-=_dyr?_dyr*(_dxr/_dyr):0, \\\n                          _dxl-=_dyl?_dyl*(_dxl/_dyl):0, \\\n                          _dcn-=_dyn?_dyn*(_dcn/_dyn):0, \\\n                          _dcr-=_dyr?_dyr*(_dcr/_dyr):0, \\\n                          _dcl-=_dyl?_dyl*(_dcl/_dyl):0, \\\n                          _dtxn-=_dyn?_dyn*(_dtxn/_dyn):0, \\\n                          _dtxr-=_dyr?_dyr*(_dtxr/_dyr):0, \\\n                          _dtxl-=_dyl?_dyl*(_dtxl/_dyl):0, \\\n                          _dtyn-=_dyn?_dyn*(_dtyn/_dyn):0, \\\n                          _dtyr-=_dyr?_dyr*(_dtyr/_dyr):0, \\\n                          _dtyl-=_dyl?_dyl*(_dtyl/_dyl):0, \\\n                          std::min((int)(img)._height - y - 1,y2 - y)), \\\n               _errn = _dyn/2, _errcn = _errn, _errtxn = _errn, _errtyn = _errn, \\\n               _errr = _dyr/2, _errcr = _errr, _errtxr = _errr, _errtyr = _errr, \\\n               _errl = _dyl/2, _errcl = _errl, _errtxl = _errl, _errtyl = _errl, \\\n               _rxn = _dyn?(x2 - x1)/_dyn:0, \\\n               _rcn = _dyn?(c2 - c1)/_dyn:0, \\\n               _rtxn = _dyn?(tx2 - tx1)/_dyn:0, \\\n               _rtyn = _dyn?(ty2 - ty1)/_dyn:0, \\\n               _rxr = _dyr?(x2 - x0)/_dyr:0, \\\n               _rcr = _dyr?(c2 - c0)/_dyr:0, \\\n               _rtxr = _dyr?(tx2 - tx0)/_dyr:0, \\\n               _rtyr = _dyr?(ty2 - ty0)/_dyr:0, \\\n               _rxl = (y0!=y1 && y1>0)?(_dyl?(x1 - x0)/_dyl:0): \\\n                                       (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxn), \\\n               _rcl = (y0!=y1 && y1>0)?(_dyl?(c1 - c0)/_dyl:0): \\\n                                       (_errcl=_errcn, _dcl=_dcn, _dyl=_dyn, _scl=_scn, _rcn ), \\\n               _rtxl = (y0!=y1 && y1>0)?(_dyl?(tx1 - tx0)/_dyl:0): \\\n                                        (_errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxn ), \\\n               _rtyl = (y0!=y1 && y1>0)?(_dyl?(ty1 - ty0)/_dyl:0): \\\n                                        (_errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyn ); \\\n             _counter>=0; --_counter, ++y, \\\n               xr+=_rxr+((_errr-=_dxr)<0?_errr+=_dyr,_sxr:0), \\\n               cr+=_rcr+((_errcr-=_dcr)<0?_errcr+=_dyr,_scr:0), \\\n               txr+=_rtxr+((_errtxr-=_dtxr)<0?_errtxr+=_dyr,_stxr:0), \\\n               tyr+=_rtyr+((_errtyr-=_dtyr)<0?_errtyr+=_dyr,_styr:0), \\\n               xl+=(y!=y1)?(cl+=_rcl+((_errcl-=_dcl)<0?(_errcl+=_dyl,_scl):0), \\\n                            txl+=_rtxl+((_errtxl-=_dtxl)<0?(_errtxl+=_dyl,_stxl):0), \\\n                            tyl+=_rtyl+((_errtyl-=_dtyl)<0?(_errtyl+=_dyl,_styl):0), \\\n                            _rxl+((_errl-=_dxl)<0?(_errl+=_dyl,_sxl):0)): \\\n               (_errcl=_errcn, _dcl=_dcn, _dyl=_dyn, _scl=_scn, _rcl=_rcn, cl=c1, \\\n                _errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxl=_rtxn, txl=tx1, \\\n                _errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyl=_rtyn, tyl=ty1, \\\n                _errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxl=_rxn, x1 - xl))\n\n#define _cimg_for_triangle5(img,xl,txl,tyl,lxl,lyl,xr,txr,tyr,lxr,lyr,y,x0,y0,\\\n                            tx0,ty0,lx0,ly0,x1,y1,tx1,ty1,lx1,ly1,x2,y2,tx2,ty2,lx2,ly2) \\\n        for (int y = y0<0?0:y0, \\\n               xr = y0>=0?x0:(x0 - y0*(x2 - x0)/(y2 - y0)), \\\n               txr = y0>=0?tx0:(tx0 - y0*(tx2 - tx0)/(y2 - y0)), \\\n               tyr = y0>=0?ty0:(ty0 - y0*(ty2 - ty0)/(y2 - y0)), \\\n               lxr = y0>=0?lx0:(lx0 - y0*(lx2 - lx0)/(y2 - y0)), \\\n               lyr = y0>=0?ly0:(ly0 - y0*(ly2 - ly0)/(y2 - y0)), \\\n               xl = y1>=0?(y0>=0?(y0==y1?x1:x0):(x0 - y0*(x1 - x0)/(y1 - y0))):(x1 - y1*(x2 - x1)/(y2 - y1)), \\\n               txl = y1>=0?(y0>=0?(y0==y1?tx1:tx0):(tx0 - y0*(tx1 - tx0)/(y1 - y0))):(tx1 - y1*(tx2 - tx1)/(y2 - y1)), \\\n               tyl = y1>=0?(y0>=0?(y0==y1?ty1:ty0):(ty0 - y0*(ty1 - ty0)/(y1 - y0))):(ty1 - y1*(ty2 - ty1)/(y2 - y1)), \\\n               lxl = y1>=0?(y0>=0?(y0==y1?lx1:lx0):(lx0 - y0*(lx1 - lx0)/(y1 - y0))):(lx1 - y1*(lx2 - lx1)/(y2 - y1)), \\\n               lyl = y1>=0?(y0>=0?(y0==y1?ly1:ly0):(ly0 - y0*(ly1 - ly0)/(y1 - y0))):(ly1 - y1*(ly2 - ly1)/(y2 - y1)), \\\n               _sxn=1, _stxn=1, _styn=1, _slxn=1, _slyn=1, \\\n               _sxr=1, _stxr=1, _styr=1, _slxr=1, _slyr=1, \\\n               _sxl=1, _stxl=1, _styl=1, _slxl=1, _slyl=1, \\\n               _dxn = x2>x1?x2 - x1:(_sxn=-1,x1 - x2), _dyn = y2 - y1, \\\n               _dxr = x2>x0?x2 - x0:(_sxr=-1,x0 - x2), _dyr = y2 - y0, \\\n               _dxl = x1>x0?x1 - x0:(_sxl=-1,x0 - x1), _dyl = y1 - y0, \\\n               _dtxn = tx2>tx1?tx2 - tx1:(_stxn=-1,tx1 - tx2), \\\n               _dtxr = tx2>tx0?tx2 - tx0:(_stxr=-1,tx0 - tx2), \\\n               _dtxl = tx1>tx0?tx1 - tx0:(_stxl=-1,tx0 - tx1), \\\n               _dtyn = ty2>ty1?ty2 - ty1:(_styn=-1,ty1 - ty2), \\\n               _dtyr = ty2>ty0?ty2 - ty0:(_styr=-1,ty0 - ty2), \\\n               _dtyl = ty1>ty0?ty1 - ty0:(_styl=-1,ty0 - ty1), \\\n               _dlxn = lx2>lx1?lx2 - lx1:(_slxn=-1,lx1 - lx2), \\\n               _dlxr = lx2>lx0?lx2 - lx0:(_slxr=-1,lx0 - lx2), \\\n               _dlxl = lx1>lx0?lx1 - lx0:(_slxl=-1,lx0 - lx1), \\\n               _dlyn = ly2>ly1?ly2 - ly1:(_slyn=-1,ly1 - ly2), \\\n               _dlyr = ly2>ly0?ly2 - ly0:(_slyr=-1,ly0 - ly2), \\\n               _dlyl = ly1>ly0?ly1 - ly0:(_slyl=-1,ly0 - ly1), \\\n               _counter =(_dxn-=_dyn?_dyn*(_dxn/_dyn):0, \\\n                          _dxr-=_dyr?_dyr*(_dxr/_dyr):0, \\\n                          _dxl-=_dyl?_dyl*(_dxl/_dyl):0, \\\n                          _dtxn-=_dyn?_dyn*(_dtxn/_dyn):0, \\\n                          _dtxr-=_dyr?_dyr*(_dtxr/_dyr):0, \\\n                          _dtxl-=_dyl?_dyl*(_dtxl/_dyl):0, \\\n                          _dtyn-=_dyn?_dyn*(_dtyn/_dyn):0, \\\n                          _dtyr-=_dyr?_dyr*(_dtyr/_dyr):0, \\\n                          _dtyl-=_dyl?_dyl*(_dtyl/_dyl):0, \\\n                          _dlxn-=_dyn?_dyn*(_dlxn/_dyn):0, \\\n                          _dlxr-=_dyr?_dyr*(_dlxr/_dyr):0, \\\n                          _dlxl-=_dyl?_dyl*(_dlxl/_dyl):0, \\\n                          _dlyn-=_dyn?_dyn*(_dlyn/_dyn):0, \\\n                          _dlyr-=_dyr?_dyr*(_dlyr/_dyr):0, \\\n                          _dlyl-=_dyl?_dyl*(_dlyl/_dyl):0, \\\n                          std::min((int)(img)._height - y - 1,y2 - y)), \\\n               _errn = _dyn/2, _errtxn = _errn, _errtyn = _errn, _errlxn = _errn, _errlyn = _errn, \\\n               _errr = _dyr/2, _errtxr = _errr, _errtyr = _errr, _errlxr = _errr, _errlyr = _errr, \\\n               _errl = _dyl/2, _errtxl = _errl, _errtyl = _errl, _errlxl = _errl, _errlyl = _errl, \\\n               _rxn = _dyn?(x2 - x1)/_dyn:0, \\\n               _rtxn = _dyn?(tx2 - tx1)/_dyn:0, \\\n               _rtyn = _dyn?(ty2 - ty1)/_dyn:0, \\\n               _rlxn = _dyn?(lx2 - lx1)/_dyn:0, \\\n               _rlyn = _dyn?(ly2 - ly1)/_dyn:0, \\\n               _rxr = _dyr?(x2 - x0)/_dyr:0, \\\n               _rtxr = _dyr?(tx2 - tx0)/_dyr:0, \\\n               _rtyr = _dyr?(ty2 - ty0)/_dyr:0, \\\n               _rlxr = _dyr?(lx2 - lx0)/_dyr:0, \\\n               _rlyr = _dyr?(ly2 - ly0)/_dyr:0, \\\n               _rxl = (y0!=y1 && y1>0)?(_dyl?(x1 - x0)/_dyl:0): \\\n                                       (_errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxn), \\\n               _rtxl = (y0!=y1 && y1>0)?(_dyl?(tx1 - tx0)/_dyl:0): \\\n                                        (_errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxn ), \\\n               _rtyl = (y0!=y1 && y1>0)?(_dyl?(ty1 - ty0)/_dyl:0): \\\n                                        (_errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyn ), \\\n               _rlxl = (y0!=y1 && y1>0)?(_dyl?(lx1 - lx0)/_dyl:0): \\\n                                        (_errlxl=_errlxn, _dlxl=_dlxn, _dyl=_dyn, _slxl=_slxn, _rlxn ), \\\n               _rlyl = (y0!=y1 && y1>0)?(_dyl?(ly1 - ly0)/_dyl:0): \\\n                                        (_errlyl=_errlyn, _dlyl=_dlyn, _dyl=_dyn, _slyl=_slyn, _rlyn ); \\\n             _counter>=0; --_counter, ++y, \\\n               xr+=_rxr+((_errr-=_dxr)<0?_errr+=_dyr,_sxr:0), \\\n               txr+=_rtxr+((_errtxr-=_dtxr)<0?_errtxr+=_dyr,_stxr:0), \\\n               tyr+=_rtyr+((_errtyr-=_dtyr)<0?_errtyr+=_dyr,_styr:0), \\\n               lxr+=_rlxr+((_errlxr-=_dlxr)<0?_errlxr+=_dyr,_slxr:0), \\\n               lyr+=_rlyr+((_errlyr-=_dlyr)<0?_errlyr+=_dyr,_slyr:0), \\\n               xl+=(y!=y1)?(txl+=_rtxl+((_errtxl-=_dtxl)<0?(_errtxl+=_dyl,_stxl):0), \\\n                            tyl+=_rtyl+((_errtyl-=_dtyl)<0?(_errtyl+=_dyl,_styl):0), \\\n                            lxl+=_rlxl+((_errlxl-=_dlxl)<0?(_errlxl+=_dyl,_slxl):0), \\\n                            lyl+=_rlyl+((_errlyl-=_dlyl)<0?(_errlyl+=_dyl,_slyl):0), \\\n                            _rxl+((_errl-=_dxl)<0?(_errl+=_dyl,_sxl):0)): \\\n               (_errtxl=_errtxn, _dtxl=_dtxn, _dyl=_dyn, _stxl=_stxn, _rtxl=_rtxn, txl=tx1, \\\n                _errtyl=_errtyn, _dtyl=_dtyn, _dyl=_dyn, _styl=_styn, _rtyl=_rtyn, tyl=ty1, \\\n                _errlxl=_errlxn, _dlxl=_dlxn, _dyl=_dyn, _slxl=_slxn, _rlxl=_rlxn, lxl=lx1, \\\n                _errlyl=_errlyn, _dlyl=_dlyn, _dyl=_dyn, _slyl=_slyn, _rlyl=_rlyn, lyl=ly1, \\\n                _errl=_errn, _dxl=_dxn, _dyl=_dyn, _sxl=_sxn, _rxl=_rxn, x1 - xl))\n\n    // [internal] Draw a filled triangle.\n    template<typename tc>\n    CImg<T>& _draw_triangle(const int x0, const int y0,\n                            const int x1, const int y1,\n                            const int x2, const int y2,\n                            const tc *const color, const float opacity,\n                            const float brightness) {\n      cimg_init_scanline(color,opacity);\n      const float nbrightness = cimg::cut(brightness,0,2);\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2);\n      if (ny0<height() && ny2>=0) {\n        if ((nx1 - nx0)*(ny2 - ny0) - (nx2 - nx0)*(ny1 - ny0)<0)\n          _cimg_for_triangle1(*this,xl,xr,y,nx0,ny0,nx1,ny1,nx2,ny2)\n            cimg_draw_scanline(xl,xr,y,color,opacity,nbrightness);\n        else\n          _cimg_for_triangle1(*this,xl,xr,y,nx0,ny0,nx1,ny1,nx2,ny2)\n            cimg_draw_scanline(xr,xl,y,color,opacity,nbrightness);\n      }\n      return *this;\n    }\n\n    //! Draw a filled 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex.\n       \\param y0 Y-coordinate of the first vertex.\n       \\param x1 X-coordinate of the second vertex.\n       \\param y1 Y-coordinate of the second vertex.\n       \\param x2 X-coordinate of the third vertex.\n       \\param y2 Y-coordinate of the third vertex.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n     **/\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      _draw_triangle(x0,y0,x1,y1,x2,y2,color,opacity,1);\n      return *this;\n    }\n\n    //! Draw a outlined 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex.\n       \\param y0 Y-coordinate of the first vertex.\n       \\param x1 X-coordinate of the second vertex.\n       \\param y1 Y-coordinate of the second vertex.\n       \\param x2 X-coordinate of the third vertex.\n       \\param y2 Y-coordinate of the third vertex.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the outline pattern.\n     **/\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const tc *const color, const float opacity,\n                           const unsigned int pattern) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      draw_line(x0,y0,x1,y1,color,opacity,pattern,true).\n        draw_line(x1,y1,x2,y2,color,opacity,pattern,false).\n        draw_line(x2,y2,x0,y0,color,opacity,pattern,false);\n      return *this;\n    }\n\n    //! Draw a filled 2d triangle, with z-buffering.\n    /**\n       \\param zbuffer Z-buffer image.\n       \\param x0 X-coordinate of the first vertex.\n       \\param y0 Y-coordinate of the first vertex.\n       \\param z0 Z-coordinate of the first vertex.\n       \\param x1 X-coordinate of the second vertex.\n       \\param y1 Y-coordinate of the second vertex.\n       \\param z1 Z-coordinate of the second vertex.\n       \\param x2 X-coordinate of the third vertex.\n       \\param y2 Y-coordinate of the third vertex.\n       \\param z2 Z-coordinate of the third vertex.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param brightness Brightness factor.\n    **/\n    template<typename tz, typename tc>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const tc *const color, const float opacity=1,\n                           const float brightness=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float\n        nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f),\n        nbrightness = cimg::cut(brightness,0,2);\n      const longT whd = (longT)width()*height()*depth(), offx = spectrum()*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2;\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle1(*this,xleft0,xright0,y,nx0,ny0,nx1,ny1,nx2,ny2) {\n        if (y==ny1) { zl = nz1; pzl = pzn; }\n        int xleft = xleft0, xright = xright0;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright);\n        const int dx = xright - xleft;\n        const tzfloat pentez = (zright - zleft)/dx;\n        if (xleft<0 && dx) zleft-=xleft*(zright - zleft)/dx;\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        tz *ptrz = xleft<=xright?zbuffer.data(xleft,y):0;\n        if (opacity>=1) {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color; cimg_forC(*this,c) { *ptrd = (T)*(col++); ptrd+=whd; }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color; cimg_forC(*this,c) { *ptrd = (T)(nbrightness*(*col++)); ptrd+=whd; }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color;\n              cimg_forC(*this,c) { *ptrd = (T)((2 - nbrightness)**(col++) + (nbrightness - 1)*maxval); ptrd+=whd; }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          }\n        } else {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color; cimg_forC(*this,c) { *ptrd = (T)(nopacity**(col++) + *ptrd*copacity); ptrd+=whd; }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color;\n              cimg_forC(*this,c) { *ptrd = (T)(nopacity*nbrightness**(col++) + *ptrd*copacity); ptrd+=whd; }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n              const tc *col = color;\n              cimg_forC(*this,c) {\n                const T val = (T)((2 - nbrightness)**(col++) + (nbrightness - 1)*maxval);\n                *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                ptrd+=whd;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n          }\n        }\n        zr+=pzr; zl+=pzl;\n      }\n      return *this;\n    }\n\n    //! Draw a Gouraud-shaded 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param brightness0 Brightness factor of the first vertex (in [0,2]).\n       \\param brightness1 brightness factor of the second vertex (in [0,2]).\n       \\param brightness2 brightness factor of the third vertex (in [0,2]).\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const tc *const color,\n                           const float brightness0,\n                           const float brightness1,\n                           const float brightness2,\n                           const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const longT whd = (longT)width()*height()*depth(), offx = spectrum()*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nc0 = (int)((brightness0<0.0f?0.0f:(brightness0>2.0f?2.0f:brightness0))*256.0f),\n        nc1 = (int)((brightness1<0.0f?0.0f:(brightness1>2.0f?2.0f:brightness1))*256.0f),\n        nc2 = (int)((brightness2<0.0f?0.0f:(brightness2>2.0f?2.0f:brightness2))*256.0f);\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nc0,nc1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,nc0,nc2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,nc1,nc2);\n      if (ny0>=height() || ny2<0) return *this;\n      _cimg_for_triangle2(*this,xleft0,cleft0,xright0,cright0,y,nx0,ny0,nc0,nx1,ny1,nc1,nx2,ny2,nc2) {\n        int xleft = xleft0, xright = xright0, cleft = cleft0, cright = cright0;\n        if (xright<xleft) cimg::swap(xleft,xright,cleft,cright);\n        const int\n          dx = xright - xleft,\n          dc = cright>cleft?cright - cleft:cleft - cright,\n          rc = dx?(cright - cleft)/dx:0,\n          sc = cright>cleft?1:-1,\n          ndc = dc - (dx?dx*(dc/dx):0);\n        int errc = dx>>1;\n        if (xleft<0 && dx) cleft-=xleft*(cright - cleft)/dx;\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const tc *col = color;\n          cimg_forC(*this,c) {\n            *ptrd = (T)(cleft<256?cleft**(col++)/256:((512 - cleft)**(col++)+(cleft - 256)*maxval)/256);\n            ptrd+=whd;\n          }\n          ptrd-=offx;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n        } else for (int x = xleft; x<=xright; ++x) {\n          const tc *col = color;\n          cimg_forC(*this,c) {\n            const T val = (T)(cleft<256?cleft**(col++)/256:((512 - cleft)**(col++)+(cleft - 256)*maxval)/256);\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd;\n          }\n          ptrd-=offx;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a Gouraud-shaded 2d triangle, with z-buffering \\overloading.\n    template<typename tz, typename tc>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const tc *const color,\n                           const float brightness0,\n                           const float brightness1,\n                           const float brightness2,\n                           const float opacity=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const longT whd = (longT)width()*height()*depth(), offx = spectrum()*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nc0 = (int)((brightness0<0.0f?0.0f:(brightness0>2.0f?2.0f:brightness0))*256.0f),\n        nc1 = (int)((brightness1<0.0f?0.0f:(brightness1>2.0f?2.0f:brightness1))*256.0f),\n        nc2 = (int)((brightness2<0.0f?0.0f:(brightness2>2.0f?2.0f:brightness2))*256.0f);\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nz0,nz1,nc0,nc1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,nz0,nz2,nc0,nc2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,nz1,nz2,nc1,nc2);\n      if (ny0>=height() || ny2<0) return *this;\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle2(*this,xleft0,cleft0,xright0,cright0,y,nx0,ny0,nc0,nx1,ny1,nc1,nx2,ny2,nc2) {\n        if (y==ny1) { zl = nz1; pzl = pzn; }\n        int xleft = xleft0, xright = xright0, cleft = cleft0, cright = cright0;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,cleft,cright);\n        const int\n          dx = xright - xleft,\n          dc = cright>cleft?cright - cleft:cleft - cright,\n          rc = dx?(cright - cleft)/dx:0,\n          sc = cright>cleft?1:-1,\n          ndc = dc - (dx?dx*(dc/dx):0);\n        const tzfloat pentez = (zright - zleft)/dx;\n        int errc = dx>>1;\n        if (xleft<0 && dx) {\n          cleft-=xleft*(cright - cleft)/dx;\n          zleft-=xleft*(zright - zleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T *ptrd = data(xleft,y);\n        tz *ptrz = xleft<=xright?zbuffer.data(xleft,y):0;\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x, ++ptrd, ++ptrz) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tc *col = color;\n              cimg_forC(*this,c) {\n                *ptrd = (T)(cleft<256?cleft**(col++)/256:((512 - cleft)**(col++)+(cleft - 256)*maxval)/256);\n                ptrd+=whd;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n            cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          } else for (int x = xleft; x<=xright; ++x, ++ptrd, ++ptrz) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tc *col = color;\n              cimg_forC(*this,c) {\n                const T val = (T)(cleft<256?cleft**(col++)/256:((512 - cleft)**(col++)+(cleft - 256)*maxval)/256);\n                *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                ptrd+=whd;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n            cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          }\n        zr+=pzr; zl+=pzl;\n      }\n      return *this;\n    }\n\n    //! Draw a color-interpolated 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param color1 Pointer to \\c spectrum() consecutive values of type \\c T, defining the color of the first vertex.\n       \\param color2 Pointer to \\c spectrum() consecutive values of type \\c T, defining the color of the seconf vertex.\n       \\param color3 Pointer to \\c spectrum() consecutive values of type \\c T, defining the color of the third vertex.\n       \\param opacity Drawing opacity.\n     **/\n    template<typename tc1, typename tc2, typename tc3>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const tc1 *const color1,\n                           const tc2 *const color2,\n                           const tc3 *const color3,\n                           const float opacity=1) {\n      const unsigned char one = 1;\n      cimg_forC(*this,c)\n        get_shared_channel(c).draw_triangle(x0,y0,x1,y1,x2,y2,&one,color1[c],color2[c],color3[c],opacity);\n      return *this;\n    }\n\n    //! Draw a textured 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param texture Texture image used to fill the triangle.\n       \\param tx0 X-coordinate of the first vertex in the texture image.\n       \\param ty0 Y-coordinate of the first vertex in the texture image.\n       \\param tx1 X-coordinate of the second vertex in the texture image.\n       \\param ty1 Y-coordinate of the second vertex in the texture image.\n       \\param tx2 X-coordinate of the third vertex in the texture image.\n       \\param ty2 Y-coordinate of the third vertex in the texture image.\n       \\param opacity Drawing opacity.\n       \\param brightness Brightness factor of the drawing (in [0,2]).\n    **/\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float opacity=1,\n                           const float brightness=1) {\n      if (is_empty()) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_triangle(x0,y0,x1,y1,x2,y2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,opacity,brightness);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),cimg::type<tc>::max());\n      const float\n        nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f),\n        nbrightness = cimg::cut(brightness,0,2);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        ntx0 = tx0, nty0 = ty0, ntx1 = tx1, nty1 = ty1, ntx2 = tx2, nty2 = ty2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2);\n      if (ny0>=height() || ny2<0) return *this;\n      _cimg_for_triangle3(*this,xleft0,txleft0,tyleft0,xright0,txright0,tyright0,y,\n                          nx0,ny0,ntx0,nty0,nx1,ny1,ntx1,nty1,nx2,ny2,ntx2,nty2) {\n        int\n          xleft = xleft0, xright = xright0,\n          txleft = txleft0, txright = txright0,\n          tyleft = tyleft0, tyright = tyright0;\n        if (xright<xleft) cimg::swap(xleft,xright,txleft,txright,tyleft,tyright);\n        const int\n          dx = xright - xleft,\n          dtx = txright>txleft?txright - txleft:txleft - txright,\n          dty = tyright>tyleft?tyright - tyleft:tyleft - tyright,\n          rtx = dx?(txright - txleft)/dx:0,\n          rty = dx?(tyright - tyleft)/dx:0,\n          stx = txright>txleft?1:-1,\n          sty = tyright>tyleft?1:-1,\n          ndtx = dtx - (dx?dx*(dtx/dx):0),\n          ndty = dty - (dx?dx*(dty/dx):0);\n        int errtx = dx>>1, errty = errtx;\n        if (xleft<0 && dx) {\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              *ptrd = (T)*col;\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nbrightness**col);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          } else for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              *ptrd = (T)((2 - nbrightness)**(col++) + (nbrightness - 1)*maxval);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          }\n        } else {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nopacity**col + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nopacity*nbrightness**col + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          } else for (int x = xleft; x<=xright; ++x) {\n            const tc *col = &texture._atXY(txleft,tyleft);\n            cimg_forC(*this,c) {\n              const T val = (T)((2 - nbrightness)**(col++) + (nbrightness - 1)*maxval);\n              *ptrd = (T)(nopacity*val + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx;\n            txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n            tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d textured triangle, with perspective correction.\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float opacity=1,\n                           const float brightness=1) {\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,opacity,brightness);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float\n        nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f),\n        nbrightness = cimg::cut(brightness,0,2);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2;\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2,\n        nz0 = 1/z0, nz1 = 1/z1, nz2 = 1/z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1))),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      _cimg_for_triangle1(*this,xleft0,xright0,y,nx0,ny0,nx1,ny1,nx2,ny2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int xleft = xleft0, xright = xright0;\n        float\n          zleft = zl, zright = zr,\n          txleft = txl, txright = txr,\n          tyleft = tyl, tyright = tyr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright);\n        const int dx = xright - xleft;\n        const float\n          pentez = (zright - zleft)/dx,\n          pentetx = (txright - txleft)/dx,\n          pentety = (tyright - tyleft)/dx;\n        if (xleft<0 && dx) {\n          zleft-=xleft*(zright - zleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              *ptrd = (T)*col;\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          } else if (nbrightness<1) for (int x=xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nbrightness**col);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          } else for (int x = xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              *ptrd = (T)((2 - nbrightness)**col + (nbrightness - 1)*maxval);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          }\n        } else {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nopacity**col + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              *ptrd = (T)(nopacity*nbrightness**col + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          } else for (int x = xleft; x<=xright; ++x) {\n            const float invz = 1/zleft;\n            const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n            cimg_forC(*this,c) {\n              const T val = (T)((2 - nbrightness)**col + (nbrightness - 1)*maxval);\n              *ptrd = (T)(nopacity*val + *ptrd*copacity);\n              ptrd+=whd; col+=twh;\n            }\n            ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          }\n        }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a textured 2d triangle, with perspective correction and z-buffering.\n    template<typename tz, typename tc>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float opacity=1,\n                           const float brightness=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,opacity,brightness);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float\n        nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f),\n        nbrightness = cimg::cut(brightness,0,2);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2;\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2;\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle1(*this,xleft0,xright0,y,nx0,ny0,nx1,ny1,nx2,ny2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int xleft = xleft0, xright = xright0;\n        float txleft = txl, txright = txr, tyleft = tyl, tyright = tyr;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright);\n        const int dx = xright - xleft;\n        const float pentetx = (txright - txleft)/dx, pentety = (tyright - tyleft)/dx;\n        const tzfloat pentez = (zright - zleft)/dx;\n        if (xleft<0 && dx) {\n          zleft-=xleft*(zright - zleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T *ptrd = data(xleft,y,0,0);\n        tz *ptrz = zbuffer.data(xleft,y);\n        if (opacity>=1) {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  *ptrd = (T)*col;\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  *ptrd = (T)(nbrightness**col);\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  *ptrd = (T)((2 - nbrightness)**col + (nbrightness - 1)*maxval);\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            }\n        } else {\n          if (nbrightness==1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  *ptrd = (T)(nopacity**col + *ptrd*copacity);\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            } else if (nbrightness<1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  *ptrd = (T)(nopacity*nbrightness**col + *ptrd*copacity);\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n              if (zleft>=(tzfloat)*ptrz) {\n                *ptrz = (tz)zleft;\n                const tzfloat invz = 1/zleft;\n                const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n                cimg_forC(*this,c) {\n                  const T val = (T)((2 - nbrightness)**col + (nbrightness - 1)*maxval);\n                  *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                  ptrd+=whd; col+=twh;\n                }\n                ptrd-=offx;\n              }\n              zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            }\n        }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a Phong-shaded 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param light Light image.\n       \\param lx0 X-coordinate of the first vertex in the light image.\n       \\param ly0 Y-coordinate of the first vertex in the light image.\n       \\param lx1 X-coordinate of the second vertex in the light image.\n       \\param ly1 Y-coordinate of the second vertex in the light image.\n       \\param lx2 X-coordinate of the third vertex in the light image.\n       \\param ly2 Y-coordinate of the third vertex in the light image.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc, typename tl>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const tc *const color,\n                           const CImg<tl>& light,\n                           const int lx0, const int ly0,\n                           const int lx1, const int ly1,\n                           const int lx2, const int ly2,\n                           const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      if (light._depth>1 || light._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified light texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,light._width,light._height,light._depth,light._spectrum,light._data);\n      if (is_overlapped(light)) return draw_triangle(x0,y0,x1,y1,x2,y2,color,+light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nlx0 = lx0, nly0 = ly0, nlx1 = lx1, nly1 = ly1, nlx2 = lx2, nly2 = ly2;\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        lwh = (ulongT)light._width*light._height,\n        offx = _spectrum*whd - 1;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nlx0,nlx1,nly0,nly1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,nlx0,nlx2,nly0,nly2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,nlx1,nlx2,nly1,nly2);\n      if (ny0>=height() || ny2<0) return *this;\n      _cimg_for_triangle3(*this,xleft0,lxleft0,lyleft0,xright0,lxright0,lyright0,y,\n                          nx0,ny0,nlx0,nly0,nx1,ny1,nlx1,nly1,nx2,ny2,nlx2,nly2) {\n        int\n          xleft = xleft0, xright = xright0,\n          lxleft = lxleft0, lxright = lxright0,\n          lyleft = lyleft0, lyright = lyright0;\n        if (xright<xleft) cimg::swap(xleft,xright,lxleft,lxright,lyleft,lyright);\n        const int\n          dx = xright - xleft,\n          dlx = lxright>lxleft?lxright - lxleft:lxleft - lxright,\n          dly = lyright>lyleft?lyright - lyleft:lyleft - lyright,\n          rlx = dx?(lxright - lxleft)/dx:0,\n          rly = dx?(lyright - lyleft)/dx:0,\n          slx = lxright>lxleft?1:-1,\n          sly = lyright>lyleft?1:-1,\n          ndlx = dlx - (dx?dx*(dlx/dx):0),\n          ndly = dly - (dx?dx*(dly/dx):0);\n        int errlx = dx>>1, errly = errlx;\n        if (xleft<0 && dx) {\n          lxleft-=xleft*(lxright - lxleft)/dx;\n          lyleft-=xleft*(lyright - lyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const tc *col = color;\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            *ptrd = (T)(l<1?l**(col++):((2 - l)**(col++) + (l - 1)*maxval));\n            ptrd+=whd; lig+=lwh;\n          }\n          ptrd-=offx;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n        } else  for (int x = xleft; x<=xright; ++x) {\n          const tc *col = color;\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            const T val = (T)(l<1?l**(col++):((2 - l)**(col++) + (l - 1)*maxval));\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd; lig+=lwh;\n          }\n          ptrd-=offx;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a Phong-shaded 2d triangle, with z-buffering.\n    template<typename tz, typename tc, typename tl>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const tc *const color,\n                           const CImg<tl>& light,\n                           const int lx0, const int ly0,\n                           const int lx1, const int ly1,\n                           const int lx2, const int ly2,\n                           const float opacity=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Specified color is (null).\",\n                                    cimg_instance);\n      if (light._depth>1 || light._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified light texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,light._width,light._height,light._depth,light._spectrum,light._data);\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      if (is_overlapped(light)) return draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,\n                                                     +light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        lwh = (ulongT)light._width*light._height,\n        offx = _spectrum*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nlx0 = lx0, nly0 = ly0, nlx1 = lx1, nly1 = ly1, nlx2 = lx2, nly2 = ly2;\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,nlx0,nlx1,nly0,nly1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,nlx0,nlx2,nly0,nly2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,nlx1,nlx2,nly1,nly2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle3(*this,xleft0,lxleft0,lyleft0,xright0,lxright0,lyright0,y,\n                          nx0,ny0,nlx0,nly0,nx1,ny1,nlx1,nly1,nx2,ny2,nlx2,nly2) {\n        if (y==ny1) { zl = nz1; pzl = pzn; }\n        int\n          xleft = xleft0, xright = xright0,\n          lxleft = lxleft0, lxright = lxright0,\n          lyleft = lyleft0, lyright = lyright0;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,lxleft,lxright,lyleft,lyright);\n        const int\n          dx = xright - xleft,\n          dlx = lxright>lxleft?lxright - lxleft:lxleft - lxright,\n          dly = lyright>lyleft?lyright - lyleft:lyleft - lyright,\n          rlx = dx?(lxright - lxleft)/dx:0,\n          rly = dx?(lyright - lyleft)/dx:0,\n          slx = lxright>lxleft?1:-1,\n          sly = lyright>lyleft?1:-1,\n          ndlx = dlx - (dx?dx*(dlx/dx):0),\n          ndly = dly - (dx?dx*(dly/dx):0);\n        const tzfloat pentez = (zright - zleft)/dx;\n        int errlx = dx>>1, errly = errlx;\n        if (xleft<0 && dx) {\n          zleft-=xleft*(zright - zleft)/dx;\n          lxleft-=xleft*(lxright - lxleft)/dx;\n          lyleft-=xleft*(lyright - lyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T *ptrd = data(xleft,y,0,0);\n        tz *ptrz = xleft<=xright?zbuffer.data(xleft,y):0;\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tc *col = color;\n              const tl *lig = &light._atXY(lxleft,lyleft);\n              cimg_forC(*this,c) {\n                const tl l = *lig;\n                const tc cval = *(col++);\n                *ptrd = (T)(l<1?l*cval:(2 - l)*cval + (l - 1)*maxval);\n                ptrd+=whd; lig+=lwh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n            lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n            lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tc *col = color;\n              const tl *lig = &light._atXY(lxleft,lyleft);\n              cimg_forC(*this,c) {\n                const tl l = *lig;\n                const tc cval = *(col++);\n                const T val = (T)(l<1?l*cval:(2 - l)*cval + (l - 1)*maxval);\n                *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                ptrd+=whd; lig+=lwh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez;\n            lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n            lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          }\n        zr+=pzr; zl+=pzl;\n      }\n      return *this;\n    }\n\n    //! Draw a textured Gouraud-shaded 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param texture Texture image used to fill the triangle.\n       \\param tx0 X-coordinate of the first vertex in the texture image.\n       \\param ty0 Y-coordinate of the first vertex in the texture image.\n       \\param tx1 X-coordinate of the second vertex in the texture image.\n       \\param ty1 Y-coordinate of the second vertex in the texture image.\n       \\param tx2 X-coordinate of the third vertex in the texture image.\n       \\param ty2 Y-coordinate of the third vertex in the texture image.\n       \\param brightness0 Brightness factor of the first vertex.\n       \\param brightness1 Brightness factor of the second vertex.\n       \\param brightness2 Brightness factor of the third vertex.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float brightness0,\n                           const float brightness1,\n                           const float brightness2,\n                           const float opacity=1) {\n      if (is_empty()) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_triangle(x0,y0,x1,y1,x2,y2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,\n                             brightness0,brightness1,brightness2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        ntx0 = tx0, nty0 = ty0, ntx1 = tx1, nty1 = ty1, ntx2 = tx2, nty2 = ty2,\n        nc0 = (int)((brightness0<0.0f?0.0f:(brightness0>2.0f?2.0f:brightness0))*256.0f),\n        nc1 = (int)((brightness1<0.0f?0.0f:(brightness1>2.0f?2.0f:brightness1))*256.0f),\n        nc2 = (int)((brightness2<0.0f?0.0f:(brightness2>2.0f?2.0f:brightness2))*256.0f);\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nc0,nc1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nc0,nc2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nc1,nc2);\n      if (ny0>=height() || ny2<0) return *this;\n      _cimg_for_triangle4(*this,xleft0,cleft0,txleft0,tyleft0,xright0,cright0,txright0,tyright0,y,\n                          nx0,ny0,nc0,ntx0,nty0,nx1,ny1,nc1,ntx1,nty1,nx2,ny2,nc2,ntx2,nty2) {\n        int\n          xleft = xleft0, xright = xright0,\n          cleft = cleft0, cright = cright0,\n          txleft = txleft0, txright = txright0,\n          tyleft = tyleft0, tyright = tyright0;\n        if (xright<xleft) cimg::swap(xleft,xright,cleft,cright,txleft,txright,tyleft,tyright);\n        const int\n          dx = xright - xleft,\n          dc = cright>cleft?cright - cleft:cleft - cright,\n          dtx = txright>txleft?txright - txleft:txleft - txright,\n          dty = tyright>tyleft?tyright - tyleft:tyleft - tyright,\n          rc = dx?(cright - cleft)/dx:0,\n          rtx = dx?(txright - txleft)/dx:0,\n          rty = dx?(tyright - tyleft)/dx:0,\n          sc = cright>cleft?1:-1,\n          stx = txright>txleft?1:-1,\n          sty = tyright>tyleft?1:-1,\n          ndc = dc - (dx?dx*(dc/dx):0),\n          ndtx = dtx - (dx?dx*(dtx/dx):0),\n          ndty = dty - (dx?dx*(dty/dx):0);\n        int errc = dx>>1, errtx = errc, errty = errc;\n        if (xleft<0 && dx) {\n          cleft-=xleft*(cright - cleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const tc *col = &texture._atXY(txleft,tyleft);\n          cimg_forC(*this,c) {\n            *ptrd = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n            ptrd+=whd; col+=twh;\n          }\n          ptrd-=offx;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n          tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n        } else for (int x = xleft; x<=xright; ++x) {\n          const tc *col = &texture._atXY(txleft,tyleft);\n          cimg_forC(*this,c) {\n            const T val = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd; col+=twh;\n          }\n          ptrd-=offx;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n          tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a textured Gouraud-shaded 2d triangle, with perspective correction \\overloading.\n    template<typename tc>\n    CImg<T>& draw_triangle(const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float brightness0,\n                           const float brightness1,\n                           const float brightness2,\n                           const float opacity=1) {\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture)) return draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,\n                                                       brightness0,brightness1,brightness2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nc0 = (int)((brightness0<0.0f?0.0f:(brightness0>2.0f?2.0f:brightness0))*256.0f),\n        nc1 = (int)((brightness1<0.0f?0.0f:(brightness1>2.0f?2.0f:brightness1))*256.0f),\n        nc2 = (int)((brightness2<0.0f?0.0f:(brightness2>2.0f?2.0f:brightness2))*256.0f);\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2,\n        nz0 = 1/z0, nz1 = 1/z1, nz2 = 1/z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nz0,nz1,nc0,nc1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nz0,nz2,nc0,nc2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nz1,nz2,nc1,nc2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1))),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      _cimg_for_triangle2(*this,xleft0,cleft0,xright0,cright0,y,nx0,ny0,nc0,nx1,ny1,nc1,nx2,ny2,nc2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int\n          xleft = xleft0, xright = xright0,\n          cleft = cleft0, cright = cright0;\n        float\n          zleft = zl, zright = zr,\n          txleft = txl, txright = txr,\n          tyleft = tyl, tyright = tyr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright,cleft,cright);\n        const int\n          dx = xright - xleft,\n          dc = cright>cleft?cright - cleft:cleft - cright,\n          rc = dx?(cright - cleft)/dx:0,\n          sc = cright>cleft?1:-1,\n          ndc = dc - (dx?dx*(dc/dx):0);\n        const float\n          pentez = (zright - zleft)/dx,\n          pentetx = (txright - txleft)/dx,\n          pentety = (tyright - tyleft)/dx;\n        int errc = dx>>1;\n        if (xleft<0 && dx) {\n          cleft-=xleft*(cright - cleft)/dx;\n          zleft-=xleft*(zright - zleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const float invz = 1/zleft;\n          const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n          cimg_forC(*this,c) {\n            *ptrd = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n            ptrd+=whd; col+=twh;\n          }\n          ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n        } else for (int x = xleft; x<=xright; ++x) {\n          const float invz = 1/zleft;\n          const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n          cimg_forC(*this,c) {\n            const T val = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd; col+=twh;\n          }\n          ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n        }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a textured Gouraud-shaded 2d triangle, with perspective correction and z-buffering \\overloading.\n    template<typename tz, typename tc>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const float brightness0,\n                           const float brightness1,\n                           const float brightness2,\n                           const float opacity=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (is_overlapped(texture))\n        return draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,\n                                                       brightness0,brightness1,brightness2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        offx = _spectrum*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nc0 = (int)((brightness0<0.0f?0.0f:(brightness0>2.0f?2.0f:brightness0))*256.0f),\n        nc1 = (int)((brightness1<0.0f?0.0f:(brightness1>2.0f?2.0f:brightness1))*256.0f),\n        nc2 = (int)((brightness2<0.0f?0.0f:(brightness2>2.0f?2.0f:brightness2))*256.0f);\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2;\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nz0,nz1,nc0,nc1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nz0,nz2,nc0,nc2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nz1,nz2,nc1,nc2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle2(*this,xleft0,cleft0,xright0,cright0,y,nx0,ny0,nc0,nx1,ny1,nc1,nx2,ny2,nc2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int xleft = xleft0, xright = xright0, cleft = cleft0, cright = cright0;\n        float txleft = txl, txright = txr, tyleft = tyl, tyright = tyr;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft) cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright,cleft,cright);\n        const int\n          dx = xright - xleft,\n          dc = cright>cleft?cright - cleft:cleft - cright,\n          rc = dx?(cright - cleft)/dx:0,\n          sc = cright>cleft?1:-1,\n          ndc = dc - (dx?dx*(dc/dx):0);\n        float pentetx = (txright - txleft)/dx, pentety = (tyright - tyleft)/dx;\n        const tzfloat pentez = (zright - zleft)/dx;\n        int errc = dx>>1;\n        if (xleft<0 && dx) {\n          cleft-=xleft*(cright - cleft)/dx;\n          zleft-=xleft*(zright - zleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y);\n        tz *ptrz = zbuffer.data(xleft,y);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x, ++ptrd, ++ptrz) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tzfloat invz = 1/zleft;\n              const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n              cimg_forC(*this,c) {\n                *ptrd = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n                ptrd+=whd; col+=twh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          } else for (int x = xleft; x<=xright; ++x, ++ptrd, ++ptrz) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tzfloat invz = 1/zleft;\n              const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n              cimg_forC(*this,c) {\n                const T val = (T)(cleft<256?cleft**col/256:((512 - cleft)**col + (cleft - 256)*maxval)/256);\n                *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                ptrd+=whd; col+=twh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            cleft+=rc+((errc-=ndc)<0?errc+=dx,sc:0);\n          }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a textured Phong-shaded 2d triangle.\n    /**\n       \\param x0 X-coordinate of the first vertex in the image instance.\n       \\param y0 Y-coordinate of the first vertex in the image instance.\n       \\param x1 X-coordinate of the second vertex in the image instance.\n       \\param y1 Y-coordinate of the second vertex in the image instance.\n       \\param x2 X-coordinate of the third vertex in the image instance.\n       \\param y2 Y-coordinate of the third vertex in the image instance.\n       \\param texture Texture image used to fill the triangle.\n       \\param tx0 X-coordinate of the first vertex in the texture image.\n       \\param ty0 Y-coordinate of the first vertex in the texture image.\n       \\param tx1 X-coordinate of the second vertex in the texture image.\n       \\param ty1 Y-coordinate of the second vertex in the texture image.\n       \\param tx2 X-coordinate of the third vertex in the texture image.\n       \\param ty2 Y-coordinate of the third vertex in the texture image.\n       \\param light Light image.\n       \\param lx0 X-coordinate of the first vertex in the light image.\n       \\param ly0 Y-coordinate of the first vertex in the light image.\n       \\param lx1 X-coordinate of the second vertex in the light image.\n       \\param ly1 Y-coordinate of the second vertex in the light image.\n       \\param lx2 X-coordinate of the third vertex in the light image.\n       \\param ly2 Y-coordinate of the third vertex in the light image.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc, typename tl>\n    CImg<T>& draw_triangle(const int x0, const int y0,\n                           const int x1, const int y1,\n                           const int x2, const int y2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const CImg<tl>& light,\n                           const int lx0, const int ly0,\n                           const int lx1, const int ly1,\n                           const int lx2, const int ly2,\n                           const float opacity=1) {\n      if (is_empty()) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (light._depth>1 || light._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified light texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,light._width,light._height,light._depth,light._spectrum,light._data);\n      if (is_overlapped(texture))\n        return draw_triangle(x0,y0,x1,y1,x2,y2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      if (is_overlapped(light))\n        return draw_triangle(x0,y0,x1,y1,x2,y2,texture,tx0,ty0,tx1,ty1,tx2,ty2,+light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        lwh = (ulongT)light._width*light._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        ntx0 = tx0, nty0 = ty0, ntx1 = tx1, nty1 = ty1, ntx2 = tx2, nty2 = ty2,\n        nlx0 = lx0, nly0 = ly0, nlx1 = lx1, nly1 = ly1, nlx2 = lx2, nly2 = ly2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nlx0,nlx1,nly0,nly1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nlx0,nlx2,nly0,nly2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nlx1,nlx2,nly1,nly2);\n      if (ny0>=height() || ny2<0) return *this;\n      _cimg_for_triangle5(*this,xleft0,lxleft0,lyleft0,txleft0,tyleft0,xright0,lxright0,lyright0,txright0,tyright0,y,\n                          nx0,ny0,nlx0,nly0,ntx0,nty0,nx1,ny1,nlx1,nly1,ntx1,nty1,nx2,ny2,nlx2,nly2,ntx2,nty2) {\n        int\n          xleft = xleft0, xright = xright0,\n          lxleft = lxleft0, lxright = lxright0,\n          lyleft = lyleft0, lyright = lyright0,\n          txleft = txleft0, txright = txright0,\n          tyleft = tyleft0, tyright = tyright0;\n        if (xright<xleft) cimg::swap(xleft,xright,lxleft,lxright,lyleft,lyright,txleft,txright,tyleft,tyright);\n        const int\n          dx = xright - xleft,\n          dlx = lxright>lxleft?lxright - lxleft:lxleft - lxright,\n          dly = lyright>lyleft?lyright - lyleft:lyleft - lyright,\n          dtx = txright>txleft?txright - txleft:txleft - txright,\n          dty = tyright>tyleft?tyright - tyleft:tyleft - tyright,\n          rlx = dx?(lxright - lxleft)/dx:0,\n          rly = dx?(lyright - lyleft)/dx:0,\n          rtx = dx?(txright - txleft)/dx:0,\n          rty = dx?(tyright - tyleft)/dx:0,\n          slx = lxright>lxleft?1:-1,\n          sly = lyright>lyleft?1:-1,\n          stx = txright>txleft?1:-1,\n          sty = tyright>tyleft?1:-1,\n          ndlx = dlx - (dx?dx*(dlx/dx):0),\n          ndly = dly - (dx?dx*(dly/dx):0),\n          ndtx = dtx - (dx?dx*(dtx/dx):0),\n          ndty = dty - (dx?dx*(dty/dx):0);\n        int errlx = dx>>1, errly = errlx, errtx = errlx, errty = errlx;\n        if (xleft<0 && dx) {\n          lxleft-=xleft*(lxright - lxleft)/dx;\n          lyleft-=xleft*(lyright - lyleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const tc *col = &texture._atXY(txleft,tyleft);\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            *ptrd = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n            ptrd+=whd; col+=twh; lig+=lwh;\n          }\n          ptrd-=offx;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n          tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n        } else for (int x = xleft; x<=xright; ++x) {\n          const tc *col = &texture._atXY(txleft,tyleft);\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            const T val = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd; col+=twh; lig+=lwh;\n          }\n          ptrd-=offx;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          txleft+=rtx+((errtx-=ndtx)<0?errtx+=dx,stx:0);\n          tyleft+=rty+((errty-=ndty)<0?errty+=dx,sty:0);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a textured Phong-shaded 2d triangle, with perspective correction.\n    template<typename tc, typename tl>\n    CImg<T>& draw_triangle(const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const CImg<tl>& light,\n                           const int lx0, const int ly0,\n                           const int lx1, const int ly1,\n                           const int lx2, const int ly2,\n                           const float opacity=1) {\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (light._depth>1 || light._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified light texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,light._width,light._height,light._depth,light._spectrum,light._data);\n      if (is_overlapped(texture))\n        return draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,+texture,tx0,ty0,tx1,ty1,tx2,ty2,\n                             light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      if (is_overlapped(light))\n        return draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,texture,tx0,ty0,tx1,ty1,tx2,ty2,\n                             +light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        lwh = (ulongT)light._width*light._height,\n        offx = _spectrum*whd - 1;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nlx0 = lx0, nly0 = ly0, nlx1 = lx1, nly1 = ly1, nlx2 = lx2, nly2 = ly2;\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2,\n        nz0 = 1/z0, nz1 = 1/z1, nz2 = 1/z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nlx0,nlx1,nly0,nly1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nlx0,nlx2,nly0,nly2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nlx1,nlx2,nly1,nly2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1))),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      _cimg_for_triangle3(*this,xleft0,lxleft0,lyleft0,xright0,lxright0,lyright0,y,\n                          nx0,ny0,nlx0,nly0,nx1,ny1,nlx1,nly1,nx2,ny2,nlx2,nly2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int\n          xleft = xleft0, xright = xright0,\n          lxleft = lxleft0, lxright = lxright0,\n          lyleft = lyleft0, lyright = lyright0;\n        float\n          zleft = zl, zright = zr,\n          txleft = txl, txright = txr,\n          tyleft = tyl, tyright = tyr;\n        if (xright<xleft)\n          cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright,lxleft,lxright,lyleft,lyright);\n        const int\n          dx = xright - xleft,\n          dlx = lxright>lxleft?lxright - lxleft:lxleft - lxright,\n          dly = lyright>lyleft?lyright - lyleft:lyleft - lyright,\n          rlx = dx?(lxright - lxleft)/dx:0,\n          rly = dx?(lyright - lyleft)/dx:0,\n          slx = lxright>lxleft?1:-1,\n          sly = lyright>lyleft?1:-1,\n          ndlx = dlx - (dx?dx*(dlx/dx):0),\n          ndly = dly - (dx?dx*(dly/dx):0);\n        const float\n          pentez = (zright - zleft)/dx,\n          pentetx = (txright - txleft)/dx,\n          pentety = (tyright - tyleft)/dx;\n        int errlx = dx>>1, errly = errlx;\n        if (xleft<0 && dx) {\n          zleft-=xleft*(zright - zleft)/dx;\n          lxleft-=xleft*(lxright - lxleft)/dx;\n          lyleft-=xleft*(lyright - lyleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y,0,0);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x) {\n          const float invz = 1/zleft;\n          const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            *ptrd = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n            ptrd+=whd; col+=twh; lig+=lwh;\n          }\n          ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n        } else for (int x = xleft; x<=xright; ++x) {\n          const float invz = 1/zleft;\n          const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n          const tl *lig = &light._atXY(lxleft,lyleft);\n          cimg_forC(*this,c) {\n            const tl l = *lig;\n            const T val = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n            *ptrd = (T)(nopacity*val + *ptrd*copacity);\n            ptrd+=whd; col+=twh; lig+=lwh;\n          }\n          ptrd-=offx; zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n          lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n          lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n        }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a textured Phong-shaded 2d triangle, with perspective correction and z-buffering.\n    template<typename tz, typename tc, typename tl>\n    CImg<T>& draw_triangle(CImg<tz>& zbuffer,\n                           const int x0, const int y0, const float z0,\n                           const int x1, const int y1, const float z1,\n                           const int x2, const int y2, const float z2,\n                           const CImg<tc>& texture,\n                           const int tx0, const int ty0,\n                           const int tx1, const int ty1,\n                           const int tx2, const int ty2,\n                           const CImg<tl>& light,\n                           const int lx0, const int ly0,\n                           const int lx1, const int ly1,\n                           const int lx2, const int ly2,\n                           const float opacity=1) {\n      typedef typename cimg::superset<tz,float>::type tzfloat;\n      if (is_empty() || z0<=0 || z1<=0 || z2<=0) return *this;\n      if (!is_sameXY(zbuffer))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Instance and specified Z-buffer (%u,%u,%u,%u,%p) have \"\n                                    \"different dimensions.\",\n                                    cimg_instance,\n                                    zbuffer._width,zbuffer._height,zbuffer._depth,zbuffer._spectrum,zbuffer._data);\n      if (texture._depth>1 || texture._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    texture._width,texture._height,texture._depth,texture._spectrum,texture._data);\n      if (light._depth>1 || light._spectrum<_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_triangle(): Invalid specified light texture (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,light._width,light._height,light._depth,light._spectrum,light._data);\n      if (is_overlapped(texture))\n        return draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,\n                             +texture,tx0,ty0,tx1,ty1,tx2,ty2,light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      if (is_overlapped(light))\n        return draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,\n                             texture,tx0,ty0,tx1,ty1,tx2,ty2,+light,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n      static const T maxval = (T)std::min(cimg::type<T>::max(),(T)cimg::type<tc>::max());\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT\n        whd = (ulongT)_width*_height*_depth,\n        twh = (ulongT)texture._width*texture._height,\n        lwh = (ulongT)light._width*light._height,\n        offx = _spectrum*whd;\n      int nx0 = x0, ny0 = y0, nx1 = x1, ny1 = y1, nx2 = x2, ny2 = y2,\n        nlx0 = lx0, nly0 = ly0, nlx1 = lx1, nly1 = ly1, nlx2 = lx2, nly2 = ly2;\n      float\n        ntx0 = tx0/z0, nty0 = ty0/z0,\n        ntx1 = tx1/z1, nty1 = ty1/z1,\n        ntx2 = tx2/z2, nty2 = ty2/z2;\n      tzfloat nz0 = 1/(tzfloat)z0, nz1 = 1/(tzfloat)z1, nz2 = 1/(tzfloat)z2;\n      if (ny0>ny1) cimg::swap(nx0,nx1,ny0,ny1,ntx0,ntx1,nty0,nty1,nlx0,nlx1,nly0,nly1,nz0,nz1);\n      if (ny0>ny2) cimg::swap(nx0,nx2,ny0,ny2,ntx0,ntx2,nty0,nty2,nlx0,nlx2,nly0,nly2,nz0,nz2);\n      if (ny1>ny2) cimg::swap(nx1,nx2,ny1,ny2,ntx1,ntx2,nty1,nty2,nlx1,nlx2,nly1,nly2,nz1,nz2);\n      if (ny0>=height() || ny2<0) return *this;\n      float\n        ptxl = (ntx1 - ntx0)/(ny1 - ny0),\n        ptxr = (ntx2 - ntx0)/(ny2 - ny0),\n        ptxn = (ntx2 - ntx1)/(ny2 - ny1),\n        ptyl = (nty1 - nty0)/(ny1 - ny0),\n        ptyr = (nty2 - nty0)/(ny2 - ny0),\n        ptyn = (nty2 - nty1)/(ny2 - ny1),\n        txr = ny0>=0?ntx0:(ntx0 - ny0*(ntx2 - ntx0)/(ny2 - ny0)),\n        tyr = ny0>=0?nty0:(nty0 - ny0*(nty2 - nty0)/(ny2 - ny0)),\n        txl = ny1>=0?(ny0>=0?ntx0:(ntx0 - ny0*(ntx1 - ntx0)/(ny1 - ny0))):\n          (ptxl=ptxn,(ntx1 - ny1*(ntx2 - ntx1)/(ny2 - ny1))),\n        tyl = ny1>=0?(ny0>=0?nty0:(nty0 - ny0*(nty1 - nty0)/(ny1 - ny0))):\n          (ptyl=ptyn,(nty1 - ny1*(nty2 - nty1)/(ny2 - ny1)));\n      tzfloat\n        pzl = (nz1 - nz0)/(ny1 - ny0),\n        pzr = (nz2 - nz0)/(ny2 - ny0),\n        pzn = (nz2 - nz1)/(ny2 - ny1),\n        zr = ny0>=0?nz0:(nz0 - ny0*(nz2 - nz0)/(ny2 - ny0)),\n        zl = ny1>=0?(ny0>=0?nz0:(nz0 - ny0*(nz1 - nz0)/(ny1 - ny0))):(pzl=pzn,(nz1 - ny1*(nz2 - nz1)/(ny2 - ny1)));\n      _cimg_for_triangle3(*this,xleft0,lxleft0,lyleft0,xright0,lxright0,lyright0,y,\n                          nx0,ny0,nlx0,nly0,nx1,ny1,nlx1,nly1,nx2,ny2,nlx2,nly2) {\n        if (y==ny1) { zl = nz1; txl = ntx1; tyl = nty1; pzl = pzn; ptxl = ptxn; ptyl = ptyn; }\n        int\n          xleft = xleft0, xright = xright0,\n          lxleft = lxleft0, lxright = lxright0,\n          lyleft = lyleft0, lyright = lyright0;\n        float txleft = txl, txright = txr, tyleft = tyl, tyright = tyr;\n        tzfloat zleft = zl, zright = zr;\n        if (xright<xleft)\n          cimg::swap(xleft,xright,zleft,zright,txleft,txright,tyleft,tyright,lxleft,lxright,lyleft,lyright);\n        const int\n          dx = xright - xleft,\n          dlx = lxright>lxleft?lxright - lxleft:lxleft - lxright,\n          dly = lyright>lyleft?lyright - lyleft:lyleft - lyright,\n          rlx = dx?(lxright - lxleft)/dx:0,\n          rly = dx?(lyright - lyleft)/dx:0,\n          slx = lxright>lxleft?1:-1,\n          sly = lyright>lyleft?1:-1,\n          ndlx = dlx - (dx?dx*(dlx/dx):0),\n          ndly = dly - (dx?dx*(dly/dx):0);\n        float pentetx = (txright - txleft)/dx, pentety = (tyright - tyleft)/dx;\n        const tzfloat pentez = (zright - zleft)/dx;\n        int errlx = dx>>1, errly = errlx;\n        if (xleft<0 && dx) {\n          zleft-=xleft*(zright - zleft)/dx;\n          lxleft-=xleft*(lxright - lxleft)/dx;\n          lyleft-=xleft*(lyright - lyleft)/dx;\n          txleft-=xleft*(txright - txleft)/dx;\n          tyleft-=xleft*(tyright - tyleft)/dx;\n        }\n        if (xleft<0) xleft = 0;\n        if (xright>=width() - 1) xright = width() - 1;\n        T* ptrd = data(xleft,y);\n        tz *ptrz = zbuffer.data(xleft,y);\n        if (opacity>=1) for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tzfloat invz = 1/zleft;\n              const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n              const tl *lig = &light._atXY(lxleft,lyleft);\n              cimg_forC(*this,c) {\n                const tl l = *lig;\n                *ptrd = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n                ptrd+=whd; col+=twh; lig+=lwh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n            lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          } else for (int x = xleft; x<=xright; ++x, ++ptrz, ++ptrd) {\n            if (zleft>=(tzfloat)*ptrz) {\n              *ptrz = (tz)zleft;\n              const tzfloat invz = 1/zleft;\n              const tc *col = &texture._atXY((int)(txleft*invz),(int)(tyleft*invz));\n              const tl *lig = &light._atXY(lxleft,lyleft);\n              cimg_forC(*this,c) {\n                const tl l = *lig;\n                const T val = (T)(l<1?l**col:(2 - l)**col + (l - 1)*maxval);\n                *ptrd = (T)(nopacity*val + *ptrd*copacity);\n                ptrd+=whd; col+=twh; lig+=lwh;\n              }\n              ptrd-=offx;\n            }\n            zleft+=pentez; txleft+=pentetx; tyleft+=pentety;\n            lxleft+=rlx+((errlx-=ndlx)<0?errlx+=dx,slx:0);\n            lyleft+=rly+((errly-=ndly)<0?errly+=dx,sly:0);\n          }\n        zr+=pzr; txr+=ptxr; tyr+=ptyr; zl+=pzl; txl+=ptxl; tyl+=ptyl;\n      }\n      return *this;\n    }\n\n    //! Draw a filled 4d rectangle.\n    /**\n       \\param x0 X-coordinate of the upper-left rectangle corner.\n       \\param y0 Y-coordinate of the upper-left rectangle corner.\n       \\param z0 Z-coordinate of the upper-left rectangle corner.\n       \\param c0 C-coordinate of the upper-left rectangle corner.\n       \\param x1 X-coordinate of the lower-right rectangle corner.\n       \\param y1 Y-coordinate of the lower-right rectangle corner.\n       \\param z1 Z-coordinate of the lower-right rectangle corner.\n       \\param c1 C-coordinate of the lower-right rectangle corner.\n       \\param val Scalar value used to fill the rectangle area.\n       \\param opacity Drawing opacity.\n    **/\n    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0, const int c0,\n                            const int x1, const int y1, const int z1, const int c1,\n                            const T val, const float opacity=1) {\n      if (is_empty()) return *this;\n      const int\n        nx0 = x0<x1?x0:x1, nx1 = x0^x1^nx0,\n        ny0 = y0<y1?y0:y1, ny1 = y0^y1^ny0,\n        nz0 = z0<z1?z0:z1, nz1 = z0^z1^nz0,\n        nc0 = c0<c1?c0:c1, nc1 = c0^c1^nc0;\n      const int\n        lX = (1 + nx1 - nx0) + (nx1>=width()?width() - 1 - nx1:0) + (nx0<0?nx0:0),\n        lY = (1 + ny1 - ny0) + (ny1>=height()?height() - 1 - ny1:0) + (ny0<0?ny0:0),\n        lZ = (1 + nz1 - nz0) + (nz1>=depth()?depth() - 1 - nz1:0) + (nz0<0?nz0:0),\n        lC = (1 + nc1 - nc0) + (nc1>=spectrum()?spectrum() - 1 - nc1:0) + (nc0<0?nc0:0);\n      const ulongT\n        offX = (ulongT)_width - lX,\n        offY = (ulongT)_width*(_height - lY),\n        offZ = (ulongT)_width*_height*(_depth - lZ);\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      T *ptrd = data(nx0<0?0:nx0,ny0<0?0:ny0,nz0<0?0:nz0,nc0<0?0:nc0);\n      if (lX>0 && lY>0 && lZ>0 && lC>0)\n        for (int v = 0; v<lC; ++v) {\n          for (int z = 0; z<lZ; ++z) {\n            for (int y = 0; y<lY; ++y) {\n              if (opacity>=1) {\n                if (sizeof(T)!=1) { for (int x = 0; x<lX; ++x) *(ptrd++) = val; ptrd+=offX; }\n                else { std::memset(ptrd,(int)val,lX); ptrd+=_width; }\n              } else { for (int x = 0; x<lX; ++x) { *ptrd = (T)(nopacity*val + *ptrd*copacity); ++ptrd; } ptrd+=offX; }\n            }\n            ptrd+=offY;\n          }\n          ptrd+=offZ;\n        }\n      return *this;\n    }\n\n    //! Draw a filled 3d rectangle.\n    /**\n       \\param x0 X-coordinate of the upper-left rectangle corner.\n       \\param y0 Y-coordinate of the upper-left rectangle corner.\n       \\param z0 Z-coordinate of the upper-left rectangle corner.\n       \\param x1 X-coordinate of the lower-right rectangle corner.\n       \\param y1 Y-coordinate of the lower-right rectangle corner.\n       \\param z1 Z-coordinate of the lower-right rectangle corner.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0,\n                            const int x1, const int y1, const int z1,\n                            const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_rectangle(): Specified color is (null).\",\n                                    cimg_instance);\n      cimg_forC(*this,c) draw_rectangle(x0,y0,z0,c,x1,y1,z1,c,(T)color[c],opacity);\n      return *this;\n    }\n\n    //! Draw an outlined 3d rectangle \\overloading.\n    template<typename tc>\n    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0,\n                            const int x1, const int y1, const int z1,\n                            const tc *const color, const float opacity,\n                            const unsigned int pattern) {\n      return draw_line(x0,y0,z0,x1,y0,z0,color,opacity,pattern,true).\n        draw_line(x1,y0,z0,x1,y1,z0,color,opacity,pattern,false).\n        draw_line(x1,y1,z0,x0,y1,z0,color,opacity,pattern,false).\n        draw_line(x0,y1,z0,x0,y0,z0,color,opacity,pattern,false).\n        draw_line(x0,y0,z1,x1,y0,z1,color,opacity,pattern,true).\n        draw_line(x1,y0,z1,x1,y1,z1,color,opacity,pattern,false).\n        draw_line(x1,y1,z1,x0,y1,z1,color,opacity,pattern,false).\n        draw_line(x0,y1,z1,x0,y0,z1,color,opacity,pattern,false).\n        draw_line(x0,y0,z0,x0,y0,z1,color,opacity,pattern,true).\n        draw_line(x1,y0,z0,x1,y0,z1,color,opacity,pattern,true).\n        draw_line(x1,y1,z0,x1,y1,z1,color,opacity,pattern,true).\n        draw_line(x0,y1,z0,x0,y1,z1,color,opacity,pattern,true);\n    }\n\n    //! Draw a filled 2d rectangle.\n    /**\n       \\param x0 X-coordinate of the upper-left rectangle corner.\n       \\param y0 Y-coordinate of the upper-left rectangle corner.\n       \\param x1 X-coordinate of the lower-right rectangle corner.\n       \\param y1 Y-coordinate of the lower-right rectangle corner.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_rectangle(const int x0, const int y0,\n                            const int x1, const int y1,\n                            const tc *const color, const float opacity=1) {\n      return draw_rectangle(x0,y0,0,x1,y1,_depth - 1,color,opacity);\n    }\n\n    //! Draw a outlined 2d rectangle \\overloading.\n    template<typename tc>\n    CImg<T>& draw_rectangle(const int x0, const int y0,\n                            const int x1, const int y1,\n                            const tc *const color, const float opacity,\n                            const unsigned int pattern) {\n      if (is_empty()) return *this;\n      if (y0==y1) return draw_line(x0,y0,x1,y0,color,opacity,pattern,true);\n      if (x0==x1) return draw_line(x0,y0,x0,y1,color,opacity,pattern,true);\n      const int\n        nx0 = x0<x1?x0:x1, nx1 = x0^x1^nx0,\n        ny0 = y0<y1?y0:y1, ny1 = y0^y1^ny0;\n      if (ny1==ny0 + 1) return draw_line(nx0,ny0,nx1,ny0,color,opacity,pattern,true).\n                      draw_line(nx1,ny1,nx0,ny1,color,opacity,pattern,false);\n      return draw_line(nx0,ny0,nx1,ny0,color,opacity,pattern,true).\n        draw_line(nx1,ny0 + 1,nx1,ny1 - 1,color,opacity,pattern,false).\n        draw_line(nx1,ny1,nx0,ny1,color,opacity,pattern,false).\n        draw_line(nx0,ny1 - 1,nx0,ny0 + 1,color,opacity,pattern,false);\n    }\n\n    //! Draw a filled 2d polygon.\n    /**\n       \\param points Set of polygon vertices.\n       \\param color Pointer to \\c spectrum() consecutive values of type \\c T, defining the drawing color.\n       \\param opacity Drawing opacity.\n     **/\n    template<typename tp, typename tc>\n    CImg<T>& draw_polygon(const CImg<tp>& points,\n                          const tc *const color, const float opacity=1) {\n      if (is_empty() || !points) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_polygon(): Specified color is (null).\",\n                                    cimg_instance);\n      if (points._width==1) return draw_point((int)points(0,0),(int)points(0,1),color,opacity);\n      if (points._width==2) return draw_line((int)points(0,0),(int)points(0,1),\n                                             (int)points(1,0),(int)points(1,1),color,opacity);\n      if (points._width==3) return draw_triangle((int)points(0,0),(int)points(0,1),\n                                                 (int)points(1,0),(int)points(1,1),\n                                                 (int)points(2,0),(int)points(2,1),color,opacity);\n      cimg_init_scanline(color,opacity);\n      int\n        xmin = 0, ymin = 0,\n        xmax = points.get_shared_row(0).max_min(xmin),\n        ymax = points.get_shared_row(1).max_min(ymin);\n      if (xmax<0 || xmin>=width() || ymax<0 || ymin>=height()) return *this;\n      if (ymin==ymax) return draw_line(xmin,ymin,xmax,ymax,color,opacity);\n\n      ymin = std::max(0,ymin);\n      ymax = std::min(height() - 1,ymax);\n      CImg<intT> Xs(points._width,ymax - ymin + 1);\n      CImg<uintT> count(Xs._height,1,1,1,0);\n      unsigned int n = 0, nn = 1;\n      bool go_on = true;\n\n      while (go_on) {\n        unsigned int an = (nn + 1)%points._width;\n        const int\n          x0 = (int)points(n,0),\n          y0 = (int)points(n,1);\n        if (points(nn,1)==y0) while (points(an,1)==y0) { nn = an; (an+=1)%=points._width; }\n        const int\n          x1 = (int)points(nn,0),\n          y1 = (int)points(nn,1);\n        unsigned int tn = an;\n        while (points(tn,1)==y1) (tn+=1)%=points._width;\n\n        if (y0!=y1) {\n          const int\n            y2 = (int)points(tn,1),\n            x01 = x1 - x0, y01 = y1 - y0, y12 = y2 - y1,\n            dy = cimg::sign(y01),\n            tmax = std::max(1,cimg::abs(y01)),\n            tend = tmax - (dy==cimg::sign(y12));\n          unsigned int y = (unsigned int)y0 - ymin;\n          for (int t = 0; t<=tend; ++t, y+=dy)\n            if (y<Xs._height) Xs(count[y]++,y) = x0 + t*x01/tmax;\n        }\n\n        go_on = nn>n;\n        n = nn;\n        nn = an;\n      }\n\n      cimg_pragma_openmp(parallel for cimg_openmp_if(Xs._height>32))\n      cimg_forY(Xs,y) {\n        const CImg<intT> Xsy = Xs.get_shared_points(0,count[y] - 1,y).sort();\n        int px = width();\n        for (unsigned int n = 0; n<Xsy._width; n+=2) {\n          int x0 = Xsy[n];\n          const int x1 = Xsy[n + 1];\n          x0+=x0==px;\n          cimg_draw_scanline(x0,x1,y + ymin,color,opacity,1);\n          px = x1;\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a outlined 2d polygon \\overloading.\n    template<typename t, typename tc>\n    CImg<T>& draw_polygon(const CImg<t>& points,\n                          const tc *const color, const float opacity, const unsigned int pattern) {\n      if (is_empty() || !points || points._width<3) return *this;\n      bool ninit_hatch = true;\n      switch (points._height) {\n      case 0 : case 1 :\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_polygon(): Invalid specified point set.\",\n                                    cimg_instance);\n      case 2 : { // 2d version.\n        CImg<intT> npoints(points._width,2);\n        int x = npoints(0,0) = (int)points(0,0), y = npoints(0,1) = (int)points(0,1);\n        unsigned int nb_points = 1;\n        for (unsigned int p = 1; p<points._width; ++p) {\n          const int nx = (int)points(p,0), ny = (int)points(p,1);\n          if (nx!=x || ny!=y) { npoints(nb_points,0) = nx; npoints(nb_points++,1) = ny; x = nx; y = ny; }\n        }\n        const int x0 = (int)npoints(0,0), y0 = (int)npoints(0,1);\n        int ox = x0, oy = y0;\n        for (unsigned int i = 1; i<nb_points; ++i) {\n          const int x = (int)npoints(i,0), y = (int)npoints(i,1);\n          draw_line(ox,oy,x,y,color,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y;\n        }\n        draw_line(ox,oy,x0,y0,color,opacity,pattern,false);\n      } break;\n      default : { // 3d version.\n        CImg<intT> npoints(points._width,3);\n        int\n          x = npoints(0,0) = (int)points(0,0),\n          y = npoints(0,1) = (int)points(0,1),\n          z = npoints(0,2) = (int)points(0,2);\n        unsigned int nb_points = 1;\n        for (unsigned int p = 1; p<points._width; ++p) {\n          const int nx = (int)points(p,0), ny = (int)points(p,1), nz = (int)points(p,2);\n          if (nx!=x || ny!=y || nz!=z) {\n            npoints(nb_points,0) = nx; npoints(nb_points,1) = ny; npoints(nb_points++,2) = nz;\n            x = nx; y = ny; z = nz;\n          }\n        }\n        const int x0 = (int)npoints(0,0), y0 = (int)npoints(0,1), z0 = (int)npoints(0,2);\n        int ox = x0, oy = y0, oz = z0;\n        for (unsigned int i = 1; i<nb_points; ++i) {\n          const int x = (int)npoints(i,0), y = (int)npoints(i,1), z = (int)npoints(i,2);\n          draw_line(ox,oy,oz,x,y,z,color,opacity,pattern,ninit_hatch);\n          ninit_hatch = false;\n          ox = x; oy = y; oz = z;\n        }\n        draw_line(ox,oy,oz,x0,y0,z0,color,opacity,pattern,false);\n      }\n      }\n      return *this;\n    }\n\n    //! Draw a filled 2d ellipse.\n    /**\n       \\param x0 X-coordinate of the ellipse center.\n       \\param y0 Y-coordinate of the ellipse center.\n       \\param r1 First radius of the ellipse.\n       \\param r2 Second radius of the ellipse.\n       \\param angle Angle of the first radius.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,\n                          const tc *const color, const float opacity=1) {\n      return _draw_ellipse(x0,y0,r1,r2,angle,color,opacity,0U);\n    }\n\n    //! Draw a filled 2d ellipse \\overloading.\n    /**\n       \\param x0 X-coordinate of the ellipse center.\n       \\param y0 Y-coordinate of the ellipse center.\n       \\param tensor Diffusion tensor describing the ellipse.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_ellipse(const int x0, const int y0, const CImg<t> &tensor,\n                          const tc *const color, const float opacity=1) {\n      CImgList<t> eig = tensor.get_symmetric_eigen();\n      const CImg<t> &val = eig[0], &vec = eig[1];\n      return draw_ellipse(x0,y0,std::sqrt(val(0)),std::sqrt(val(1)),\n                          std::atan2(vec(0,1),vec(0,0))*180/cimg::PI,\n                          color,opacity);\n    }\n\n    //! Draw an outlined 2d ellipse.\n    /**\n       \\param x0 X-coordinate of the ellipse center.\n       \\param y0 Y-coordinate of the ellipse center.\n       \\param r1 First radius of the ellipse.\n       \\param r2 Second radius of the ellipse.\n       \\param angle Angle of the first radius.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the outline pattern.\n    **/\n    template<typename tc>\n    CImg<T>& draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,\n                          const tc *const color, const float opacity, const unsigned int pattern) {\n      if (pattern) _draw_ellipse(x0,y0,r1,r2,angle,color,opacity,pattern);\n      return *this;\n    }\n\n    //! Draw an outlined 2d ellipse \\overloading.\n    /**\n       \\param x0 X-coordinate of the ellipse center.\n       \\param y0 Y-coordinate of the ellipse center.\n       \\param tensor Diffusion tensor describing the ellipse.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the outline pattern.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_ellipse(const int x0, const int y0, const CImg<t> &tensor,\n                          const tc *const color, const float opacity,\n                          const unsigned int pattern) {\n      CImgList<t> eig = tensor.get_symmetric_eigen();\n      const CImg<t> &val = eig[0], &vec = eig[1];\n      return draw_ellipse(x0,y0,std::sqrt(val(0)),std::sqrt(val(1)),\n                          std::atan2(vec(0,1),vec(0,0))*180/cimg::PI,\n                          color,opacity,pattern);\n    }\n\n    template<typename tc>\n    CImg<T>& _draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,\n                           const tc *const color, const float opacity,\n                           const unsigned int pattern) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_ellipse(): Specified color is (null).\",\n                                    cimg_instance);\n      if (r1<=0 || r2<=0) return draw_point(x0,y0,color,opacity);\n      cimg_init_scanline(color,opacity);\n      const float\n        nr1 = cimg::abs(r1), nr2 = cimg::abs(r2),\n        nangle = (float)(angle*cimg::PI/180),\n        u = (float)std::cos(nangle),\n        v = (float)std::sin(nangle),\n        rmax = std::max(nr1,nr2),\n        l1 = (float)std::pow(rmax/(nr1>0?nr1:1e-6),2),\n        l2 = (float)std::pow(rmax/(nr2>0?nr2:1e-6),2),\n        a = l1*u*u + l2*v*v,\n        b = u*v*(l1 - l2),\n        c = l1*v*v + l2*u*u;\n      const int\n        yb = (int)std::sqrt(a*rmax*rmax/(a*c - b*b)),\n        tymin = y0 - yb - 1,\n        tymax = y0 + yb + 1,\n        ymin = tymin<0?0:tymin,\n        ymax = tymax>=height()?height() - 1:tymax;\n      int oxmin = 0, oxmax = 0;\n      bool first_line = true;\n      for (int y = ymin; y<=ymax; ++y) {\n        const float\n          Y = y - y0 + (y<y0?0.5f:-0.5f),\n          delta = b*b*Y*Y - a*(c*Y*Y - rmax*rmax),\n          sdelta = delta>0?(float)std::sqrt(delta)/a:0.0f,\n          bY = b*Y/a,\n          fxmin = x0 - 0.5f - bY - sdelta,\n          fxmax = x0 + 0.5f - bY + sdelta;\n        const int xmin = (int)fxmin, xmax = (int)fxmax;\n        if (!pattern) cimg_draw_scanline(xmin,xmax,y,color,opacity,1);\n        else {\n          if (first_line) {\n            if (y0 - yb>=0) cimg_draw_scanline(xmin,xmax,y,color,opacity,1);\n            else draw_point(xmin,y,color,opacity).draw_point(xmax,y,color,opacity);\n            first_line = false;\n          } else {\n            if (xmin<oxmin) cimg_draw_scanline(xmin,oxmin - 1,y,color,opacity,1);\n            else cimg_draw_scanline(oxmin + (oxmin==xmin?0:1),xmin,y,color,opacity,1);\n            if (xmax<oxmax) cimg_draw_scanline(xmax,oxmax - 1,y,color,opacity,1);\n            else cimg_draw_scanline(oxmax + (oxmax==xmax?0:1),xmax,y,color,opacity,1);\n            if (y==tymax) cimg_draw_scanline(xmin + 1,xmax - 1,y,color,opacity,1);\n          }\n        }\n        oxmin = xmin; oxmax = xmax;\n      }\n      return *this;\n    }\n\n    //! Draw a filled 2d circle.\n    /**\n       \\param x0 X-coordinate of the circle center.\n       \\param y0 Y-coordinate of the circle center.\n       \\param radius  Circle radius.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\note\n       - Circle version of the Bresenham's algorithm is used.\n    **/\n    template<typename tc>\n    CImg<T>& draw_circle(const int x0, const int y0, int radius,\n                         const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_circle(): Specified color is (null).\",\n                                    cimg_instance);\n      cimg_init_scanline(color,opacity);\n      if (radius<0 || x0 - radius>=width() || y0 + radius<0 || y0 - radius>=height()) return *this;\n      if (y0>=0 && y0<height()) cimg_draw_scanline(x0 - radius,x0 + radius,y0,color,opacity,1);\n      for (int f = 1 - radius, ddFx = 0, ddFy = -(radius<<1), x = 0, y = radius; x<y; ) {\n        if (f>=0) {\n          const int x1 = x0 - x, x2 = x0 + x, y1 = y0 - y, y2 = y0 + y;\n          if (y1>=0 && y1<height()) cimg_draw_scanline(x1,x2,y1,color,opacity,1);\n          if (y2>=0 && y2<height()) cimg_draw_scanline(x1,x2,y2,color,opacity,1);\n          f+=(ddFy+=2); --y;\n        }\n        const bool no_diag = y!=(x++);\n        ++(f+=(ddFx+=2));\n        const int x1 = x0 - y, x2 = x0 + y, y1 = y0 - x, y2 = y0 + x;\n        if (no_diag) {\n          if (y1>=0 && y1<height()) cimg_draw_scanline(x1,x2,y1,color,opacity,1);\n          if (y2>=0 && y2<height()) cimg_draw_scanline(x1,x2,y2,color,opacity,1);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw an outlined 2d circle.\n    /**\n       \\param x0 X-coordinate of the circle center.\n       \\param y0 Y-coordinate of the circle center.\n       \\param radius Circle radius.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern An integer whose bits describe the outline pattern.\n    **/\n    template<typename tc>\n    CImg<T>& draw_circle(const int x0, const int y0, int radius,\n                         const tc *const color, const float opacity,\n                         const unsigned int pattern) {\n      cimg::unused(pattern);\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_circle(): Specified color is (null).\",\n                                    cimg_instance);\n      if (radius<0 || x0 - radius>=width() || y0 + radius<0 || y0 - radius>=height()) return *this;\n      if (!radius) return draw_point(x0,y0,color,opacity);\n      draw_point(x0 - radius,y0,color,opacity).draw_point(x0 + radius,y0,color,opacity).\n        draw_point(x0,y0 - radius,color,opacity).draw_point(x0,y0 + radius,color,opacity);\n      if (radius==1) return *this;\n      for (int f = 1 - radius, ddFx = 0, ddFy = -(radius<<1), x = 0, y = radius; x<y; ) {\n        if (f>=0) { f+=(ddFy+=2); --y; }\n        ++x; ++(f+=(ddFx+=2));\n        if (x!=y + 1) {\n          const int x1 = x0 - y, x2 = x0 + y, y1 = y0 - x, y2 = y0 + x,\n            x3 = x0 - x, x4 = x0 + x, y3 = y0 - y, y4 = y0 + y;\n          draw_point(x1,y1,color,opacity).draw_point(x1,y2,color,opacity).\n            draw_point(x2,y1,color,opacity).draw_point(x2,y2,color,opacity);\n          if (x!=y)\n            draw_point(x3,y3,color,opacity).draw_point(x4,y4,color,opacity).\n              draw_point(x4,y3,color,opacity).draw_point(x3,y4,color,opacity);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw an image.\n    /**\n       \\param sprite Sprite image.\n       \\param x0 X-coordinate of the sprite position.\n       \\param y0 Y-coordinate of the sprite position.\n       \\param z0 Z-coordinate of the sprite position.\n       \\param c0 C-coordinate of the sprite position.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename t>\n    CImg<T>& draw_image(const int x0, const int y0, const int z0, const int c0,\n                        const CImg<t>& sprite, const float opacity=1) {\n      if (is_empty() || !sprite) return *this;\n      if (is_overlapped(sprite)) return draw_image(x0,y0,z0,c0,+sprite,opacity);\n      if (x0==0 && y0==0 && z0==0 && c0==0 && is_sameXYZC(sprite) && opacity>=1 && !is_shared())\n        return assign(sprite,false);\n      const bool bx = (x0<0), by = (y0<0), bz = (z0<0), bc = (c0<0);\n      const int\n        lX = sprite.width() - (x0 + sprite.width()>width()?x0 + sprite.width() - width():0) + (bx?x0:0),\n        lY = sprite.height() - (y0 + sprite.height()>height()?y0 + sprite.height() - height():0) + (by?y0:0),\n        lZ = sprite.depth() - (z0 + sprite.depth()>depth()?z0 + sprite.depth() - depth():0) + (bz?z0:0),\n        lC = sprite.spectrum() - (c0 + sprite.spectrum()>spectrum()?c0 + sprite.spectrum() - spectrum():0) + (bc?c0:0);\n      const t\n        *ptrs = sprite._data +\n        (bx?-x0:0) +\n        (by?-y0*(ulongT)sprite.width():0) +\n        (bz?-z0*(ulongT)sprite.width()*sprite.height():0) +\n        (bc?-c0*(ulongT)sprite.width()*sprite.height()*sprite.depth():0);\n      const ulongT\n        offX = (ulongT)_width - lX,\n        soffX = (ulongT)sprite._width - lX,\n        offY = (ulongT)_width*(_height - lY),\n        soffY = (ulongT)sprite._width*(sprite._height - lY),\n        offZ = (ulongT)_width*_height*(_depth - lZ),\n        soffZ = (ulongT)sprite._width*sprite._height*(sprite._depth - lZ);\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      if (lX>0 && lY>0 && lZ>0 && lC>0) {\n        T *ptrd = data(x0<0?0:x0,y0<0?0:y0,z0<0?0:z0,c0<0?0:c0);\n        for (int v = 0; v<lC; ++v) {\n          for (int z = 0; z<lZ; ++z) {\n            for (int y = 0; y<lY; ++y) {\n              if (opacity>=1) for (int x = 0; x<lX; ++x) *(ptrd++) = (T)*(ptrs++);\n              else for (int x = 0; x<lX; ++x) { *ptrd = (T)(nopacity*(*(ptrs++)) + *ptrd*copacity); ++ptrd; }\n              ptrd+=offX; ptrs+=soffX;\n            }\n            ptrd+=offY; ptrs+=soffY;\n          }\n          ptrd+=offZ; ptrs+=soffZ;\n        }\n      }\n      return *this;\n    }\n\n    //! Draw an image \\specialization.\n    CImg<T>& draw_image(const int x0, const int y0, const int z0, const int c0,\n                        const CImg<T>& sprite, const float opacity=1) {\n      if (is_empty() || !sprite) return *this;\n      if (is_overlapped(sprite)) return draw_image(x0,y0,z0,c0,+sprite,opacity);\n      if (x0==0 && y0==0 && z0==0 && c0==0 && is_sameXYZC(sprite) && opacity>=1 && !is_shared())\n        return assign(sprite,false);\n      const bool bx = (x0<0), by = (y0<0), bz = (z0<0), bc = (c0<0);\n      const int\n        lX = sprite.width() - (x0 + sprite.width()>width()?x0 + sprite.width() - width():0) + (bx?x0:0),\n        lY = sprite.height() - (y0 + sprite.height()>height()?y0 + sprite.height() - height():0) + (by?y0:0),\n        lZ = sprite.depth() - (z0 + sprite.depth()>depth()?z0 + sprite.depth() - depth():0) + (bz?z0:0),\n        lC = sprite.spectrum() - (c0 + sprite.spectrum()>spectrum()?c0 + sprite.spectrum() - spectrum():0) + (bc?c0:0);\n      const T\n        *ptrs = sprite._data +\n        (bx?-x0:0) +\n        (by?-y0*(ulongT)sprite.width():0) +\n        (bz?-z0*(ulongT)sprite.width()*sprite.height():0) +\n        (bc?-c0*(ulongT)sprite.width()*sprite.height()*sprite.depth():0);\n      const ulongT\n        offX = (ulongT)_width - lX,\n        soffX = (ulongT)sprite._width - lX,\n        offY = (ulongT)_width*(_height - lY),\n        soffY = (ulongT)sprite._width*(sprite._height - lY),\n        offZ = (ulongT)_width*_height*(_depth - lZ),\n        soffZ = (ulongT)sprite._width*sprite._height*(sprite._depth - lZ),\n        slX = lX*sizeof(T);\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      if (lX>0 && lY>0 && lZ>0 && lC>0) {\n        T *ptrd = data(x0<0?0:x0,y0<0?0:y0,z0<0?0:z0,c0<0?0:c0);\n        for (int v = 0; v<lC; ++v) {\n          for (int z = 0; z<lZ; ++z) {\n            if (opacity>=1)\n              for (int y = 0; y<lY; ++y) { std::memcpy(ptrd,ptrs,slX); ptrd+=_width; ptrs+=sprite._width; }\n            else for (int y = 0; y<lY; ++y) {\n                for (int x = 0; x<lX; ++x) { *ptrd = (T)(nopacity*(*(ptrs++)) + *ptrd*copacity); ++ptrd; }\n                ptrd+=offX; ptrs+=soffX;\n              }\n            ptrd+=offY; ptrs+=soffY;\n          }\n          ptrd+=offZ; ptrs+=soffZ;\n        }\n      }\n      return *this;\n    }\n\n    //! Draw an image \\overloading.\n    template<typename t>\n    CImg<T>& draw_image(const int x0, const int y0, const int z0,\n                        const CImg<t>& sprite, const float opacity=1) {\n      return draw_image(x0,y0,z0,0,sprite,opacity);\n    }\n\n    //! Draw an image \\overloading.\n    template<typename t>\n    CImg<T>& draw_image(const int x0, const int y0,\n                        const CImg<t>& sprite, const float opacity=1) {\n      return draw_image(x0,y0,0,sprite,opacity);\n    }\n\n    //! Draw an image \\overloading.\n    template<typename t>\n    CImg<T>& draw_image(const int x0,\n                        const CImg<t>& sprite, const float opacity=1) {\n      return draw_image(x0,0,sprite,opacity);\n    }\n\n    //! Draw an image \\overloading.\n    template<typename t>\n    CImg<T>& draw_image(const CImg<t>& sprite, const float opacity=1) {\n      return draw_image(0,sprite,opacity);\n    }\n\n    //! Draw a masked image.\n    /**\n       \\param sprite Sprite image.\n       \\param mask Mask image.\n       \\param x0 X-coordinate of the sprite position in the image instance.\n       \\param y0 Y-coordinate of the sprite position in the image instance.\n       \\param z0 Z-coordinate of the sprite position in the image instance.\n       \\param c0 C-coordinate of the sprite position in the image instance.\n       \\param mask_max_value Maximum pixel value of the mask image \\c mask.\n       \\param opacity Drawing opacity.\n       \\note\n       - Pixel values of \\c mask set the opacity of the corresponding pixels in \\c sprite.\n       - Dimensions along x,y and z of \\p sprite and \\p mask must be the same.\n    **/\n    template<typename ti, typename tm>\n    CImg<T>& draw_image(const int x0, const int y0, const int z0, const int c0,\n                        const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,\n                        const float mask_max_value=1) {\n      if (is_empty() || !sprite || !mask) return *this;\n      if (is_overlapped(sprite)) return draw_image(x0,y0,z0,c0,+sprite,mask,opacity,mask_max_value);\n      if (is_overlapped(mask)) return draw_image(x0,y0,z0,c0,sprite,+mask,opacity,mask_max_value);\n      if (mask._width!=sprite._width || mask._height!=sprite._height || mask._depth!=sprite._depth)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_image(): Sprite (%u,%u,%u,%u,%p) and mask (%u,%u,%u,%u,%p) have \"\n                                    \"incompatible dimensions.\",\n                                    cimg_instance,\n                                    sprite._width,sprite._height,sprite._depth,sprite._spectrum,sprite._data,\n                                    mask._width,mask._height,mask._depth,mask._spectrum,mask._data);\n\n      const bool bx = (x0<0), by = (y0<0), bz = (z0<0), bc = (c0<0);\n      const int\n        lX = sprite.width() - (x0 + sprite.width()>width()?x0 + sprite.width() - width():0) + (bx?x0:0),\n        lY = sprite.height() - (y0 + sprite.height()>height()?y0 + sprite.height() - height():0) + (by?y0:0),\n        lZ = sprite.depth() - (z0 + sprite.depth()>depth()?z0 + sprite.depth() - depth():0) + (bz?z0:0),\n        lC = sprite.spectrum() - (c0 + sprite.spectrum()>spectrum()?c0 + sprite.spectrum() - spectrum():0) + (bc?c0:0);\n      const ulongT\n        coff = (bx?-x0:0) +\n        (by?-y0*(ulongT)mask.width():0) +\n        (bz?-z0*(ulongT)mask.width()*mask.height():0) +\n        (bc?-c0*(ulongT)mask.width()*mask.height()*mask.depth():0),\n        ssize = (ulongT)mask.width()*mask.height()*mask.depth()*mask.spectrum();\n      const ti *ptrs = sprite._data + coff;\n      const tm *ptrm = mask._data + coff;\n      const ulongT\n        offX = (ulongT)_width - lX,\n        soffX = (ulongT)sprite._width - lX,\n        offY = (ulongT)_width*(_height - lY),\n        soffY = (ulongT)sprite._width*(sprite._height - lY),\n        offZ = (ulongT)_width*_height*(_depth - lZ),\n        soffZ = (ulongT)sprite._width*sprite._height*(sprite._depth - lZ);\n      if (lX>0 && lY>0 && lZ>0 && lC>0) {\n        T *ptrd = data(x0<0?0:x0,y0<0?0:y0,z0<0?0:z0,c0<0?0:c0);\n        for (int c = 0; c<lC; ++c) {\n          ptrm = mask._data + (ptrm - mask._data)%ssize;\n          for (int z = 0; z<lZ; ++z) {\n            for (int y = 0; y<lY; ++y) {\n              for (int x = 0; x<lX; ++x) {\n                const float mopacity = (float)(*(ptrm++)*opacity),\n                  nopacity = cimg::abs(mopacity), copacity = mask_max_value - std::max(mopacity,0.0f);\n                *ptrd = (T)((nopacity*(*(ptrs++)) + *ptrd*copacity)/mask_max_value);\n                ++ptrd;\n              }\n              ptrd+=offX; ptrs+=soffX; ptrm+=soffX;\n            }\n            ptrd+=offY; ptrs+=soffY; ptrm+=soffY;\n          }\n          ptrd+=offZ; ptrs+=soffZ; ptrm+=soffZ;\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a masked image \\overloading.\n    template<typename ti, typename tm>\n    CImg<T>& draw_image(const int x0, const int y0, const int z0,\n                        const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,\n                        const float mask_max_value=1) {\n      return draw_image(x0,y0,z0,0,sprite,mask,opacity,mask_max_value);\n    }\n\n    //! Draw a image \\overloading.\n    template<typename ti, typename tm>\n    CImg<T>& draw_image(const int x0, const int y0,\n                        const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,\n                        const float mask_max_value=1) {\n      return draw_image(x0,y0,0,sprite,mask,opacity,mask_max_value);\n    }\n\n    //! Draw a image \\overloading.\n    template<typename ti, typename tm>\n    CImg<T>& draw_image(const int x0,\n                        const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,\n                        const float mask_max_value=1) {\n      return draw_image(x0,0,sprite,mask,opacity,mask_max_value);\n    }\n\n    //! Draw an image.\n    template<typename ti, typename tm>\n    CImg<T>& draw_image(const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,\n                        const float mask_max_value=1) {\n      return draw_image(0,sprite,mask,opacity,mask_max_value);\n    }\n\n    //! Draw a text string.\n    /**\n       \\param x0 X-coordinate of the text in the image instance.\n       \\param y0 Y-coordinate of the text in the image instance.\n       \\param text Format of the text ('printf'-style format string).\n       \\param foreground_color Pointer to \\c spectrum() consecutive values, defining the foreground drawing color.\n       \\param background_color Pointer to \\c spectrum() consecutive values, defining the background drawing color.\n       \\param opacity Drawing opacity.\n       \\param font Font used for drawing text.\n    **/\n    template<typename tc1, typename tc2, typename t>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const tc1 *const foreground_color, const tc2 *const background_color,\n                       const float opacity, const CImgList<t>& font, ...) {\n      if (!font) return *this;\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      return _draw_text(x0,y0,tmp,foreground_color,background_color,opacity,font,false);\n    }\n\n    //! Draw a text string \\overloading.\n    /**\n       \\note A transparent background is used for the text.\n    **/\n    template<typename tc, typename t>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const tc *const foreground_color, const int,\n                       const float opacity, const CImgList<t>& font, ...) {\n      if (!font) return *this;\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      return _draw_text(x0,y0,tmp,foreground_color,(tc*)0,opacity,font,false);\n    }\n\n    //! Draw a text string \\overloading.\n    /**\n       \\note A transparent foreground is used for the text.\n    **/\n    template<typename tc, typename t>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const int, const tc *const background_color,\n                       const float opacity, const CImgList<t>& font, ...) {\n      if (!font) return *this;\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      return _draw_text(x0,y0,tmp,(tc*)0,background_color,opacity,font,false);\n    }\n\n    //! Draw a text string \\overloading.\n    /**\n       \\param x0 X-coordinate of the text in the image instance.\n       \\param y0 Y-coordinate of the text in the image instance.\n       \\param text Format of the text ('printf'-style format string).\n       \\param foreground_color Array of spectrum() values of type \\c T,\n         defining the foreground color (0 means 'transparent').\n       \\param background_color Array of spectrum() values of type \\c T,\n         defining the background color (0 means 'transparent').\n       \\param opacity Drawing opacity.\n       \\param font_height Height of the text font (exact match for 13,23,53,103, interpolated otherwise).\n    **/\n    template<typename tc1, typename tc2>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const tc1 *const foreground_color, const tc2 *const background_color,\n                       const float opacity=1, const unsigned int font_height=13, ...) {\n      if (!font_height) return *this;\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font_height);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      const CImgList<ucharT>& font = CImgList<ucharT>::font(font_height,true);\n      _draw_text(x0,y0,tmp,foreground_color,background_color,opacity,font,true);\n      return *this;\n    }\n\n    //! Draw a text string \\overloading.\n    template<typename tc>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const tc *const foreground_color, const int background_color=0,\n                       const float opacity=1, const unsigned int font_height=13, ...) {\n      if (!font_height) return *this;\n      cimg::unused(background_color);\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font_height);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      return draw_text(x0,y0,\"%s\",foreground_color,(const tc*)0,opacity,font_height,tmp._data);\n    }\n\n    //! Draw a text string \\overloading.\n    template<typename tc>\n    CImg<T>& draw_text(const int x0, const int y0,\n                       const char *const text,\n                       const int, const tc *const background_color,\n                       const float opacity=1, const unsigned int font_height=13, ...) {\n      if (!font_height) return *this;\n      CImg<charT> tmp(2048);\n      std::va_list ap; va_start(ap,font_height);\n      cimg_vsnprintf(tmp,tmp._width,text,ap); va_end(ap);\n      return draw_text(x0,y0,\"%s\",(tc*)0,background_color,opacity,font_height,tmp._data);\n    }\n\n    template<typename tc1, typename tc2, typename t>\n    CImg<T>& _draw_text(const int x0, const int y0,\n                        const char *const text,\n                        const tc1 *const foreground_color, const tc2 *const background_color,\n                        const float opacity, const CImgList<t>& font,\n                        const bool is_native_font) {\n      if (!text) return *this;\n      if (!font)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_text(): Empty specified font.\",\n                                    cimg_instance);\n\n      const unsigned int text_length = (unsigned int)std::strlen(text);\n      const bool _is_empty = is_empty();\n      if (_is_empty) {\n        // If needed, pre-compute necessary size of the image\n        int x = 0, y = 0, w = 0;\n        unsigned char c = 0;\n        for (unsigned int i = 0; i<text_length; ++i) {\n          c = (unsigned char)text[i];\n          switch (c) {\n          case '\\n' : y+=font[0]._height; if (x>w) w = x; x = 0; break;\n          case '\\t' : x+=4*font[' ']._width; break;\n          default : if (c<font._width) x+=font[c]._width;\n          }\n        }\n        if (x!=0 || c=='\\n') {\n          if (x>w) w=x;\n          y+=font[0]._height;\n        }\n        assign(x0 + w,y0 + y,1,is_native_font?1:font[0]._spectrum,(T)0);\n      }\n\n      int x = x0, y = y0;\n      for (unsigned int i = 0; i<text_length; ++i) {\n        const unsigned char c = (unsigned char)text[i];\n        switch (c) {\n        case '\\n' : y+=font[0]._height; x = x0; break;\n        case '\\t' : x+=4*font[' ']._width; break;\n        default : if (c<font._width) {\n            CImg<T> letter = font[c];\n            if (letter) {\n              if (is_native_font && _spectrum>letter._spectrum) letter.resize(-100,-100,1,_spectrum,0,2);\n              const unsigned int cmin = std::min(_spectrum,letter._spectrum);\n              if (foreground_color)\n                for (unsigned int c = 0; c<cmin; ++c)\n                  if (foreground_color[c]!=1) letter.get_shared_channel(c)*=foreground_color[c];\n              if (c + 256<font.width()) { // Letter has mask.\n                if (background_color)\n                  for (unsigned int c = 0; c<cmin; ++c)\n                    draw_rectangle(x,y,0,c,x + letter._width - 1,y + letter._height - 1,0,c,\n                                   background_color[c],opacity);\n                draw_image(x,y,letter,font[c + 256],opacity,255.0f);\n              } else draw_image(x,y,letter,opacity); // Letter has no mask.\n              x+=letter._width;\n            }\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a 2d vector field.\n    /**\n       \\param flow Image of 2d vectors used as input data.\n       \\param color Image of spectrum()-D vectors corresponding to the color of each arrow.\n       \\param opacity Drawing opacity.\n       \\param sampling Length (in pixels) between each arrow.\n       \\param factor Length factor of each arrow (if <0, computed as a percentage of the maximum length).\n       \\param is_arrow Tells if arrows must be drawn, instead of oriented segments.\n       \\param pattern Used pattern to draw lines.\n       \\note Clipping is supported.\n    **/\n    template<typename t1, typename t2>\n    CImg<T>& draw_quiver(const CImg<t1>& flow,\n                         const t2 *const color, const float opacity=1,\n                         const unsigned int sampling=25, const float factor=-20,\n                         const bool is_arrow=true, const unsigned int pattern=~0U) {\n      return draw_quiver(flow,CImg<t2>(color,_spectrum,1,1,1,true),opacity,sampling,factor,is_arrow,pattern);\n    }\n\n    //! Draw a 2d vector field, using a field of colors.\n    /**\n       \\param flow Image of 2d vectors used as input data.\n       \\param color Image of spectrum()-D vectors corresponding to the color of each arrow.\n       \\param opacity Opacity of the drawing.\n       \\param sampling Length (in pixels) between each arrow.\n       \\param factor Length factor of each arrow (if <0, computed as a percentage of the maximum length).\n       \\param is_arrow Tells if arrows must be drawn, instead of oriented segments.\n       \\param pattern Used pattern to draw lines.\n       \\note Clipping is supported.\n    **/\n    template<typename t1, typename t2>\n    CImg<T>& draw_quiver(const CImg<t1>& flow,\n                         const CImg<t2>& color, const float opacity=1,\n                         const unsigned int sampling=25, const float factor=-20,\n                         const bool is_arrow=true, const unsigned int pattern=~0U) {\n      if (is_empty()) return *this;\n      if (!flow || flow._spectrum!=2)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_quiver(): Invalid dimensions of specified flow (%u,%u,%u,%u,%p).\",\n                                    cimg_instance,\n                                    flow._width,flow._height,flow._depth,flow._spectrum,flow._data);\n      if (sampling<=0)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_quiver(): Invalid sampling value %g \"\n                                    \"(should be >0)\",\n                                    cimg_instance,\n                                    sampling);\n      const bool colorfield = (color._width==flow._width && color._height==flow._height &&\n                               color._depth==1 && color._spectrum==_spectrum);\n      if (is_overlapped(flow)) return draw_quiver(+flow,color,opacity,sampling,factor,is_arrow,pattern);\n      float vmax,fact;\n      if (factor<=0) {\n        float m, M = (float)flow.get_norm(2).max_min(m);\n        vmax = (float)std::max(cimg::abs(m),cimg::abs(M));\n        if (!vmax) vmax = 1;\n        fact = -factor;\n      } else { fact = factor; vmax = 1; }\n\n      for (unsigned int y = sampling/2; y<_height; y+=sampling)\n        for (unsigned int x = sampling/2; x<_width; x+=sampling) {\n          const unsigned int X = x*flow._width/_width, Y = y*flow._height/_height;\n          float u = (float)flow(X,Y,0,0)*fact/vmax, v = (float)flow(X,Y,0,1)*fact/vmax;\n          if (is_arrow) {\n            const int xx = (int)(x + u), yy = (int)(y + v);\n            if (colorfield) draw_arrow(x,y,xx,yy,color.get_vector_at(X,Y)._data,opacity,45,sampling/5.0f,pattern);\n            else draw_arrow(x,y,xx,yy,color._data,opacity,45,sampling/5.0f,pattern);\n          } else {\n            if (colorfield)\n              draw_line((int)(x - 0.5*u),(int)(y - 0.5*v),(int)(x + 0.5*u),(int)(y + 0.5*v),\n                        color.get_vector_at(X,Y)._data,opacity,pattern);\n            else draw_line((int)(x - 0.5*u),(int)(y - 0.5*v),(int)(x + 0.5*u),(int)(y + 0.5*v),\n                           color._data,opacity,pattern);\n          }\n        }\n      return *this;\n    }\n\n    //! Draw a labeled horizontal axis.\n    /**\n       \\param values_x Values along the horizontal axis.\n       \\param y Y-coordinate of the horizontal axis in the image instance.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern Drawing pattern.\n       \\param font_height Height of the labels (exact match for 13,23,53,103, interpolated otherwise).\n       \\param allow_zero Enable/disable the drawing of label '0' if found.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_axis(const CImg<t>& values_x, const int y,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const unsigned int font_height=13,\n                       const bool allow_zero=true) {\n      if (is_empty()) return *this;\n      const int yt = (y + 3 + font_height)<_height?y + 3:y - 2 - (int)font_height;\n      const int siz = (int)values_x.size() - 1;\n      CImg<charT> txt(32);\n      CImg<T> label;\n      if (siz<=0) { // Degenerated case.\n        draw_line(0,y,_width - 1,y,color,opacity,pattern);\n        if (!siz) {\n          cimg_snprintf(txt,txt._width,\"%g\",(double)*values_x);\n          label.assign().draw_text(0,0,txt,color,(tc*)0,opacity,font_height);\n          const int\n            _xt = (width() - label.width())/2,\n            xt = _xt<3?3:_xt + label.width()>=width() - 2?width() - 3 - label.width():_xt;\n          draw_point(width()/2,y - 1,color,opacity).draw_point(width()/2,y + 1,color,opacity);\n          if (allow_zero || *txt!='0' || txt[1]!=0)\n            draw_text(xt,yt,txt,color,(tc*)0,opacity,font_height);\n        }\n      } else { // Regular case.\n        if (values_x[0]<values_x[siz]) draw_arrow(0,y,_width - 1,y,color,opacity,30,5,pattern);\n        else draw_arrow(_width - 1,y,0,y,color,opacity,30,5,pattern);\n        cimg_foroff(values_x,x) {\n          cimg_snprintf(txt,txt._width,\"%g\",(double)values_x(x));\n          label.assign().draw_text(0,0,txt,color,(tc*)0,opacity,font_height);\n          const int\n            xi = (int)(x*(_width - 1)/siz),\n            _xt = xi - label.width()/2,\n            xt = _xt<3?3:_xt + label.width()>=width() - 2?width() - 3 - label.width():_xt;\n          draw_point(xi,y - 1,color,opacity).draw_point(xi,y + 1,color,opacity);\n          if (allow_zero || *txt!='0' || txt[1]!=0)\n            draw_text(xt,yt,txt,color,(tc*)0,opacity,font_height);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a labeled vertical axis.\n    /**\n       \\param x X-coordinate of the vertical axis in the image instance.\n       \\param values_y Values along the Y-axis.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern Drawing pattern.\n       \\param font_height Height of the labels (exact match for 13,23,53,103, interpolated otherwise).\n       \\param allow_zero Enable/disable the drawing of label '0' if found.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_axis(const int x, const CImg<t>& values_y,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern=~0U, const unsigned int font_height=13,\n                       const bool allow_zero=true) {\n      if (is_empty()) return *this;\n      int siz = (int)values_y.size() - 1;\n      CImg<charT> txt(32);\n      CImg<T> label;\n      if (siz<=0) { // Degenerated case.\n        draw_line(x,0,x,_height - 1,color,opacity,pattern);\n        if (!siz) {\n          cimg_snprintf(txt,txt._width,\"%g\",(double)*values_y);\n          label.assign().draw_text(0,0,txt,color,(tc*)0,opacity,font_height);\n          const int\n            _yt = (height() - label.height())/2,\n            yt = _yt<0?0:_yt + label.height()>=height()?height() - 1-label.height():_yt,\n            _xt = x - 2 - label.width(),\n            xt = _xt>=0?_xt:x + 3;\n          draw_point(x - 1,height()/2,color,opacity).draw_point(x + 1,height()/2,color,opacity);\n          if (allow_zero || *txt!='0' || txt[1]!=0)\n            draw_text(xt,yt,txt,color,(tc*)0,opacity,font_height);\n        }\n      } else { // Regular case.\n        if (values_y[0]<values_y[siz]) draw_arrow(x,0,x,_height - 1,color,opacity,30,5,pattern);\n        else draw_arrow(x,_height - 1,x,0,color,opacity,30,5,pattern);\n        cimg_foroff(values_y,y) {\n          cimg_snprintf(txt,txt._width,\"%g\",(double)values_y(y));\n          label.assign().draw_text(0,0,txt,color,(tc*)0,opacity,font_height);\n          const int\n            yi = (int)(y*(_height - 1)/siz),\n            _yt = yi - label.height()/2,\n            yt = _yt<0?0:_yt + label.height()>=height()?height() - 1-label.height():_yt,\n            _xt = x - 2 - label.width(),\n            xt = _xt>=0?_xt:x + 3;\n          draw_point(x - 1,yi,color,opacity).draw_point(x + 1,yi,color,opacity);\n          if (allow_zero || *txt!='0' || txt[1]!=0)\n            draw_text(xt,yt,txt,color,(tc*)0,opacity,font_height);\n        }\n      }\n      return *this;\n    }\n\n    //! Draw labeled horizontal and vertical axes.\n    /**\n       \\param values_x Values along the X-axis.\n       \\param values_y Values along the Y-axis.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern_x Drawing pattern for the X-axis.\n       \\param pattern_y Drawing pattern for the Y-axis.\n       \\param font_height Height of the labels (exact match for 13,23,53,103, interpolated otherwise).\n       \\param allow_zero Enable/disable the drawing of label '0' if found.\n    **/\n    template<typename tx, typename ty, typename tc>\n    CImg<T>& draw_axes(const CImg<tx>& values_x, const CImg<ty>& values_y,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern_x=~0U, const unsigned int pattern_y=~0U,\n                       const unsigned int font_height=13, const bool allow_zero=true) {\n      if (is_empty()) return *this;\n      const CImg<tx> nvalues_x(values_x._data,values_x.size(),1,1,1,true);\n      const int sizx = (int)values_x.size() - 1, wm1 = width() - 1;\n      if (sizx>=0) {\n        float ox = (float)*nvalues_x;\n        for (unsigned int x = sizx?1U:0U; x<_width; ++x) {\n          const float nx = (float)nvalues_x._linear_atX((float)x*sizx/wm1);\n          if (nx*ox<=0) { draw_axis(nx==0?x:x - 1,values_y,color,opacity,pattern_y,font_height,allow_zero); break; }\n          ox = nx;\n        }\n      }\n      const CImg<ty> nvalues_y(values_y._data,values_y.size(),1,1,1,true);\n      const int sizy = (int)values_y.size() - 1, hm1 = height() - 1;\n      if (sizy>0) {\n        float oy = (float)nvalues_y[0];\n        for (unsigned int y = sizy?1U:0U; y<_height; ++y) {\n          const float ny = (float)nvalues_y._linear_atX((float)y*sizy/hm1);\n          if (ny*oy<=0) { draw_axis(values_x,ny==0?y:y - 1,color,opacity,pattern_x,font_height,allow_zero); break; }\n          oy = ny;\n        }\n      }\n      return *this;\n    }\n\n    //! Draw labeled horizontal and vertical axes \\overloading.\n    template<typename tc>\n    CImg<T>& draw_axes(const float x0, const float x1, const float y0, const float y1,\n                       const tc *const color, const float opacity=1,\n                       const int subdivisionx=-60, const int subdivisiony=-60,\n                       const float precisionx=0, const float precisiony=0,\n                       const unsigned int pattern_x=~0U, const unsigned int pattern_y=~0U,\n                       const unsigned int font_height=13) {\n      if (is_empty()) return *this;\n      const bool allow_zero = (x0*x1>0) || (y0*y1>0);\n      const float\n        dx = cimg::abs(x1-x0), dy = cimg::abs(y1-y0),\n        px = dx<=0?1:precisionx==0?(float)std::pow(10.0,(int)std::log10(dx) - 2.0):precisionx,\n        py = dy<=0?1:precisiony==0?(float)std::pow(10.0,(int)std::log10(dy) - 2.0):precisiony;\n      if (x0!=x1 && y0!=y1)\n        draw_axes(CImg<floatT>::sequence(subdivisionx>0?subdivisionx:1-width()/subdivisionx,x0,x1).round(px),\n                  CImg<floatT>::sequence(subdivisiony>0?subdivisiony:1-height()/subdivisiony,y0,y1).round(py),\n                  color,opacity,pattern_x,pattern_y,font_height,allow_zero);\n      else if (x0==x1 && y0!=y1)\n        draw_axis((int)x0,CImg<floatT>::sequence(subdivisiony>0?subdivisiony:1-height()/subdivisiony,y0,y1).round(py),\n                  color,opacity,pattern_y,font_height);\n      else if (x0!=x1 && y0==y1)\n        draw_axis(CImg<floatT>::sequence(subdivisionx>0?subdivisionx:1-width()/subdivisionx,x0,x1).round(px),(int)y0,\n                  color,opacity,pattern_x,font_height);\n      return *this;\n    }\n\n    //! Draw 2d grid.\n    /**\n       \\param values_x X-coordinates of the vertical lines.\n       \\param values_y Y-coordinates of the horizontal lines.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n       \\param pattern_x Drawing pattern for vertical lines.\n       \\param pattern_y Drawing pattern for horizontal lines.\n    **/\n    template<typename tx, typename ty, typename tc>\n    CImg<T>& draw_grid(const CImg<tx>& values_x, const CImg<ty>& values_y,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern_x=~0U, const unsigned int pattern_y=~0U) {\n      if (is_empty()) return *this;\n      if (values_x) cimg_foroff(values_x,x) {\n          const int xi = (int)values_x[x];\n          if (xi>=0 && xi<width()) draw_line(xi,0,xi,_height - 1,color,opacity,pattern_x);\n        }\n      if (values_y) cimg_foroff(values_y,y) {\n          const int yi = (int)values_y[y];\n          if (yi>=0 && yi<height()) draw_line(0,yi,_width - 1,yi,color,opacity,pattern_y);\n        }\n      return *this;\n    }\n\n    //! Draw 2d grid \\simplification.\n    template<typename tc>\n    CImg<T>& draw_grid(const float delta_x,  const float delta_y,\n                       const float offsetx, const float offsety,\n                       const bool invertx, const bool inverty,\n                       const tc *const color, const float opacity=1,\n                       const unsigned int pattern_x=~0U, const unsigned int pattern_y=~0U) {\n      if (is_empty()) return *this;\n      CImg<uintT> seqx, seqy;\n      if (delta_x!=0) {\n        const float dx = delta_x>0?delta_x:_width*-delta_x/100;\n        const unsigned int nx = (unsigned int)(_width/dx);\n        seqx = CImg<uintT>::sequence(1 + nx,0,(unsigned int)(dx*nx));\n        if (offsetx) cimg_foroff(seqx,x) seqx(x) = (unsigned int)cimg::mod(seqx(x) + offsetx,(float)_width);\n        if (invertx) cimg_foroff(seqx,x) seqx(x) = _width - 1 - seqx(x);\n      }\n      if (delta_y!=0) {\n        const float dy = delta_y>0?delta_y:_height*-delta_y/100;\n        const unsigned int ny = (unsigned int)(_height/dy);\n        seqy = CImg<uintT>::sequence(1 + ny,0,(unsigned int)(dy*ny));\n        if (offsety) cimg_foroff(seqy,y) seqy(y) = (unsigned int)cimg::mod(seqy(y) + offsety,(float)_height);\n        if (inverty) cimg_foroff(seqy,y) seqy(y) = _height - 1 - seqy(y);\n     }\n      return draw_grid(seqx,seqy,color,opacity,pattern_x,pattern_y);\n    }\n\n    //! Draw 1d graph.\n    /**\n       \\param data Image containing the graph values I = f(x).\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n\n       \\param plot_type Define the type of the plot:\n                      - 0 = No plot.\n                      - 1 = Plot using segments.\n                      - 2 = Plot using cubic splines.\n                      - 3 = Plot with bars.\n       \\param vertex_type Define the type of points:\n                      - 0 = No points.\n                      - 1 = Point.\n                      - 2 = Straight cross.\n                      - 3 = Diagonal cross.\n                      - 4 = Filled circle.\n                      - 5 = Outlined circle.\n                      - 6 = Square.\n                      - 7 = Diamond.\n       \\param ymin Lower bound of the y-range.\n       \\param ymax Upper bound of the y-range.\n       \\param pattern Drawing pattern.\n       \\note\n         - if \\c ymin==ymax==0, the y-range is computed automatically from the input samples.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_graph(const CImg<t>& data,\n                        const tc *const color, const float opacity=1,\n                        const unsigned int plot_type=1, const int vertex_type=1,\n                        const double ymin=0, const double ymax=0, const unsigned int pattern=~0U) {\n      if (is_empty() || _height<=1) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_graph(): Specified color is (null).\",\n                                    cimg_instance);\n\n      // Create shaded colors for displaying bar plots.\n      CImg<tc> color1, color2;\n      if (plot_type==3) {\n        color1.assign(_spectrum); color2.assign(_spectrum);\n        cimg_forC(*this,c) {\n          color1[c] = (tc)std::min((float)cimg::type<tc>::max(),(float)color[c]*1.2f);\n          color2[c] = (tc)(color[c]*0.4f);\n        }\n      }\n\n      // Compute min/max and normalization factors.\n      const ulongT\n        siz = data.size(),\n        _siz1 = siz - (plot_type!=3),\n        siz1 = _siz1?_siz1:1;\n      const unsigned int\n        _width1 = _width - (plot_type!=3),\n        width1 = _width1?_width1:1;\n      double m = ymin, M = ymax;\n      if (ymin==ymax) m = (double)data.max_min(M);\n      if (m==M) { --m; ++M; }\n      const float ca = (float)(M-m)/(_height - 1);\n      bool init_hatch = true;\n\n      // Draw graph edges\n      switch (plot_type%4) {\n      case 1 : { // Segments\n        int oX = 0, oY = (int)((data[0] - m)/ca);\n        if (siz==1) {\n          const int Y = (int)((*data - m)/ca);\n          draw_line(0,Y,width() - 1,Y,color,opacity,pattern);\n        } else {\n          const float fx = (float)_width/siz1;\n          for (ulongT off = 1; off<siz; ++off) {\n            const int\n              X = (int)(off*fx) - 1,\n              Y = (int)((data[off]-m)/ca);\n            draw_line(oX,oY,X,Y,color,opacity,pattern,init_hatch);\n            oX = X; oY = Y;\n            init_hatch = false;\n          }\n        }\n      } break;\n      case 2 : { // Spline\n        const CImg<t> ndata(data._data,siz,1,1,1,true);\n        int oY = (int)((data[0] - m)/ca);\n        cimg_forX(*this,x) {\n          const int Y = (int)((ndata._cubic_atX((float)x*siz1/width1)-m)/ca);\n          if (x>0) draw_line(x,oY,x + 1,Y,color,opacity,pattern,init_hatch);\n          init_hatch = false;\n          oY = Y;\n        }\n      } break;\n      case 3 : { // Bars\n        const int Y0 = (int)(-m/ca);\n        const float fx = (float)_width/siz1;\n        int oX = 0;\n        cimg_foroff(data,off) {\n          const int\n            X = (int)((off + 1)*fx) - 1,\n            Y = (int)((data[off] - m)/ca);\n          draw_rectangle(oX,Y0,X,Y,color,opacity).\n            draw_line(oX,Y,oX,Y0,color2.data(),opacity).\n            draw_line(oX,Y0,X,Y0,Y<=Y0?color2.data():color1.data(),opacity).\n            draw_line(X,Y,X,Y0,color1.data(),opacity).\n            draw_line(oX,Y,X,Y,Y<=Y0?color1.data():color2.data(),opacity);\n          oX = X + 1;\n        }\n      } break;\n      default : break; // No edges\n      }\n\n      // Draw graph points\n      const unsigned int wb2 = plot_type==3?_width1/(2*siz):0;\n      const float fx = (float)_width1/siz1;\n      switch (vertex_type%8) {\n      case 1 : { // Point\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_point(X,Y,color,opacity);\n        }\n      } break;\n      case 2 : { // Straight Cross\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_line(X - 3,Y,X + 3,Y,color,opacity).draw_line(X,Y - 3,X,Y + 3,color,opacity);\n        }\n      } break;\n      case 3 : { // Diagonal Cross\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_line(X - 3,Y - 3,X + 3,Y + 3,color,opacity).draw_line(X - 3,Y + 3,X + 3,Y - 3,color,opacity);\n        }\n      } break;\n      case 4 : { // Filled Circle\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_circle(X,Y,3,color,opacity);\n        }\n      } break;\n      case 5 : { // Outlined circle\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_circle(X,Y,3,color,opacity,0U);\n        }\n      } break;\n      case 6 : { // Square\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_rectangle(X - 3,Y - 3,X + 3,Y + 3,color,opacity,~0U);\n        }\n      } break;\n      case 7 : { // Diamond\n        cimg_foroff(data,off) {\n          const int\n            X = (int)(off*fx + wb2),\n            Y = (int)((data[off]-m)/ca);\n          draw_line(X,Y - 4,X + 4,Y,color,opacity).\n            draw_line(X + 4,Y,X,Y + 4,color,opacity).\n            draw_line(X,Y + 4,X - 4,Y,color,opacity).\n            draw_line(X - 4,Y,X,Y - 4,color,opacity);\n        }\n      } break;\n      default : break; // No points\n      }\n      return *this;\n    }\n\n    bool _draw_fill(const int x, const int y, const int z,\n                    const CImg<T>& ref, const float tolerance2) const {\n      const T *ptr1 = data(x,y,z), *ptr2 = ref._data;\n      const unsigned long off = _width*_height*_depth;\n      float diff = 0;\n      cimg_forC(*this,c) { diff += cimg::sqr(*ptr1 - *(ptr2++)); ptr1+=off; }\n      return diff<=tolerance2;\n    }\n\n    //! Draw filled 3d region with the flood fill algorithm.\n    /**\n       \\param x0 X-coordinate of the starting point of the region to fill.\n       \\param y0 Y-coordinate of the starting point of the region to fill.\n       \\param z0 Z-coordinate of the starting point of the region to fill.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param[out] region Image that will contain the mask of the filled region mask, as an output.\n       \\param tolerance Tolerance concerning neighborhood values.\n       \\param opacity Opacity of the drawing.\n       \\param is_high_connexity Tells if 8-connexity must be used.\n       \\return \\c region is initialized with the binary mask of the filled region.\n    **/\n    template<typename tc, typename t>\n    CImg<T>& draw_fill(const int x0, const int y0, const int z0,\n                        const tc *const color, const float opacity,\n                        CImg<t> &region,\n                        const float tolerance = 0,\n                        const bool is_high_connectivity = false) {\n#define _draw_fill_push(x,y,z) if (N>=stack._width) stack.resize(2*N + 1,1,1,3,0); \\\n                               stack[N] = x; stack(N,1) = y; stack(N++,2) = z\n#define _draw_fill_pop(x,y,z) x = stack[--N]; y = stack(N,1); z = stack(N,2)\n#define _draw_fill_is_inside(x,y,z) !_region(x,y,z) && _draw_fill(x,y,z,ref,tolerance2)\n\n      if (!containsXYZC(x0,y0,z0,0)) return *this;\n      const float nopacity = cimg::abs((float)opacity), copacity = 1 - std::max((float)opacity,0.0f);\n      const float tolerance2 = cimg::sqr(tolerance);\n      const CImg<T> ref = get_vector_at(x0,y0,z0);\n      CImg<uintT> stack(256,1,1,3);\n      CImg<ucharT> _region(_width,_height,_depth,1,0);\n      unsigned int N = 0;\n      int x, y, z;\n\n      _draw_fill_push(x0,y0,z0);\n      while (N>0) {\n        _draw_fill_pop(x,y,z);\n        if (!_region(x,y,z)) {\n          const int yp = y - 1, yn = y + 1, zp = z - 1, zn = z + 1;\n          int xl = x, xr = x;\n\n          // Using these booleans reduces the number of pushes drastically.\n          bool is_yp = false, is_yn = false, is_zp = false, is_zn = false;\n          for (int step = -1; step<2; step+=2) {\n            while (x>=0 && x<width() && _draw_fill_is_inside(x,y,z)) {\n              if (yp>=0 && _draw_fill_is_inside(x,yp,z)) {\n                if (!is_yp) { _draw_fill_push(x,yp,z); is_yp = true; }\n              } else is_yp = false;\n              if (yn<height() && _draw_fill_is_inside(x,yn,z)) {\n                if (!is_yn) { _draw_fill_push(x,yn,z); is_yn = true; }\n              } else is_yn = false;\n              if (depth()>1) {\n                if (zp>=0 && _draw_fill_is_inside(x,y,zp)) {\n                  if (!is_zp) { _draw_fill_push(x,y,zp); is_zp = true; }\n                } else is_zp = false;\n                if (zn<depth() && _draw_fill_is_inside(x,y,zn)) {\n                  if (!is_zn) { _draw_fill_push(x,y,zn); is_zn = true; }\n                } else is_zn = false;\n              }\n              if (is_high_connectivity) {\n                const int xp = x - 1, xn = x + 1;\n                if (yp>=0 && !is_yp) {\n                  if (xp>=0 && _draw_fill_is_inside(xp,yp,z)) {\n                    _draw_fill_push(xp,yp,z); if (step<0) is_yp = true;\n                  }\n                  if (xn<width() && _draw_fill_is_inside(xn,yp,z)) {\n                    _draw_fill_push(xn,yp,z); if (step>0) is_yp = true;\n                  }\n                }\n                if (yn<height() && !is_yn) {\n                  if (xp>=0 && _draw_fill_is_inside(xp,yn,z)) {\n                    _draw_fill_push(xp,yn,z); if (step<0) is_yn = true;\n                  }\n                  if (xn<width() && _draw_fill_is_inside(xn,yn,z)) {\n                    _draw_fill_push(xn,yn,z); if (step>0) is_yn = true;\n                  }\n                }\n                if (depth()>1) {\n                  if (zp>=0 && !is_zp) {\n                    if (xp>=0 && _draw_fill_is_inside(xp,y,zp)) {\n                      _draw_fill_push(xp,y,zp); if (step<0) is_zp = true;\n                    }\n                    if (xn<width() && _draw_fill_is_inside(xn,y,zp)) {\n                      _draw_fill_push(xn,y,zp); if (step>0) is_zp = true;\n                    }\n\n                    if (yp>=0 && !is_yp) {\n                      if (_draw_fill_is_inside(x,yp,zp)) { _draw_fill_push(x,yp,zp); }\n                      if (xp>=0 && _draw_fill_is_inside(xp,yp,zp)) { _draw_fill_push(xp,yp,zp); }\n                      if (xn<width() && _draw_fill_is_inside(xn,yp,zp)) { _draw_fill_push(xn,yp,zp); }\n                    }\n                    if (yn<height() && !is_yn) {\n                      if (_draw_fill_is_inside(x,yn,zp)) { _draw_fill_push(x,yn,zp); }\n                      if (xp>=0 && _draw_fill_is_inside(xp,yn,zp)) { _draw_fill_push(xp,yn,zp); }\n                      if (xn<width() && _draw_fill_is_inside(xn,yn,zp)) { _draw_fill_push(xn,yn,zp); }\n                    }\n                  }\n\n                  if (zn<depth() && !is_zn) {\n                    if (xp>=0 && _draw_fill_is_inside(xp,y,zn)) {\n                      _draw_fill_push(xp,y,zn); if (step<0) is_zn = true;\n                    }\n                    if (xn<width() && _draw_fill_is_inside(xn,y,zn)) {\n                      _draw_fill_push(xn,y,zn); if (step>0) is_zn = true;\n                    }\n\n                    if (yp>=0 && !is_yp) {\n                      if (_draw_fill_is_inside(x,yp,zn)) { _draw_fill_push(x,yp,zn); }\n                      if (xp>=0 && _draw_fill_is_inside(xp,yp,zn)) { _draw_fill_push(xp,yp,zn); }\n                      if (xn<width() && _draw_fill_is_inside(xn,yp,zn)) { _draw_fill_push(xn,yp,zn); }\n                    }\n                    if (yn<height() && !is_yn) {\n                      if (_draw_fill_is_inside(x,yn,zn)) { _draw_fill_push(x,yn,zn); }\n                      if (xp>=0 && _draw_fill_is_inside(xp,yn,zn)) { _draw_fill_push(xp,yn,zn); }\n                      if (xn<width() && _draw_fill_is_inside(xn,yn,zn)) { _draw_fill_push(xn,yn,zn); }\n                    }\n                  }\n                }\n              }\n              x+=step;\n            }\n            if (step<0) { xl = ++x; x = xr + 1; is_yp = is_yn = is_zp = is_zn = false; }\n            else xr = --x;\n          }\n          std::memset(_region.data(xl,y,z),1,xr - xl + 1);\n          if (opacity==1) {\n            if (sizeof(T)==1) {\n              const int dx = xr - xl + 1;\n              cimg_forC(*this,c) std::memset(data(xl,y,z,c),(int)color[c],dx);\n            } else cimg_forC(*this,c) {\n                const T val = (T)color[c];\n                T *ptri = data(xl,y,z,c); for (int k = xl; k<=xr; ++k) *(ptri++) = val;\n              }\n          } else cimg_forC(*this,c) {\n              const T val = (T)(color[c]*nopacity);\n              T *ptri = data(xl,y,z,c); for (int k = xl; k<=xr; ++k) { *ptri = (T)(val + *ptri*copacity); ++ptri; }\n            }\n        }\n      }\n      _region.move_to(region);\n      return *this;\n    }\n\n    //! Draw filled 3d region with the flood fill algorithm \\simplification.\n    template<typename tc>\n    CImg<T>& draw_fill(const int x0, const int y0, const int z0,\n                       const tc *const color, const float opacity=1,\n                       const float tolerance=0, const bool is_high_connexity=false) {\n      CImg<ucharT> tmp;\n      return draw_fill(x0,y0,z0,color,opacity,tmp,tolerance,is_high_connexity);\n    }\n\n    //! Draw filled 2d region with the flood fill algorithm \\simplification.\n    template<typename tc>\n    CImg<T>& draw_fill(const int x0, const int y0,\n                       const tc *const color, const float opacity=1,\n                       const float tolerance=0, const bool is_high_connexity=false) {\n      CImg<ucharT> tmp;\n      return draw_fill(x0,y0,0,color,opacity,tmp,tolerance,is_high_connexity);\n    }\n\n    //! Draw a random plasma texture.\n    /**\n       \\param alpha Alpha-parameter.\n       \\param beta Beta-parameter.\n       \\param scale Scale-parameter.\n       \\note Use the mid-point algorithm to render.\n    **/\n    CImg<T>& draw_plasma(const float alpha=1, const float beta=0, const unsigned int scale=8) {\n      if (is_empty()) return *this;\n      const int w = width(), h = height();\n      const Tfloat m = (Tfloat)cimg::type<T>::min(), M = (Tfloat)cimg::type<T>::max();\n      cimg_forZC(*this,z,c) {\n        CImg<T> ref = get_shared_slice(z,c);\n        for (int delta = 1<<std::min(scale,31U); delta>1; delta>>=1) {\n          const int delta2 = delta>>1;\n          const float r = alpha*delta + beta;\n\n          // Square step.\n          for (int y0 = 0; y0<h; y0+=delta)\n            for (int x0 = 0; x0<w; x0+=delta) {\n              const int x1 = (x0 + delta)%w, y1 = (y0 + delta)%h, xc = (x0 + delta2)%w, yc = (y0 + delta2)%h;\n              const Tfloat val = (Tfloat)(0.25f*(ref(x0,y0) + ref(x0,y1) + ref(x0,y1) + ref(x1,y1)) +\n                                          r*cimg::rand(-1,1));\n              ref(xc,yc) = (T)(val<m?m:val>M?M:val);\n            }\n\n          // Diamond steps.\n          for (int y = -delta2; y<h; y+=delta)\n            for (int x0=0; x0<w; x0+=delta) {\n              const int y0 = cimg::mod(y,h), x1 = (x0 + delta)%w, y1 = (y + delta)%h,\n                xc = (x0 + delta2)%w, yc = (y + delta2)%h;\n              const Tfloat val = (Tfloat)(0.25f*(ref(xc,y0) + ref(x0,yc) + ref(xc,y1) + ref(x1,yc)) +\n                                          r*cimg::rand(-1,1));\n              ref(xc,yc) = (T)(val<m?m:val>M?M:val);\n            }\n          for (int y0 = 0; y0<h; y0+=delta)\n            for (int x = -delta2; x<w; x+=delta) {\n              const int x0 = cimg::mod(x,w), x1 = (x + delta)%w, y1 = (y0 + delta)%h,\n                xc = (x + delta2)%w, yc = (y0 + delta2)%h;\n              const Tfloat val = (Tfloat)(0.25f*(ref(xc,y0) + ref(x0,yc) + ref(xc,y1) + ref(x1,yc)) +\n                                          r*cimg::rand(-1,1));\n              ref(xc,yc) = (T)(val<m?m:val>M?M:val);\n            }\n          for (int y = -delta2; y<h; y+=delta)\n            for (int x = -delta2; x<w; x+=delta) {\n              const int x0 = cimg::mod(x,w), y0 = cimg::mod(y,h), x1 = (x + delta)%w, y1 = (y + delta)%h,\n                xc = (x + delta2)%w, yc = (y + delta2)%h;\n              const Tfloat val = (Tfloat)(0.25f*(ref(xc,y0) + ref(x0,yc) + ref(xc,y1) + ref(x1,yc)) +\n                                          r*cimg::rand(-1,1));\n                ref(xc,yc) = (T)(val<m?m:val>M?M:val);\n            }\n        }\n      }\n      return *this;\n    }\n\n    //! Draw a quadratic Mandelbrot or Julia 2d fractal.\n    /**\n       \\param x0 X-coordinate of the upper-left pixel.\n       \\param y0 Y-coordinate of the upper-left pixel.\n       \\param x1 X-coordinate of the lower-right pixel.\n       \\param y1 Y-coordinate of the lower-right pixel.\n       \\param colormap Colormap.\n       \\param opacity Drawing opacity.\n       \\param z0r Real part of the upper-left fractal vertex.\n       \\param z0i Imaginary part of the upper-left fractal vertex.\n       \\param z1r Real part of the lower-right fractal vertex.\n       \\param z1i Imaginary part of the lower-right fractal vertex.\n       \\param iteration_max Maximum number of iterations for each estimated point.\n       \\param is_normalized_iteration Tells if iterations are normalized.\n       \\param is_julia_set Tells if the Mandelbrot or Julia set is rendered.\n       \\param param_r Real part of the Julia set parameter.\n       \\param param_i Imaginary part of the Julia set parameter.\n       \\note Fractal rendering is done by the Escape Time Algorithm.\n    **/\n    template<typename tc>\n    CImg<T>& draw_mandelbrot(const int x0, const int y0, const int x1, const int y1,\n                             const CImg<tc>& colormap, const float opacity=1,\n                             const double z0r=-2, const double z0i=-2, const double z1r=2, const double z1i=2,\n                             const unsigned int iteration_max=255,\n                             const bool is_normalized_iteration=false,\n                             const bool is_julia_set=false,\n                             const double param_r=0, const double param_i=0) {\n      if (is_empty()) return *this;\n      CImg<tc> palette;\n      if (colormap) palette.assign(colormap._data,colormap.size()/colormap._spectrum,1,1,colormap._spectrum,true);\n      if (palette && palette._spectrum!=_spectrum)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_mandelbrot(): Instance and specified colormap (%u,%u,%u,%u,%p) have \"\n                                    \"incompatible dimensions.\",\n                                    cimg_instance,\n                                    colormap._width,colormap._height,colormap._depth,colormap._spectrum,colormap._data);\n\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f), ln2 = (float)std::log(2.0);\n      const int\n        _x0 = cimg::cut(x0,0,width() - 1),\n        _y0 = cimg::cut(y0,0,height() - 1),\n        _x1 = cimg::cut(x1,0,width() - 1),\n        _y1 = cimg::cut(y1,0,height() - 1);\n\n      cimg_pragma_openmp(parallel for collapse(2) cimg_openmp_if((1 + _x1 - _x0)*(1 + _y1 - _y0)>=2048))\n      for (int q = _y0; q<=_y1; ++q)\n        for (int p = _x0; p<=_x1; ++p) {\n          unsigned int iteration = 0;\n          const double x = z0r + p*(z1r-z0r)/_width, y = z0i + q*(z1i-z0i)/_height;\n          double zr, zi, cr, ci;\n          if (is_julia_set) { zr = x; zi = y; cr = param_r; ci = param_i; }\n          else { zr = param_r; zi = param_i; cr = x; ci = y; }\n          for (iteration=1; zr*zr + zi*zi<=4 && iteration<=iteration_max; ++iteration) {\n            const double temp = zr*zr - zi*zi + cr;\n            zi = 2*zr*zi + ci;\n            zr = temp;\n          }\n          if (iteration>iteration_max) {\n            if (palette) {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)palette(0,c);\n              else cimg_forC(*this,c) (*this)(p,q,0,c) = (T)(palette(0,c)*nopacity + (*this)(p,q,0,c)*copacity);\n            } else {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)0;\n              else cimg_forC(*this,c) (*this)(p,q,0,c) = (T)((*this)(p,q,0,c)*copacity);\n            }\n          } else if (is_normalized_iteration) {\n            const float\n              normz = (float)cimg::abs(zr*zr + zi*zi),\n              niteration = (float)(iteration + 1 - std::log(std::log(normz))/ln2);\n            if (palette) {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)palette._linear_atX(niteration,c);\n              else cimg_forC(*this,c)\n                     (*this)(p,q,0,c) = (T)(palette._linear_atX(niteration,c)*nopacity + (*this)(p,q,0,c)*copacity);\n            } else {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)niteration;\n              else cimg_forC(*this,c) (*this)(p,q,0,c) = (T)(niteration*nopacity + (*this)(p,q,0,c)*copacity);\n            }\n          } else {\n            if (palette) {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)palette._atX(iteration,c);\n              else cimg_forC(*this,c) (*this)(p,q,0,c) = (T)(palette(iteration,c)*nopacity + (*this)(p,q,0,c)*copacity);\n            } else {\n              if (opacity>=1) cimg_forC(*this,c) (*this)(p,q,0,c) = (T)iteration;\n              else cimg_forC(*this,c) (*this)(p,q,0,c) = (T)(iteration*nopacity + (*this)(p,q,0,c)*copacity);\n            }\n          }\n        }\n      return *this;\n    }\n\n    //! Draw a quadratic Mandelbrot or Julia 2d fractal \\overloading.\n    template<typename tc>\n    CImg<T>& draw_mandelbrot(const CImg<tc>& colormap, const float opacity=1,\n                             const double z0r=-2, const double z0i=-2, const double z1r=2, const double z1i=2,\n                             const unsigned int iteration_max=255,\n                             const bool is_normalized_iteration=false,\n                             const bool is_julia_set=false,\n                             const double param_r=0, const double param_i=0) {\n      return draw_mandelbrot(0,0,_width - 1,_height - 1,colormap,opacity,\n                             z0r,z0i,z1r,z1i,iteration_max,is_normalized_iteration,is_julia_set,param_r,param_i);\n    }\n\n    //! Draw a 1d gaussian function.\n    /**\n       \\param xc X-coordinate of the gaussian center.\n       \\param sigma Standard variation of the gaussian distribution.\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename tc>\n    CImg<T>& draw_gaussian(const float xc, const float sigma,\n                           const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_gaussian(): Specified color is (null).\",\n                                    cimg_instance);\n      const float sigma2 = 2*sigma*sigma, nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      const tc *col = color;\n      cimg_forX(*this,x) {\n        const float dx = (x - xc), val = (float)std::exp(-dx*dx/sigma2);\n        T *ptrd = data(x,0,0,0);\n        if (opacity>=1) cimg_forC(*this,c) { *ptrd = (T)(val*(*col++)); ptrd+=whd; }\n        else cimg_forC(*this,c) { *ptrd = (T)(nopacity*val*(*col++) + *ptrd*copacity); ptrd+=whd; }\n        col-=_spectrum;\n      }\n      return *this;\n    }\n\n    //! Draw a 2d gaussian function.\n    /**\n       \\param xc X-coordinate of the gaussian center.\n       \\param yc Y-coordinate of the gaussian center.\n       \\param tensor Covariance matrix (must be 2x2).\n       \\param color Pointer to \\c spectrum() consecutive values, defining the drawing color.\n       \\param opacity Drawing opacity.\n    **/\n    template<typename t, typename tc>\n    CImg<T>& draw_gaussian(const float xc, const float yc, const CImg<t>& tensor,\n                           const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      if (tensor._width!=2 || tensor._height!=2 || tensor._depth!=1 || tensor._spectrum!=1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_gaussian(): Specified tensor (%u,%u,%u,%u,%p) is not a 2x2 matrix.\",\n                                    cimg_instance,\n                                    tensor._width,tensor._height,tensor._depth,tensor._spectrum,tensor._data);\n      if (!color)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_gaussian(): Specified color is (null).\",\n                                    cimg_instance);\n      typedef typename CImg<t>::Tfloat tfloat;\n      const CImg<tfloat> invT = tensor.get_invert(), invT2 = (invT*invT)/(-2.0);\n      const tfloat a = invT2(0,0), b = 2*invT2(1,0), c = invT2(1,1);\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      const tc *col = color;\n      float dy = -yc;\n      cimg_forY(*this,y) {\n        float dx = -xc;\n        cimg_forX(*this,x) {\n          const float val = (float)std::exp(a*dx*dx + b*dx*dy + c*dy*dy);\n          T *ptrd = data(x,y,0,0);\n          if (opacity>=1) cimg_forC(*this,c) { *ptrd = (T)(val*(*col++)); ptrd+=whd; }\n          else cimg_forC(*this,c) { *ptrd = (T)(nopacity*val*(*col++) + *ptrd*copacity); ptrd+=whd; }\n          col-=_spectrum;\n          ++dx;\n        }\n        ++dy;\n      }\n      return *this;\n    }\n\n    //! Draw a 2d gaussian function \\overloading.\n    template<typename tc>\n    CImg<T>& draw_gaussian(const int xc, const int yc, const float r1, const float r2, const float ru, const float rv,\n                           const tc *const color, const float opacity=1) {\n      const double\n        a = r1*ru*ru + r2*rv*rv,\n        b = (r1-r2)*ru*rv,\n        c = r1*rv*rv + r2*ru*ru;\n      const CImg<Tfloat> tensor(2,2,1,1, a,b,b,c);\n      return draw_gaussian(xc,yc,tensor,color,opacity);\n    }\n\n    //! Draw a 2d gaussian function \\overloading.\n    template<typename tc>\n    CImg<T>& draw_gaussian(const float xc, const float yc, const float sigma,\n                           const tc *const color, const float opacity=1) {\n      return draw_gaussian(xc,yc,CImg<floatT>::diagonal(sigma,sigma),color,opacity);\n    }\n\n    //! Draw a 3d gaussian function \\overloading.\n    template<typename t, typename tc>\n    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const CImg<t>& tensor,\n                           const tc *const color, const float opacity=1) {\n      if (is_empty()) return *this;\n      typedef typename CImg<t>::Tfloat tfloat;\n      if (tensor._width!=3 || tensor._height!=3 || tensor._depth!=1 || tensor._spectrum!=1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_gaussian(): Specified tensor (%u,%u,%u,%u,%p) is not a 3x3 matrix.\",\n                                    cimg_instance,\n                                    tensor._width,tensor._height,tensor._depth,tensor._spectrum,tensor._data);\n\n      const CImg<tfloat> invT = tensor.get_invert(), invT2 = (invT*invT)/(-2.0);\n      const tfloat a = invT2(0,0), b = 2*invT2(1,0), c = 2*invT2(2,0), d = invT2(1,1), e = 2*invT2(2,1), f = invT2(2,2);\n      const float nopacity = cimg::abs(opacity), copacity = 1 - std::max(opacity,0.0f);\n      const ulongT whd = (ulongT)_width*_height*_depth;\n      const tc *col = color;\n      cimg_forXYZ(*this,x,y,z) {\n        const float\n          dx = (x - xc), dy = (y - yc), dz = (z - zc),\n          val = (float)std::exp(a*dx*dx + b*dx*dy + c*dx*dz + d*dy*dy + e*dy*dz + f*dz*dz);\n        T *ptrd = data(x,y,z,0);\n        if (opacity>=1) cimg_forC(*this,c) { *ptrd = (T)(val*(*col++)); ptrd+=whd; }\n        else cimg_forC(*this,c) { *ptrd = (T)(nopacity*val*(*col++) + *ptrd*copacity); ptrd+=whd; }\n        col-=_spectrum;\n      }\n      return *this;\n    }\n\n    //! Draw a 3d gaussian function \\overloading.\n    template<typename tc>\n    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const float sigma,\n                           const tc *const color, const float opacity=1) {\n      return draw_gaussian(xc,yc,zc,CImg<floatT>::diagonal(sigma,sigma,sigma),color,opacity);\n    }\n\n    //! Draw a 3d object.\n    /**\n       \\param x0 X-coordinate of the 3d object position\n       \\param y0 Y-coordinate of the 3d object position\n       \\param z0 Z-coordinate of the 3d object position\n       \\param vertices Image Nx3 describing 3d point coordinates\n       \\param primitives List of P primitives\n       \\param colors List of P color (or textures)\n       \\param opacities Image or list of P opacities\n       \\param render_type d Render type (0=Points, 1=Lines, 2=Faces (no light), 3=Faces (flat), 4=Faces(Gouraud)\n       \\param is_double_sided Tells if object faces have two sides or are oriented.\n       \\param focale length of the focale (0 for parallel projection)\n       \\param lightx X-coordinate of the light\n       \\param lighty Y-coordinate of the light\n       \\param lightz Z-coordinate of the light\n       \\param specular_lightness Amount of specular light.\n       \\param specular_shininess Shininess of the object\n    **/\n    template<typename tp, typename tf, typename tc, typename to>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImg<to>& opacities,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,opacities,render_type,\n                           is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    //! Draw a 3d object \\simplification.\n    template<typename tp, typename tf, typename tc, typename to, typename tz>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImg<to>& opacities,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return _draw_object3d(0,zbuffer,x0,y0,z0,vertices,primitives,colors,opacities,\n                            render_type,is_double_sided,focale,lightx,lighty,lightz,\n                            specular_lightness,specular_shininess,1);\n    }\n\n#ifdef cimg_use_board\n    template<typename tp, typename tf, typename tc, typename to>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImg<to>& opacities,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(board,x0,y0,z0,vertices,primitives,colors,opacities,render_type,\n                           is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    template<typename tp, typename tf, typename tc, typename to, typename tz>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImg<to>& opacities,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return _draw_object3d((void*)&board,zbuffer,x0,y0,z0,vertices,primitives,colors,opacities,\n                            render_type,is_double_sided,focale,lightx,lighty,lightz,\n                            specular_lightness,specular_shininess,1);\n    }\n#endif\n\n    //! Draw a 3d object \\simplification.\n    template<typename tp, typename tf, typename tc, typename to>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImgList<to>& opacities,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,opacities,render_type,\n                           is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    //! Draw a 3d object \\simplification.\n    template<typename tp, typename tf, typename tc, typename to, typename tz>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImgList<to>& opacities,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return _draw_object3d(0,zbuffer,x0,y0,z0,vertices,primitives,colors,opacities,\n                            render_type,is_double_sided,focale,lightx,lighty,lightz,\n                            specular_lightness,specular_shininess,1);\n    }\n\n#ifdef cimg_use_board\n    template<typename tp, typename tf, typename tc, typename to>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImgList<to>& opacities,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(board,x0,y0,z0,vertices,primitives,colors,opacities,render_type,\n                           is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    template<typename tp, typename tf, typename tc, typename to, typename tz>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors, const CImgList<to>& opacities,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return _draw_object3d((void*)&board,zbuffer,x0,y0,z0,vertices,primitives,colors,opacities,\n                            render_type,is_double_sided,focale,lightx,lighty,lightz,\n                            specular_lightness,specular_shininess,1);\n    }\n#endif\n\n    //! Draw a 3d object \\simplification.\n    template<typename tp, typename tf, typename tc>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,CImg<floatT>::const_empty(),\n                           render_type,is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    //! Draw a 3d object \\simplification.\n    template<typename tp, typename tf, typename tc, typename tz>\n    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,CImg<floatT>::const_empty(),\n                           render_type,is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,zbuffer);\n    }\n\n#ifdef cimg_use_board\n    template<typename tp, typename tf, typename tc, typename to>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors,\n                           const unsigned int render_type=4,\n                           const bool is_double_sided=false, const float focale=700,\n                           const float lightx=0, const float lighty=0, const float lightz=-5e8,\n                           const float specular_lightness=0.2f, const float specular_shininess=0.1f) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,CImg<floatT>::const_empty(),\n                           render_type,is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,CImg<floatT>::empty());\n    }\n\n    template<typename tp, typename tf, typename tc, typename to, typename tz>\n    CImg<T>& draw_object3d(LibBoard::Board& board,\n                           const float x0, const float y0, const float z0,\n                           const CImg<tp>& vertices, const CImgList<tf>& primitives,\n                           const CImgList<tc>& colors,\n                           const unsigned int render_type,\n                           const bool is_double_sided, const float focale,\n                           const float lightx, const float lighty, const float lightz,\n                           const float specular_lightness, const float specular_shininess,\n                           CImg<tz>& zbuffer) {\n      return draw_object3d(x0,y0,z0,vertices,primitives,colors,CImg<floatT>::const_empty(),\n                           render_type,is_double_sided,focale,lightx,lighty,lightz,\n                           specular_lightness,specular_shininess,zbuffer);\n    }\n#endif\n\n    template<typename t, typename to>\n    static float __draw_object3d(const CImgList<t>& opacities, const unsigned int n_primitive, CImg<to>& opacity) {\n      if (n_primitive>=opacities._width || opacities[n_primitive].is_empty()) { opacity.assign(); return 1; }\n      if (opacities[n_primitive].size()==1) { opacity.assign(); return opacities(n_primitive,0); }\n      opacity.assign(opacities[n_primitive],true);\n      return 1.0f;\n    }\n\n    template<typename t, typename to>\n    static float __draw_object3d(const CImg<t>& opacities, const unsigned int n_primitive, CImg<to>& opacity) {\n      opacity.assign();\n      return n_primitive>=opacities._width?1.0f:(float)opacities[n_primitive];\n    }\n\n    template<typename t>\n    static float ___draw_object3d(const CImgList<t>& opacities, const unsigned int n_primitive) {\n      return n_primitive<opacities._width && opacities[n_primitive].size()==1?(float)opacities(n_primitive,0):1.0f;\n    }\n\n    template<typename t>\n    static float ___draw_object3d(const CImg<t>& opacities, const unsigned int n_primitive) {\n      return n_primitive<opacities._width?(float)opacities[n_primitive]:1.0f;\n    }\n\n    template<typename tz, typename tp, typename tf, typename tc, typename to>\n    CImg<T>& _draw_object3d(void *const pboard, CImg<tz>& zbuffer,\n                            const float X, const float Y, const float Z,\n                            const CImg<tp>& vertices,\n                            const CImgList<tf>& primitives,\n                            const CImgList<tc>& colors,\n                            const to& opacities,\n                            const unsigned int render_type,\n                            const bool is_double_sided, const float focale,\n                            const float lightx, const float lighty, const float lightz,\n                            const float specular_lightness, const float specular_shininess,\n                            const float sprite_scale) {\n      typedef typename cimg::superset2<tp,tz,float>::type tpfloat;\n      typedef typename to::value_type _to;\n      if (is_empty() || !vertices || !primitives) return *this;\n      CImg<char> error_message(1024);\n      if (!vertices.is_object3d(primitives,colors,opacities,false,error_message))\n        throw CImgArgumentException(_cimg_instance\n                                    \"draw_object3d(): Invalid specified 3d object (%u,%u) (%s).\",\n                                    cimg_instance,vertices._width,primitives._width,error_message.data());\n#ifndef cimg_use_board\n      if (pboard) return *this;\n#endif\n      if (render_type==5) cimg::mutex(10);  // Static variable used in this case, breaks thread-safety.\n\n      const float\n        nspec = 1 - (specular_lightness<0.0f?0.0f:(specular_lightness>1.0f?1.0f:specular_lightness)),\n        nspec2 = 1 + (specular_shininess<0.0f?0.0f:specular_shininess),\n        nsl1 = (nspec2 - 1)/cimg::sqr(nspec - 1),\n        nsl2 = 1 - 2*nsl1*nspec,\n        nsl3 = nspec2 - nsl1 - nsl2;\n\n      // Create light texture for phong-like rendering.\n      CImg<floatT> light_texture;\n      if (render_type==5) {\n        if (colors._width>primitives._width) {\n          static CImg<floatT> default_light_texture;\n          static const tc *lptr = 0;\n          static tc ref_values[64] = { 0 };\n          const CImg<tc>& img = colors.back();\n          bool is_same_texture = (lptr==img._data);\n          if (is_same_texture)\n            for (unsigned int r = 0, j = 0; j<8; ++j)\n              for (unsigned int i = 0; i<8; ++i)\n                if (ref_values[r++]!=img(i*img._width/9,j*img._height/9,0,(i + j)%img._spectrum)) {\n                  is_same_texture = false; break;\n                }\n          if (!is_same_texture || default_light_texture._spectrum<_spectrum) {\n            (default_light_texture.assign(img,false)/=255).resize(-100,-100,1,_spectrum);\n            lptr = colors.back().data();\n            for (unsigned int r = 0, j = 0; j<8; ++j)\n              for (unsigned int i = 0; i<8; ++i)\n                ref_values[r++] = img(i*img._width/9,j*img._height/9,0,(i + j)%img._spectrum);\n          }\n          light_texture.assign(default_light_texture,true);\n        } else {\n          static CImg<floatT> default_light_texture;\n          static float olightx = 0, olighty = 0, olightz = 0, ospecular_shininess = 0;\n          if (!default_light_texture ||\n              lightx!=olightx || lighty!=olighty || lightz!=olightz ||\n              specular_shininess!=ospecular_shininess || default_light_texture._spectrum<_spectrum) {\n            default_light_texture.assign(512,512);\n            const float\n              dlx = lightx - X,\n              dly = lighty - Y,\n              dlz = lightz - Z,\n              nl = cimg::hypot(dlx,dly,dlz),\n              nlx = (default_light_texture._width - 1)/2*(1 + dlx/nl),\n              nly = (default_light_texture._height - 1)/2*(1 + dly/nl),\n              white[] = { 1 };\n            default_light_texture.draw_gaussian(nlx,nly,default_light_texture._width/3.0f,white);\n            cimg_forXY(default_light_texture,x,y) {\n              const float factor = default_light_texture(x,y);\n              if (factor>nspec) default_light_texture(x,y) = std::min(2.0f,nsl1*factor*factor + nsl2*factor + nsl3);\n            }\n            default_light_texture.resize(-100,-100,1,_spectrum);\n            olightx = lightx; olighty = lighty; olightz = lightz; ospecular_shininess = specular_shininess;\n          }\n          light_texture.assign(default_light_texture,true);\n        }\n      }\n\n      // Compute 3d to 2d projection.\n      CImg<tpfloat> projections(vertices._width,2);\n      tpfloat parallzmin = cimg::type<tpfloat>::max();\n      const float absfocale = focale?cimg::abs(focale):0;\n      if (absfocale) {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(projections.size()>4096))\n        cimg_forX(projections,l) { // Perspective projection\n          const tpfloat\n            x = (tpfloat)vertices(l,0),\n            y = (tpfloat)vertices(l,1),\n            z = (tpfloat)vertices(l,2);\n          const tpfloat projectedz = z + Z + absfocale;\n          projections(l,1) = Y + absfocale*y/projectedz;\n          projections(l,0) = X + absfocale*x/projectedz;\n        }\n      } else {\n        cimg_pragma_openmp(parallel for cimg_openmp_if(projections.size()>4096))\n        cimg_forX(projections,l) { // Parallel projection\n          const tpfloat\n            x = (tpfloat)vertices(l,0),\n            y = (tpfloat)vertices(l,1),\n            z = (tpfloat)vertices(l,2);\n          if (z<parallzmin) parallzmin = z;\n          projections(l,1) = Y + y;\n          projections(l,0) = X + x;\n        }\n      }\n\n      const float _focale = absfocale?absfocale:(1e5f-parallzmin);\n      float zmax = 0;\n      if (zbuffer) zmax = vertices.get_shared_row(2).max();\n\n      // Compute visible primitives.\n      CImg<uintT> visibles(primitives._width,1,1,1,~0U);\n      CImg<tpfloat> zrange(primitives._width);\n      const tpfloat zmin = absfocale?(tpfloat)(1.5f - absfocale):cimg::type<tpfloat>::min();\n      bool is_forward = zbuffer?true:false;\n\n      cimg_pragma_openmp(parallel for cimg_openmp_if(primitives.size()>4096))\n      cimglist_for(primitives,l) {\n        const CImg<tf>& primitive = primitives[l];\n        switch (primitive.size()) {\n        case 1 : { // Point\n          CImg<_to> _opacity;\n          __draw_object3d(opacities,l,_opacity);\n          if (l<=colors.width() && (colors[l].size()!=_spectrum || _opacity)) is_forward = false;\n          const unsigned int i0 = (unsigned int)primitive(0);\n          const tpfloat z0 = Z + vertices(i0,2);\n          if (z0>zmin) {\n            visibles(l) = (unsigned int)l;\n            zrange(l) = z0;\n          }\n        } break;\n        case 5 : { // Sphere\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1);\n          const tpfloat\n            Xc = 0.5f*((float)vertices(i0,0) + (float)vertices(i1,0)),\n            Yc = 0.5f*((float)vertices(i0,1) + (float)vertices(i1,1)),\n            Zc = 0.5f*((float)vertices(i0,2) + (float)vertices(i1,2)),\n            _zc = Z + Zc,\n            zc = _zc + _focale,\n            xc = X + Xc*(absfocale?absfocale/zc:1),\n            yc = Y + Yc*(absfocale?absfocale/zc:1),\n            radius = 0.5f*cimg::hypot(vertices(i1,0) - vertices(i0,0),\n                                      vertices(i1,1) - vertices(i0,1),\n                                      vertices(i1,2) - vertices(i0,2))*(absfocale?absfocale/zc:1),\n            xm = xc - radius,\n            ym = yc - radius,\n            xM = xc + radius,\n            yM = yc + radius;\n          if (xM>=0 && xm<_width && yM>=0 && ym<_height && _zc>zmin) {\n            visibles(l) = (unsigned int)l;\n            zrange(l) = _zc;\n          }\n          is_forward = false;\n        } break;\n        case 2 : // Segment\n        case 6 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1);\n          const tpfloat\n            x0 = projections(i0,0), y0 = projections(i0,1), z0 = Z + vertices(i0,2),\n            x1 = projections(i1,0), y1 = projections(i1,1), z1 = Z + vertices(i1,2);\n          tpfloat xm, xM, ym, yM;\n          if (x0<x1) { xm = x0; xM = x1; } else { xm = x1; xM = x0; }\n          if (y0<y1) { ym = y0; yM = y1; } else { ym = y1; yM = y0; }\n          if (xM>=0 && xm<_width && yM>=0 && ym<_height && z0>zmin && z1>zmin) {\n            visibles(l) = (unsigned int)l;\n            zrange(l) = (z0 + z1)/2;\n          }\n        } break;\n        case 3 :  // Triangle\n        case 9 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1),\n            i2 = (unsigned int)primitive(2);\n          const tpfloat\n            x0 = projections(i0,0), y0 = projections(i0,1), z0 = Z + vertices(i0,2),\n            x1 = projections(i1,0), y1 = projections(i1,1), z1 = Z + vertices(i1,2),\n            x2 = projections(i2,0), y2 = projections(i2,1), z2 = Z + vertices(i2,2);\n          tpfloat xm, xM, ym, yM;\n          if (x0<x1) { xm = x0; xM = x1; } else { xm = x1; xM = x0; }\n          if (x2<xm) xm = x2;\n          if (x2>xM) xM = x2;\n          if (y0<y1) { ym = y0; yM = y1; } else { ym = y1; yM = y0; }\n          if (y2<ym) ym = y2;\n          if (y2>yM) yM = y2;\n          if (xM>=0 && xm<_width && yM>=0 && ym<_height && z0>zmin && z1>zmin && z2>zmin) {\n            const tpfloat d = (x1-x0)*(y2-y0) - (x2-x0)*(y1-y0);\n            if (is_double_sided || d<0) {\n              visibles(l) = (unsigned int)l;\n              zrange(l) = (z0 + z1 + z2)/3;\n            }\n          }\n        } break;\n        case 4 : // Rectangle\n        case 12 : {\n          const unsigned int\n            i0 = (unsigned int)primitive(0),\n            i1 = (unsigned int)primitive(1),\n            i2 = (unsigned int)primitive(2),\n            i3 = (unsigned int)primitive(3);\n          const tpfloat\n            x0 = projections(i0,0), y0 = projections(i0,1), z0 = Z + vertices(i0,2),\n            x1 = projections(i1,0), y1 = projections(i1,1), z1 = Z + vertices(i1,2),\n            x2 = projections(i2,0), y2 = projections(i2,1), z2 = Z + vertices(i2,2),\n            x3 = projections(i3,0), y3 = projections(i3,1), z3 = Z + vertices(i3,2);\n          tpfloat xm, xM, ym, yM;\n          if (x0<x1) { xm = x0; xM = x1; } else { xm = x1; xM = x0; }\n          if (x2<xm) xm = x2;\n          if (x2>xM) xM = x2;\n          if (x3<xm) xm = x3;\n          if (x3>xM) xM = x3;\n          if (y0<y1) { ym = y0; yM = y1; } else { ym = y1; yM = y0; }\n          if (y2<ym) ym = y2;\n          if (y2>yM) yM = y2;\n          if (y3<ym) ym = y3;\n          if (y3>yM) yM = y3;\n          if (xM>=0 && xm<_width && yM>=0 && ym<_height && z0>zmin && z1>zmin && z2>zmin && z3>zmin) {\n            const float d = (x1 - x0)*(y2 - y0) - (x2 - x0)*(y1 - y0);\n            if (is_double_sided || d<0) {\n              visibles(l) = (unsigned int)l;\n              zrange(l) = (z0 + z1 + z2 + z3)/4;\n            }\n          }\n        } break;\n        default :\n          if (render_type==5) cimg::mutex(10,0);\n          throw CImgArgumentException(_cimg_instance\n                                      \"draw_object3d(): Invalid primitive[%u] with size %u \"\n                                      \"(should have size 1,2,3,4,5,6,9 or 12).\",\n                                      cimg_instance,\n                                      l,primitive.size());\n        }\n      }\n\n      // Force transparent primitives to be drawn last when zbuffer is activated\n      // (and if object contains no spheres or sprites).\n      if (is_forward)\n        cimglist_for(primitives,l)\n          if (___draw_object3d(opacities,l)!=1) zrange(l) = 2*zmax - zrange(l);\n\n      // Sort only visibles primitives.\n      unsigned int *p_visibles = visibles._data;\n      tpfloat *p_zrange = zrange._data;\n      const tpfloat *ptrz = p_zrange;\n      cimg_for(visibles,ptr,unsigned int) {\n        if (*ptr!=~0U) { *(p_visibles++) = *ptr; *(p_zrange++) = *ptrz; }\n        ++ptrz;\n      }\n      const unsigned int nb_visibles = (unsigned int)(p_zrange - zrange._data);\n      if (!nb_visibles) {\n        if (render_type==5) cimg::mutex(10,0);\n        return *this;\n      }\n      CImg<uintT> permutations;\n      CImg<tpfloat>(zrange._data,nb_visibles,1,1,1,true).sort(permutations,is_forward);\n\n      // Compute light properties\n      CImg<floatT> lightprops;\n      switch (render_type) {\n      case 3 : { // Flat Shading\n        lightprops.assign(nb_visibles);\n        cimg_pragma_openmp(parallel for cimg_openmp_if(nb_visibles>4096))\n        cimg_forX(lightprops,l) {\n          const CImg<tf>& primitive = primitives(visibles(permutations(l)));\n          const unsigned int psize = (unsigned int)primitive.size();\n          if (psize==3 || psize==4 || psize==9 || psize==12) {\n            const unsigned int\n              i0 = (unsigned int)primitive(0),\n              i1 = (unsigned int)primitive(1),\n              i2 = (unsigned int)primitive(2);\n            const tpfloat\n              x0 = (tpfloat)vertices(i0,0), y0 = (tpfloat)vertices(i0,1), z0 = (tpfloat)vertices(i0,2),\n              x1 = (tpfloat)vertices(i1,0), y1 = (tpfloat)vertices(i1,1), z1 = (tpfloat)vertices(i1,2),\n              x2 = (tpfloat)vertices(i2,0), y2 = (tpfloat)vertices(i2,1), z2 = (tpfloat)vertices(i2,2),\n              dx1 = x1 - x0, dy1 = y1 - y0, dz1 = z1 - z0,\n              dx2 = x2 - x0, dy2 = y2 - y0, dz2 = z2 - z0,\n              nx = dy1*dz2 - dz1*dy2,\n              ny = dz1*dx2 - dx1*dz2,\n              nz = dx1*dy2 - dy1*dx2,\n              norm = 1e-5f + cimg::hypot(nx,ny,nz),\n              lx = X + (x0 + x1 + x2)/3 - lightx,\n              ly = Y + (y0 + y1 + y2)/3 - lighty,\n              lz = Z + (z0 + z1 + z2)/3 - lightz,\n              nl = 1e-5f + cimg::hypot(lx,ly,lz),\n              factor = std::max(cimg::abs(-lx*nx - ly*ny - lz*nz)/(norm*nl),(tpfloat)0);\n            lightprops[l] = factor<=nspec?factor:(nsl1*factor*factor + nsl2*factor + nsl3);\n          } else lightprops[l] = 1;\n        }\n      } break;\n\n      case 4 : // Gouraud Shading\n      case 5 : { // Phong-Shading\n        CImg<tpfloat> vertices_normals(vertices._width,6,1,1,0);\n        cimg_pragma_openmp(parallel for cimg_openmp_if(nb_visibles>4096))\n        for (unsigned int l = 0; l<nb_visibles; ++l) {\n          const CImg<tf>& primitive = primitives[visibles(l)];\n          const unsigned int psize = (unsigned int)primitive.size();\n          const bool\n            triangle_flag = (psize==3) || (psize==9),\n            rectangle_flag = (psize==4) || (psize==12);\n          if (triangle_flag || rectangle_flag) {\n            const unsigned int\n              i0 = (unsigned int)primitive(0),\n              i1 = (unsigned int)primitive(1),\n              i2 = (unsigned int)primitive(2),\n              i3 = rectangle_flag?(unsigned int)primitive(3):0;\n            const tpfloat\n              x0 = (tpfloat)vertices(i0,0), y0 = (tpfloat)vertices(i0,1), z0 = (tpfloat)vertices(i0,2),\n              x1 = (tpfloat)vertices(i1,0), y1 = (tpfloat)vertices(i1,1), z1 = (tpfloat)vertices(i1,2),\n              x2 = (tpfloat)vertices(i2,0), y2 = (tpfloat)vertices(i2,1), z2 = (tpfloat)vertices(i2,2),\n              dx1 = x1 - x0, dy1 = y1 - y0, dz1 = z1 - z0,\n              dx2 = x2 - x0, dy2 = y2 - y0, dz2 = z2 - z0,\n              nnx = dy1*dz2 - dz1*dy2,\n              nny = dz1*dx2 - dx1*dz2,\n              nnz = dx1*dy2 - dy1*dx2,\n              norm = 1e-5f + cimg::hypot(nnx,nny,nnz),\n              nx = nnx/norm,\n              ny = nny/norm,\n              nz = nnz/norm;\n            unsigned int ix = 0, iy = 1, iz = 2;\n            if (is_double_sided && nz>0) { ix = 3; iy = 4; iz = 5; }\n            vertices_normals(i0,ix)+=nx; vertices_normals(i0,iy)+=ny; vertices_normals(i0,iz)+=nz;\n            vertices_normals(i1,ix)+=nx; vertices_normals(i1,iy)+=ny; vertices_normals(i1,iz)+=nz;\n            vertices_normals(i2,ix)+=nx; vertices_normals(i2,iy)+=ny; vertices_normals(i2,iz)+=nz;\n            if (rectangle_flag) {\n              vertices_normals(i3,ix)+=nx; vertices_normals(i3,iy)+=ny; vertices_normals(i3,iz)+=nz;\n            }\n          }\n        }\n\n        if (is_double_sided) cimg_forX(vertices_normals,p) {\n            const float\n              nx0 = vertices_normals(p,0), ny0 = vertices_normals(p,1), nz0 = vertices_normals(p,2),\n              nx1 = vertices_normals(p,3), ny1 = vertices_normals(p,4), nz1 = vertices_normals(p,5),\n              n0 = nx0*nx0 + ny0*ny0 + nz0*nz0, n1 = nx1*nx1 + ny1*ny1 + nz1*nz1;\n            if (n1>n0) {\n              vertices_normals(p,0) = -nx1;\n              vertices_normals(p,1) = -ny1;\n              vertices_normals(p,2) = -nz1;\n            }\n          }\n\n        if (render_type==4) {\n          lightprops.assign(vertices._width);\n          cimg_pragma_openmp(parallel for cimg_openmp_if(nb_visibles>4096))\n          cimg_forX(lightprops,l) {\n            const tpfloat\n              nx = vertices_normals(l,0),\n              ny = vertices_normals(l,1),\n              nz = vertices_normals(l,2),\n              norm = 1e-5f + cimg::hypot(nx,ny,nz),\n              lx = X + vertices(l,0) - lightx,\n              ly = Y + vertices(l,1) - lighty,\n              lz = Z + vertices(l,2) - lightz,\n              nl = 1e-5f + cimg::hypot(lx,ly,lz),\n              factor = std::max((-lx*nx - ly*ny - lz*nz)/(norm*nl),(tpfloat)0);\n            lightprops[l] = factor<=nspec?factor:(nsl1*factor*factor + nsl2*factor + nsl3);\n          }\n        } else {\n          const unsigned int\n            lw2 = light_texture._width/2 - 1,\n            lh2 = light_texture._height/2 - 1;\n          lightprops.assign(vertices._width,2);\n          cimg_pragma_openmp(parallel for cimg_openmp_if(nb_visibles>4096))\n          cimg_forX(lightprops,l) {\n            const tpfloat\n              nx = vertices_normals(l,0),\n              ny = vertices_normals(l,1),\n              nz = vertices_normals(l,2),\n              norm = 1e-5f + cimg::hypot(nx,ny,nz),\n              nnx = nx/norm,\n              nny = ny/norm;\n            lightprops(l,0) = lw2*(1 + nnx);\n            lightprops(l,1) = lh2*(1 + nny);\n          }\n        }\n      } break;\n      }\n\n      // Draw visible primitives\n      const CImg<tc> default_color(1,_spectrum,1,1,(tc)200);\n      CImg<_to> _opacity;\n\n      for (unsigned int l = 0; l<nb_visibles; ++l) {\n        const unsigned int n_primitive = visibles(permutations(l));\n        const CImg<tf>& primitive = primitives[n_primitive];\n        const CImg<tc>\n          &__color = n_primitive<colors._width?colors[n_primitive]:CImg<tc>(),\n          _color = (__color && __color.size()!=_spectrum && __color._spectrum<_spectrum)?\n            __color.get_resize(-100,-100,-100,_spectrum,0):CImg<tc>(),\n          &color = _color?_color:(__color?__color:default_color);\n        const tc *const pcolor = color._data;\n        const float opacity = __draw_object3d(opacities,n_primitive,_opacity);\n\n#ifdef cimg_use_board\n        LibBoard::Board &board = *(LibBoard::Board*)pboard;\n#endif\n\n        switch (primitive.size()) {\n        case 1 : { // Colored point or sprite\n          const unsigned int n0 = (unsigned int)primitive[0];\n          const int x0 = (int)projections(n0,0), y0 = (int)projections(n0,1);\n\n          if (_opacity.is_empty()) { // Scalar opacity.\n\n            if (color.size()==_spectrum) { // Colored point.\n              draw_point(x0,y0,pcolor,opacity);\n#ifdef cimg_use_board\n              if (pboard) {\n                board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n                board.drawDot((float)x0,height()-(float)y0);\n              }\n#endif\n            } else { // Sprite.\n              const tpfloat z = Z + vertices(n0,2);\n              const float factor = focale<0?1:sprite_scale*(absfocale?absfocale/(z + absfocale):1);\n              const unsigned int\n                _sw = (unsigned int)(color._width*factor),\n                _sh = (unsigned int)(color._height*factor),\n                sw = _sw?_sw:1, sh = _sh?_sh:1;\n              const int nx0 = x0 - (int)sw/2, ny0 = y0 - (int)sh/2;\n              if (sw<=3*_width/2 && sh<=3*_height/2 &&\n                  (nx0 + (int)sw/2>=0 || nx0 - (int)sw/2<width() || ny0 + (int)sh/2>=0 || ny0 - (int)sh/2<height())) {\n                const CImg<tc>\n                  _sprite = (sw!=color._width || sh!=color._height)?\n                    color.get_resize(sw,sh,1,-100,render_type<=3?1:3):CImg<tc>(),\n                  &sprite = _sprite?_sprite:color;\n                draw_image(nx0,ny0,sprite,opacity);\n#ifdef cimg_use_board\n                if (pboard) {\n                  board.setPenColorRGBi(128,128,128);\n                  board.setFillColor(LibBoard::Color::Null);\n                  board.drawRectangle((float)nx0,height() - (float)ny0,sw,sh);\n                }\n#endif\n              }\n            }\n          } else { // Opacity mask.\n            const tpfloat z = Z + vertices(n0,2);\n            const float factor = focale<0?1:sprite_scale*(absfocale?absfocale/(z + absfocale):1);\n            const unsigned int\n              _sw = (unsigned int)(std::max(color._width,_opacity._width)*factor),\n              _sh = (unsigned int)(std::max(color._height,_opacity._height)*factor),\n              sw = _sw?_sw:1, sh = _sh?_sh:1;\n            const int nx0 = x0 - (int)sw/2, ny0 = y0 - (int)sh/2;\n            if (sw<=3*_width/2 && sh<=3*_height/2 &&\n                (nx0 + (int)sw/2>=0 || nx0 - (int)sw/2<width() || ny0 + (int)sh/2>=0 || ny0 - (int)sh/2<height())) {\n              const CImg<tc>\n                _sprite = (sw!=color._width || sh!=color._height)?\n                  color.get_resize(sw,sh,1,-100,render_type<=3?1:3):CImg<tc>(),\n                &sprite = _sprite?_sprite:color;\n              const CImg<_to>\n                _nopacity = (sw!=_opacity._width || sh!=_opacity._height)?\n                  _opacity.get_resize(sw,sh,1,-100,render_type<=3?1:3):CImg<_to>(),\n                &nopacity = _nopacity?_nopacity:_opacity;\n              draw_image(nx0,ny0,sprite,nopacity);\n#ifdef cimg_use_board\n              if (pboard) {\n                board.setPenColorRGBi(128,128,128);\n                board.setFillColor(LibBoard::Color::Null);\n                board.drawRectangle((float)nx0,height() - (float)ny0,sw,sh);\n              }\n#endif\n            }\n          }\n        } break;\n        case 2 : { // Colored line\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1];\n          const int\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale;\n          if (render_type) {\n            if (zbuffer) draw_line(zbuffer,x0,y0,z0,x1,y1,z1,pcolor,opacity);\n            else draw_line(x0,y0,x1,y1,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,x1,height() - (float)y1);\n            }\n#endif\n          } else {\n            draw_point(x0,y0,pcolor,opacity).draw_point(x1,y1,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n            }\n#endif\n          }\n        } break;\n        case 5 : { // Colored sphere\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1],\n            is_wireframe = (unsigned int)primitive[2];\n          const float\n            Xc = 0.5f*((float)vertices(n0,0) + (float)vertices(n1,0)),\n            Yc = 0.5f*((float)vertices(n0,1) + (float)vertices(n1,1)),\n            Zc = 0.5f*((float)vertices(n0,2) + (float)vertices(n1,2)),\n            zc = Z + Zc + _focale,\n            xc = X + Xc*(absfocale?absfocale/zc:1),\n            yc = Y + Yc*(absfocale?absfocale/zc:1),\n            radius = 0.5f*cimg::hypot(vertices(n1,0) - vertices(n0,0),\n                                      vertices(n1,1) - vertices(n0,1),\n                                      vertices(n1,2) - vertices(n0,2))*(absfocale?absfocale/zc:1);\n          switch (render_type) {\n          case 0 :\n            draw_point((int)xc,(int)yc,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawDot(xc,height() - yc);\n            }\n#endif\n            break;\n          case 1 :\n            draw_circle((int)xc,(int)yc,(int)radius,pcolor,opacity,~0U);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.setFillColor(LibBoard::Color::Null);\n              board.drawCircle(xc,height() - yc,radius);\n            }\n#endif\n            break;\n          default :\n            if (is_wireframe) draw_circle((int)xc,(int)yc,(int)radius,pcolor,opacity,~0U);\n            else draw_circle((int)xc,(int)yc,(int)radius,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              if (!is_wireframe) board.fillCircle(xc,height() - yc,radius);\n              else {\n                board.setFillColor(LibBoard::Color::Null);\n                board.drawCircle(xc,height() - yc,radius);\n              }\n            }\n#endif\n            break;\n          }\n        } break;\n        case 6 : { // Textured line\n          if (!__color) {\n            if (render_type==5) cimg::mutex(10,0);\n            throw CImgArgumentException(_cimg_instance\n                                        \"draw_object3d(): Undefined texture for line primitive [%u].\",\n                                        cimg_instance,n_primitive);\n          }\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1];\n          const int\n            tx0 = (int)primitive[2], ty0 = (int)primitive[3],\n            tx1 = (int)primitive[4], ty1 = (int)primitive[5],\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale;\n          if (render_type) {\n            if (zbuffer) draw_line(zbuffer,x0,y0,z0,x1,y1,z1,color,tx0,ty0,tx1,ty1,opacity);\n            else draw_line(x0,y0,x1,y1,color,tx0,ty0,tx1,ty1,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,(float)x1,height() - (float)y1);\n            }\n#endif\n          } else {\n            draw_point(x0,y0,color.get_vector_at(tx0<=0?0:tx0>=color.width()?color.width() - 1:tx0,\n                                                 ty0<=0?0:ty0>=color.height()?color.height() - 1:ty0)._data,opacity).\n              draw_point(x1,y1,color.get_vector_at(tx1<=0?0:tx1>=color.width()?color.width() - 1:tx1,\n                                                   ty1<=0?0:ty1>=color.height()?color.height() - 1:ty1)._data,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n            }\n#endif\n          }\n        } break;\n        case 3 : { // Colored triangle\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1],\n            n2 = (unsigned int)primitive[2];\n          const int\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1),\n            x2 = (int)projections(n2,0), y2 = (int)projections(n2,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale,\n            z2 = vertices(n2,2) + Z + _focale;\n          switch (render_type) {\n          case 0 :\n            draw_point(x0,y0,pcolor,opacity).draw_point(x1,y1,pcolor,opacity).draw_point(x2,y2,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n              board.drawDot((float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 1 :\n            if (zbuffer)\n              draw_line(zbuffer,x0,y0,z0,x1,y1,z1,pcolor,opacity).draw_line(zbuffer,x0,y0,z0,x2,y2,z2,pcolor,opacity).\n                draw_line(zbuffer,x1,y1,z1,x2,y2,z2,pcolor,opacity);\n            else\n              draw_line(x0,y0,x1,y1,pcolor,opacity).draw_line(x0,y0,x2,y2,pcolor,opacity).\n                draw_line(x1,y1,x2,y2,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,(float)x1,height() - (float)y1);\n              board.drawLine((float)x0,height() - (float)y0,(float)x2,height() - (float)y2);\n              board.drawLine((float)x1,height() - (float)y1,(float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 2 :\n            if (zbuffer) draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,opacity);\n            else draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 3 :\n            if (zbuffer) draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,opacity,lightprops(l));\n            else _draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,opacity,lightprops(l));\n#ifdef cimg_use_board\n            if (pboard) {\n              const float lp = std::min(lightprops(l),1);\n              board.setPenColorRGBi((unsigned char)(color[0]*lp),\n                                     (unsigned char)(color[1]*lp),\n                                     (unsigned char)(color[2]*lp),\n                                     (unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 4 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,\n                            lightprops(n0),lightprops(n1),lightprops(n2),opacity);\n            else draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,lightprops(n0),lightprops(n1),lightprops(n2),opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi((unsigned char)(color[0]),\n                                     (unsigned char)(color[1]),\n                                     (unsigned char)(color[2]),\n                                     (unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,lightprops(n0),\n                                         (float)x1,height() - (float)y1,lightprops(n1),\n                                         (float)x2,height() - (float)y2,lightprops(n2));\n            }\n#endif\n            break;\n          case 5 : {\n            const unsigned int\n              lx0 = (unsigned int)lightprops(n0,0), ly0 = (unsigned int)lightprops(n0,1),\n              lx1 = (unsigned int)lightprops(n1,0), ly1 = (unsigned int)lightprops(n1,1),\n              lx2 = (unsigned int)lightprops(n2,0), ly2 = (unsigned int)lightprops(n2,1);\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n            else draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              const float\n                l0 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n0,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n0,1)))),\n                l1 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n1,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n1,1)))),\n                l2 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n2,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n2,1))));\n              board.setPenColorRGBi((unsigned char)(color[0]),\n                                     (unsigned char)(color[1]),\n                                     (unsigned char)(color[2]),\n                                     (unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,l0,\n                                         (float)x1,height() - (float)y1,l1,\n                                         (float)x2,height() - (float)y2,l2);\n            }\n#endif\n          } break;\n          }\n        } break;\n        case 4 : { // Colored rectangle\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1],\n            n2 = (unsigned int)primitive[2],\n            n3 = (unsigned int)primitive[3];\n          const int\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1),\n            x2 = (int)projections(n2,0), y2 = (int)projections(n2,1),\n            x3 = (int)projections(n3,0), y3 = (int)projections(n3,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale,\n            z2 = vertices(n2,2) + Z + _focale,\n            z3 = vertices(n3,2) + Z + _focale;\n\n          switch (render_type) {\n          case 0 :\n            draw_point(x0,y0,pcolor,opacity).draw_point(x1,y1,pcolor,opacity).\n              draw_point(x2,y2,pcolor,opacity).draw_point(x3,y3,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n              board.drawDot((float)x2,height() - (float)y2);\n              board.drawDot((float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 1 :\n            if (zbuffer)\n              draw_line(zbuffer,x0,y0,z0,x1,y1,z1,pcolor,opacity).draw_line(zbuffer,x1,y1,z1,x2,y2,z2,pcolor,opacity).\n                draw_line(zbuffer,x2,y2,z2,x3,y3,z3,pcolor,opacity).draw_line(zbuffer,x3,y3,z3,x0,y0,z0,pcolor,opacity);\n            else\n              draw_line(x0,y0,x1,y1,pcolor,opacity).draw_line(x1,y1,x2,y2,pcolor,opacity).\n                draw_line(x2,y2,x3,y3,pcolor,opacity).draw_line(x3,y3,x0,y0,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,(float)x1,height() - (float)y1);\n              board.drawLine((float)x1,height() - (float)y1,(float)x2,height() - (float)y2);\n              board.drawLine((float)x2,height() - (float)y2,(float)x3,height() - (float)y3);\n              board.drawLine((float)x3,height() - (float)y3,(float)x0,height() - (float)y0);\n            }\n#endif\n            break;\n          case 2 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,pcolor,opacity);\n            else\n              draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,opacity).draw_triangle(x0,y0,x2,y2,x3,y3,pcolor,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(color[0],color[1],color[2],(unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x2,height() - (float)y2,\n                                 (float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 3 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,opacity,lightprops(l)).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,pcolor,opacity,lightprops(l));\n            else\n              _draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,opacity,lightprops(l)).\n                _draw_triangle(x0,y0,x2,y2,x3,y3,pcolor,opacity,lightprops(l));\n#ifdef cimg_use_board\n            if (pboard) {\n              const float lp = std::min(lightprops(l),1);\n              board.setPenColorRGBi((unsigned char)(color[0]*lp),\n                                     (unsigned char)(color[1]*lp),\n                                     (unsigned char)(color[2]*lp),(unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x2,height() - (float)y2,\n                                 (float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 4 : {\n            const float\n              lightprop0 = lightprops(n0), lightprop1 = lightprops(n1),\n              lightprop2 = lightprops(n2), lightprop3 = lightprops(n3);\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,lightprop0,lightprop1,lightprop2,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,pcolor,lightprop0,lightprop2,lightprop3,opacity);\n            else\n              draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,lightprop0,lightprop1,lightprop2,opacity).\n                draw_triangle(x0,y0,x2,y2,x3,y3,pcolor,lightprop0,lightprop2,lightprop3,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi((unsigned char)(color[0]),\n                                     (unsigned char)(color[1]),\n                                     (unsigned char)(color[2]),\n                                     (unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,lightprop0,\n                                         (float)x1,height() - (float)y1,lightprop1,\n                                         (float)x2,height() - (float)y2,lightprop2);\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,lightprop0,\n                                         (float)x2,height() - (float)y2,lightprop2,\n                                         (float)x3,height() - (float)y3,lightprop3);\n            }\n#endif\n          } break;\n          case 5 : {\n            const unsigned int\n              lx0 = (unsigned int)lightprops(n0,0), ly0 = (unsigned int)lightprops(n0,1),\n              lx1 = (unsigned int)lightprops(n1,0), ly1 = (unsigned int)lightprops(n1,1),\n              lx2 = (unsigned int)lightprops(n2,0), ly2 = (unsigned int)lightprops(n2,1),\n              lx3 = (unsigned int)lightprops(n3,0), ly3 = (unsigned int)lightprops(n3,1);\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,pcolor,light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,pcolor,light_texture,lx0,ly0,lx2,ly2,lx3,ly3,opacity);\n            else\n              draw_triangle(x0,y0,x1,y1,x2,y2,pcolor,light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity).\n                draw_triangle(x0,y0,x2,y2,x3,y3,pcolor,light_texture,lx0,ly0,lx2,ly2,lx3,ly3,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              const float\n                l0 = light_texture((int)(light_texture.width()/2*(1 + lx0)), (int)(light_texture.height()/2*(1 + ly0))),\n                l1 = light_texture((int)(light_texture.width()/2*(1 + lx1)), (int)(light_texture.height()/2*(1 + ly1))),\n                l2 = light_texture((int)(light_texture.width()/2*(1 + lx2)), (int)(light_texture.height()/2*(1 + ly2))),\n                l3 = light_texture((int)(light_texture.width()/2*(1 + lx3)), (int)(light_texture.height()/2*(1 + ly3)));\n              board.setPenColorRGBi((unsigned char)(color[0]),\n                                     (unsigned char)(color[1]),\n                                     (unsigned char)(color[2]),\n                                     (unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,l0,\n                                         (float)x1,height() - (float)y1,l1,\n                                         (float)x2,height() - (float)y2,l2);\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,l0,\n                                         (float)x2,height() - (float)y2,l2,\n                                         (float)x3,height() - (float)y3,l3);\n            }\n#endif\n          } break;\n          }\n        } break;\n        case 9 : { // Textured triangle\n          if (!__color) {\n            if (render_type==5) cimg::mutex(10,0);\n            throw CImgArgumentException(_cimg_instance\n                                        \"draw_object3d(): Undefined texture for triangle primitive [%u].\",\n                                        cimg_instance,n_primitive);\n          }\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1],\n            n2 = (unsigned int)primitive[2];\n          const int\n            tx0 = (int)primitive[3], ty0 = (int)primitive[4],\n            tx1 = (int)primitive[5], ty1 = (int)primitive[6],\n            tx2 = (int)primitive[7], ty2 = (int)primitive[8],\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1),\n            x2 = (int)projections(n2,0), y2 = (int)projections(n2,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale,\n            z2 = vertices(n2,2) + Z + _focale;\n          switch (render_type) {\n          case 0 :\n            draw_point(x0,y0,color.get_vector_at(tx0<=0?0:tx0>=color.width()?color.width() - 1:tx0,\n                                                 ty0<=0?0:ty0>=color.height()?color.height() - 1:ty0)._data,opacity).\n              draw_point(x1,y1,color.get_vector_at(tx1<=0?0:tx1>=color.width()?color.width() - 1:tx1,\n                                                   ty1<=0?0:ty1>=color.height()?color.height() - 1:ty1)._data,opacity).\n              draw_point(x2,y2,color.get_vector_at(tx2<=0?0:tx2>=color.width()?color.width() - 1:tx2,\n                                                   ty2<=0?0:ty2>=color.height()?color.height() - 1:ty2)._data,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n              board.drawDot((float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 1 :\n            if (zbuffer)\n              draw_line(zbuffer,x0,y0,z0,x1,y1,z1,color,tx0,ty0,tx1,ty1,opacity).\n                draw_line(zbuffer,x0,y0,z0,x2,y2,z2,color,tx0,ty0,tx2,ty2,opacity).\n                draw_line(zbuffer,x1,y1,z1,x2,y2,z2,color,tx1,ty1,tx2,ty2,opacity);\n            else\n              draw_line(x0,y0,z0,x1,y1,z1,color,tx0,ty0,tx1,ty1,opacity).\n                draw_line(x0,y0,z0,x2,y2,z2,color,tx0,ty0,tx2,ty2,opacity).\n                draw_line(x1,y1,z1,x2,y2,z2,color,tx1,ty1,tx2,ty2,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,(float)x1,height() - (float)y1);\n              board.drawLine((float)x0,height() - (float)y0,(float)x2,height() - (float)y2);\n              board.drawLine((float)x1,height() - (float)y1,(float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 2 :\n            if (zbuffer) draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity);\n            else draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 3 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity,lightprops(l));\n            else draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity,lightprops(l));\n#ifdef cimg_use_board\n            if (pboard) {\n              const float lp = std::min(lightprops(l),1);\n              board.setPenColorRGBi((unsigned char)(128*lp),\n                                    (unsigned char)(128*lp),\n                                    (unsigned char)(128*lp),\n                                    (unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n            }\n#endif\n            break;\n          case 4 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            lightprops(n0),lightprops(n1),lightprops(n2),opacity);\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            lightprops(n0),lightprops(n1),lightprops(n2),opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,lightprops(n0),\n                                        (float)x1,height() - (float)y1,lightprops(n1),\n                                        (float)x2,height() - (float)y2,lightprops(n2));\n            }\n#endif\n            break;\n          case 5 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,light_texture,\n                            (unsigned int)lightprops(n0,0),(unsigned int)lightprops(n0,1),\n                            (unsigned int)lightprops(n1,0),(unsigned int)lightprops(n1,1),\n                            (unsigned int)lightprops(n2,0),(unsigned int)lightprops(n2,1),\n                            opacity);\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,light_texture,\n                            (unsigned int)lightprops(n0,0),(unsigned int)lightprops(n0,1),\n                            (unsigned int)lightprops(n1,0),(unsigned int)lightprops(n1,1),\n                            (unsigned int)lightprops(n2,0),(unsigned int)lightprops(n2,1),\n                            opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              const float\n                l0 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n0,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n0,1)))),\n                l1 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n1,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n1,1)))),\n                l2 = light_texture((int)(light_texture.width()/2*(1 + lightprops(n2,0))),\n                                   (int)(light_texture.height()/2*(1 + lightprops(n2,1))));\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,l0,\n                                        (float)x1,height() - (float)y1,l1,\n                                        (float)x2,height() - (float)y2,l2);\n            }\n#endif\n            break;\n          }\n        } break;\n        case 12 : { // Textured quadrangle\n          if (!__color) {\n            if (render_type==5) cimg::mutex(10,0);\n            throw CImgArgumentException(_cimg_instance\n                                        \"draw_object3d(): Undefined texture for quadrangle primitive [%u].\",\n                                        cimg_instance,n_primitive);\n          }\n          const unsigned int\n            n0 = (unsigned int)primitive[0],\n            n1 = (unsigned int)primitive[1],\n            n2 = (unsigned int)primitive[2],\n            n3 = (unsigned int)primitive[3];\n          const int\n            tx0 = (int)primitive[4], ty0 = (int)primitive[5],\n            tx1 = (int)primitive[6], ty1 = (int)primitive[7],\n            tx2 = (int)primitive[8], ty2 = (int)primitive[9],\n            tx3 = (int)primitive[10], ty3 = (int)primitive[11],\n            x0 = (int)projections(n0,0), y0 = (int)projections(n0,1),\n            x1 = (int)projections(n1,0), y1 = (int)projections(n1,1),\n            x2 = (int)projections(n2,0), y2 = (int)projections(n2,1),\n            x3 = (int)projections(n3,0), y3 = (int)projections(n3,1);\n          const float\n            z0 = vertices(n0,2) + Z + _focale,\n            z1 = vertices(n1,2) + Z + _focale,\n            z2 = vertices(n2,2) + Z + _focale,\n            z3 = vertices(n3,2) + Z + _focale;\n\n          switch (render_type) {\n          case 0 :\n            draw_point(x0,y0,color.get_vector_at(tx0<=0?0:tx0>=color.width()?color.width() - 1:tx0,\n                                                 ty0<=0?0:ty0>=color.height()?color.height() - 1:ty0)._data,opacity).\n              draw_point(x1,y1,color.get_vector_at(tx1<=0?0:tx1>=color.width()?color.width() - 1:tx1,\n                                                   ty1<=0?0:ty1>=color.height()?color.height() - 1:ty1)._data,opacity).\n              draw_point(x2,y2,color.get_vector_at(tx2<=0?0:tx2>=color.width()?color.width() - 1:tx2,\n                                                   ty2<=0?0:ty2>=color.height()?color.height() - 1:ty2)._data,opacity).\n              draw_point(x3,y3,color.get_vector_at(tx3<=0?0:tx3>=color.width()?color.width() - 1:tx3,\n                                                   ty3<=0?0:ty3>=color.height()?color.height() - 1:ty3)._data,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawDot((float)x0,height() - (float)y0);\n              board.drawDot((float)x1,height() - (float)y1);\n              board.drawDot((float)x2,height() - (float)y2);\n              board.drawDot((float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 1 :\n            if (zbuffer)\n              draw_line(zbuffer,x0,y0,z0,x1,y1,z1,color,tx0,ty0,tx1,ty1,opacity).\n                draw_line(zbuffer,x1,y1,z1,x2,y2,z2,color,tx1,ty1,tx2,ty2,opacity).\n                draw_line(zbuffer,x2,y2,z2,x3,y3,z3,color,tx2,ty2,tx3,ty3,opacity).\n                draw_line(zbuffer,x3,y3,z3,x0,y0,z0,color,tx3,ty3,tx0,ty0,opacity);\n            else\n              draw_line(x0,y0,z0,x1,y1,z1,color,tx0,ty0,tx1,ty1,opacity).\n                draw_line(x1,y1,z1,x2,y2,z2,color,tx1,ty1,tx2,ty2,opacity).\n                draw_line(x2,y2,z2,x3,y3,z3,color,tx2,ty2,tx3,ty3,opacity).\n                draw_line(x3,y3,z3,x0,y0,z0,color,tx3,ty3,tx0,ty0,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.drawLine((float)x0,height() - (float)y0,(float)x1,height() - (float)y1);\n              board.drawLine((float)x1,height() - (float)y1,(float)x2,height() - (float)y2);\n              board.drawLine((float)x2,height() - (float)y2,(float)x3,height() - (float)y3);\n              board.drawLine((float)x3,height() - (float)y3,(float)x0,height() - (float)y0);\n            }\n#endif\n            break;\n          case 2 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,opacity);\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity).\n                draw_triangle(x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x2,height() - (float)y2,\n                                 (float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 3 :\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity,lightprops(l)).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,opacity,lightprops(l));\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,opacity,lightprops(l)).\n                draw_triangle(x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,opacity,lightprops(l));\n#ifdef cimg_use_board\n            if (pboard) {\n              const float lp = std::min(lightprops(l),1);\n              board.setPenColorRGBi((unsigned char)(128*lp),\n                                     (unsigned char)(128*lp),\n                                     (unsigned char)(128*lp),\n                                     (unsigned char)(opacity*255));\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x1,height() - (float)y1,\n                                 (float)x2,height() - (float)y2);\n              board.fillTriangle((float)x0,height() - (float)y0,\n                                 (float)x2,height() - (float)y2,\n                                 (float)x3,height() - (float)y3);\n            }\n#endif\n            break;\n          case 4 : {\n            const float\n              lightprop0 = lightprops(n0), lightprop1 = lightprops(n1),\n              lightprop2 = lightprops(n2), lightprop3 = lightprops(n3);\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            lightprop0,lightprop1,lightprop2,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,\n                              lightprop0,lightprop2,lightprop3,opacity);\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            lightprop0,lightprop1,lightprop2,opacity).\n                draw_triangle(x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,\n                              lightprop0,lightprop2,lightprop3,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,lightprop0,\n                                         (float)x1,height() - (float)y1,lightprop1,\n                                         (float)x2,height() - (float)y2,lightprop2);\n              board.fillGouraudTriangle((float)x0,height()  -(float)y0,lightprop0,\n                                         (float)x2,height() - (float)y2,lightprop2,\n                                         (float)x3,height() - (float)y3,lightprop3);\n            }\n#endif\n          } break;\n          case 5 : {\n            const unsigned int\n              lx0 = (unsigned int)lightprops(n0,0), ly0 = (unsigned int)lightprops(n0,1),\n              lx1 = (unsigned int)lightprops(n1,0), ly1 = (unsigned int)lightprops(n1,1),\n              lx2 = (unsigned int)lightprops(n2,0), ly2 = (unsigned int)lightprops(n2,1),\n              lx3 = (unsigned int)lightprops(n3,0), ly3 = (unsigned int)lightprops(n3,1);\n            if (zbuffer)\n              draw_triangle(zbuffer,x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity).\n                draw_triangle(zbuffer,x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,\n                              light_texture,lx0,ly0,lx2,ly2,lx3,ly3,opacity);\n            else\n              draw_triangle(x0,y0,z0,x1,y1,z1,x2,y2,z2,color,tx0,ty0,tx1,ty1,tx2,ty2,\n                            light_texture,lx0,ly0,lx1,ly1,lx2,ly2,opacity).\n                draw_triangle(x0,y0,z0,x2,y2,z2,x3,y3,z3,color,tx0,ty0,tx2,ty2,tx3,ty3,\n                              light_texture,lx0,ly0,lx2,ly2,lx3,ly3,opacity);\n#ifdef cimg_use_board\n            if (pboard) {\n              const float\n                l0 = light_texture((int)(light_texture.width()/2*(1 + lx0)), (int)(light_texture.height()/2*(1 + ly0))),\n                l1 = light_texture((int)(light_texture.width()/2*(1 + lx1)), (int)(light_texture.height()/2*(1 + ly1))),\n                l2 = light_texture((int)(light_texture.width()/2*(1 + lx2)), (int)(light_texture.height()/2*(1 + ly2))),\n                l3 = light_texture((int)(light_texture.width()/2*(1 + lx3)), (int)(light_texture.height()/2*(1 + ly3)));\n              board.setPenColorRGBi(128,128,128,(unsigned char)(opacity*255));\n              board.fillGouraudTriangle((float)x0,height() - (float)y0,l0,\n                                         (float)x1,height() - (float)y1,l1,\n                                         (float)x2,height() - (float)y2,l2);\n              board.fillGouraudTriangle((float)x0,height()  -(float)y0,l0,\n                                         (float)x2,height() - (float)y2,l2,\n                                         (float)x3,height() - (float)y3,l3);\n            }\n#endif\n          } break;\n          }\n        } break;\n        }\n      }\n\n      if (render_type==5) cimg::mutex(10,0);\n      return *this;\n    }\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Data Input\n    //@{\n    //---------------------------\n\n    //! Launch simple interface to select a shape from an image.\n    /**\n       \\param disp Display window to use.\n       \\param feature_type Type of feature to select. Can be <tt>{ 0=point | 1=line | 2=rectangle | 3=ellipse }</tt>.\n       \\param XYZ Pointer to 3 values X,Y,Z which tells about the projection point coordinates, for volumetric images.\n    **/\n    CImg<T>& select(CImgDisplay &disp,\n                    const unsigned int feature_type=2, unsigned int *const XYZ=0,\n                    const bool exit_on_anykey=false) {\n      return get_select(disp,feature_type,XYZ,exit_on_anykey).move_to(*this);\n    }\n\n    //! Simple interface to select a shape from an image \\overloading.\n    CImg<T>& select(const char *const title,\n                    const unsigned int feature_type=2, unsigned int *const XYZ=0,\n                    const bool exit_on_anykey=false) {\n      return get_select(title,feature_type,XYZ,exit_on_anykey).move_to(*this);\n    }\n\n    //! Simple interface to select a shape from an image \\newinstance.\n    CImg<intT> get_select(CImgDisplay &disp,\n                          const unsigned int feature_type=2, unsigned int *const XYZ=0,\n                          const bool exit_on_anykey=false) const {\n      return _select(disp,0,feature_type,XYZ,0,0,0,exit_on_anykey,true,false);\n    }\n\n    //! Simple interface to select a shape from an image \\newinstance.\n    CImg<intT> get_select(const char *const title,\n                          const unsigned int feature_type=2, unsigned int *const XYZ=0,\n                          const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      return _select(disp,title,feature_type,XYZ,0,0,0,exit_on_anykey,true,false);\n    }\n\n    CImg<intT> _select(CImgDisplay &disp, const char *const title,\n                       const unsigned int feature_type, unsigned int *const XYZ,\n                       const int origX, const int origY, const int origZ,\n                       const bool exit_on_anykey,\n                       const bool reset_view3d,\n                       const bool force_display_z_coord) const {\n      if (is_empty()) return CImg<intT>(1,feature_type==0?3:6,1,1,-1);\n      if (!disp) {\n        disp.assign(cimg_fitscreen(_width,_height,_depth),title?title:0,1);\n        if (!title) disp.set_title(\"CImg<%s> (%ux%ux%ux%u)\",pixel_type(),_width,_height,_depth,_spectrum);\n      } else if (title) disp.set_title(\"%s\",title);\n\n      CImg<T> thumb;\n      if (width()>disp.screen_width() || height()>disp.screen_height())\n        get_resize(cimg_fitscreen(width(),height(),1),1,-100).move_to(thumb);\n\n      const unsigned int old_normalization = disp.normalization();\n      bool old_is_resized = disp.is_resized();\n      disp._normalization = 0;\n      disp.show().set_key(0).set_wheel().show_mouse();\n\n      static const unsigned char foreground_color[] = { 255,255,255 }, background_color[] = { 0,0,0 };\n\n      int area = 0, starting_area = 0, clicked_area = 0, phase = 0,\n        X0 = (int)((XYZ?XYZ[0]:(_width - 1)/2)%_width),\n        Y0 = (int)((XYZ?XYZ[1]:(_height - 1)/2)%_height),\n        Z0 = (int)((XYZ?XYZ[2]:(_depth - 1)/2)%_depth),\n        X1 =-1, Y1 = -1, Z1 = -1,\n        X3d = -1, Y3d = -1,\n        oX3d = X3d, oY3d = -1,\n        omx = -1, omy = -1;\n      float X = -1, Y = -1, Z = -1;\n      unsigned int old_button = 0, key = 0;\n\n      bool shape_selected = false, text_down = false, visible_cursor = true;\n      static CImg<floatT> pose3d;\n      static bool is_view3d = false, is_axes = true;\n      if (reset_view3d) { pose3d.assign(); is_view3d = false; }\n      CImg<floatT> points3d, opacities3d, sel_opacities3d;\n      CImgList<uintT> primitives3d, sel_primitives3d;\n      CImgList<ucharT> colors3d, sel_colors3d;\n      CImg<ucharT> visu, visu0, view3d;\n      CImg<charT> text(1024); *text = 0;\n\n      while (!key && !disp.is_closed() && !shape_selected) {\n\n        // Handle mouse motion and selection\n        int\n          mx = disp.mouse_x(),\n          my = disp.mouse_y();\n\n        const float\n          mX = mx<0?-1.0f:(float)mx*(width() + (depth()>1?depth():0))/disp.width(),\n          mY = my<0?-1.0f:(float)my*(height() + (depth()>1?depth():0))/disp.height();\n\n        area = 0;\n        if (mX>=0 && mY>=0 && mX<width() && mY<height())  { area = 1; X = mX; Y = mY; Z = (float)(phase?Z1:Z0); }\n        if (mX>=0 && mX<width() && mY>=height()) { area = 2; X = mX; Z = mY - _height; Y = (float)(phase?Y1:Y0); }\n        if (mY>=0 && mX>=width() && mY<height()) { area = 3; Y = mY; Z = mX - _width; X = (float)(phase?X1:X0); }\n        if (mX>=width() && mY>=height()) area = 4;\n        if (disp.button()) { if (!clicked_area) clicked_area = area; } else clicked_area = 0;\n\n        CImg<charT> filename(32);\n\n        switch (key = disp.key()) {\n#if cimg_OS!=2\n        case cimg::keyCTRLRIGHT :\n#endif\n        case 0 : case cimg::keyCTRLLEFT : key = 0; break;\n        case cimg::keyPAGEUP :\n          if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { disp.set_wheel(1); key = 0; } break;\n        case cimg::keyPAGEDOWN :\n          if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { disp.set_wheel(-1); key = 0; } break;\n        case cimg::keyA : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            is_axes = !is_axes; disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyD : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,false),\n                     CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,true),false).\n              _is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyC : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(cimg_fitscreen(2*disp.width()/3,2*disp.height()/3,1),false)._is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyR : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).resize(cimg_fitscreen(_width,_height,_depth),false)._is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyF : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.resize(disp.screen_width(),disp.screen_height(),false).toggle_fullscreen()._is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyV : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            is_view3d = !is_view3d; disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyS : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.bmp\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            if (visu0) {\n              (+visu0).draw_text(0,0,\" Saving snapshot... \",foreground_color,background_color,0.7f,13).display(disp);\n              visu0.save(filename);\n              (+visu0).draw_text(0,0,\" Snapshot '%s' saved. \",foreground_color,background_color,0.7f,13,filename._data).\n                display(disp);\n            }\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyO : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n#ifdef cimg_use_zlib\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimgz\",snap_number++);\n#else\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimg\",snap_number++);\n#endif\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu0).draw_text(0,0,\" Saving instance... \",foreground_color,background_color,0.7f,13).display(disp);\n            save(filename);\n            (+visu0).draw_text(0,0,\" Instance '%s' saved. \",foreground_color,background_color,0.7f,13,filename._data).\n              display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n        }\n\n        switch (area) {\n\n        case 0 : // When mouse is out of image range.\n          mx = my = -1; X = Y = Z = -1;\n          break;\n\n        case 1 : case 2 : case 3 : // When mouse is over the XY,XZ or YZ projections.\n          if (disp.button()&1 && phase<2 && clicked_area==area) { // When selection has been started (1st step).\n            if (_depth>1 && (X1!=(int)X || Y1!=(int)Y || Z1!=(int)Z)) visu0.assign();\n            X1 = (int)X; Y1 = (int)Y; Z1 = (int)Z;\n          }\n          if (!(disp.button()&1) && phase>=2 && clicked_area!=area) { // When selection is at 2nd step (for volumes).\n            switch (starting_area) {\n            case 1 : if (Z1!=(int)Z) visu0.assign(); Z1 = (int)Z; break;\n            case 2 : if (Y1!=(int)Y) visu0.assign(); Y1 = (int)Y; break;\n            case 3 : if (X1!=(int)X) visu0.assign(); X1 = (int)X; break;\n            }\n          }\n          if (disp.button()&2 && clicked_area==area) { // When moving through the image/volume.\n            if (phase) {\n              if (_depth>1 && (X1!=(int)X || Y1!=(int)Y || Z1!=(int)Z)) visu0.assign();\n              X1 = (int)X; Y1 = (int)Y; Z1 = (int)Z;\n            } else {\n              if (_depth>1 && (X0!=(int)X || Y0!=(int)Y || Z0!=(int)Z)) visu0.assign();\n              X0 = (int)X; Y0 = (int)Y; Z0 = (int)Z;\n            }\n          }\n          if (disp.button()&4) {\n            X = (float)X0; Y = (float)Y0; Z = (float)Z0; phase = area = clicked_area = starting_area = 0;\n            visu0.assign();\n          }\n          if (disp.wheel()) { // When moving through the slices of the volume (with mouse wheel).\n            if (_depth>1 && !disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT() &&\n                !disp.is_keySHIFTLEFT() && !disp.is_keySHIFTRIGHT() &&\n                !disp.is_keyALT() && !disp.is_keyALTGR()) {\n              switch (area) {\n              case 1 :\n                if (phase) Z = (float)(Z1+=disp.wheel()); else Z = (float)(Z0+=disp.wheel());\n                visu0.assign(); break;\n              case 2 :\n                if (phase) Y = (float)(Y1+=disp.wheel()); else Y = (float)(Y0+=disp.wheel());\n                visu0.assign(); break;\n              case 3 :\n                if (phase) X = (float)(X1+=disp.wheel()); else X = (float)(X0+=disp.wheel());\n                visu0.assign(); break;\n              }\n              disp.set_wheel();\n            } else key = ~0U;\n          }\n          if ((disp.button()&1)!=old_button) { // When left button has just been pressed or released.\n            switch (phase) {\n            case 0 :\n              if (area==clicked_area) {\n                X0 = X1 = (int)X; Y0 = Y1 = (int)Y; Z0 = Z1 = (int)Z; starting_area = area; ++phase;\n              } break;\n            case 1 :\n              if (area==starting_area) {\n                X1 = (int)X; Y1 = (int)Y; Z1 = (int)Z; ++phase;\n              } else if (!(disp.button()&1)) { X = (float)X0; Y = (float)Y0; Z = (float)Z0; phase = 0; visu0.assign(); }\n              break;\n            case 2 : ++phase; break;\n            }\n            old_button = disp.button()&1;\n          }\n          break;\n\n        case 4 : // When mouse is over the 3d view.\n          if (is_view3d && points3d) {\n            X3d = mx - width()*disp.width()/(width() + (depth()>1?depth():0));\n            Y3d = my - height()*disp.height()/(height() + (depth()>1?depth():0));\n            if (oX3d<0) { oX3d = X3d; oY3d = Y3d; }\n            // Left + right buttons: reset.\n            if ((disp.button()&3)==3) { pose3d.assign(); view3d.assign(); oX3d = oY3d = X3d = Y3d = -1; }\n            else if (disp.button()&1 && pose3d && (oX3d!=X3d || oY3d!=Y3d)) { // Left button: rotate.\n              const float\n                R = 0.45f*std::min(view3d._width,view3d._height),\n                R2 = R*R,\n                u0 = (float)(oX3d - view3d.width()/2),\n                v0 = (float)(oY3d - view3d.height()/2),\n                u1 = (float)(X3d - view3d.width()/2),\n                v1 = (float)(Y3d - view3d.height()/2),\n                n0 = cimg::hypot(u0,v0),\n                n1 = cimg::hypot(u1,v1),\n                nu0 = n0>R?(u0*R/n0):u0,\n                nv0 = n0>R?(v0*R/n0):v0,\n                nw0 = (float)std::sqrt(std::max(0.0f,R2 - nu0*nu0 - nv0*nv0)),\n                nu1 = n1>R?(u1*R/n1):u1,\n                nv1 = n1>R?(v1*R/n1):v1,\n                nw1 = (float)std::sqrt(std::max(0.0f,R2 - nu1*nu1 - nv1*nv1)),\n                u = nv0*nw1 - nw0*nv1,\n                v = nw0*nu1 - nu0*nw1,\n                w = nv0*nu1 - nu0*nv1,\n                n = cimg::hypot(u,v,w),\n                alpha = (float)std::asin(n/R2)*180/cimg::PI;\n              pose3d.draw_image(CImg<floatT>::rotation_matrix(u,v,w,-alpha)*pose3d.get_crop(0,0,2,2));\n              view3d.assign();\n            } else if (disp.button()&2 && pose3d && oY3d!=Y3d) {  // Right button: zoom.\n              pose3d(3,2)-=(oY3d - Y3d)*1.5f; view3d.assign();\n            }\n            if (disp.wheel()) { // Wheel: zoom\n              pose3d(3,2)-=disp.wheel()*15; view3d.assign(); disp.set_wheel();\n            }\n            if (disp.button()&4 && pose3d && (oX3d!=X3d || oY3d!=Y3d)) { // Middle button: shift.\n              pose3d(3,0)-=oX3d - X3d; pose3d(3,1)-=oY3d - Y3d; view3d.assign();\n            }\n            oX3d = X3d; oY3d = Y3d;\n          }\n          mx = my = -1; X = Y = Z = -1;\n          break;\n        }\n\n        if (phase) {\n          if (!feature_type) shape_selected = phase?true:false;\n          else {\n            if (_depth>1) shape_selected = (phase==3)?true:false;\n            else shape_selected = (phase==2)?true:false;\n          }\n        }\n\n        if (X0<0) X0 = 0;\n        if (X0>=width()) X0 = width() - 1;\n        if (Y0<0) Y0 = 0;\n        if (Y0>=height()) Y0 = height() - 1;\n        if (Z0<0) Z0 = 0;\n        if (Z0>=depth()) Z0 = depth() - 1;\n        if (X1<1) X1 = 0;\n        if (X1>=width()) X1 = width() - 1;\n        if (Y1<0) Y1 = 0;\n        if (Y1>=height()) Y1 = height() - 1;\n        if (Z1<0) Z1 = 0;\n        if (Z1>=depth()) Z1 = depth() - 1;\n\n        // Draw visualization image on the display\n        if (mx!=omx || my!=omy || !visu0 || (_depth>1 && !view3d)) {\n\n          if (!visu0) { // Create image of projected planes.\n            if (thumb) thumb.__get_select(disp,old_normalization,phase?X1:X0,phase?Y1:Y0,phase?Z1:Z0).move_to(visu0);\n            else __get_select(disp,old_normalization,phase?X1:X0,phase?Y1:Y0,phase?Z1:Z0).move_to(visu0);\n            visu0.resize(disp);\n            view3d.assign();\n            points3d.assign();\n          }\n\n          if (is_view3d && _depth>1 && !view3d) { // Create 3d view for volumetric images.\n            const unsigned int\n              _x3d = (unsigned int)cimg::round((float)_width*visu0._width/(_width + _depth),1,1),\n              _y3d = (unsigned int)cimg::round((float)_height*visu0._height/(_height + _depth),1,1),\n              x3d = _x3d>=visu0._width?visu0._width - 1:_x3d,\n              y3d = _y3d>=visu0._height?visu0._height - 1:_y3d;\n            CImg<ucharT>(1,2,1,1,64,128).resize(visu0._width - x3d,visu0._height - y3d,1,visu0._spectrum,3).\n              move_to(view3d);\n            if (!points3d) {\n              get_projections3d(primitives3d,colors3d,phase?X1:X0,phase?Y1:Y0,phase?Z1:Z0,true).move_to(points3d);\n              points3d.append(CImg<floatT>(8,3,1,1,\n                                           0,_width - 1,_width - 1,0,0,_width - 1,_width - 1,0,\n                                           0,0,_height - 1,_height - 1,0,0,_height - 1,_height - 1,\n                                           0,0,0,0,_depth - 1,_depth - 1,_depth - 1,_depth - 1),'x');\n              CImg<uintT>::vector(12,13).move_to(primitives3d); CImg<uintT>::vector(13,14).move_to(primitives3d);\n              CImg<uintT>::vector(14,15).move_to(primitives3d); CImg<uintT>::vector(15,12).move_to(primitives3d);\n              CImg<uintT>::vector(16,17).move_to(primitives3d); CImg<uintT>::vector(17,18).move_to(primitives3d);\n              CImg<uintT>::vector(18,19).move_to(primitives3d); CImg<uintT>::vector(19,16).move_to(primitives3d);\n              CImg<uintT>::vector(12,16).move_to(primitives3d); CImg<uintT>::vector(13,17).move_to(primitives3d);\n              CImg<uintT>::vector(14,18).move_to(primitives3d); CImg<uintT>::vector(15,19).move_to(primitives3d);\n              colors3d.insert(12,CImg<ucharT>::vector(255,255,255));\n              opacities3d.assign(primitives3d.width(),1,1,1,0.5f);\n              if (!phase) {\n                opacities3d[0] = opacities3d[1] = opacities3d[2] = 0.8f;\n                sel_primitives3d.assign();\n                sel_colors3d.assign();\n                sel_opacities3d.assign();\n              } else {\n                if (feature_type==2) {\n                  points3d.append(CImg<floatT>(8,3,1,1,\n                                               X0,X1,X1,X0,X0,X1,X1,X0,\n                                               Y0,Y0,Y1,Y1,Y0,Y0,Y1,Y1,\n                                               Z0,Z0,Z0,Z0,Z1,Z1,Z1,Z1),'x');\n                  sel_primitives3d.assign();\n                  CImg<uintT>::vector(20,21).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(21,22).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(22,23).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(23,20).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(24,25).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(25,26).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(26,27).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(27,24).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(20,24).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(21,25).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(22,26).move_to(sel_primitives3d);\n                  CImg<uintT>::vector(23,27).move_to(sel_primitives3d);\n                } else {\n                  points3d.append(CImg<floatT>(2,3,1,1,\n                                               X0,X1,\n                                               Y0,Y1,\n                                               Z0,Z1),'x');\n                  sel_primitives3d.assign(CImg<uintT>::vector(20,21));\n                }\n                sel_colors3d.assign(sel_primitives3d._width,CImg<ucharT>::vector(255,255,255));\n                sel_opacities3d.assign(sel_primitives3d._width,1,1,1,0.8f);\n              }\n              points3d.shift_object3d(-0.5f*(_width - 1),-0.5f*(_height - 1),-0.5f*(_depth - 1)).resize_object3d();\n              points3d*=0.75f*std::min(view3d._width,view3d._height);\n            }\n\n            if (!pose3d) CImg<floatT>(4,3,1,1, 1,0,0,0, 0,1,0,0, 0,0,1,0).move_to(pose3d);\n            CImg<floatT> zbuffer3d(view3d._width,view3d._height,1,1,0);\n            const CImg<floatT> rotated_points3d = pose3d.get_crop(0,0,2,2)*points3d;\n            if (sel_primitives3d)\n              view3d.draw_object3d(pose3d(3,0) + 0.5f*view3d._width,\n                                   pose3d(3,1) + 0.5f*view3d._height,\n                                   pose3d(3,2),\n                                   rotated_points3d,sel_primitives3d,sel_colors3d,sel_opacities3d,\n                                   2,true,500,0,0,0,0,0,zbuffer3d);\n            view3d.draw_object3d(pose3d(3,0) + 0.5f*view3d._width,\n                                 pose3d(3,1) + 0.5f*view3d._height,\n                                 pose3d(3,2),\n                                 rotated_points3d,primitives3d,colors3d,opacities3d,\n                                 2,true,500,0,0,0,0,0,zbuffer3d);\n            visu0.draw_image(x3d,y3d,view3d);\n          }\n          visu = visu0;\n\n          if (X<0 || Y<0 || Z<0) { if (!visible_cursor) { disp.show_mouse(); visible_cursor = true; }}\n          else {\n            if (is_axes) { if (visible_cursor) { disp.hide_mouse(); visible_cursor = false; }}\n            else { if (!visible_cursor) { disp.show_mouse(); visible_cursor = true; }}\n            const int d = (depth()>1)?depth():0;\n            int\n              _X = (int)X, _Y = (int)Y, _Z = (int)Z,\n              w = disp.width(), W = width() + d,\n              h = disp.height(), H = height() + d,\n              _xp = (int)(_X*(float)w/W), xp = _xp + ((int)(_xp*(float)W/w)!=_X),\n              _yp = (int)(_Y*(float)h/H), yp = _yp + ((int)(_yp*(float)H/h)!=_Y),\n              _xn = (int)((_X + 1.0f)*w/W - 1), xn = _xn + ((int)((_xn + 1.0f)*W/w)!=_X + 1),\n              _yn = (int)((_Y + 1.0f)*h/H - 1), yn = _yn + ((int)((_yn + 1.0f)*H/h)!=_Y + 1),\n              _zxp = (int)((_Z + width())*(float)w/W), zxp = _zxp + ((int)(_zxp*(float)W/w)!=_Z + width()),\n              _zyp = (int)((_Z + height())*(float)h/H), zyp = _zyp + ((int)(_zyp*(float)H/h)!=_Z + height()),\n              _zxn = (int)((_Z + width() + 1.0f)*w/W - 1),\n                       zxn = _zxn + ((int)((_zxn + 1.0f)*W/w)!=_Z + width() + 1),\n              _zyn = (int)((_Z + height() + 1.0f)*h/H - 1),\n                       zyn = _zyn + ((int)((_zyn + 1.0f)*H/h)!=_Z + height() + 1),\n              _xM = (int)(width()*(float)w/W - 1), xM = _xM + ((int)((_xM + 1.0f)*W/w)!=width()),\n              _yM = (int)(height()*(float)h/H - 1), yM = _yM + ((int)((_yM + 1.0f)*H/h)!=height()),\n              xc = (xp + xn)/2,\n              yc = (yp + yn)/2,\n              zxc = (zxp + zxn)/2,\n              zyc = (zyp + zyn)/2,\n              xf = (int)(X*w/W),\n              yf = (int)(Y*h/H),\n              zxf = (int)((Z + width())*w/W),\n              zyf = (int)((Z + height())*h/H);\n\n            if (is_axes) { // Draw axes.\n              visu.draw_line(0,yf,visu.width() - 1,yf,foreground_color,0.7f,0xFF00FF00).\n                draw_line(0,yf,visu.width() - 1,yf,background_color,0.7f,0x00FF00FF).\n                draw_line(xf,0,xf,visu.height() - 1,foreground_color,0.7f,0xFF00FF00).\n                draw_line(xf,0,xf,visu.height() - 1,background_color,0.7f,0x00FF00FF);\n              if (_depth>1)\n                visu.draw_line(zxf,0,zxf,yM,foreground_color,0.7f,0xFF00FF00).\n                  draw_line(zxf,0,zxf,yM,background_color,0.7f,0x00FF00FF).\n                  draw_line(0,zyf,xM,zyf,foreground_color,0.7f,0xFF00FF00).\n                  draw_line(0,zyf,xM,zyf,background_color,0.7f,0x00FF00FF);\n            }\n\n            // Draw box cursor.\n            if (xn - xp>=4 && yn - yp>=4) visu.draw_rectangle(xp,yp,xn,yn,foreground_color,0.2f).\n                                        draw_rectangle(xp,yp,xn,yn,foreground_color,1,0xAAAAAAAA).\n                                        draw_rectangle(xp,yp,xn,yn,background_color,1,0x55555555);\n            if (_depth>1) {\n              if (yn - yp>=4 && zxn - zxp>=4) visu.draw_rectangle(zxp,yp,zxn,yn,background_color,0.2f).\n                                            draw_rectangle(zxp,yp,zxn,yn,foreground_color,1,0xAAAAAAAA).\n                                            draw_rectangle(zxp,yp,zxn,yn,background_color,1,0x55555555);\n              if (xn - xp>=4 && zyn - zyp>=4) visu.draw_rectangle(xp,zyp,xn,zyn,background_color,0.2f).\n                                            draw_rectangle(xp,zyp,xn,zyn,foreground_color,1,0xAAAAAAAA).\n                                            draw_rectangle(xp,zyp,xn,zyn,background_color,1,0x55555555);\n            }\n\n            // Draw selection.\n            if (phase) {\n              const int\n                _xp0 = (int)(X0*(float)w/W), xp0 = _xp0 + ((int)(_xp0*(float)W/w)!=X0),\n                _yp0 = (int)(Y0*(float)h/H), yp0 = _yp0 + ((int)(_yp0*(float)H/h)!=Y0),\n                _xn0 = (int)((X0 + 1.0f)*w/W - 1), xn0 = _xn0 + ((int)((_xn0 + 1.0f)*W/w)!=X0 + 1),\n                _yn0 = (int)((Y0 + 1.0f)*h/H - 1), yn0 = _yn0 + ((int)((_yn0 + 1.0f)*H/h)!=Y0 + 1),\n                _zxp0 = (int)((Z0 + width())*(float)w/W), zxp0 = _zxp0 + ((int)(_zxp0*(float)W/w)!=Z0 + width()),\n                _zyp0 = (int)((Z0 + height())*(float)h/H), zyp0 = _zyp0 + ((int)(_zyp0*(float)H/h)!=Z0 + height()),\n                _zxn0 = (int)((Z0 + width() + 1.0f)*w/W - 1),\n                zxn0 = _zxn0 + ((int)((_zxn0 + 1.0f)*W/w)!=Z0 + width() + 1),\n                _zyn0 = (int)((Z0 + height() + 1.0f)*h/H - 1),\n                zyn0 = _zyn0 + ((int)((_zyn0 + 1.0f)*H/h)!=Z0 + height() + 1),\n                xc0 = (xp0 + xn0)/2,\n                yc0 = (yp0 + yn0)/2,\n                zxc0 = (zxp0 + zxn0)/2,\n                zyc0 = (zyp0 + zyn0)/2;\n\n              switch (feature_type) {\n              case 1 : {\n                visu.draw_arrow(xc0,yc0,xc,yc,background_color,0.9f,30,5,0x55555555).\n                  draw_arrow(xc0,yc0,xc,yc,foreground_color,0.9f,30,5,0xAAAAAAAA);\n                if (d) {\n                  visu.draw_arrow(zxc0,yc0,zxc,yc,background_color,0.9f,30,5,0x55555555).\n                    draw_arrow(zxc0,yc0,zxc,yc,foreground_color,0.9f,30,5,0xAAAAAAAA).\n                    draw_arrow(xc0,zyc0,xc,zyc,background_color,0.9f,30,5,0x55555555).\n                    draw_arrow(xc0,zyc0,xc,zyc,foreground_color,0.9f,30,5,0xAAAAAAAA);\n                }\n              } break;\n              case 2 : {\n                visu.draw_rectangle(X0<X1?xp0:xp,Y0<Y1?yp0:yp,X0<X1?xn:xn0,Y0<Y1?yn:yn0,background_color,0.2f).\n                  draw_rectangle(X0<X1?xp0:xp,Y0<Y1?yp0:yp,X0<X1?xn:xn0,Y0<Y1?yn:yn0,foreground_color,0.9f,0xAAAAAAAA).\n                  draw_rectangle(X0<X1?xp0:xp,Y0<Y1?yp0:yp,X0<X1?xn:xn0,Y0<Y1?yn:yn0,background_color,0.9f,0x55555555);\n                if (d) {\n                  visu.draw_rectangle(Z0<Z1?zxp0:zxp,Y0<Y1?yp0:yp,Z0<Z1?zxn:zxn0,Y0<Y1?yn:yn0,background_color,0.2f).\n                    draw_rectangle(Z0<Z1?zxp0:zxp,Y0<Y1?yp0:yp,Z0<Z1?zxn:zxn0,Y0<Y1?yn:yn0,\n                                   foreground_color,0.9f,0xAAAAAAAA).\n                    draw_rectangle(Z0<Z1?zxp0:zxp,Y0<Y1?yp0:yp,Z0<Z1?zxn:zxn0,Y0<Y1?yn:yn0,\n                                   background_color,0.9f,0x55555555).\n                    draw_rectangle(X0<X1?xp0:xp,Z0<Z1?zyp0:zyp,X0<X1?xn:xn0,Z0<Z1?zyn:zyn0,\n                                   background_color,0.2f).\n                    draw_rectangle(X0<X1?xp0:xp,Z0<Z1?zyp0:zyp,X0<X1?xn:xn0,Z0<Z1?zyn:zyn0,\n                                   foreground_color,0.9f,0xAAAAAAAA).\n                    draw_rectangle(X0<X1?xp0:xp,Z0<Z1?zyp0:zyp,X0<X1?xn:xn0,Z0<Z1?zyn:zyn0,\n                                   background_color,0.9f,0x55555555);\n                }\n              } break;\n              case 3 : {\n                visu.draw_ellipse(xc0,yc0,\n                                  (float)cimg::abs(xc - xc0),\n                                  (float)cimg::abs(yc - yc0),0,background_color,0.2f).\n                  draw_ellipse(xc0,yc0,\n                               (float)cimg::abs(xc - xc0),\n                               (float)cimg::abs(yc - yc0),0,foreground_color,0.9f,~0U).\n                  draw_point(xc0,yc0,foreground_color,0.9f);\n                if (d) {\n                  visu.draw_ellipse(zxc0,yc0,(float)cimg::abs(zxc - zxc0),(float)cimg::abs(yc - yc0),0,\n                                    background_color,0.2f).\n                    draw_ellipse(zxc0,yc0,(float)cimg::abs(zxc - zxc0),(float)cimg::abs(yc - yc0),0,\n                                 foreground_color,0.9f,~0U).\n                    draw_point(zxc0,yc0,foreground_color,0.9f).\n                    draw_ellipse(xc0,zyc0,(float)cimg::abs(xc - xc0),(float)cimg::abs(zyc - zyc0),0,\n                                 background_color,0.2f).\n                    draw_ellipse(xc0,zyc0,(float)cimg::abs(xc - xc0),(float)cimg::abs(zyc - zyc0),0,\n                                 foreground_color,0.9f,~0U).\n                    draw_point(xc0,zyc0,foreground_color,0.9f);\n                }\n              } break;\n              }\n            }\n\n            // Draw text info.\n            if (my>=0 && my<13) text_down = true; else if (my>=visu.height() - 13) text_down = false;\n            if (!feature_type || !phase) {\n              if (X>=0 && Y>=0 && Z>=0 && X<width() && Y<height() && Z<depth()) {\n                if (_depth>1 || force_display_z_coord)\n                  cimg_snprintf(text,text._width,\" Point (%d,%d,%d) = [ \",origX + (int)X,origY + (int)Y,origZ + (int)Z);\n                else cimg_snprintf(text,text._width,\" Point (%d,%d) = [ \",origX + (int)X,origY + (int)Y);\n                char *ctext = text._data + std::strlen(text), *const ltext = text._data + 512;\n                for (unsigned int c = 0; c<_spectrum && ctext<ltext; ++c) {\n                  cimg_snprintf(ctext,text._width/2,cimg::type<T>::format_s(),\n                                cimg::type<T>::format((*this)((int)X,(int)Y,(int)Z,c)));\n                  ctext = text._data + std::strlen(text);\n                  *(ctext++) = ' '; *ctext = 0;\n                }\n                std::strcpy(text._data + std::strlen(text),\"] \");\n              }\n            } else switch (feature_type) {\n              case 1 : {\n                const double dX = (double)(X0 - X1), dY = (double)(Y0 - Y1), dZ = (double)(Z0 - Z1),\n                  norm = cimg::hypot(dX,dY,dZ);\n                if (_depth>1 || force_display_z_coord)\n                  cimg_snprintf(text,text._width,\" Vect (%d,%d,%d)-(%d,%d,%d), Norm = %g \",\n                                origX + X0,origY + Y0,origZ + Z0,origX + X1,origY + Y1,origZ + Z1,norm);\n                else cimg_snprintf(text,text._width,\" Vect (%d,%d)-(%d,%d), Norm = %g \",\n                                   origX + X0,origY + Y0,origX + X1,origY + Y1,norm);\n              } break;\n              case 2 :\n                if (_depth>1 || force_display_z_coord)\n                  cimg_snprintf(text,text._width,\" Box (%d,%d,%d)-(%d,%d,%d), Size = (%d,%d,%d) \",\n                                origX + (X0<X1?X0:X1),origY + (Y0<Y1?Y0:Y1),origZ + (Z0<Z1?Z0:Z1),\n                                origX + (X0<X1?X1:X0),origY + (Y0<Y1?Y1:Y0),origZ + (Z0<Z1?Z1:Z0),\n                                1 + cimg::abs(X0 - X1),1 + cimg::abs(Y0 - Y1),1 + cimg::abs(Z0 - Z1));\n                else cimg_snprintf(text,text._width,\" Box (%d,%d)-(%d,%d), Size = (%d,%d) \",\n                                   origX + (X0<X1?X0:X1),origY + (Y0<Y1?Y0:Y1),\n                                   origX + (X0<X1?X1:X0),origY + (Y0<Y1?Y1:Y0),\n                                   1 + cimg::abs(X0 - X1),1 + cimg::abs(Y0 - Y1));\n                break;\n              default :\n                if (_depth>1 || force_display_z_coord)\n                  cimg_snprintf(text,text._width,\" Ellipse (%d,%d,%d)-(%d,%d,%d), Radii = (%d,%d,%d) \",\n                                origX + X0,origY + Y0,origZ + Z0,origX + X1,origY + Y1,origZ + Z1,\n                                1 + cimg::abs(X0 - X1),1 + cimg::abs(Y0 - Y1),1 + cimg::abs(Z0 - Z1));\n                else cimg_snprintf(text,text._width,\" Ellipse (%d,%d)-(%d,%d), Radii = (%d,%d) \",\n                                   origX + X0,origY + Y0,origX + X1,origY + Y1,\n                                   1 + cimg::abs(X0 - X1),1 + cimg::abs(Y0 - Y1));\n              }\n            if (phase || (mx>=0 && my>=0))\n              visu.draw_text(0,text_down?visu.height() - 13:0,text,foreground_color,background_color,0.7f,13);\n          }\n\n          disp.display(visu).wait();\n        } else if (!shape_selected) disp.wait();\n        if (disp.is_resized()) { disp.resize(false)._is_resized = false; old_is_resized = true; visu0.assign(); }\n        omx = mx; omy = my;\n        if (!exit_on_anykey && key && key!=cimg::keyESC &&\n            (key!=cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          key = 0;\n        }\n      }\n\n      // Return result.\n      CImg<intT> res(1,feature_type==0?3:6,1,1,-1);\n      if (XYZ) { XYZ[0] = (unsigned int)X0; XYZ[1] = (unsigned int)Y0; XYZ[2] = (unsigned int)Z0; }\n      if (shape_selected) {\n        if (feature_type==2) {\n          if (X0>X1) cimg::swap(X0,X1);\n          if (Y0>Y1) cimg::swap(Y0,Y1);\n          if (Z0>Z1) cimg::swap(Z0,Z1);\n        }\n        if (X1<0 || Y1<0 || Z1<0) X0 = Y0 = Z0 = X1 = Y1 = Z1 = -1;\n        switch (feature_type) {\n        case 1 : case 2 : res[0] = X0; res[1] = Y0; res[2] = Z0; res[3] = X1; res[4] = Y1; res[5] = Z1; break;\n        case 3 :\n          res[3] = cimg::abs(X1 - X0); res[4] = cimg::abs(Y1 - Y0); res[5] = cimg::abs(Z1 - Z0); // keep no break here!\n        default : res[0] = X0; res[1] = Y0; res[2] = Z0;\n        }\n      }\n      if (!exit_on_anykey || !(disp.button()&4)) disp.set_button();\n      if (!visible_cursor) disp.show_mouse();\n      disp._normalization = old_normalization;\n      disp._is_resized = old_is_resized;\n      if (key!=~0U) disp.set_key(key);\n      return res;\n    }\n\n    // Return a visualizable uchar8 image for display routines.\n    CImg<ucharT> __get_select(const CImgDisplay& disp, const int normalization,\n                              const int x, const int y, const int z) const {\n      if (is_empty()) return CImg<ucharT>(1,1,1,1,0);\n      const CImg<T> crop = get_shared_channels(0,std::min(2,spectrum() - 1));\n      CImg<Tuchar> img2d;\n      if (_depth>1) {\n        const int mdisp = std::min(disp.screen_width(),disp.screen_height());\n        if (depth()>mdisp) {\n          crop.get_resize(-100,-100,mdisp,-100,0).move_to(img2d);\n          img2d.projections2d(x,y,z*img2d._depth/_depth);\n        } else crop.get_projections2d(x,y,z).move_to(img2d);\n      } else CImg<Tuchar>(crop,false).move_to(img2d);\n\n      // Check for inf and NaN values.\n      if (cimg::type<T>::is_float() && normalization) {\n        bool is_inf = false, is_nan = false;\n        cimg_for(img2d,ptr,Tuchar)\n          if (cimg::type<T>::is_inf(*ptr)) { is_inf = true; break; }\n          else if (cimg::type<T>::is_nan(*ptr)) { is_nan = true; break; }\n        if (is_inf || is_nan) {\n          Tint m0 = (Tint)cimg::type<T>::max(), M0 = (Tint)cimg::type<T>::min();\n          if (!normalization) { m0 = 0; M0 = 255; }\n          else if (normalization==2) { m0 = (Tint)disp._min; M0 = (Tint)disp._max; }\n          else\n            cimg_for(img2d,ptr,Tuchar)\n              if (!cimg::type<T>::is_inf(*ptr) && !cimg::type<T>::is_nan(*ptr)) {\n                if (*ptr<(Tuchar)m0) m0 = *ptr;\n                if (*ptr>(Tuchar)M0) M0 = *ptr;\n              }\n          const T\n            val_minf = (T)(normalization==1 || normalization==3?m0 - (M0 - m0)*20 - 1:m0),\n            val_pinf = (T)(normalization==1 || normalization==3?M0 + (M0 - m0)*20 + 1:M0);\n          if (is_nan)\n            cimg_for(img2d,ptr,Tuchar)\n              if (cimg::type<T>::is_nan(*ptr)) *ptr = val_minf; // Replace NaN values.\n          if (is_inf)\n            cimg_for(img2d,ptr,Tuchar)\n              if (cimg::type<T>::is_inf(*ptr)) *ptr = (float)*ptr<0?val_minf:val_pinf; // Replace +-inf values.\n        }\n      }\n\n      switch (normalization) {\n      case 1 : img2d.normalize((T)0,(T)255); break;\n      case 2 : {\n        const float m = disp._min, M = disp._max;\n        (img2d-=m)*=255.0f/(M - m>0?M - m:1);\n      } break;\n      case 3 :\n        if (cimg::type<T>::is_float()) img2d.normalize((T)0,(T)255);\n        else {\n          const float m = (float)cimg::type<T>::min(), M = (float)cimg::type<T>::max();\n          (img2d-=m)*=255.0f/(M - m>0?M - m:1);\n        } break;\n      }\n\n      if (img2d.spectrum()==2) img2d.channels(0,2);\n      return img2d;\n    }\n\n    //! Select sub-graph in a graph.\n    CImg<intT> get_select_graph(CImgDisplay &disp,\n                                const unsigned int plot_type=1, const unsigned int vertex_type=1,\n                                const char *const labelx=0, const double xmin=0, const double xmax=0,\n                                const char *const labely=0, const double ymin=0, const double ymax=0,\n                                const bool exit_on_anykey=false) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"select_graph(): Empty instance.\",\n                                    cimg_instance);\n      if (!disp) disp.assign(cimg_fitscreen(CImgDisplay::screen_width()/2,CImgDisplay::screen_height()/2,1),0,0).\n                   set_title(\"CImg<%s>\",pixel_type());\n      const ulongT siz = (ulongT)_width*_height*_depth;\n      const unsigned int old_normalization = disp.normalization();\n      disp.show().set_button().set_wheel()._normalization = 0;\n\n      double nymin = ymin, nymax = ymax, nxmin = xmin, nxmax = xmax;\n      if (nymin==nymax) { nymin = (Tfloat)min_max(nymax); const double dy = nymax - nymin; nymin-=dy/20; nymax+=dy/20; }\n      if (nymin==nymax) { --nymin; ++nymax; }\n      if (nxmin==nxmax && nxmin==0) { nxmin = 0; nxmax = siz - 1.0; }\n\n      static const unsigned char black[] = { 0, 0, 0 }, white[] = { 255, 255, 255 }, gray[] = { 220, 220, 220 };\n      static const unsigned char gray2[] = { 110, 110, 110 }, ngray[] = { 35, 35, 35 };\n      static unsigned int odimv = 0;\n      static CImg<ucharT> colormap;\n      if (odimv!=_spectrum) {\n        odimv = _spectrum;\n        colormap = CImg<ucharT>(3,_spectrum,1,1,120).noise(70,1);\n        if (_spectrum==1) { colormap[0] = colormap[1] = 120; colormap[2] = 200; }\n        else {\n          colormap(0,0) = 220; colormap(1,0) = 10; colormap(2,0) = 10;\n          if (_spectrum>1) { colormap(0,1) = 10; colormap(1,1) = 220; colormap(2,1) = 10; }\n          if (_spectrum>2) { colormap(0,2) = 10; colormap(1,2) = 10; colormap(2,2) = 220; }\n        }\n      }\n\n      CImg<ucharT> visu0, visu, graph, text, axes;\n      int x0 = -1, x1 = -1, y0 = -1, y1 = -1, omouse_x = -2, omouse_y = -2;\n      const unsigned int one = plot_type==3?0U:1U;\n      unsigned int okey = 0, obutton = 0;\n      CImg<charT> message(1024);\n      CImg_3x3(I,unsigned char);\n\n      for (bool selected = false; !selected && !disp.is_closed() && !okey && !disp.wheel(); ) {\n        const int mouse_x = disp.mouse_x(), mouse_y = disp.mouse_y();\n        const unsigned int key = disp.key(), button = disp.button();\n\n        // Generate graph representation.\n        if (!visu0) {\n          visu0.assign(disp.width(),disp.height(),1,3,220);\n          const int gdimx = disp.width() - 32, gdimy = disp.height() - 32;\n          if (gdimx>0 && gdimy>0) {\n            graph.assign(gdimx,gdimy,1,3,255);\n            if (siz<32) {\n              if (siz>1) graph.draw_grid(gdimx/(float)(siz - one),gdimy/(float)(siz - one),0,0,\n                                         false,true,black,0.2f,0x33333333,0x33333333);\n            } else graph.draw_grid(-10,-10,0,0,false,true,black,0.2f,0x33333333,0x33333333);\n            cimg_forC(*this,c)\n              graph.draw_graph(get_shared_channel(c),&colormap(0,c),(plot_type!=3 || _spectrum==1)?1:0.6f,\n                               plot_type,vertex_type,nymax,nymin);\n\n            axes.assign(gdimx,gdimy,1,1,0);\n            const float\n              dx = (float)cimg::abs(nxmax - nxmin), dy = (float)cimg::abs(nymax - nymin),\n              px = (float)std::pow(10.0,(int)std::log10(dx?dx:1) - 2.0),\n              py = (float)std::pow(10.0,(int)std::log10(dy?dy:1) - 2.0);\n            const CImg<Tdouble>\n              seqx = dx<=0?CImg<Tdouble>::vector(nxmin):\n                CImg<Tdouble>::sequence(1 + gdimx/60,nxmin,one?nxmax:nxmin + (nxmax - nxmin)*(siz + 1)/siz).round(px),\n              seqy = CImg<Tdouble>::sequence(1 + gdimy/60,nymax,nymin).round(py);\n\n            const bool allow_zero = (nxmin*nxmax>0) || (nymin*nymax>0);\n            axes.draw_axes(seqx,seqy,white,1,~0U,~0U,13,allow_zero);\n            if (nymin>0) axes.draw_axis(seqx,gdimy - 1,gray,1,~0U,13,allow_zero);\n            if (nymax<0) axes.draw_axis(seqx,0,gray,1,~0U,13,allow_zero);\n            if (nxmin>0) axes.draw_axis(0,seqy,gray,1,~0U,13,allow_zero);\n            if (nxmax<0) axes.draw_axis(gdimx - 1,seqy,gray,1,~0U,13,allow_zero);\n\n            cimg_for3x3(axes,x,y,0,0,I,unsigned char)\n              if (Icc) {\n                if (Icc==255) cimg_forC(graph,c) graph(x,y,c) = 0;\n                else cimg_forC(graph,c) graph(x,y,c) = (unsigned char)(2*graph(x,y,c)/3);\n              }\n              else if (Ipc || Inc || Icp || Icn || Ipp || Inn || Ipn || Inp)\n                cimg_forC(graph,c) graph(x,y,c) = (unsigned char)((graph(x,y,c) + 511)/3);\n\n            visu0.draw_image(16,16,graph);\n            visu0.draw_line(15,15,16 + gdimx,15,gray2).draw_line(16 + gdimx,15,16 + gdimx,16 + gdimy,gray2).\n              draw_line(16 + gdimx,16 + gdimy,15,16 + gdimy,white).draw_line(15,16 + gdimy,15,15,white);\n          } else graph.assign();\n          text.assign().draw_text(0,0,labelx?labelx:\"X-axis\",white,ngray,1,13).resize(-100,-100,1,3);\n          visu0.draw_image((visu0.width() - text.width())/2,visu0.height() - 14,~text);\n          text.assign().draw_text(0,0,labely?labely:\"Y-axis\",white,ngray,1,13).rotate(-90).resize(-100,-100,1,3);\n          visu0.draw_image(1,(visu0.height() - text.height())/2,~text);\n          visu.assign();\n        }\n\n        // Generate and display current view.\n        if (!visu) {\n          visu.assign(visu0);\n          if (graph && x0>=0 && x1>=0) {\n            const int\n              nx0 = x0<=x1?x0:x1,\n              nx1 = x0<=x1?x1:x0,\n              ny0 = y0<=y1?y0:y1,\n              ny1 = y0<=y1?y1:y0,\n              sx0 = (int)(16 + nx0*(visu.width() - 32)/std::max((ulongT)1,siz - one)),\n              sx1 = (int)(15 + (nx1 + 1)*(visu.width() - 32)/std::max((ulongT)1,siz - one)),\n              sy0 = 16 + ny0,\n              sy1 = 16 + ny1;\n            if (y0>=0 && y1>=0)\n              visu.draw_rectangle(sx0,sy0,sx1,sy1,gray,0.5f).draw_rectangle(sx0,sy0,sx1,sy1,black,0.5f,0xCCCCCCCCU);\n            else visu.draw_rectangle(sx0,0,sx1,visu.height() - 17,gray,0.5f).\n                   draw_line(sx0,16,sx0,visu.height() - 17,black,0.5f,0xCCCCCCCCU).\n                   draw_line(sx1,16,sx1,visu.height() - 17,black,0.5f,0xCCCCCCCCU);\n          }\n          if (mouse_x>=16 && mouse_y>=16 && mouse_x<visu.width() - 16 && mouse_y<visu.height() - 16) {\n            if (graph) visu.draw_line(mouse_x,16,mouse_x,visu.height() - 17,black,0.5f,0x55555555U);\n            const unsigned int\n              x = (unsigned int)cimg::round((mouse_x - 16.0f)*(siz - one)/(disp.width() - 32),1,one?0:-1);\n            const double cx = nxmin + x*(nxmax - nxmin)/std::max((ulongT)1,siz - 1);\n            if (_spectrum>=7)\n              cimg_snprintf(message,message._width,\"Value[%u:%g] = ( %g %g %g ... %g %g %g )\",x,cx,\n                            (double)(*this)(x,0,0,0),(double)(*this)(x,0,0,1),(double)(*this)(x,0,0,2),\n                            (double)(*this)(x,0,0,_spectrum - 4),(double)(*this)(x,0,0,_spectrum - 3),\n                            (double)(*this)(x,0,0,_spectrum - 1));\n            else {\n              cimg_snprintf(message,message._width,\"Value[%u:%g] = ( \",x,cx);\n              cimg_forC(*this,c) cimg_sprintf(message._data + std::strlen(message),\"%g \",(double)(*this)(x,0,0,c));\n              cimg_sprintf(message._data + std::strlen(message),\")\");\n            }\n            if (x0>=0 && x1>=0) {\n              const unsigned int\n                nx0 = (unsigned int)(x0<=x1?x0:x1),\n                nx1 = (unsigned int)(x0<=x1?x1:x0),\n                ny0 = (unsigned int)(y0<=y1?y0:y1),\n                ny1 = (unsigned int)(y0<=y1?y1:y0);\n              const double\n                cx0 = nxmin + nx0*(nxmax - nxmin)/std::max((ulongT)1,siz - 1),\n                cx1 = nxmin + (nx1 + one)*(nxmax - nxmin)/std::max((ulongT)1,siz - 1),\n                cy0 = nymax - ny0*(nymax - nymin)/(visu._height - 32),\n                cy1 = nymax - ny1*(nymax - nymin)/(visu._height - 32);\n              if (y0>=0 && y1>=0)\n                cimg_sprintf(message._data + std::strlen(message),\" - Range ( %u:%g, %g ) - ( %u:%g, %g )\",\n                             x0,cx0,cy0,x1 + one,cx1,cy1);\n              else\n                cimg_sprintf(message._data + std::strlen(message),\" - Range [ %u:%g - %u:%g ]\",\n                             x0,cx0,x1 + one,cx1);\n            }\n            text.assign().draw_text(0,0,message,white,ngray,1,13).resize(-100,-100,1,3);\n            visu.draw_image((visu.width() - text.width())/2,1,~text);\n          }\n          visu.display(disp);\n        }\n\n        // Test keys.\n        CImg<charT> filename(32);\n        switch (okey = key) {\n#if cimg_OS!=2\n        case cimg::keyCTRLRIGHT : case cimg::keySHIFTRIGHT :\n#endif\n        case cimg::keyCTRLLEFT : case cimg::keySHIFTLEFT : okey = 0; break;\n        case cimg::keyD : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n          disp.set_fullscreen(false).\n            resize(CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,false),\n                   CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,true),false).\n            _is_resized = true;\n          disp.set_key(key,false); okey = 0;\n        } break;\n        case cimg::keyC : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n          disp.set_fullscreen(false).\n            resize(cimg_fitscreen(2*disp.width()/3,2*disp.height()/3,1),false)._is_resized = true;\n          disp.set_key(key,false); okey = 0;\n        } break;\n        case cimg::keyR : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(cimg_fitscreen(CImgDisplay::screen_width()/2,\n                                    CImgDisplay::screen_height()/2,1),false)._is_resized = true;\n            disp.set_key(key,false); okey = 0;\n          } break;\n        case cimg::keyF : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.resize(disp.screen_width(),disp.screen_height(),false).toggle_fullscreen()._is_resized = true;\n            disp.set_key(key,false); okey = 0;\n          } break;\n        case cimg::keyS : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            if (visu || visu0) {\n              CImg<ucharT> &screen = visu?visu:visu0;\n              std::FILE *file;\n              do {\n                cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.bmp\",snap_number++);\n                if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n              } while (file);\n              (+screen).draw_text(0,0,\" Saving snapshot... \",black,gray,1,13).display(disp);\n              screen.save(filename);\n              (+screen).draw_text(0,0,\" Snapshot '%s' saved. \",black,gray,1,13,filename._data).display(disp);\n            }\n            disp.set_key(key,false); okey = 0;\n          } break;\n        case cimg::keyO : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            if (visu || visu0) {\n              CImg<ucharT> &screen = visu?visu:visu0;\n              std::FILE *file;\n              do {\n#ifdef cimg_use_zlib\n                cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimgz\",snap_number++);\n#else\n                cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimg\",snap_number++);\n#endif\n                if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n              } while (file);\n              (+screen).draw_text(0,0,\" Saving instance... \",black,gray,1,13).display(disp);\n              save(filename);\n              (+screen).draw_text(0,0,\" Instance '%s' saved. \",black,gray,1,13,filename._data).display(disp);\n            }\n            disp.set_key(key,false); okey = 0;\n          } break;\n        }\n\n        // Handle mouse motion and mouse buttons\n        if (obutton!=button || omouse_x!=mouse_x || omouse_y!=mouse_y) {\n          visu.assign();\n          if (disp.mouse_x()>=0 && disp.mouse_y()>=0) {\n            const int\n              mx = (mouse_x - 16)*(int)(siz - one)/(disp.width() - 32),\n              cx = cimg::cut(mx,0,(int)(siz - 1 - one)),\n              my = mouse_y - 16,\n              cy = cimg::cut(my,0,disp.height() - 32);\n            if (button&1) {\n              if (!obutton) { x0 = cx; y0 = -1; } else { x1 = cx; y1 = -1; }\n            }\n            else if (button&2) {\n              if (!obutton) { x0 = cx; y0 = cy; } else { x1 = cx; y1 = cy; }\n            }\n            else if (obutton) { x1 = x1>=0?cx:-1; y1 = y1>=0?cy:-1; selected = true; }\n          } else if (!button && obutton) selected = true;\n          obutton = button; omouse_x = mouse_x; omouse_y = mouse_y;\n        }\n        if (disp.is_resized()) { disp.resize(false); visu0.assign(); }\n        if (visu && visu0) disp.wait();\n        if (!exit_on_anykey && okey && okey!=cimg::keyESC &&\n            (okey!=cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          disp.set_key(key,false);\n          okey = 0;\n        }\n      }\n\n      disp._normalization = old_normalization;\n      if (x1>=0 && x1<x0) cimg::swap(x0,x1);\n      if (y1<y0) cimg::swap(y0,y1);\n      disp.set_key(okey);\n      return CImg<intT>(4,1,1,1,x0,y0,x1>=0?x1 + (int)one:-1,y1);\n    }\n\n    //! Load image from a file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\note The extension of \\c filename defines the file format. If no filename\n       extension is provided, CImg<T>::get_load() will try to load the file as a .cimg or .cimgz file.\n    **/\n    CImg<T>& load(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      if (!cimg::strncasecmp(filename,\"http://\",7) || !cimg::strncasecmp(filename,\"https://\",8)) {\n        CImg<charT> filename_local(256);\n        load(cimg::load_network(filename,filename_local));\n        std::remove(filename_local);\n        return *this;\n      }\n\n      const char *const ext = cimg::split_filename(filename);\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      bool is_loaded = true;\n      try {\n#ifdef cimg_load_plugin\n        cimg_load_plugin(filename);\n#endif\n#ifdef cimg_load_plugin1\n        cimg_load_plugin1(filename);\n#endif\n#ifdef cimg_load_plugin2\n        cimg_load_plugin2(filename);\n#endif\n#ifdef cimg_load_plugin3\n        cimg_load_plugin3(filename);\n#endif\n#ifdef cimg_load_plugin4\n        cimg_load_plugin4(filename);\n#endif\n#ifdef cimg_load_plugin5\n        cimg_load_plugin5(filename);\n#endif\n#ifdef cimg_load_plugin6\n        cimg_load_plugin6(filename);\n#endif\n#ifdef cimg_load_plugin7\n        cimg_load_plugin7(filename);\n#endif\n#ifdef cimg_load_plugin8\n        cimg_load_plugin8(filename);\n#endif\n        // Ascii formats\n        if (!cimg::strcasecmp(ext,\"asc\")) load_ascii(filename);\n        else if (!cimg::strcasecmp(ext,\"dlm\") ||\n                 !cimg::strcasecmp(ext,\"txt\")) load_dlm(filename);\n\n        // 2d binary formats\n        else if (!cimg::strcasecmp(ext,\"bmp\")) load_bmp(filename);\n        else if (!cimg::strcasecmp(ext,\"jpg\") ||\n                 !cimg::strcasecmp(ext,\"jpeg\") ||\n                 !cimg::strcasecmp(ext,\"jpe\") ||\n                 !cimg::strcasecmp(ext,\"jfif\") ||\n                 !cimg::strcasecmp(ext,\"jif\")) load_jpeg(filename);\n        else if (!cimg::strcasecmp(ext,\"png\")) load_png(filename);\n        else if (!cimg::strcasecmp(ext,\"ppm\") ||\n                 !cimg::strcasecmp(ext,\"pgm\") ||\n                 !cimg::strcasecmp(ext,\"pnm\") ||\n                 !cimg::strcasecmp(ext,\"pbm\") ||\n                 !cimg::strcasecmp(ext,\"pnk\")) load_pnm(filename);\n        else if (!cimg::strcasecmp(ext,\"pfm\")) load_pfm(filename);\n        else if (!cimg::strcasecmp(ext,\"tif\") ||\n                 !cimg::strcasecmp(ext,\"tiff\")) load_tiff(filename);\n        else if (!cimg::strcasecmp(ext,\"exr\")) load_exr(filename);\n        else if (!cimg::strcasecmp(ext,\"cr2\") ||\n                 !cimg::strcasecmp(ext,\"crw\") ||\n                 !cimg::strcasecmp(ext,\"dcr\") ||\n                 !cimg::strcasecmp(ext,\"mrw\") ||\n                 !cimg::strcasecmp(ext,\"nef\") ||\n                 !cimg::strcasecmp(ext,\"orf\") ||\n                 !cimg::strcasecmp(ext,\"pix\") ||\n                 !cimg::strcasecmp(ext,\"ptx\") ||\n                 !cimg::strcasecmp(ext,\"raf\") ||\n                 !cimg::strcasecmp(ext,\"srf\")) load_dcraw_external(filename);\n        else if (!cimg::strcasecmp(ext,\"gif\")) load_gif_external(filename);\n\n        // 3d binary formats\n        else if (!cimg::strcasecmp(ext,\"dcm\") ||\n                 !cimg::strcasecmp(ext,\"dicom\")) load_medcon_external(filename);\n        else if (!cimg::strcasecmp(ext,\"hdr\") ||\n                 !cimg::strcasecmp(ext,\"nii\")) load_analyze(filename);\n        else if (!cimg::strcasecmp(ext,\"par\") ||\n                 !cimg::strcasecmp(ext,\"rec\")) load_parrec(filename);\n        else if (!cimg::strcasecmp(ext,\"mnc\")) load_minc2(filename);\n        else if (!cimg::strcasecmp(ext,\"inr\")) load_inr(filename);\n        else if (!cimg::strcasecmp(ext,\"pan\")) load_pandore(filename);\n        else if (!cimg::strcasecmp(ext,\"cimg\") ||\n                 !cimg::strcasecmp(ext,\"cimgz\") ||\n                 !*ext)  return load_cimg(filename);\n\n        // Archive files\n        else if (!cimg::strcasecmp(ext,\"gz\")) load_gzip_external(filename);\n\n        // Image sequences\n        else if (!cimg::strcasecmp(ext,\"avi\") ||\n                 !cimg::strcasecmp(ext,\"mov\") ||\n                 !cimg::strcasecmp(ext,\"asf\") ||\n                 !cimg::strcasecmp(ext,\"divx\") ||\n                 !cimg::strcasecmp(ext,\"flv\") ||\n                 !cimg::strcasecmp(ext,\"mpg\") ||\n                 !cimg::strcasecmp(ext,\"m1v\") ||\n                 !cimg::strcasecmp(ext,\"m2v\") ||\n                 !cimg::strcasecmp(ext,\"m4v\") ||\n                 !cimg::strcasecmp(ext,\"mjp\") ||\n                 !cimg::strcasecmp(ext,\"mp4\") ||\n                 !cimg::strcasecmp(ext,\"mkv\") ||\n                 !cimg::strcasecmp(ext,\"mpe\") ||\n                 !cimg::strcasecmp(ext,\"movie\") ||\n                 !cimg::strcasecmp(ext,\"ogm\") ||\n                 !cimg::strcasecmp(ext,\"ogg\") ||\n                 !cimg::strcasecmp(ext,\"ogv\") ||\n                 !cimg::strcasecmp(ext,\"qt\") ||\n                 !cimg::strcasecmp(ext,\"rm\") ||\n                 !cimg::strcasecmp(ext,\"vob\") ||\n                 !cimg::strcasecmp(ext,\"wmv\") ||\n                 !cimg::strcasecmp(ext,\"xvid\") ||\n                 !cimg::strcasecmp(ext,\"mpeg\")) load_video(filename);\n        else is_loaded = false;\n      } catch (CImgIOException&) { is_loaded = false; }\n\n      // If nothing loaded, try to guess file format from magic number in file.\n      if (!is_loaded) {\n        std::FILE *file = std::fopen(filename,\"rb\");\n        if (!file) {\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimg_instance\n                                \"load(): Failed to open file '%s'.\",\n                                cimg_instance,\n                                filename);\n        }\n\n        const char *const f_type = cimg::ftype(file,filename);\n        std::fclose(file);\n        is_loaded = true;\n        try {\n          if (!cimg::strcasecmp(f_type,\"pnm\")) load_pnm(filename);\n          else if (!cimg::strcasecmp(f_type,\"pfm\")) load_pfm(filename);\n          else if (!cimg::strcasecmp(f_type,\"bmp\")) load_bmp(filename);\n          else if (!cimg::strcasecmp(f_type,\"inr\")) load_inr(filename);\n          else if (!cimg::strcasecmp(f_type,\"jpg\")) load_jpeg(filename);\n          else if (!cimg::strcasecmp(f_type,\"pan\")) load_pandore(filename);\n          else if (!cimg::strcasecmp(f_type,\"png\")) load_png(filename);\n          else if (!cimg::strcasecmp(f_type,\"tif\")) load_tiff(filename);\n          else if (!cimg::strcasecmp(f_type,\"gif\")) load_gif_external(filename);\n          else if (!cimg::strcasecmp(f_type,\"dcm\")) load_medcon_external(filename);\n          else is_loaded = false;\n        } catch (CImgIOException&) { is_loaded = false; }\n      }\n\n      // If nothing loaded, try to load file with other means.\n      if (!is_loaded) {\n        try {\n          load_other(filename);\n        } catch (CImgIOException&) {\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimg_instance\n                                \"load(): Failed to recognize format of file '%s'.\",\n                                cimg_instance,\n                                filename);\n        }\n      }\n      cimg::exception_mode(omode);\n      return *this;\n    }\n\n    //! Load image from a file \\newinstance.\n    static CImg<T> get_load(const char *const filename) {\n      return CImg<T>().load(filename);\n    }\n\n    //! Load image from an ascii file.\n    /**\n       \\param filename Filename, as a C -string.\n    **/\n    CImg<T>& load_ascii(const char *const filename) {\n      return _load_ascii(0,filename);\n    }\n\n    //! Load image from an ascii file \\inplace.\n    static CImg<T> get_load_ascii(const char *const filename) {\n      return CImg<T>().load_ascii(filename);\n    }\n\n    //! Load image from an ascii file \\overloading.\n    CImg<T>& load_ascii(std::FILE *const file) {\n      return _load_ascii(file,0);\n    }\n\n    //! Loadimage from an ascii file \\newinstance.\n    static CImg<T> get_load_ascii(std::FILE *const file) {\n      return CImg<T>().load_ascii(file);\n    }\n\n    CImg<T>& _load_ascii(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_ascii(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      CImg<charT> line(256); *line = 0;\n      int err = std::fscanf(nfile,\"%255[^\\n]\",line._data);\n      unsigned int dx = 0, dy = 1, dz = 1, dc = 1;\n      cimg_sscanf(line,\"%u%*c%u%*c%u%*c%u\",&dx,&dy,&dz,&dc);\n      err = std::fscanf(nfile,\"%*[^0-9.eEinfa+-]\");\n      if (!dx || !dy || !dz || !dc) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_ascii(): Invalid ascii header in file '%s', image dimensions are set \"\n                              \"to (%u,%u,%u,%u).\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\",dx,dy,dz,dc);\n      }\n      assign(dx,dy,dz,dc);\n      const ulongT siz = size();\n      ulongT off = 0;\n      double val;\n      T *ptr = _data;\n      for (err = 1, off = 0; off<siz && err==1; ++off) {\n        err = std::fscanf(nfile,\"%lf%*[^0-9.eEinfa+-]\",&val);\n        *(ptr++) = (T)val;\n      }\n      if (err!=1)\n        cimg::warn(_cimg_instance\n                   \"load_ascii(): Only %lu/%lu values read from file '%s'.\",\n                   cimg_instance,\n                   off - 1,siz,filename?filename:\"(FILE*)\");\n\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a DLM file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_dlm(const char *const filename) {\n      return _load_dlm(0,filename);\n    }\n\n    //! Load image from a DLM file \\newinstance.\n    static CImg<T> get_load_dlm(const char *const filename) {\n      return CImg<T>().load_dlm(filename);\n    }\n\n    //! Load image from a DLM file \\overloading.\n    CImg<T>& load_dlm(std::FILE *const file) {\n      return _load_dlm(file,0);\n    }\n\n    //! Load image from a DLM file \\newinstance.\n    static CImg<T> get_load_dlm(std::FILE *const file) {\n      return CImg<T>().load_dlm(file);\n    }\n\n    CImg<T>& _load_dlm(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_dlm(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"r\");\n      CImg<charT> delimiter(256), tmp(256); *delimiter = *tmp = 0;\n      unsigned int cdx = 0, dx = 0, dy = 0;\n      int err = 0;\n      double val;\n      assign(256,256,1,1,(T)0);\n      while ((err = std::fscanf(nfile,\"%lf%255[^0-9eEinfa.+-]\",&val,delimiter._data))>0) {\n        if (err>0) (*this)(cdx++,dy) = (T)val;\n        if (cdx>=_width) resize(3*_width/2,_height,1,1,0);\n        char c = 0;\n        if (!cimg_sscanf(delimiter,\"%255[^\\n]%c\",tmp._data,&c) || c=='\\n') {\n          dx = std::max(cdx,dx);\n          if (++dy>=_height) resize(_width,3*_height/2,1,1,0);\n          cdx = 0;\n        }\n      }\n      if (cdx && err==1) { dx = cdx; ++dy; }\n      if (!dx || !dy) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_dlm(): Invalid DLM file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      resize(dx,dy,1,1,0);\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a BMP file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_bmp(const char *const filename) {\n      return _load_bmp(0,filename);\n    }\n\n    //! Load image from a BMP file \\newinstance.\n    static CImg<T> get_load_bmp(const char *const filename) {\n      return CImg<T>().load_bmp(filename);\n    }\n\n    //! Load image from a BMP file \\overloading.\n    CImg<T>& load_bmp(std::FILE *const file) {\n      return _load_bmp(file,0);\n    }\n\n    //! Load image from a BMP file \\newinstance.\n    static CImg<T> get_load_bmp(std::FILE *const file) {\n      return CImg<T>().load_bmp(file);\n    }\n\n    CImg<T>& _load_bmp(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_bmp(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      CImg<ucharT> header(54);\n      cimg::fread(header._data,54,nfile);\n      if (*header!='B' || header[1]!='M') {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_bmp(): Invalid BMP file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n\n      // Read header and pixel buffer\n      int\n        file_size = header[0x02] + (header[0x03]<<8) + (header[0x04]<<16) + (header[0x05]<<24),\n        offset = header[0x0A] + (header[0x0B]<<8) + (header[0x0C]<<16) + (header[0x0D]<<24),\n        header_size = header[0x0E] + (header[0x0F]<<8) + (header[0x10]<<16) + (header[0x11]<<24),\n        dx = header[0x12] + (header[0x13]<<8) + (header[0x14]<<16) + (header[0x15]<<24),\n        dy = header[0x16] + (header[0x17]<<8) + (header[0x18]<<16) + (header[0x19]<<24),\n        compression = header[0x1E] + (header[0x1F]<<8) + (header[0x20]<<16) + (header[0x21]<<24),\n        nb_colors = header[0x2E] + (header[0x2F]<<8) + (header[0x30]<<16) + (header[0x31]<<24),\n        bpp = header[0x1C] + (header[0x1D]<<8);\n\n      if (!file_size || file_size==offset) {\n        cimg::fseek(nfile,0,SEEK_END);\n        file_size = (int)cimg::ftell(nfile);\n        cimg::fseek(nfile,54,SEEK_SET);\n      }\n      if (header_size>40) cimg::fseek(nfile,header_size - 40,SEEK_CUR);\n\n      const int\n        dx_bytes = (bpp==1)?(dx/8 + (dx%8?1:0)):((bpp==4)?(dx/2 + (dx%2)):(dx*bpp/8)),\n        align_bytes = (4 - dx_bytes%4)%4;\n      const longT\n        cimg_iobuffer = (longT)24*1024*1024,\n        buf_size = std::min((longT)cimg::abs(dy)*(dx_bytes + align_bytes),(longT)file_size - offset);\n\n      CImg<intT> colormap;\n      if (bpp<16) { if (!nb_colors) nb_colors = 1<<bpp; } else nb_colors = 0;\n      if (nb_colors) { colormap.assign(nb_colors); cimg::fread(colormap._data,nb_colors,nfile); }\n      const int xoffset = offset - 14 - header_size - 4*nb_colors;\n      if (xoffset>0) cimg::fseek(nfile,xoffset,SEEK_CUR);\n\n      CImg<ucharT> buffer;\n      if (buf_size<cimg_iobuffer) {\n        buffer.assign(cimg::abs(dy)*(dx_bytes + align_bytes),1,1,1,0);\n        cimg::fread(buffer._data,buf_size,nfile);\n      } else buffer.assign(dx_bytes + align_bytes);\n      unsigned char *ptrs = buffer;\n\n      // Decompress buffer (if necessary)\n      if (compression) {\n        if (file)\n          throw CImgIOException(_cimg_instance\n                                \"load_bmp(): Unable to load compressed data from '(*FILE)' inputs.\",\n                                cimg_instance);\n        else {\n          if (!file) cimg::fclose(nfile);\n          return load_other(filename);\n        }\n      }\n\n      // Read pixel data\n      assign(dx,cimg::abs(dy),1,3);\n      switch (bpp) {\n      case 1 : { // Monochrome\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          unsigned char mask = 0x80, val = 0;\n          cimg_forX(*this,x) {\n            if (mask==0x80) val = *(ptrs++);\n            const unsigned char *col = (unsigned char*)(colormap._data + (val&mask?1:0));\n            (*this)(x,y,2) = (T)*(col++);\n            (*this)(x,y,1) = (T)*(col++);\n            (*this)(x,y,0) = (T)*(col++);\n            mask = cimg::ror(mask);\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      case 4 : { // 16 colors\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          unsigned char mask = 0xF0, val = 0;\n          cimg_forX(*this,x) {\n            if (mask==0xF0) val = *(ptrs++);\n            const unsigned char color = (unsigned char)((mask<16)?(val&mask):((val&mask)>>4));\n            const unsigned char *col = (unsigned char*)(colormap._data + color);\n            (*this)(x,y,2) = (T)*(col++);\n            (*this)(x,y,1) = (T)*(col++);\n            (*this)(x,y,0) = (T)*(col++);\n            mask = cimg::ror(mask,4);\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      case 8 : { //  256 colors\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          cimg_forX(*this,x) {\n            const unsigned char *col = (unsigned char*)(colormap._data + *(ptrs++));\n            (*this)(x,y,2) = (T)*(col++);\n            (*this)(x,y,1) = (T)*(col++);\n            (*this)(x,y,0) = (T)*(col++);\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      case 16 : { // 16 bits colors\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          cimg_forX(*this,x) {\n            const unsigned char c1 = *(ptrs++), c2 = *(ptrs++);\n            const unsigned short col = (unsigned short)(c1|(c2<<8));\n            (*this)(x,y,2) = (T)(col&0x1F);\n            (*this)(x,y,1) = (T)((col>>5)&0x1F);\n            (*this)(x,y,0) = (T)((col>>10)&0x1F);\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      case 24 : { // 24 bits colors\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          cimg_forX(*this,x) {\n            (*this)(x,y,2) = (T)*(ptrs++);\n            (*this)(x,y,1) = (T)*(ptrs++);\n            (*this)(x,y,0) = (T)*(ptrs++);\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      case 32 : { // 32 bits colors\n        for (int y = height() - 1; y>=0; --y) {\n          if (buf_size>=cimg_iobuffer) {\n            cimg::fread(ptrs=buffer._data,dx_bytes,nfile);\n            cimg::fseek(nfile,align_bytes,SEEK_CUR);\n          }\n          cimg_forX(*this,x) {\n            (*this)(x,y,2) = (T)*(ptrs++);\n            (*this)(x,y,1) = (T)*(ptrs++);\n            (*this)(x,y,0) = (T)*(ptrs++);\n            ++ptrs;\n          }\n          ptrs+=align_bytes;\n        }\n      } break;\n      }\n      if (dy<0) mirror('y');\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a JPEG file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_jpeg(const char *const filename) {\n      return _load_jpeg(0,filename);\n    }\n\n    //! Load image from a JPEG file \\newinstance.\n    static CImg<T> get_load_jpeg(const char *const filename) {\n      return CImg<T>().load_jpeg(filename);\n    }\n\n    //! Load image from a JPEG file \\overloading.\n    CImg<T>& load_jpeg(std::FILE *const file) {\n      return _load_jpeg(file,0);\n    }\n\n    //! Load image from a JPEG file \\newinstance.\n    static CImg<T> get_load_jpeg(std::FILE *const file) {\n      return CImg<T>().load_jpeg(file);\n    }\n\n    // Custom error handler for libjpeg.\n#ifdef cimg_use_jpeg\n    struct _cimg_error_mgr {\n      struct jpeg_error_mgr original;\n      jmp_buf setjmp_buffer;\n      char message[JMSG_LENGTH_MAX];\n    };\n\n    typedef struct _cimg_error_mgr *_cimg_error_ptr;\n\n    METHODDEF(void) _cimg_jpeg_error_exit(j_common_ptr cinfo) {\n      _cimg_error_ptr c_err = (_cimg_error_ptr) cinfo->err;  // Return control to the setjmp point\n      (*cinfo->err->format_message)(cinfo,c_err->message);\n      jpeg_destroy(cinfo);  // Clean memory and temp files.\n      longjmp(c_err->setjmp_buffer,1);\n    }\n#endif\n\n    CImg<T>& _load_jpeg(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_jpeg(): Specified filename is (null).\",\n                                    cimg_instance);\n\n#ifndef cimg_use_jpeg\n      if (file)\n        throw CImgIOException(_cimg_instance\n                              \"load_jpeg(): Unable to load data from '(FILE*)' unless libjpeg is enabled.\",\n                              cimg_instance);\n      else return load_other(filename);\n#else\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      struct jpeg_decompress_struct cinfo;\n      struct _cimg_error_mgr jerr;\n      cinfo.err = jpeg_std_error(&jerr.original);\n      jerr.original.error_exit = _cimg_jpeg_error_exit;\n      if (setjmp(jerr.setjmp_buffer)) { // JPEG error\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                             \"load_jpeg(): Error message returned by libjpeg: %s.\",\n                             cimg_instance,jerr.message);\n      }\n\n      jpeg_create_decompress(&cinfo);\n      jpeg_stdio_src(&cinfo,nfile);\n      jpeg_read_header(&cinfo,TRUE);\n      jpeg_start_decompress(&cinfo);\n\n      if (cinfo.output_components!=1 && cinfo.output_components!=3 && cinfo.output_components!=4) {\n        if (!file) {\n          cimg::fclose(nfile);\n          return load_other(filename);\n        } else\n          throw CImgIOException(_cimg_instance\n                                \"load_jpeg(): Failed to load JPEG data from file '%s'.\",\n                                cimg_instance,filename?filename:\"(FILE*)\");\n      }\n      CImg<ucharT> buffer(cinfo.output_width*cinfo.output_components);\n      JSAMPROW row_pointer[1];\n      try { assign(cinfo.output_width,cinfo.output_height,1,cinfo.output_components); }\n      catch (...) { if (!file) cimg::fclose(nfile); throw; }\n      T *ptr_r = _data, *ptr_g = _data + 1UL*_width*_height, *ptr_b = _data + 2UL*_width*_height,\n        *ptr_a = _data + 3UL*_width*_height;\n      while (cinfo.output_scanline<cinfo.output_height) {\n        *row_pointer = buffer._data;\n        if (jpeg_read_scanlines(&cinfo,row_pointer,1)!=1) {\n          cimg::warn(_cimg_instance\n                     \"load_jpeg(): Incomplete data in file '%s'.\",\n                     cimg_instance,filename?filename:\"(FILE*)\");\n          break;\n        }\n        const unsigned char *ptrs = buffer._data;\n        switch (_spectrum) {\n        case 1 : {\n          cimg_forX(*this,x) *(ptr_r++) = (T)*(ptrs++);\n        } break;\n        case 3 : {\n          cimg_forX(*this,x) {\n            *(ptr_r++) = (T)*(ptrs++);\n            *(ptr_g++) = (T)*(ptrs++);\n            *(ptr_b++) = (T)*(ptrs++);\n          }\n        } break;\n        case 4 : {\n          cimg_forX(*this,x) {\n            *(ptr_r++) = (T)*(ptrs++);\n            *(ptr_g++) = (T)*(ptrs++);\n            *(ptr_b++) = (T)*(ptrs++);\n            *(ptr_a++) = (T)*(ptrs++);\n          }\n        } break;\n        }\n      }\n      jpeg_finish_decompress(&cinfo);\n      jpeg_destroy_decompress(&cinfo);\n      if (!file) cimg::fclose(nfile);\n      return *this;\n#endif\n    }\n\n    //! Load image from a file, using Magick++ library.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    // Added April/may 2006 by Christoph Hormann <chris_hormann@gmx.de>\n    //   This is experimental code, not much tested, use with care.\n    CImg<T>& load_magick(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_magick(): Specified filename is (null).\",\n                                    cimg_instance);\n#ifdef cimg_use_magick\n      Magick::Image image(filename);\n      const unsigned int W = image.size().width(), H = image.size().height();\n      switch (image.type()) {\n      case Magick::PaletteMatteType :\n      case Magick::TrueColorMatteType :\n      case Magick::ColorSeparationType : {\n        assign(W,H,1,4);\n        T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2), *ptr_a = data(0,0,0,3);\n        Magick::PixelPacket *pixels = image.getPixels(0,0,W,H);\n        for (ulongT off = (ulongT)W*H; off; --off) {\n          *(ptr_r++) = (T)(pixels->red);\n          *(ptr_g++) = (T)(pixels->green);\n          *(ptr_b++) = (T)(pixels->blue);\n          *(ptr_a++) = (T)(pixels->opacity);\n          ++pixels;\n        }\n      } break;\n      case Magick::PaletteType :\n      case Magick::TrueColorType : {\n        assign(W,H,1,3);\n        T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2);\n        Magick::PixelPacket *pixels = image.getPixels(0,0,W,H);\n        for (ulongT off = (ulongT)W*H; off; --off) {\n          *(ptr_r++) = (T)(pixels->red);\n          *(ptr_g++) = (T)(pixels->green);\n          *(ptr_b++) = (T)(pixels->blue);\n          ++pixels;\n        }\n      } break;\n      case Magick::GrayscaleMatteType : {\n        assign(W,H,1,2);\n        T *ptr_r = data(0,0,0,0), *ptr_a = data(0,0,0,1);\n        Magick::PixelPacket *pixels = image.getPixels(0,0,W,H);\n        for (ulongT off = (ulongT)W*H; off; --off) {\n          *(ptr_r++) = (T)(pixels->red);\n          *(ptr_a++) = (T)(pixels->opacity);\n          ++pixels;\n        }\n      } break;\n      default : {\n        assign(W,H,1,1);\n        T *ptr_r = data(0,0,0,0);\n        Magick::PixelPacket *pixels = image.getPixels(0,0,W,H);\n        for (ulongT off = (ulongT)W*H; off; --off) {\n          *(ptr_r++) = (T)(pixels->red);\n          ++pixels;\n        }\n      }\n      }\n      return *this;\n#else\n      throw CImgIOException(_cimg_instance\n                            \"load_magick(): Unable to load file '%s' unless libMagick++ is enabled.\",\n                            cimg_instance,\n                            filename);\n#endif\n    }\n\n    //! Load image from a file, using Magick++ library \\newinstance.\n    static CImg<T> get_load_magick(const char *const filename) {\n      return CImg<T>().load_magick(filename);\n    }\n\n    //! Load image from a PNG file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_png(const char *const filename, unsigned int *const bits_per_pixel=0) {\n      return _load_png(0,filename,bits_per_pixel);\n    }\n\n    //! Load image from a PNG file \\newinstance.\n    static CImg<T> get_load_png(const char *const filename, unsigned int *const bits_per_pixel=0) {\n      return CImg<T>().load_png(filename,bits_per_pixel);\n    }\n\n    //! Load image from a PNG file \\overloading.\n    CImg<T>& load_png(std::FILE *const file, unsigned int *const bits_per_pixel=0) {\n      return _load_png(file,0,bits_per_pixel);\n    }\n\n    //! Load image from a PNG file \\newinstance.\n    static CImg<T> get_load_png(std::FILE *const file, unsigned int *const bits_per_pixel=0) {\n      return CImg<T>().load_png(file,bits_per_pixel);\n    }\n\n    // (Note: Most of this function has been written by Eric Fausett)\n    CImg<T>& _load_png(std::FILE *const file, const char *const filename, unsigned int *const bits_per_pixel) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_png(): Specified filename is (null).\",\n                                    cimg_instance);\n\n#ifndef cimg_use_png\n      cimg::unused(bits_per_pixel);\n      if (file)\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Unable to load data from '(FILE*)' unless libpng is enabled.\",\n                              cimg_instance);\n\n      else return load_other(filename);\n#else\n      // Open file and check for PNG validity\n      const char *volatile nfilename = filename; // two 'volatile' here to remove a g++ warning due to 'setjmp'.\n      std::FILE *volatile nfile = file?file:cimg::fopen(nfilename,\"rb\");\n\n      unsigned char pngCheck[8] = { 0 };\n      cimg::fread(pngCheck,8,(std::FILE*)nfile);\n      if (png_sig_cmp(pngCheck,0,8)) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Invalid PNG file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n\n      // Setup PNG structures for read\n      png_voidp user_error_ptr = 0;\n      png_error_ptr user_error_fn = 0, user_warning_fn = 0;\n      png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING,user_error_ptr,user_error_fn,user_warning_fn);\n      if (!png_ptr) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Failed to initialize 'png_ptr' structure for file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_infop info_ptr = png_create_info_struct(png_ptr);\n      if (!info_ptr) {\n        if (!file) cimg::fclose(nfile);\n        png_destroy_read_struct(&png_ptr,(png_infopp)0,(png_infopp)0);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Failed to initialize 'info_ptr' structure for file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_infop end_info = png_create_info_struct(png_ptr);\n      if (!end_info) {\n        if (!file) cimg::fclose(nfile);\n        png_destroy_read_struct(&png_ptr,&info_ptr,(png_infopp)0);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Failed to initialize 'end_info' structure for file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n\n      // Error handling callback for png file reading\n      if (setjmp(png_jmpbuf(png_ptr))) {\n        if (!file) cimg::fclose((std::FILE*)nfile);\n        png_destroy_read_struct(&png_ptr, &end_info, (png_infopp)0);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Encountered unknown fatal error in libpng for file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_init_io(png_ptr, nfile);\n      png_set_sig_bytes(png_ptr, 8);\n\n      // Get PNG Header Info up to data block\n      png_read_info(png_ptr,info_ptr);\n      png_uint_32 W, H;\n      int bit_depth, color_type, interlace_type;\n      bool is_gray = false;\n      png_get_IHDR(png_ptr,info_ptr,&W,&H,&bit_depth,&color_type,&interlace_type,(int*)0,(int*)0);\n      if (bits_per_pixel) *bits_per_pixel = (unsigned int)bit_depth;\n\n      // Transforms to unify image data\n      if (color_type==PNG_COLOR_TYPE_PALETTE) {\n        png_set_palette_to_rgb(png_ptr);\n        color_type = PNG_COLOR_TYPE_RGB;\n        bit_depth = 8;\n      }\n      if (color_type==PNG_COLOR_TYPE_GRAY && bit_depth<8) {\n        png_set_expand_gray_1_2_4_to_8(png_ptr);\n        is_gray = true;\n        bit_depth = 8;\n      }\n      if (png_get_valid(png_ptr,info_ptr,PNG_INFO_tRNS)) {\n        png_set_tRNS_to_alpha(png_ptr);\n        color_type |= PNG_COLOR_MASK_ALPHA;\n      }\n      if (color_type==PNG_COLOR_TYPE_GRAY || color_type==PNG_COLOR_TYPE_GRAY_ALPHA) {\n        png_set_gray_to_rgb(png_ptr);\n        color_type |= PNG_COLOR_MASK_COLOR;\n        is_gray = true;\n      }\n      if (color_type==PNG_COLOR_TYPE_RGB)\n        png_set_filler(png_ptr,0xffffU,PNG_FILLER_AFTER);\n\n      png_read_update_info(png_ptr,info_ptr);\n      if (bit_depth!=8 && bit_depth!=16) {\n        if (!file) cimg::fclose(nfile);\n        png_destroy_read_struct(&png_ptr,&end_info,(png_infopp)0);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Invalid bit depth %u in file '%s'.\",\n                              cimg_instance,\n                              bit_depth,nfilename?nfilename:\"(FILE*)\");\n      }\n      const int byte_depth = bit_depth>>3;\n\n      // Allocate Memory for Image Read\n      png_bytep *const imgData = new png_bytep[H];\n      for (unsigned int row = 0; row<H; ++row) imgData[row] = new png_byte[(size_t)byte_depth*4*W];\n      png_read_image(png_ptr,imgData);\n      png_read_end(png_ptr,end_info);\n\n      // Read pixel data\n      if (color_type!=PNG_COLOR_TYPE_RGB && color_type!=PNG_COLOR_TYPE_RGB_ALPHA) {\n        if (!file) cimg::fclose(nfile);\n        png_destroy_read_struct(&png_ptr,&end_info,(png_infopp)0);\n        throw CImgIOException(_cimg_instance\n                              \"load_png(): Invalid color coding type %u in file '%s'.\",\n                              cimg_instance,\n                              color_type,nfilename?nfilename:\"(FILE*)\");\n      }\n      const bool is_alpha = (color_type==PNG_COLOR_TYPE_RGBA);\n      try { assign(W,H,1,(is_gray?1:3) + (is_alpha?1:0)); }\n      catch (...) { if (!file) cimg::fclose(nfile); throw; }\n      T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = is_gray?0:data(0,0,0,1),\n        *ptr_b = is_gray?0:data(0,0,0,2),\n        *ptr_a = !is_alpha?0:data(0,0,0,is_gray?1:3);\n      switch (bit_depth) {\n      case 8 : {\n        cimg_forY(*this,y) {\n          const unsigned char *ptrs = (unsigned char*)imgData[y];\n          cimg_forX(*this,x) {\n            *(ptr_r++) = (T)*(ptrs++);\n            if (ptr_g) *(ptr_g++) = (T)*(ptrs++); else ++ptrs;\n            if (ptr_b) *(ptr_b++) = (T)*(ptrs++); else ++ptrs;\n            if (ptr_a) *(ptr_a++) = (T)*(ptrs++); else ++ptrs;\n          }\n        }\n      } break;\n      case 16 : {\n        cimg_forY(*this,y) {\n          const unsigned short *ptrs = (unsigned short*)(imgData[y]);\n          if (!cimg::endianness()) cimg::invert_endianness(ptrs,4*_width);\n          cimg_forX(*this,x) {\n            *(ptr_r++) = (T)*(ptrs++);\n            if (ptr_g) *(ptr_g++) = (T)*(ptrs++); else ++ptrs;\n            if (ptr_b) *(ptr_b++) = (T)*(ptrs++); else ++ptrs;\n            if (ptr_a) *(ptr_a++) = (T)*(ptrs++); else ++ptrs;\n          }\n        }\n      } break;\n      }\n      png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);\n\n      // Deallocate Image Read Memory\n      cimg_forY(*this,n) delete[] imgData[n];\n      delete[] imgData;\n      if (!file) cimg::fclose(nfile);\n      return *this;\n#endif\n    }\n\n    //! Load image from a PNM file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_pnm(const char *const filename) {\n      return _load_pnm(0,filename);\n    }\n\n    //! Load image from a PNM file \\newinstance.\n    static CImg<T> get_load_pnm(const char *const filename) {\n      return CImg<T>().load_pnm(filename);\n    }\n\n    //! Load image from a PNM file \\overloading.\n    CImg<T>& load_pnm(std::FILE *const file) {\n      return _load_pnm(file,0);\n    }\n\n    //! Load image from a PNM file \\newinstance.\n    static CImg<T> get_load_pnm(std::FILE *const file) {\n      return CImg<T>().load_pnm(file);\n    }\n\n    CImg<T>& _load_pnm(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_pnm(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      unsigned int ppm_type, W, H, D = 1, colormax = 255;\n      CImg<charT> item(16384,1,1,1,0);\n      int err, rval, gval, bval;\n      const longT cimg_iobuffer = (longT)24*1024*1024;\n      while ((err=std::fscanf(nfile,\"%16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n      if (cimg_sscanf(item,\" P%u\",&ppm_type)!=1) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pnm(): PNM header not found in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      while ((err=std::fscanf(nfile,\" %16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n      if ((err=cimg_sscanf(item,\" %u %u %u %u\",&W,&H,&D,&colormax))<2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pnm(): WIDTH and HEIGHT fields undefined in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (ppm_type!=1 && ppm_type!=4) {\n        if (err==2 || (err==3 && (ppm_type==5 || ppm_type==7 || ppm_type==8 || ppm_type==9))) {\n          while ((err=std::fscanf(nfile,\" %16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n          if (cimg_sscanf(item,\"%u\",&colormax)!=1)\n            cimg::warn(_cimg_instance\n                       \"load_pnm(): COLORMAX field is undefined in file '%s'.\",\n                       cimg_instance,\n                       filename?filename:\"(FILE*)\");\n        } else { colormax = D; D = 1; }\n      }\n      std::fgetc(nfile);\n\n      switch (ppm_type) {\n      case 1 : { // 2d b&w ascii.\n        assign(W,H,1,1);\n        T* ptrd = _data;\n        cimg_foroff(*this,off) { if (std::fscanf(nfile,\"%d\",&rval)>0) *(ptrd++) = (T)(rval?0:255); else break; }\n      } break;\n      case 2 : { // 2d grey ascii.\n        assign(W,H,1,1);\n        T* ptrd = _data;\n        cimg_foroff(*this,off) { if (std::fscanf(nfile,\"%d\",&rval)>0) *(ptrd++) = (T)rval; else break; }\n      } break;\n      case 3 : { // 2d color ascii.\n        assign(W,H,1,3);\n        T *ptrd = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2);\n        cimg_forXY(*this,x,y) {\n          if (std::fscanf(nfile,\"%d %d %d\",&rval,&gval,&bval)==3) {\n            *(ptrd++) = (T)rval; *(ptr_g++) = (T)gval; *(ptr_b++) = (T)bval;\n          } else break;\n        }\n      } break;\n      case 4 : { // 2d b&w binary (support 3D PINK extension).\n        CImg<ucharT> raw;\n        assign(W,H,D,1);\n        T *ptrd = data(0,0,0,0);\n        unsigned int w = 0, h = 0, d = 0;\n        for (longT to_read = (longT)((W/8 + (W%8?1:0))*H*D); to_read>0; ) {\n          raw.assign(std::min(to_read,cimg_iobuffer));\n          cimg::fread(raw._data,raw._width,nfile);\n          to_read-=raw._width;\n          const unsigned char *ptrs = raw._data;\n          unsigned char mask = 0, val = 0;\n          for (ulongT off = (ulongT)raw._width; off || mask; mask>>=1) {\n            if (!mask) { if (off--) val = *(ptrs++); mask = 128; }\n            *(ptrd++) = (T)((val&mask)?0:255);\n            if (++w==W) { w = 0; mask = 0; if (++h==H) { h = 0; if (++d==D) break; }}\n          }\n        }\n      } break;\n      case 5 : case 7 : { // 2d/3d grey binary (support 3D PINK extension).\n        if (colormax<256) { // 8 bits.\n          CImg<ucharT> raw;\n          assign(W,H,D,1);\n          T *ptrd = data(0,0,0,0);\n          for (longT to_read = (longT)size(); to_read>0; ) {\n            raw.assign(std::min(to_read,cimg_iobuffer));\n            cimg::fread(raw._data,raw._width,nfile);\n            to_read-=raw._width;\n            const unsigned char *ptrs = raw._data;\n            for (ulongT off = (ulongT)raw._width; off; --off) *(ptrd++) = (T)*(ptrs++);\n          }\n        } else { // 16 bits.\n          CImg<ushortT> raw;\n          assign(W,H,D,1);\n          T *ptrd = data(0,0,0,0);\n          for (longT to_read = (longT)size(); to_read>0; ) {\n            raw.assign(std::min(to_read,cimg_iobuffer/2));\n            cimg::fread(raw._data,raw._width,nfile);\n            if (!cimg::endianness()) cimg::invert_endianness(raw._data,raw._width);\n            to_read-=raw._width;\n            const unsigned short *ptrs = raw._data;\n            for (ulongT off = (ulongT)raw._width; off; --off) *(ptrd++) = (T)*(ptrs++);\n          }\n        }\n      } break;\n      case 6 : { // 2d color binary.\n        if (colormax<256) { // 8 bits.\n          CImg<ucharT> raw;\n          assign(W,H,1,3);\n          T\n            *ptr_r = data(0,0,0,0),\n            *ptr_g = data(0,0,0,1),\n            *ptr_b = data(0,0,0,2);\n          for (longT to_read = (longT)size(); to_read>0; ) {\n            raw.assign(std::min(to_read,cimg_iobuffer));\n            cimg::fread(raw._data,raw._width,nfile);\n            to_read-=raw._width;\n            const unsigned char *ptrs = raw._data;\n            for (ulongT off = (ulongT)raw._width/3; off; --off) {\n              *(ptr_r++) = (T)*(ptrs++);\n              *(ptr_g++) = (T)*(ptrs++);\n              *(ptr_b++) = (T)*(ptrs++);\n            }\n          }\n        } else { // 16 bits.\n          CImg<ushortT> raw;\n          assign(W,H,1,3);\n          T\n            *ptr_r = data(0,0,0,0),\n            *ptr_g = data(0,0,0,1),\n            *ptr_b = data(0,0,0,2);\n          for (longT to_read = (longT)size(); to_read>0; ) {\n            raw.assign(std::min(to_read,cimg_iobuffer/2));\n            cimg::fread(raw._data,raw._width,nfile);\n            if (!cimg::endianness()) cimg::invert_endianness(raw._data,raw._width);\n            to_read-=raw._width;\n            const unsigned short *ptrs = raw._data;\n            for (ulongT off = (ulongT)raw._width/3; off; --off) {\n              *(ptr_r++) = (T)*(ptrs++);\n              *(ptr_g++) = (T)*(ptrs++);\n              *(ptr_b++) = (T)*(ptrs++);\n            }\n          }\n        }\n      } break;\n      case 8 : { // 2d/3d grey binary with int32 integers (PINK extension).\n        CImg<intT> raw;\n        assign(W,H,D,1);\n        T *ptrd = data(0,0,0,0);\n        for (longT to_read = (longT)size(); to_read>0; ) {\n          raw.assign(std::min(to_read,cimg_iobuffer));\n          cimg::fread(raw._data,raw._width,nfile);\n          to_read-=raw._width;\n          const int *ptrs = raw._data;\n          for (ulongT off = (ulongT)raw._width; off; --off) *(ptrd++) = (T)*(ptrs++);\n        }\n      } break;\n      case 9 : { // 2d/3d grey binary with float values (PINK extension).\n        CImg<floatT> raw;\n        assign(W,H,D,1);\n        T *ptrd = data(0,0,0,0);\n        for (longT to_read = (longT)size(); to_read>0; ) {\n          raw.assign(std::min(to_read,cimg_iobuffer));\n          cimg::fread(raw._data,raw._width,nfile);\n          to_read-=raw._width;\n          const float *ptrs = raw._data;\n          for (ulongT off = (ulongT)raw._width; off; --off) *(ptrd++) = (T)*(ptrs++);\n        }\n      } break;\n      default :\n        assign();\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pnm(): PNM type 'P%d' found, but type is not supported.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\",ppm_type);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a PFM file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_pfm(const char *const filename) {\n      return _load_pfm(0,filename);\n    }\n\n    //! Load image from a PFM file \\newinstance.\n    static CImg<T> get_load_pfm(const char *const filename) {\n      return CImg<T>().load_pfm(filename);\n    }\n\n    //! Load image from a PFM file \\overloading.\n    CImg<T>& load_pfm(std::FILE *const file) {\n      return _load_pfm(file,0);\n    }\n\n    //! Load image from a PFM file \\newinstance.\n    static CImg<T> get_load_pfm(std::FILE *const file) {\n      return CImg<T>().load_pfm(file);\n    }\n\n    CImg<T>& _load_pfm(std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_pfm(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      char pfm_type;\n      CImg<charT> item(16384,1,1,1,0);\n      int W = 0, H = 0, err = 0;\n      double scale = 0;\n      while ((err=std::fscanf(nfile,\"%16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n      if (cimg_sscanf(item,\" P%c\",&pfm_type)!=1) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pfm(): PFM header not found in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      while ((err=std::fscanf(nfile,\" %16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n      if ((err=cimg_sscanf(item,\" %d %d\",&W,&H))<2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pfm(): WIDTH and HEIGHT fields are undefined in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (err==2) {\n        while ((err=std::fscanf(nfile,\" %16383[^\\n]\",item.data()))!=EOF && (*item=='#' || !err)) std::fgetc(nfile);\n        if (cimg_sscanf(item,\"%lf\",&scale)!=1)\n          cimg::warn(_cimg_instance\n                     \"load_pfm(): SCALE field is undefined in file '%s'.\",\n                     cimg_instance,\n                     filename?filename:\"(FILE*)\");\n      }\n      std::fgetc(nfile);\n      const bool is_color = (pfm_type=='F'), is_inverted = (scale>0)!=cimg::endianness();\n      if (is_color) {\n        assign(W,H,1,3,(T)0);\n        CImg<floatT> buf(3*W);\n        T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2);\n        cimg_forY(*this,y) {\n          cimg::fread(buf._data,3*W,nfile);\n          if (is_inverted) cimg::invert_endianness(buf._data,3*W);\n          const float *ptrs = buf._data;\n          cimg_forX(*this,x) {\n            *(ptr_r++) = (T)*(ptrs++);\n            *(ptr_g++) = (T)*(ptrs++);\n            *(ptr_b++) = (T)*(ptrs++);\n          }\n        }\n      } else {\n        assign(W,H,1,1,(T)0);\n        CImg<floatT> buf(W);\n        T *ptrd = data(0,0,0,0);\n        cimg_forY(*this,y) {\n          cimg::fread(buf._data,W,nfile);\n          if (is_inverted) cimg::invert_endianness(buf._data,W);\n          const float *ptrs = buf._data;\n          cimg_forX(*this,x) *(ptrd++) = (T)*(ptrs++);\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return mirror('y');  // Most of the .pfm files are flipped along the y-axis.\n    }\n\n    //! Load image from a RGB file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param dimw Width of the image buffer.\n      \\param dimh Height of the image buffer.\n    **/\n    CImg<T>& load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {\n      return _load_rgb(0,filename,dimw,dimh);\n    }\n\n    //! Load image from a RGB file \\newinstance.\n    static CImg<T> get_load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {\n      return CImg<T>().load_rgb(filename,dimw,dimh);\n    }\n\n    //! Load image from a RGB file \\overloading.\n    CImg<T>& load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {\n      return _load_rgb(file,0,dimw,dimh);\n    }\n\n    //! Load image from a RGB file \\newinstance.\n    static CImg<T> get_load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {\n      return CImg<T>().load_rgb(file,dimw,dimh);\n    }\n\n    CImg<T>& _load_rgb(std::FILE *const file, const char *const filename,\n                       const unsigned int dimw, const unsigned int dimh) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_rgb(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      if (!dimw || !dimh) return assign();\n      const longT cimg_iobuffer = (longT)24*1024*1024;\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      CImg<ucharT> raw;\n      assign(dimw,dimh,1,3);\n      T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = data(0,0,0,1),\n        *ptr_b = data(0,0,0,2);\n      for (longT to_read = (longT)size(); to_read>0; ) {\n        raw.assign(std::min(to_read,cimg_iobuffer));\n        cimg::fread(raw._data,raw._width,nfile);\n        to_read-=raw._width;\n        const unsigned char *ptrs = raw._data;\n        for (ulongT off = raw._width/3UL; off; --off) {\n          *(ptr_r++) = (T)*(ptrs++);\n          *(ptr_g++) = (T)*(ptrs++);\n          *(ptr_b++) = (T)*(ptrs++);\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a RGBA file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param dimw Width of the image buffer.\n       \\param dimh Height of the image buffer.\n    **/\n    CImg<T>& load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {\n      return _load_rgba(0,filename,dimw,dimh);\n    }\n\n    //! Load image from a RGBA file \\newinstance.\n    static CImg<T> get_load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {\n      return CImg<T>().load_rgba(filename,dimw,dimh);\n    }\n\n    //! Load image from a RGBA file \\overloading.\n    CImg<T>& load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {\n      return _load_rgba(file,0,dimw,dimh);\n    }\n\n    //! Load image from a RGBA file \\newinstance.\n    static CImg<T> get_load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {\n      return CImg<T>().load_rgba(file,dimw,dimh);\n    }\n\n    CImg<T>& _load_rgba(std::FILE *const file, const char *const filename,\n                        const unsigned int dimw, const unsigned int dimh) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_rgba(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      if (!dimw || !dimh) return assign();\n      const longT cimg_iobuffer = (longT)24*1024*1024;\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      CImg<ucharT> raw;\n      assign(dimw,dimh,1,4);\n      T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = data(0,0,0,1),\n        *ptr_b = data(0,0,0,2),\n        *ptr_a = data(0,0,0,3);\n      for (longT to_read = (longT)size(); to_read>0; ) {\n        raw.assign(std::min(to_read,cimg_iobuffer));\n        cimg::fread(raw._data,raw._width,nfile);\n        to_read-=raw._width;\n        const unsigned char *ptrs = raw._data;\n        for (ulongT off = raw._width/4UL; off; --off) {\n          *(ptr_r++) = (T)*(ptrs++);\n          *(ptr_g++) = (T)*(ptrs++);\n          *(ptr_b++) = (T)*(ptrs++);\n          *(ptr_a++) = (T)*(ptrs++);\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a TIFF file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param first_frame First frame to read (for multi-pages tiff).\n       \\param last_frame Last frame to read (for multi-pages tiff).\n       \\param step_frame Step value of frame reading.\n       \\note\n       - libtiff support is enabled by defining the precompilation\n        directive \\c cimg_use_tif.\n       - When libtiff is enabled, 2D and 3D (multipage) several\n        channel per pixel are supported for\n        <tt>char,uchar,short,ushort,float</tt> and \\c double pixel types.\n       - If \\c cimg_use_tif is not defined at compile time the\n        function uses CImg<T>& load_other(const char*).\n     **/\n    CImg<T>& load_tiff(const char *const filename,\n                       const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                       const unsigned int step_frame=1,\n                       float *const voxel_size=0,\n                       CImg<charT> *const description=0) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_tiff(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      const unsigned int\n        nfirst_frame = first_frame<last_frame?first_frame:last_frame,\n        nstep_frame = step_frame?step_frame:1;\n      unsigned int nlast_frame = first_frame<last_frame?last_frame:first_frame;\n\n#ifndef cimg_use_tiff\n      cimg::unused(voxel_size,description);\n      if (nfirst_frame || nlast_frame!=~0U || nstep_frame>1)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_tiff(): Unable to read sub-images from file '%s' unless libtiff is enabled.\",\n                                    cimg_instance,\n                                    filename);\n      return load_other(filename);\n#else\n      TIFF *tif = TIFFOpen(filename,\"r\");\n      if (tif) {\n        unsigned int nb_images = 0;\n        do ++nb_images; while (TIFFReadDirectory(tif));\n        if (nfirst_frame>=nb_images || (nlast_frame!=~0U && nlast_frame>=nb_images))\n          cimg::warn(_cimg_instance\n                     \"load_tiff(): File '%s' contains %u image(s) while specified frame range is [%u,%u] (step %u).\",\n                     cimg_instance,\n                     filename,nb_images,nfirst_frame,nlast_frame,nstep_frame);\n\n        if (nfirst_frame>=nb_images) return assign();\n        if (nlast_frame>=nb_images) nlast_frame = nb_images - 1;\n        TIFFSetDirectory(tif,0);\n        CImg<T> frame;\n        for (unsigned int l = nfirst_frame; l<=nlast_frame; l+=nstep_frame) {\n          frame._load_tiff(tif,l,voxel_size,description);\n          if (l==nfirst_frame)\n            assign(frame._width,frame._height,1 + (nlast_frame - nfirst_frame)/nstep_frame,frame._spectrum);\n          if (frame._width>_width || frame._height>_height || frame._spectrum>_spectrum)\n            resize(std::max(frame._width,_width),\n                   std::max(frame._height,_height),-100,\n                   std::max(frame._spectrum,_spectrum),0);\n          draw_image(0,0,(l - nfirst_frame)/nstep_frame,frame);\n        }\n        TIFFClose(tif);\n      } else throw CImgIOException(_cimg_instance\n                                   \"load_tiff(): Failed to open file '%s'.\",\n                                   cimg_instance,\n                                   filename);\n      return *this;\n#endif\n    }\n\n    //! Load image from a TIFF file \\newinstance.\n    static CImg<T> get_load_tiff(const char *const filename,\n                                 const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                 const unsigned int step_frame=1,\n                                 float *const voxel_size=0,\n                                 CImg<charT> *const description=0) {\n      return CImg<T>().load_tiff(filename,first_frame,last_frame,step_frame,voxel_size,description);\n    }\n\n    // (Original contribution by Jerome Boulanger).\n#ifdef cimg_use_tiff\n    template<typename t>\n    void _load_tiff_tiled_contig(TIFF *const tif, const uint16 samplesperpixel,\n                                 const uint32 nx, const uint32 ny, const uint32 tw, const uint32 th) {\n      t *const buf = (t*)_TIFFmalloc(TIFFTileSize(tif));\n      if (buf) {\n        for (unsigned int row = 0; row<ny; row+=th)\n          for (unsigned int col = 0; col<nx; col+=tw) {\n            if (TIFFReadTile(tif,buf,col,row,0,0)<0) {\n              _TIFFfree(buf); TIFFClose(tif);\n              throw CImgIOException(_cimg_instance\n                                    \"load_tiff(): Invalid tile in file '%s'.\",\n                                    cimg_instance,\n                                    TIFFFileName(tif));\n            }\n            const t *ptr = buf;\n            for (unsigned int rr = row; rr<std::min((unsigned int)(row + th),(unsigned int)ny); ++rr)\n              for (unsigned int cc = col; cc<std::min((unsigned int)(col + tw),(unsigned int)nx); ++cc)\n                for (unsigned int vv = 0; vv<samplesperpixel; ++vv)\n                  (*this)(cc,rr,vv) = (T)(ptr[(rr - row)*th*samplesperpixel + (cc - col)*samplesperpixel + vv]);\n          }\n        _TIFFfree(buf);\n      }\n    }\n\n    template<typename t>\n    void _load_tiff_tiled_separate(TIFF *const tif, const uint16 samplesperpixel,\n                                   const uint32 nx, const uint32 ny, const uint32 tw, const uint32 th) {\n      t *const buf = (t*)_TIFFmalloc(TIFFTileSize(tif));\n      if (buf) {\n        for (unsigned int vv = 0; vv<samplesperpixel; ++vv)\n          for (unsigned int row = 0; row<ny; row+=th)\n            for (unsigned int col = 0; col<nx; col+=tw) {\n              if (TIFFReadTile(tif,buf,col,row,0,vv)<0) {\n                _TIFFfree(buf); TIFFClose(tif);\n                throw CImgIOException(_cimg_instance\n                                      \"load_tiff(): Invalid tile in file '%s'.\",\n                                      cimg_instance,\n                                      TIFFFileName(tif));\n              }\n              const t *ptr = buf;\n              for (unsigned int rr = row; rr<std::min((unsigned int)(row + th),(unsigned int)ny); ++rr)\n                for (unsigned int cc = col; cc<std::min((unsigned int)(col + tw),(unsigned int)nx); ++cc)\n                  (*this)(cc,rr,vv) = (T)*(ptr++);\n            }\n        _TIFFfree(buf);\n      }\n    }\n\n    template<typename t>\n    void _load_tiff_contig(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {\n      t *const buf = (t*)_TIFFmalloc(TIFFStripSize(tif));\n      if (buf) {\n        uint32 row, rowsperstrip = (uint32)-1;\n        TIFFGetField(tif,TIFFTAG_ROWSPERSTRIP,&rowsperstrip);\n        for (row = 0; row<ny; row+= rowsperstrip) {\n          uint32 nrow = (row + rowsperstrip>ny?ny - row:rowsperstrip);\n          tstrip_t strip = TIFFComputeStrip(tif, row, 0);\n          if ((TIFFReadEncodedStrip(tif,strip,buf,-1))<0) {\n            _TIFFfree(buf); TIFFClose(tif);\n            throw CImgIOException(_cimg_instance\n                                  \"load_tiff(): Invalid strip in file '%s'.\",\n                                  cimg_instance,\n                                  TIFFFileName(tif));\n          }\n          const t *ptr = buf;\n          for (unsigned int rr = 0; rr<nrow; ++rr)\n            for (unsigned int cc = 0; cc<nx; ++cc)\n              for (unsigned int vv = 0; vv<samplesperpixel; ++vv) (*this)(cc,row + rr,vv) = (T)*(ptr++);\n        }\n        _TIFFfree(buf);\n      }\n    }\n\n    template<typename t>\n    void _load_tiff_separate(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {\n      t *buf = (t*)_TIFFmalloc(TIFFStripSize(tif));\n      if (buf) {\n        uint32 row, rowsperstrip = (uint32)-1;\n        TIFFGetField(tif,TIFFTAG_ROWSPERSTRIP,&rowsperstrip);\n        for (unsigned int vv = 0; vv<samplesperpixel; ++vv)\n          for (row = 0; row<ny; row+= rowsperstrip) {\n            uint32 nrow = (row + rowsperstrip>ny?ny - row:rowsperstrip);\n            tstrip_t strip = TIFFComputeStrip(tif, row, vv);\n            if ((TIFFReadEncodedStrip(tif,strip,buf,-1))<0) {\n              _TIFFfree(buf); TIFFClose(tif);\n              throw CImgIOException(_cimg_instance\n                                    \"load_tiff(): Invalid strip in file '%s'.\",\n                                    cimg_instance,\n                                    TIFFFileName(tif));\n            }\n            const t *ptr = buf;\n            for (unsigned int rr = 0;rr<nrow; ++rr)\n              for (unsigned int cc = 0; cc<nx; ++cc)\n                (*this)(cc,row + rr,vv) = (T)*(ptr++);\n          }\n        _TIFFfree(buf);\n      }\n    }\n\n    CImg<T>& _load_tiff(TIFF *const tif, const unsigned int directory,\n                        float *const voxel_size, CImg<charT> *const description) {\n      if (!TIFFSetDirectory(tif,directory)) return assign();\n      uint16 samplesperpixel = 1, bitspersample = 8, photo = 0;\n      uint16 sampleformat = 1;\n      uint32 nx = 1, ny = 1;\n      const char *const filename = TIFFFileName(tif);\n      const bool is_spp = (bool)TIFFGetField(tif,TIFFTAG_SAMPLESPERPIXEL,&samplesperpixel);\n      TIFFGetField(tif,TIFFTAG_IMAGEWIDTH,&nx);\n      TIFFGetField(tif,TIFFTAG_IMAGELENGTH,&ny);\n      TIFFGetField(tif, TIFFTAG_SAMPLEFORMAT, &sampleformat);\n      TIFFGetFieldDefaulted(tif,TIFFTAG_BITSPERSAMPLE,&bitspersample);\n      TIFFGetField(tif,TIFFTAG_PHOTOMETRIC,&photo);\n      if (voxel_size) {\n        const char *s_description = 0;\n        float vx = 0, vy = 0, vz = 0;\n        if (TIFFGetField(tif,TIFFTAG_IMAGEDESCRIPTION,&s_description) && s_description) {\n          const char *s_desc = std::strstr(s_description,\"VX=\");\n          if (s_desc && cimg_sscanf(s_desc,\"VX=%f VY=%f VZ=%f\",&vx,&vy,&vz)==3) { // CImg format.\n            voxel_size[0] = vx; voxel_size[1] = vy; voxel_size[2] = vz;\n          }\n          s_desc = std::strstr(s_description,\"spacing=\");\n          if (s_desc && cimg_sscanf(s_desc,\"spacing=%f\",&vz)==1) { // fiji format.\n            voxel_size[2] = vz;\n          }\n        }\n        TIFFGetField(tif,TIFFTAG_XRESOLUTION,voxel_size);\n        TIFFGetField(tif,TIFFTAG_YRESOLUTION,voxel_size + 1);\n        voxel_size[0] = 1.0f/voxel_size[0];\n        voxel_size[1] = 1.0f/voxel_size[1];\n      }\n      if (description) {\n        const char *s_description = 0;\n        if (TIFFGetField(tif,TIFFTAG_IMAGEDESCRIPTION,&s_description) && s_description)\n          CImg<charT>::string(s_description).move_to(*description);\n      }\n      const unsigned int spectrum = !is_spp || photo>=3?(photo>1?3:1):samplesperpixel;\n      assign(nx,ny,1,spectrum);\n\n      if ((photo>=3 && sampleformat==1 &&\n           (bitspersample==4 || bitspersample==8) &&\n           (samplesperpixel==1 || samplesperpixel==3 || samplesperpixel==4)) ||\n          (bitspersample==1 && samplesperpixel==1)) {\n        // Special case for unsigned color images.\n        uint32 *const raster = (uint32*)_TIFFmalloc(nx*ny*sizeof(uint32));\n        if (!raster) {\n          _TIFFfree(raster); TIFFClose(tif);\n          throw CImgException(_cimg_instance\n                              \"load_tiff(): Failed to allocate memory (%s) for file '%s'.\",\n                              cimg_instance,\n                              cimg::strbuffersize(nx*ny*sizeof(uint32)),filename);\n        }\n        TIFFReadRGBAImage(tif,nx,ny,raster,0);\n        switch (spectrum) {\n        case 1 :\n          cimg_forXY(*this,x,y)\n            (*this)(x,y,0) = (T)(float)TIFFGetR(raster[nx*(ny - 1 -y) + x]);\n          break;\n        case 3 :\n          cimg_forXY(*this,x,y) {\n            (*this)(x,y,0) = (T)(float)TIFFGetR(raster[nx*(ny - 1 -y) + x]);\n            (*this)(x,y,1) = (T)(float)TIFFGetG(raster[nx*(ny - 1 -y) + x]);\n            (*this)(x,y,2) = (T)(float)TIFFGetB(raster[nx*(ny - 1 -y) + x]);\n          }\n          break;\n        case 4 :\n          cimg_forXY(*this,x,y) {\n            (*this)(x,y,0) = (T)(float)TIFFGetR(raster[nx*(ny - 1 - y) + x]);\n            (*this)(x,y,1) = (T)(float)TIFFGetG(raster[nx*(ny - 1 - y) + x]);\n            (*this)(x,y,2) = (T)(float)TIFFGetB(raster[nx*(ny - 1 - y) + x]);\n            (*this)(x,y,3) = (T)(float)TIFFGetA(raster[nx*(ny - 1 - y) + x]);\n          }\n          break;\n        }\n        _TIFFfree(raster);\n      } else { // Other cases.\n        uint16 config;\n        TIFFGetField(tif,TIFFTAG_PLANARCONFIG,&config);\n        if (TIFFIsTiled(tif)) {\n          uint32 tw = 1, th = 1;\n          TIFFGetField(tif,TIFFTAG_TILEWIDTH,&tw);\n          TIFFGetField(tif,TIFFTAG_TILELENGTH,&th);\n          if (config==PLANARCONFIG_CONTIG) switch (bitspersample) {\n            case 8 : {\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_contig<unsigned char>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_contig<signed char>(tif,samplesperpixel,nx,ny,tw,th);\n            } break;\n            case 16 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_contig<unsigned short>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_contig<short>(tif,samplesperpixel,nx,ny,tw,th);\n              break;\n            case 32 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_contig<unsigned int>(tif,samplesperpixel,nx,ny,tw,th);\n              else if (sampleformat==SAMPLEFORMAT_INT)\n                _load_tiff_tiled_contig<int>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_contig<float>(tif,samplesperpixel,nx,ny,tw,th);\n              break;\n            } else switch (bitspersample) {\n            case 8 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_separate<unsigned char>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_separate<signed char>(tif,samplesperpixel,nx,ny,tw,th);\n              break;\n            case 16 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_separate<unsigned short>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_separate<short>(tif,samplesperpixel,nx,ny,tw,th);\n              break;\n            case 32 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_tiled_separate<unsigned int>(tif,samplesperpixel,nx,ny,tw,th);\n              else if (sampleformat==SAMPLEFORMAT_INT)\n                _load_tiff_tiled_separate<int>(tif,samplesperpixel,nx,ny,tw,th);\n              else _load_tiff_tiled_separate<float>(tif,samplesperpixel,nx,ny,tw,th);\n              break;\n            }\n        } else {\n          if (config==PLANARCONFIG_CONTIG) switch (bitspersample) {\n            case 8 :\n              if (sampleformat==SAMPLEFORMAT_UINT)\n                _load_tiff_contig<unsigned char>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_contig<signed char>(tif,samplesperpixel,nx,ny);\n              break;\n            case 16 :\n              if (sampleformat==SAMPLEFORMAT_UINT) _load_tiff_contig<unsigned short>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_contig<short>(tif,samplesperpixel,nx,ny);\n              break;\n            case 32 :\n              if (sampleformat==SAMPLEFORMAT_UINT) _load_tiff_contig<unsigned int>(tif,samplesperpixel,nx,ny);\n              else if (sampleformat==SAMPLEFORMAT_INT) _load_tiff_contig<int>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_contig<float>(tif,samplesperpixel,nx,ny);\n              break;\n            } else switch (bitspersample) {\n            case 8 :\n              if (sampleformat==SAMPLEFORMAT_UINT) _load_tiff_separate<unsigned char>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_separate<signed char>(tif,samplesperpixel,nx,ny);\n              break;\n            case 16 :\n              if (sampleformat==SAMPLEFORMAT_UINT) _load_tiff_separate<unsigned short>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_separate<short>(tif,samplesperpixel,nx,ny);\n              break;\n            case 32 :\n              if (sampleformat==SAMPLEFORMAT_UINT) _load_tiff_separate<unsigned int>(tif,samplesperpixel,nx,ny);\n              else if (sampleformat==SAMPLEFORMAT_INT) _load_tiff_separate<int>(tif,samplesperpixel,nx,ny);\n              else _load_tiff_separate<float>(tif,samplesperpixel,nx,ny);\n              break;\n            }\n        }\n      }\n      return *this;\n    }\n#endif\n\n    //! Load image from a MINC2 file.\n    /**\n        \\param filename Filename, as a C-string.\n    **/\n    // (Original code by Haz-Edine Assemlal).\n    CImg<T>& load_minc2(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_minc2(): Specified filename is (null).\",\n                                    cimg_instance);\n#ifndef cimg_use_minc2\n      return load_other(filename);\n#else\n      minc::minc_1_reader rdr;\n      rdr.open(filename);\n      assign(rdr.ndim(1)?rdr.ndim(1):1,\n             rdr.ndim(2)?rdr.ndim(2):1,\n             rdr.ndim(3)?rdr.ndim(3):1,\n             rdr.ndim(4)?rdr.ndim(4):1);\n      if(typeid(T)==typeid(unsigned char))\n        rdr.setup_read_byte();\n      else if(typeid(T)==typeid(int))\n        rdr.setup_read_int();\n      else if(typeid(T)==typeid(double))\n        rdr.setup_read_double();\n      else\n        rdr.setup_read_float();\n      minc::load_standard_volume(rdr, this->_data);\n      return *this;\n#endif\n    }\n\n    //! Load image from a MINC2 file \\newinstance.\n    static CImg<T> get_load_minc2(const char *const filename) {\n      return CImg<T>().load_analyze(filename);\n    }\n\n    //! Load image from an ANALYZE7.5/NIFTI file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param[out] voxel_size Pointer to the three voxel sizes read from the file.\n    **/\n    CImg<T>& load_analyze(const char *const filename, float *const voxel_size=0) {\n      return _load_analyze(0,filename,voxel_size);\n    }\n\n    //! Load image from an ANALYZE7.5/NIFTI file \\newinstance.\n    static CImg<T> get_load_analyze(const char *const filename, float *const voxel_size=0) {\n      return CImg<T>().load_analyze(filename,voxel_size);\n    }\n\n    //! Load image from an ANALYZE7.5/NIFTI file \\overloading.\n    CImg<T>& load_analyze(std::FILE *const file, float *const voxel_size=0) {\n      return _load_analyze(file,0,voxel_size);\n    }\n\n    //! Load image from an ANALYZE7.5/NIFTI file \\newinstance.\n    static CImg<T> get_load_analyze(std::FILE *const file, float *const voxel_size=0) {\n      return CImg<T>().load_analyze(file,voxel_size);\n    }\n\n    CImg<T>& _load_analyze(std::FILE *const file, const char *const filename, float *const voxel_size=0) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_analyze(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *nfile_header = 0, *nfile = 0;\n      if (!file) {\n        CImg<charT> body(1024);\n        const char *const ext = cimg::split_filename(filename,body);\n        if (!cimg::strcasecmp(ext,\"hdr\")) { // File is an Analyze header file.\n          nfile_header = cimg::fopen(filename,\"rb\");\n          cimg_sprintf(body._data + std::strlen(body),\".img\");\n          nfile = cimg::fopen(body,\"rb\");\n        } else if (!cimg::strcasecmp(ext,\"img\")) { // File is an Analyze data file.\n          nfile = cimg::fopen(filename,\"rb\");\n          cimg_sprintf(body._data + std::strlen(body),\".hdr\");\n          nfile_header = cimg::fopen(body,\"rb\");\n        } else nfile_header = nfile = cimg::fopen(filename,\"rb\"); // File is a Niftii file.\n      } else nfile_header = nfile = file; // File is a Niftii file.\n      if (!nfile || !nfile_header)\n        throw CImgIOException(_cimg_instance\n                              \"load_analyze(): Invalid Analyze7.5 or NIFTI header in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n\n      // Read header.\n      bool endian = false;\n      unsigned int header_size;\n      cimg::fread(&header_size,1,nfile_header);\n      if (!header_size)\n        throw CImgIOException(_cimg_instance\n                              \"load_analyze(): Invalid zero-size header in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      if (header_size>=4096) { endian = true; cimg::invert_endianness(header_size); }\n\n      unsigned char *const header = new unsigned char[header_size];\n      cimg::fread(header + 4,header_size - 4,nfile_header);\n      if (!file && nfile_header!=nfile) cimg::fclose(nfile_header);\n      if (endian) {\n        cimg::invert_endianness((short*)(header + 40),5);\n        cimg::invert_endianness((short*)(header + 70),1);\n        cimg::invert_endianness((short*)(header + 72),1);\n        cimg::invert_endianness((float*)(header + 76),4);\n        cimg::invert_endianness((float*)(header + 108),1);\n        cimg::invert_endianness((float*)(header + 112),1);\n      }\n\n      if (nfile_header==nfile) {\n        const unsigned int vox_offset = (unsigned int)*(float*)(header + 108);\n        std::fseek(nfile,vox_offset,SEEK_SET);\n      }\n\n      unsigned short *dim = (unsigned short*)(header + 40), dimx = 1, dimy = 1, dimz = 1, dimv = 1;\n      if (!dim[0])\n        cimg::warn(_cimg_instance\n                   \"load_analyze(): File '%s' defines an image with zero dimensions.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      if (dim[0]>4)\n        cimg::warn(_cimg_instance\n                   \"load_analyze(): File '%s' defines an image with %u dimensions, reading only the 4 first.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\",dim[0]);\n\n      if (dim[0]>=1) dimx = dim[1];\n      if (dim[0]>=2) dimy = dim[2];\n      if (dim[0]>=3) dimz = dim[3];\n      if (dim[0]>=4) dimv = dim[4];\n      float scalefactor = *(float*)(header + 112); if (scalefactor==0) scalefactor = 1;\n      const unsigned short datatype = *(unsigned short*)(header + 70);\n      if (voxel_size) {\n        const float *vsize = (float*)(header + 76);\n        voxel_size[0] = vsize[1]; voxel_size[1] = vsize[2]; voxel_size[2] = vsize[3];\n      }\n      delete[] header;\n\n      // Read pixel data.\n      assign(dimx,dimy,dimz,dimv);\n      const size_t pdim = (size_t)dimx*dimy*dimz*dimv;\n      switch (datatype) {\n      case 2 : {\n        unsigned char *const buffer = new unsigned char[pdim];\n        cimg::fread(buffer,pdim,nfile);\n        cimg_foroff(*this,off) _data[off] = (T)(buffer[off]*scalefactor);\n        delete[] buffer;\n      } break;\n      case 4 : {\n        short *const buffer = new short[pdim];\n        cimg::fread(buffer,pdim,nfile);\n        if (endian) cimg::invert_endianness(buffer,pdim);\n        cimg_foroff(*this,off) _data[off] = (T)(buffer[off]*scalefactor);\n        delete[] buffer;\n      } break;\n      case 8 : {\n        int *const buffer = new int[pdim];\n        cimg::fread(buffer,pdim,nfile);\n        if (endian) cimg::invert_endianness(buffer,pdim);\n        cimg_foroff(*this,off) _data[off] = (T)(buffer[off]*scalefactor);\n        delete[] buffer;\n      } break;\n      case 16 : {\n        float *const buffer = new float[pdim];\n        cimg::fread(buffer,pdim,nfile);\n        if (endian) cimg::invert_endianness(buffer,pdim);\n        cimg_foroff(*this,off) _data[off] = (T)(buffer[off]*scalefactor);\n        delete[] buffer;\n      } break;\n      case 64 : {\n        double *const buffer = new double[pdim];\n        cimg::fread(buffer,pdim,nfile);\n        if (endian) cimg::invert_endianness(buffer,pdim);\n        cimg_foroff(*this,off) _data[off] = (T)(buffer[off]*scalefactor);\n        delete[] buffer;\n      } break;\n      default :\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_analyze(): Unable to load datatype %d in file '%s'\",\n                              cimg_instance,\n                              datatype,filename?filename:\"(FILE*)\");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a .cimg[z] file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    CImg<T>& load_cimg(const char *const filename, const char axis='z', const float align=0) {\n      CImgList<T> list;\n      list.load_cimg(filename);\n      if (list._width==1) return list[0].move_to(*this);\n      return assign(list.get_append(axis,align));\n    }\n\n    //! Load image from a .cimg[z] file \\newinstance\n    static CImg<T> get_load_cimg(const char *const filename, const char axis='z', const float align=0) {\n      return CImg<T>().load_cimg(filename,axis,align);\n    }\n\n    //! Load image from a .cimg[z] file \\overloading.\n    CImg<T>& load_cimg(std::FILE *const file, const char axis='z', const float align=0) {\n      CImgList<T> list;\n      list.load_cimg(file);\n      if (list._width==1) return list[0].move_to(*this);\n      return assign(list.get_append(axis,align));\n    }\n\n    //! Load image from a .cimg[z] file \\newinstance\n    static CImg<T> get_load_cimg(std::FILE *const file, const char axis='z', const float align=0) {\n      return CImg<T>().load_cimg(file,axis,align);\n    }\n\n    //! Load sub-images of a .cimg file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param n0 Starting frame.\n      \\param n1 Ending frame (~0U for max).\n      \\param x0 X-coordinate of the starting sub-image vertex.\n      \\param y0 Y-coordinate of the starting sub-image vertex.\n      \\param z0 Z-coordinate of the starting sub-image vertex.\n      \\param c0 C-coordinate of the starting sub-image vertex.\n      \\param x1 X-coordinate of the ending sub-image vertex (~0U for max).\n      \\param y1 Y-coordinate of the ending sub-image vertex (~0U for max).\n      \\param z1 Z-coordinate of the ending sub-image vertex (~0U for max).\n      \\param c1 C-coordinate of the ending sub-image vertex (~0U for max).\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    CImg<T>& load_cimg(const char *const filename,\n                       const unsigned int n0, const unsigned int n1,\n                       const unsigned int x0, const unsigned int y0,\n                       const unsigned int z0, const unsigned int c0,\n                       const unsigned int x1, const unsigned int y1,\n                       const unsigned int z1, const unsigned int c1,\n                       const char axis='z', const float align=0) {\n      CImgList<T> list;\n      list.load_cimg(filename,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n      if (list._width==1) return list[0].move_to(*this);\n      return assign(list.get_append(axis,align));\n    }\n\n    //! Load sub-images of a .cimg file \\newinstance.\n    static CImg<T> get_load_cimg(const char *const filename,\n                                 const unsigned int n0, const unsigned int n1,\n                                 const unsigned int x0, const unsigned int y0,\n                                 const unsigned int z0, const unsigned int c0,\n                                 const unsigned int x1, const unsigned int y1,\n                                 const unsigned int z1, const unsigned int c1,\n                                 const char axis='z', const float align=0) {\n      return CImg<T>().load_cimg(filename,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1,axis,align);\n    }\n\n    //! Load sub-images of a .cimg file \\overloading.\n    CImg<T>& load_cimg(std::FILE *const file,\n                       const unsigned int n0, const unsigned int n1,\n                       const unsigned int x0, const unsigned int y0,\n                       const unsigned int z0, const unsigned int c0,\n                       const unsigned int x1, const unsigned int y1,\n                       const unsigned int z1, const unsigned int c1,\n                       const char axis='z', const float align=0) {\n      CImgList<T> list;\n      list.load_cimg(file,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n      if (list._width==1) return list[0].move_to(*this);\n      return assign(list.get_append(axis,align));\n    }\n\n    //! Load sub-images of a .cimg file \\newinstance.\n    static CImg<T> get_load_cimg(std::FILE *const file,\n                                 const unsigned int n0, const unsigned int n1,\n                                 const unsigned int x0, const unsigned int y0,\n                                 const unsigned int z0, const unsigned int c0,\n                                 const unsigned int x1, const unsigned int y1,\n                                 const unsigned int z1, const unsigned int c1,\n                                 const char axis='z', const float align=0) {\n      return CImg<T>().load_cimg(file,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1,axis,align);\n    }\n\n    //! Load image from an INRIMAGE-4 file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param[out] voxel_size Pointer to the three voxel sizes read from the file.\n    **/\n    CImg<T>& load_inr(const char *const filename, float *const voxel_size=0) {\n      return _load_inr(0,filename,voxel_size);\n    }\n\n    //! Load image from an INRIMAGE-4 file \\newinstance.\n    static CImg<T> get_load_inr(const char *const filename, float *const voxel_size=0) {\n      return CImg<T>().load_inr(filename,voxel_size);\n    }\n\n    //! Load image from an INRIMAGE-4 file \\overloading.\n    CImg<T>& load_inr(std::FILE *const file, float *const voxel_size=0) {\n      return _load_inr(file,0,voxel_size);\n    }\n\n    //! Load image from an INRIMAGE-4 file \\newinstance.\n    static CImg<T> get_load_inr(std::FILE *const file, float *voxel_size=0) {\n      return CImg<T>().load_inr(file,voxel_size);\n    }\n\n    static void _load_inr_header(std::FILE *file, int out[8], float *const voxel_size) {\n      CImg<charT> item(1024), tmp1(64), tmp2(64);\n      *item = *tmp1 = *tmp2 = 0;\n      out[0] = std::fscanf(file,\"%63s\",item._data);\n      out[0] = out[1] = out[2] = out[3] = out[5] = 1; out[4] = out[6] = out[7] = -1;\n      if(cimg::strncasecmp(item,\"#INRIMAGE-4#{\",13)!=0)\n        throw CImgIOException(\"CImg<%s>::load_inr(): INRIMAGE-4 header not found.\",\n                              pixel_type());\n\n      while (std::fscanf(file,\" %63[^\\n]%*c\",item._data)!=EOF && std::strncmp(item,\"##}\",3)) {\n        cimg_sscanf(item,\" XDIM%*[^0-9]%d\",out);\n        cimg_sscanf(item,\" YDIM%*[^0-9]%d\",out + 1);\n        cimg_sscanf(item,\" ZDIM%*[^0-9]%d\",out + 2);\n        cimg_sscanf(item,\" VDIM%*[^0-9]%d\",out + 3);\n        cimg_sscanf(item,\" PIXSIZE%*[^0-9]%d\",out + 6);\n        if (voxel_size) {\n          cimg_sscanf(item,\" VX%*[^0-9.+-]%f\",voxel_size);\n          cimg_sscanf(item,\" VY%*[^0-9.+-]%f\",voxel_size + 1);\n          cimg_sscanf(item,\" VZ%*[^0-9.+-]%f\",voxel_size + 2);\n        }\n        if (cimg_sscanf(item,\" CPU%*[ =]%s\",tmp1._data)) out[7] = cimg::strncasecmp(tmp1,\"sun\",3)?0:1;\n        switch (cimg_sscanf(item,\" TYPE%*[ =]%s %s\",tmp1._data,tmp2._data)) {\n        case 0 : break;\n        case 2 : out[5] = cimg::strncasecmp(tmp1,\"unsigned\",8)?1:0; std::strncpy(tmp1,tmp2,tmp1._width - 1);\n        case 1 :\n          if (!cimg::strncasecmp(tmp1,\"int\",3) || !cimg::strncasecmp(tmp1,\"fixed\",5))  out[4] = 0;\n          if (!cimg::strncasecmp(tmp1,\"float\",5) || !cimg::strncasecmp(tmp1,\"double\",6)) out[4] = 1;\n          if (!cimg::strncasecmp(tmp1,\"packed\",6)) out[4] = 2;\n          if (out[4]>=0) break;\n        default :\n          throw CImgIOException(\"CImg<%s>::load_inr(): Invalid pixel type '%s' defined in header.\",\n                                pixel_type(),\n                                tmp2._data);\n        }\n      }\n      if(out[0]<0 || out[1]<0 || out[2]<0 || out[3]<0)\n        throw CImgIOException(\"CImg<%s>::load_inr(): Invalid dimensions (%d,%d,%d,%d) defined in header.\",\n                              pixel_type(),\n                              out[0],out[1],out[2],out[3]);\n      if(out[4]<0 || out[5]<0)\n        throw CImgIOException(\"CImg<%s>::load_inr(): Incomplete pixel type defined in header.\",\n                              pixel_type());\n      if(out[6]<0)\n        throw CImgIOException(\"CImg<%s>::load_inr(): Incomplete PIXSIZE field defined in header.\",\n                              pixel_type());\n      if(out[7]<0)\n        throw CImgIOException(\"CImg<%s>::load_inr(): Big/Little Endian coding type undefined in header.\",\n                              pixel_type());\n    }\n\n    CImg<T>& _load_inr(std::FILE *const file, const char *const filename, float *const voxel_size) {\n#define _cimg_load_inr_case(Tf,sign,pixsize,Ts) \\\n     if (!loaded && fopt[6]==pixsize && fopt[4]==Tf && fopt[5]==sign) { \\\n        Ts *xval, *const val = new Ts[(size_t)fopt[0]*fopt[3]]; \\\n        cimg_forYZ(*this,y,z) { \\\n            cimg::fread(val,fopt[0]*fopt[3],nfile); \\\n            if (fopt[7]!=endian) cimg::invert_endianness(val,fopt[0]*fopt[3]); \\\n            xval = val; cimg_forX(*this,x) cimg_forC(*this,c) (*this)(x,y,z,c) = (T)*(xval++); \\\n          } \\\n        delete[] val; \\\n        loaded = true; \\\n      }\n\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_inr(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      int fopt[8], endian = cimg::endianness()?1:0;\n      bool loaded = false;\n      if (voxel_size) voxel_size[0] = voxel_size[1] = voxel_size[2] = 1;\n      _load_inr_header(nfile,fopt,voxel_size);\n      assign(fopt[0],fopt[1],fopt[2],fopt[3]);\n      _cimg_load_inr_case(0,0,8,unsigned char);\n      _cimg_load_inr_case(0,1,8,char);\n      _cimg_load_inr_case(0,0,16,unsigned short);\n      _cimg_load_inr_case(0,1,16,short);\n      _cimg_load_inr_case(0,0,32,unsigned int);\n      _cimg_load_inr_case(0,1,32,int);\n      _cimg_load_inr_case(1,0,32,float);\n      _cimg_load_inr_case(1,1,32,float);\n      _cimg_load_inr_case(1,0,64,double);\n      _cimg_load_inr_case(1,1,64,double);\n      if (!loaded) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_inr(): Unknown pixel type defined in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a EXR file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_exr(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_exr(): Specified filename is (null).\",\n                                    cimg_instance);\n#if defined(cimg_use_openexr)\n      Imf::RgbaInputFile file(filename);\n      Imath::Box2i dw = file.dataWindow();\n      const int\n        inwidth = dw.max.x - dw.min.x + 1,\n        inheight = dw.max.y - dw.min.y + 1;\n      Imf::Array2D<Imf::Rgba> pixels;\n      pixels.resizeErase(inheight,inwidth);\n      file.setFrameBuffer(&pixels[0][0] - dw.min.x - dw.min.y*inwidth, 1, inwidth);\n      file.readPixels(dw.min.y, dw.max.y);\n      assign(inwidth,inheight,1,4);\n      T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2), *ptr_a = data(0,0,0,3);\n      cimg_forXY(*this,x,y) {\n        *(ptr_r++) = (T)pixels[y][x].r;\n        *(ptr_g++) = (T)pixels[y][x].g;\n        *(ptr_b++) = (T)pixels[y][x].b;\n        *(ptr_a++) = (T)pixels[y][x].a;\n      }\n#elif defined(cimg_use_tinexr)\n      float *res;\n      const char *err = 0;\n      int width = 0, height = 0;\n      const int ret = LoadEXR(&res,&width,&height,filename,&err);\n      if (ret) throw CImgIOException(_cimg_instance\n                                     \"load_exr(): Unable to load EXR file '%s'.\",\n                                     cimg_instance,filename);\n      CImg<floatT>(out,4,width,height,1,true).get_permute_axes(\"yzcx\").move_to(*this);\n      std::free(res);\n#else\n      return load_other(filename);\n#endif\n      return *this;\n    }\n\n    //! Load image from a EXR file \\newinstance.\n    static CImg<T> get_load_exr(const char *const filename) {\n      return CImg<T>().load_exr(filename);\n    }\n\n    //! Load image from a PANDORE-5 file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_pandore(const char *const filename) {\n      return _load_pandore(0,filename);\n    }\n\n    //! Load image from a PANDORE-5 file \\newinstance.\n    static CImg<T> get_load_pandore(const char *const filename) {\n      return CImg<T>().load_pandore(filename);\n    }\n\n    //! Load image from a PANDORE-5 file \\overloading.\n    CImg<T>& load_pandore(std::FILE *const file) {\n      return _load_pandore(file,0);\n    }\n\n    //! Load image from a PANDORE-5 file \\newinstance.\n    static CImg<T> get_load_pandore(std::FILE *const file) {\n      return CImg<T>().load_pandore(file);\n    }\n\n    CImg<T>& _load_pandore(std::FILE *const file, const char *const filename) {\n#define __cimg_load_pandore_case(nbdim,nwidth,nheight,ndepth,ndim,stype) \\\n        cimg::fread(dims,nbdim,nfile); \\\n        if (endian) cimg::invert_endianness(dims,nbdim); \\\n        assign(nwidth,nheight,ndepth,ndim); \\\n        const size_t siz = size(); \\\n        stype *buffer = new stype[siz]; \\\n        cimg::fread(buffer,siz,nfile); \\\n        if (endian) cimg::invert_endianness(buffer,siz); \\\n        T *ptrd = _data; \\\n        cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++); \\\n        buffer-=siz; \\\n        delete[] buffer\n\n#define _cimg_load_pandore_case(nbdim,nwidth,nheight,ndepth,dim,stype1,stype2,stype3,ltype) { \\\n        if (sizeof(stype1)==ltype) { __cimg_load_pandore_case(nbdim,nwidth,nheight,ndepth,dim,stype1); } \\\n        else if (sizeof(stype2)==ltype) { __cimg_load_pandore_case(nbdim,nwidth,nheight,ndepth,dim,stype2); } \\\n        else if (sizeof(stype3)==ltype) { __cimg_load_pandore_case(nbdim,nwidth,nheight,ndepth,dim,stype3); } \\\n        else throw CImgIOException(_cimg_instance \\\n                                   \"load_pandore(): Unknown pixel datatype in file '%s'.\", \\\n                                   cimg_instance, \\\n                                   filename?filename:\"(FILE*)\"); }\n\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_pandore(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      CImg<charT> header(32);\n      cimg::fread(header._data,12,nfile);\n      if (cimg::strncasecmp(\"PANDORE\",header,7)) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pandore(): PANDORE header not found in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      unsigned int imageid, dims[8] = { 0 };\n      int ptbuf[4] = { 0 };\n      cimg::fread(&imageid,1,nfile);\n      const bool endian = imageid>255;\n      if (endian) cimg::invert_endianness(imageid);\n      cimg::fread(header._data,20,nfile);\n\n      switch (imageid) {\n      case 2 : _cimg_load_pandore_case(2,dims[1],1,1,1,unsigned char,unsigned char,unsigned char,1); break;\n      case 3 : _cimg_load_pandore_case(2,dims[1],1,1,1,long,int,short,4); break;\n      case 4 : _cimg_load_pandore_case(2,dims[1],1,1,1,double,float,float,4); break;\n      case 5 : _cimg_load_pandore_case(3,dims[2],dims[1],1,1,unsigned char,unsigned char,unsigned char,1); break;\n      case 6 : _cimg_load_pandore_case(3,dims[2],dims[1],1,1,long,int,short,4); break;\n      case 7 : _cimg_load_pandore_case(3,dims[2],dims[1],1,1,double,float,float,4); break;\n      case 8 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],1,unsigned char,unsigned char,unsigned char,1); break;\n      case 9 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],1,long,int,short,4); break;\n      case 10 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],1,double,float,float,4); break;\n      case 11 : { // Region 1d\n        cimg::fread(dims,3,nfile);\n        if (endian) cimg::invert_endianness(dims,3);\n        assign(dims[1],1,1,1);\n        const unsigned siz = size();\n        if (dims[2]<256) {\n          unsigned char *buffer = new unsigned char[siz];\n          cimg::fread(buffer,siz,nfile);\n          T *ptrd = _data;\n          cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n          buffer-=siz;\n          delete[] buffer;\n        } else {\n          if (dims[2]<65536) {\n            unsigned short *buffer = new unsigned short[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          } else {\n            unsigned int *buffer = new unsigned int[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          }\n        }\n      }\n        break;\n      case 12 : { // Region 2d\n        cimg::fread(dims,4,nfile);\n        if (endian) cimg::invert_endianness(dims,4);\n        assign(dims[2],dims[1],1,1);\n        const size_t siz = size();\n        if (dims[3]<256) {\n          unsigned char *buffer = new unsigned char[siz];\n          cimg::fread(buffer,siz,nfile);\n          T *ptrd = _data;\n          cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n          buffer-=siz;\n          delete[] buffer;\n        } else {\n          if (dims[3]<65536) {\n            unsigned short *buffer = new unsigned short[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          } else {\n            unsigned int *buffer = new unsigned int[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          }\n        }\n      }\n        break;\n      case 13 : { // Region 3d\n        cimg::fread(dims,5,nfile);\n        if (endian) cimg::invert_endianness(dims,5);\n        assign(dims[3],dims[2],dims[1],1);\n        const size_t siz = size();\n        if (dims[4]<256) {\n          unsigned char *buffer = new unsigned char[siz];\n          cimg::fread(buffer,siz,nfile);\n          T *ptrd = _data;\n          cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n          buffer-=siz;\n          delete[] buffer;\n        } else {\n          if (dims[4]<65536) {\n            unsigned short *buffer = new unsigned short[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          } else {\n            unsigned int *buffer = new unsigned int[siz];\n            cimg::fread(buffer,siz,nfile);\n            if (endian) cimg::invert_endianness(buffer,siz);\n            T *ptrd = _data;\n            cimg_foroff(*this,off) *(ptrd++) = (T)*(buffer++);\n            buffer-=siz;\n            delete[] buffer;\n          }\n        }\n      }\n        break;\n      case 16 : _cimg_load_pandore_case(4,dims[2],dims[1],1,3,unsigned char,unsigned char,unsigned char,1); break;\n      case 17 : _cimg_load_pandore_case(4,dims[2],dims[1],1,3,long,int,short,4); break;\n      case 18 : _cimg_load_pandore_case(4,dims[2],dims[1],1,3,double,float,float,4); break;\n      case 19 : _cimg_load_pandore_case(5,dims[3],dims[2],dims[1],3,unsigned char,unsigned char,unsigned char,1); break;\n      case 20 : _cimg_load_pandore_case(5,dims[3],dims[2],dims[1],3,long,int,short,4); break;\n      case 21 : _cimg_load_pandore_case(5,dims[3],dims[2],dims[1],3,double,float,float,4); break;\n      case 22 : _cimg_load_pandore_case(2,dims[1],1,1,dims[0],unsigned char,unsigned char,unsigned char,1); break;\n      case 23 : _cimg_load_pandore_case(2,dims[1],1,1,dims[0],long,int,short,4);\n      case 24 : _cimg_load_pandore_case(2,dims[1],1,1,dims[0],unsigned long,unsigned int,unsigned short,4); break;\n      case 25 : _cimg_load_pandore_case(2,dims[1],1,1,dims[0],double,float,float,4); break;\n      case 26 : _cimg_load_pandore_case(3,dims[2],dims[1],1,dims[0],unsigned char,unsigned char,unsigned char,1); break;\n      case 27 : _cimg_load_pandore_case(3,dims[2],dims[1],1,dims[0],long,int,short,4); break;\n      case 28 : _cimg_load_pandore_case(3,dims[2],dims[1],1,dims[0],unsigned long,unsigned int,unsigned short,4); break;\n      case 29 : _cimg_load_pandore_case(3,dims[2],dims[1],1,dims[0],double,float,float,4); break;\n      case 30 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],dims[0],unsigned char,unsigned char,unsigned char,1);\n        break;\n      case 31 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],dims[0],long,int,short,4); break;\n      case 32 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],dims[0],unsigned long,unsigned int,unsigned short,4);\n        break;\n      case 33 : _cimg_load_pandore_case(4,dims[3],dims[2],dims[1],dims[0],double,float,float,4); break;\n      case 34 : { // Points 1d\n        cimg::fread(ptbuf,1,nfile);\n        if (endian) cimg::invert_endianness(ptbuf,1);\n        assign(1); (*this)(0) = (T)ptbuf[0];\n      } break;\n      case 35 : { // Points 2d\n        cimg::fread(ptbuf,2,nfile);\n        if (endian) cimg::invert_endianness(ptbuf,2);\n        assign(2); (*this)(0) = (T)ptbuf[1]; (*this)(1) = (T)ptbuf[0];\n      } break;\n      case 36 : { // Points 3d\n        cimg::fread(ptbuf,3,nfile);\n        if (endian) cimg::invert_endianness(ptbuf,3);\n        assign(3); (*this)(0) = (T)ptbuf[2]; (*this)(1) = (T)ptbuf[1]; (*this)(2) = (T)ptbuf[0];\n      } break;\n      default :\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_pandore(): Unable to load data with ID_type %u in file '%s'.\",\n                              cimg_instance,\n                              imageid,filename?filename:\"(FILE*)\");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image from a PAR-REC (Philips) file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    CImg<T>& load_parrec(const char *const filename, const char axis='c', const float align=0) {\n      CImgList<T> list;\n      list.load_parrec(filename);\n      if (list._width==1) return list[0].move_to(*this);\n      return assign(list.get_append(axis,align));\n    }\n\n    //! Load image from a PAR-REC (Philips) file \\newinstance.\n    static CImg<T> get_load_parrec(const char *const filename, const char axis='c', const float align=0) {\n      return CImg<T>().load_parrec(filename,axis,align);\n    }\n\n    //! Load image from a raw binary file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param size_x Width of the image buffer.\n      \\param size_y Height of the image buffer.\n      \\param size_z Depth of the image buffer.\n      \\param size_c Spectrum of the image buffer.\n      \\param is_multiplexed Tells if the image values are multiplexed along the C-axis.\n      \\param invert_endianness Tells if the endianness of the image buffer must be inverted.\n      \\param offset Starting offset of the read in the specified file.\n    **/\n    CImg<T>& load_raw(const char *const filename,\n                      const unsigned int size_x=0, const unsigned int size_y=1,\n                      const unsigned int size_z=1, const unsigned int size_c=1,\n                      const bool is_multiplexed=false, const bool invert_endianness=false,\n                      const ulongT offset=0) {\n      return _load_raw(0,filename,size_x,size_y,size_z,size_c,is_multiplexed,invert_endianness,offset);\n    }\n\n    //! Load image from a raw binary file \\newinstance.\n    static CImg<T> get_load_raw(const char *const filename,\n                                const unsigned int size_x=0, const unsigned int size_y=1,\n                                const unsigned int size_z=1, const unsigned int size_c=1,\n                                const bool is_multiplexed=false, const bool invert_endianness=false,\n                                const ulongT offset=0) {\n      return CImg<T>().load_raw(filename,size_x,size_y,size_z,size_c,is_multiplexed,invert_endianness,offset);\n    }\n\n    //! Load image from a raw binary file \\overloading.\n    CImg<T>& load_raw(std::FILE *const file,\n                      const unsigned int size_x=0, const unsigned int size_y=1,\n                      const unsigned int size_z=1, const unsigned int size_c=1,\n                      const bool is_multiplexed=false, const bool invert_endianness=false,\n                      const ulongT offset=0) {\n      return _load_raw(file,0,size_x,size_y,size_z,size_c,is_multiplexed,invert_endianness,offset);\n    }\n\n    //! Load image from a raw binary file \\newinstance.\n    static CImg<T> get_load_raw(std::FILE *const file,\n                                const unsigned int size_x=0, const unsigned int size_y=1,\n                                const unsigned int size_z=1, const unsigned int size_c=1,\n                                const bool is_multiplexed=false, const bool invert_endianness=false,\n                                const ulongT offset=0) {\n      return CImg<T>().load_raw(file,size_x,size_y,size_z,size_c,is_multiplexed,invert_endianness,offset);\n    }\n\n    CImg<T>& _load_raw(std::FILE *const file, const char *const filename,\n                       const unsigned int size_x, const unsigned int size_y,\n                       const unsigned int size_z, const unsigned int size_c,\n                       const bool is_multiplexed, const bool invert_endianness,\n                       const ulongT offset) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_raw(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (cimg::is_directory(filename))\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_raw(): Specified filename '%s' is a directory.\",\n                                    cimg_instance,filename);\n\n      ulongT siz = (ulongT)size_x*size_y*size_z*size_c;\n      unsigned int\n        _size_x = size_x,\n        _size_y = size_y,\n        _size_z = size_z,\n        _size_c = size_c;\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      if (!siz) {  // Retrieve file size.\n        const longT fpos = cimg::ftell(nfile);\n        if (fpos<0) throw CImgArgumentException(_cimg_instance\n                                                \"load_raw(): Cannot determine size of input file '%s'.\",\n                                                cimg_instance,filename?filename:\"(FILE*)\");\n        cimg::fseek(nfile,0,SEEK_END);\n        siz = cimg::ftell(nfile)/sizeof(T);\n                _size_y = (unsigned int)siz;\n        _size_x = _size_z = _size_c = 1;\n        cimg::fseek(nfile,fpos,SEEK_SET);\n      }\n      cimg::fseek(nfile,offset,SEEK_SET);\n      assign(_size_x,_size_y,_size_z,_size_c,0);\n      if (siz && (!is_multiplexed || size_c==1)) {\n        cimg::fread(_data,siz,nfile);\n        if (invert_endianness) cimg::invert_endianness(_data,siz);\n      } else if (siz) {\n        CImg<T> buf(1,1,1,_size_c);\n        cimg_forXYZ(*this,x,y,z) {\n          cimg::fread(buf._data,_size_c,nfile);\n          if (invert_endianness) cimg::invert_endianness(buf._data,_size_c);\n          set_vector_at(buf,x,y,z);\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load image sequence from a YUV file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param size_x Width of the frames.\n      \\param size_y Height of the frames.\n      \\param first_frame Index of the first frame to read.\n      \\param last_frame Index of the last frame to read.\n      \\param step_frame Step value for frame reading.\n      \\param yuv2rgb Tells if the YUV to RGB transform must be applied.\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n    **/\n    CImg<T>& load_yuv(const char *const filename,\n                      const unsigned int size_x, const unsigned int size_y=1,\n                      const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                      const unsigned int step_frame=1, const bool yuv2rgb=true, const char axis='z') {\n      return get_load_yuv(filename,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb,axis).move_to(*this);\n    }\n\n    //! Load image sequence from a YUV file \\newinstance.\n    static CImg<T> get_load_yuv(const char *const filename,\n                                const unsigned int size_x, const unsigned int size_y=1,\n                                const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                const unsigned int step_frame=1, const bool yuv2rgb=true, const char axis='z') {\n      return CImgList<T>().load_yuv(filename,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb).get_append(axis);\n    }\n\n    //! Load image sequence from a YUV file \\overloading.\n    CImg<T>& load_yuv(std::FILE *const file,\n                      const unsigned int size_x, const unsigned int size_y=1,\n                      const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                      const unsigned int step_frame=1, const bool yuv2rgb=true, const char axis='z') {\n      return get_load_yuv(file,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb,axis).move_to(*this);\n    }\n\n    //! Load image sequence from a YUV file \\newinstance.\n    static CImg<T> get_load_yuv(std::FILE *const file,\n                                const unsigned int size_x, const unsigned int size_y=1,\n                                const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                const unsigned int step_frame=1, const bool yuv2rgb=true, const char axis='z') {\n      return CImgList<T>().load_yuv(file,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb).get_append(axis);\n    }\n\n    //! Load 3d object from a .OFF file.\n    /**\n        \\param[out] primitives Primitives data of the 3d object.\n        \\param[out] colors Colors data of the 3d object.\n        \\param filename Filename, as a C-string.\n    **/\n    template<typename tf, typename tc>\n    CImg<T>& load_off(CImgList<tf>& primitives, CImgList<tc>& colors, const char *const filename) {\n      return _load_off(primitives,colors,0,filename);\n    }\n\n    //! Load 3d object from a .OFF file \\newinstance.\n    template<typename tf, typename tc>\n    static CImg<T> get_load_off(CImgList<tf>& primitives, CImgList<tc>& colors, const char *const filename) {\n      return CImg<T>().load_off(primitives,colors,filename);\n    }\n\n    //! Load 3d object from a .OFF file \\overloading.\n    template<typename tf, typename tc>\n    CImg<T>& load_off(CImgList<tf>& primitives, CImgList<tc>& colors, std::FILE *const file) {\n      return _load_off(primitives,colors,file,0);\n    }\n\n    //! Load 3d object from a .OFF file \\newinstance.\n    template<typename tf, typename tc>\n    static CImg<T> get_load_off(CImgList<tf>& primitives, CImgList<tc>& colors, std::FILE *const file) {\n      return CImg<T>().load_off(primitives,colors,file);\n    }\n\n    template<typename tf, typename tc>\n    CImg<T>& _load_off(CImgList<tf>& primitives, CImgList<tc>& colors,\n                       std::FILE *const file, const char *const filename) {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_off(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"r\");\n      unsigned int nb_points = 0, nb_primitives = 0, nb_read = 0;\n      CImg<charT> line(256); *line = 0;\n      int err;\n\n      // Skip comments, and read magic string OFF\n      do { err = std::fscanf(nfile,\"%255[^\\n] \",line._data); } while (!err || (err==1 && *line=='#'));\n      if (cimg::strncasecmp(line,\"OFF\",3) && cimg::strncasecmp(line,\"COFF\",4)) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_off(): OFF header not found in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      do { err = std::fscanf(nfile,\"%255[^\\n] \",line._data); } while (!err || (err==1 && *line=='#'));\n      if ((err = cimg_sscanf(line,\"%u%u%*[^\\n] \",&nb_points,&nb_primitives))!=2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"load_off(): Invalid number of vertices or primitives specified in file '%s'.\",\n                              cimg_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n\n      // Read points data\n      assign(nb_points,3);\n      float X = 0, Y = 0, Z = 0;\n      cimg_forX(*this,l) {\n        do { err = std::fscanf(nfile,\"%255[^\\n] \",line._data); } while (!err || (err==1 && *line=='#'));\n        if ((err = cimg_sscanf(line,\"%f%f%f%*[^\\n] \",&X,&Y,&Z))!=3) {\n          if (!file) cimg::fclose(nfile);\n          throw CImgIOException(_cimg_instance\n                                \"load_off(): Failed to read vertex %u/%u in file '%s'.\",\n                                cimg_instance,\n                                l + 1,nb_points,filename?filename:\"(FILE*)\");\n        }\n        (*this)(l,0) = (T)X; (*this)(l,1) = (T)Y; (*this)(l,2) = (T)Z;\n      }\n\n      // Read primitive data\n      primitives.assign();\n      colors.assign();\n      bool stop_flag = false;\n      while (!stop_flag) {\n        float c0 = 0.7f, c1 = 0.7f, c2 = 0.7f;\n        unsigned int prim = 0, i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;\n        *line = 0;\n        if ((err = std::fscanf(nfile,\"%u\",&prim))!=1) stop_flag = true;\n        else {\n          ++nb_read;\n          switch (prim) {\n          case 1 : {\n            if ((err = std::fscanf(nfile,\"%u%255[^\\n] \",&i0,line._data))<2) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0).move_to(primitives);\n              CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)).move_to(colors);\n            }\n          } break;\n          case 2 : {\n            if ((err = std::fscanf(nfile,\"%u%u%255[^\\n] \",&i0,&i1,line._data))<2) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i1).move_to(primitives);\n              CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)).move_to(colors);\n            }\n          } break;\n          case 3 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%255[^\\n] \",&i0,&i1,&i2,line._data))<3) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i2,i1).move_to(primitives);\n              CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)).move_to(colors);\n            }\n          } break;\n          case 4 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%u%255[^\\n] \",&i0,&i1,&i2,&i3,line._data))<4) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i3,i2,i1).move_to(primitives);\n              CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)).move_to(colors);\n            }\n          } break;\n          case 5 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%u%u%255[^\\n] \",&i0,&i1,&i2,&i3,&i4,line._data))<5) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i3,i2,i1).move_to(primitives);\n              CImg<tf>::vector(i0,i4,i3).move_to(primitives);\n              colors.insert(2,CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)));\n              ++nb_primitives;\n            }\n          } break;\n          case 6 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%u%u%u%255[^\\n] \",&i0,&i1,&i2,&i3,&i4,&i5,line._data))<6) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i3,i2,i1).move_to(primitives);\n              CImg<tf>::vector(i0,i5,i4,i3).move_to(primitives);\n              colors.insert(2,CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)));\n              ++nb_primitives;\n            }\n          } break;\n          case 7 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%u%u%u%u%255[^\\n] \",&i0,&i1,&i2,&i3,&i4,&i5,&i6,line._data))<7) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i4,i3,i1).move_to(primitives);\n              CImg<tf>::vector(i0,i6,i5,i4).move_to(primitives);\n              CImg<tf>::vector(i3,i2,i1).move_to(primitives);\n              colors.insert(3,CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)));\n              ++(++nb_primitives);\n            }\n          } break;\n          case 8 : {\n            if ((err = std::fscanf(nfile,\"%u%u%u%u%u%u%u%u%255[^\\n] \",&i0,&i1,&i2,&i3,&i4,&i5,&i6,&i7,line._data))<7) {\n              cimg::warn(_cimg_instance\n                         \"load_off(): Failed to read primitive %u/%u from file '%s'.\",\n                         cimg_instance,\n                         nb_read,nb_primitives,filename?filename:\"(FILE*)\");\n\n              err = std::fscanf(nfile,\"%*[^\\n] \");\n            } else {\n              err = cimg_sscanf(line,\"%f%f%f\",&c0,&c1,&c2);\n              CImg<tf>::vector(i0,i3,i2,i1).move_to(primitives);\n              CImg<tf>::vector(i0,i5,i4,i3).move_to(primitives);\n              CImg<tf>::vector(i0,i7,i6,i5).move_to(primitives);\n              colors.insert(3,CImg<tc>::vector((tc)(c0*255),(tc)(c1*255),(tc)(c2*255)));\n              ++(++nb_primitives);\n            }\n          } break;\n          default :\n            cimg::warn(_cimg_instance\n                       \"load_off(): Failed to read primitive %u/%u (%u vertices) from file '%s'.\",\n                       cimg_instance,\n                       nb_read,nb_primitives,prim,filename?filename:\"(FILE*)\");\n\n            err = std::fscanf(nfile,\"%*[^\\n] \");\n          }\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      if (primitives._width!=nb_primitives)\n        cimg::warn(_cimg_instance\n                   \"load_off(): Only %u/%u primitives read from file '%s'.\",\n                   cimg_instance,\n                   primitives._width,nb_primitives,filename?filename:\"(FILE*)\");\n      return *this;\n    }\n\n    //! Load image sequence from a video file, using OpenCV library.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param first_frame Index of the first frame to read.\n      \\param last_frame Index of the last frame to read.\n      \\param step_frame Step value for frame reading.\n    **/\n    CImg<T>& load_video(const char *const filename,\n                        const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                        const unsigned int step_frame=1,\n                        const char axis='z', const float align=0) {\n      return get_load_video(filename,first_frame,last_frame,step_frame,axis,align).move_to(*this);\n    }\n\n    //! Load image sequence from a video file, using OpenCV library \\newinstance.\n    static CImg<T> get_load_video(const char *const filename,\n                                  const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                  const unsigned int step_frame=1,\n                                  const char axis='z', const float align=0) {\n      return CImgList<T>().load_video(filename,first_frame,last_frame,step_frame).get_append(axis,align);\n    }\n\n    //! Load image sequence using FFMPEG's external tool 'ffmpeg'.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    CImg<T>& load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {\n      return get_load_ffmpeg_external(filename,axis,align).move_to(*this);\n    }\n\n    //! Load image sequence using FFMPEG's external tool 'ffmpeg' \\newinstance.\n    static CImg<T> get_load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {\n      return CImgList<T>().load_ffmpeg_external(filename).get_append(axis,align);\n    }\n\n    //! Load gif file, using Imagemagick or GraphicsMagicks's external tools.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param use_graphicsmagick Tells if GraphicsMagick's tool 'gm' is used instead of ImageMagick's tool 'convert'.\n      \\param axis Appending axis, if file contains multiple images. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    CImg<T>& load_gif_external(const char *const filename,\n                               const char axis='z', const float align=0) {\n      return get_load_gif_external(filename,axis,align).move_to(*this);\n    }\n\n    //! Load gif file, using ImageMagick or GraphicsMagick's external tool 'convert' \\newinstance.\n    static CImg<T> get_load_gif_external(const char *const filename,\n                                         const char axis='z', const float align=0) {\n      return CImgList<T>().load_gif_external(filename).get_append(axis,align);\n    }\n\n    //! Load image using GraphicsMagick's external tool 'gm'.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_graphicsmagick_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_graphicsmagick_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256);\n      std::FILE *file = 0;\n      const CImg<charT> s_filename = CImg<charT>::string(filename)._system_strescape();\n#if cimg_OS==1\n      cimg_snprintf(command,command._width,\"%s convert \\\"%s\\\" pnm:-\",\n                    cimg::graphicsmagick_path(),s_filename.data());\n      file = popen(command,\"r\");\n      if (file) {\n        const unsigned int omode = cimg::exception_mode();\n        cimg::exception_mode(0);\n        try { load_pnm(file); } catch (...) {\n          pclose(file);\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimg_instance\n                                \"load_graphicsmagick_external(): Failed to load file '%s' with external command 'gm'.\",\n                                cimg_instance,\n                                filename);\n        }\n        pclose(file);\n        return *this;\n      }\n#endif\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.pnm\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s convert \\\"%s\\\" \\\"%s\\\"\",\n                    cimg::graphicsmagick_path(),s_filename.data(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command,cimg::graphicsmagick_path());\n      if (!(file = std_fopen(filename_tmp,\"rb\"))) {\n        cimg::fclose(cimg::fopen(filename,\"r\"));\n        throw CImgIOException(_cimg_instance\n                              \"load_graphicsmagick_external(): Failed to load file '%s' with external command 'gm'.\",\n                              cimg_instance,\n                              filename);\n\n      } else cimg::fclose(file);\n      load_pnm(filename_tmp);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Load image using GraphicsMagick's external tool 'gm' \\newinstance.\n    static CImg<T> get_load_graphicsmagick_external(const char *const filename) {\n      return CImg<T>().load_graphicsmagick_external(filename);\n    }\n\n    //! Load gzipped image file, using external tool 'gunzip'.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_gzip_external(const char *const filename) {\n      if (!filename)\n        throw CImgIOException(_cimg_instance\n                              \"load_gzip_external(): Specified filename is (null).\",\n                              cimg_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      const char\n        *const ext = cimg::split_filename(filename,body),\n        *const ext2 = cimg::split_filename(body,0);\n\n      std::FILE *file = 0;\n      do {\n        if (!cimg::strcasecmp(ext,\"gz\")) {\n          if (*ext2) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                   cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext2);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        } else {\n          if (*ext) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                  cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        }\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s -c \\\"%s\\\" > \\\"%s\\\"\",\n                    cimg::gunzip_path(),\n                    CImg<charT>::string(filename)._system_strescape().data(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command);\n      if (!(file = std_fopen(filename_tmp,\"rb\"))) {\n        cimg::fclose(cimg::fopen(filename,\"r\"));\n        throw CImgIOException(_cimg_instance\n                              \"load_gzip_external(): Failed to load file '%s' with external command 'gunzip'.\",\n                              cimg_instance,\n                              filename);\n\n      } else cimg::fclose(file);\n      load(filename_tmp);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Load gzipped image file, using external tool 'gunzip' \\newinstance.\n    static CImg<T> get_load_gzip_external(const char *const filename) {\n      return CImg<T>().load_gzip_external(filename);\n    }\n\n    //! Load image using ImageMagick's external tool 'convert'.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_imagemagick_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_imagemagick_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256);\n      std::FILE *file = 0;\n      const CImg<charT> s_filename = CImg<charT>::string(filename)._system_strescape();\n#if cimg_OS==1\n      cimg_snprintf(command,command._width,\"%s%s \\\"%s\\\" pnm:-\",\n                    cimg::imagemagick_path(),\n                    !cimg::strcasecmp(cimg::split_filename(filename),\"pdf\")?\" -density 400x400\":\"\",\n                    s_filename.data());\n      file = popen(command,\"r\");\n      if (file) {\n        const unsigned int omode = cimg::exception_mode();\n        cimg::exception_mode(0);\n        try { load_pnm(file); } catch (...) {\n          pclose(file);\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimg_instance\n                                \"load_imagemagick_external(): Failed to load file '%s' with \"\n                                \"external command 'convert'.\",\n                                cimg_instance,\n                                filename);\n        }\n        pclose(file);\n        return *this;\n      }\n#endif\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.pnm\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s%s \\\"%s\\\" \\\"%s\\\"\",\n                    cimg::imagemagick_path(),\n                    !cimg::strcasecmp(cimg::split_filename(filename),\"pdf\")?\" -density 400x400\":\"\",\n                    s_filename.data(),CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command,cimg::imagemagick_path());\n      if (!(file = std_fopen(filename_tmp,\"rb\"))) {\n        cimg::fclose(cimg::fopen(filename,\"r\"));\n        throw CImgIOException(_cimg_instance\n                              \"load_imagemagick_external(): Failed to load file '%s' with external command 'convert'.\",\n                              cimg_instance,\n                              filename);\n\n      } else cimg::fclose(file);\n      load_pnm(filename_tmp);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Load image using ImageMagick's external tool 'convert' \\newinstance.\n    static CImg<T> get_load_imagemagick_external(const char *const filename) {\n      return CImg<T>().load_imagemagick_external(filename);\n    }\n\n    //! Load image from a DICOM file, using XMedcon's external tool 'medcon'.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_medcon_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_medcon_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      cimg::fclose(cimg::fopen(filename,\"r\"));\n      std::FILE *file = 0;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s.hdr\",cimg::filenamerand());\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s -w -c anlz -o \\\"%s\\\" -f \\\"%s\\\"\",\n                    cimg::medcon_path(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    CImg<charT>::string(filename)._system_strescape().data());\n      cimg::system(command);\n      cimg::split_filename(filename_tmp,body);\n\n      cimg_snprintf(command,command._width,\"%s.hdr\",body._data);\n      file = std_fopen(command,\"rb\");\n      if (!file) {\n        cimg_snprintf(command,command._width,\"m000-%s.hdr\",body._data);\n        file = std_fopen(command,\"rb\");\n        if (!file) {\n          throw CImgIOException(_cimg_instance\n                                \"load_medcon_external(): Failed to load file '%s' with external command 'medcon'.\",\n                                cimg_instance,\n                                filename);\n        }\n      }\n      cimg::fclose(file);\n      load_analyze(command);\n      std::remove(command);\n      cimg::split_filename(command,body);\n      cimg_snprintf(command,command._width,\"%s.img\",body._data);\n      std::remove(command);\n      return *this;\n    }\n\n    //! Load image from a DICOM file, using XMedcon's external tool 'medcon' \\newinstance.\n    static CImg<T> get_load_medcon_external(const char *const filename) {\n      return CImg<T>().load_medcon_external(filename);\n    }\n\n    //! Load image from a RAW Color Camera file, using external tool 'dcraw'.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_dcraw_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_dcraw_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256);\n      std::FILE *file = 0;\n      const CImg<charT> s_filename = CImg<charT>::string(filename)._system_strescape();\n#if cimg_OS==1\n      cimg_snprintf(command,command._width,\"%s -w -4 -c \\\"%s\\\"\",\n                    cimg::dcraw_path(),s_filename.data());\n      file = popen(command,\"r\");\n      if (file) {\n        const unsigned int omode = cimg::exception_mode();\n        cimg::exception_mode(0);\n        try { load_pnm(file); } catch (...) {\n          pclose(file);\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimg_instance\n                                \"load_dcraw_external(): Failed to load file '%s' with external command 'dcraw'.\",\n                                cimg_instance,\n                                filename);\n        }\n        pclose(file);\n        return *this;\n      }\n#endif\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.ppm\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s -w -4 -c \\\"%s\\\" > \\\"%s\\\"\",\n                    cimg::dcraw_path(),s_filename.data(),CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command,cimg::dcraw_path());\n      if (!(file = std_fopen(filename_tmp,\"rb\"))) {\n        cimg::fclose(cimg::fopen(filename,\"r\"));\n        throw CImgIOException(_cimg_instance\n                              \"load_dcraw_external(): Failed to load file '%s' with external command 'dcraw'.\",\n                              cimg_instance,\n                              filename);\n\n      } else cimg::fclose(file);\n      load_pnm(filename_tmp);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Load image from a RAW Color Camera file, using external tool 'dcraw' \\newinstance.\n    static CImg<T> get_load_dcraw_external(const char *const filename) {\n      return CImg<T>().load_dcraw_external(filename);\n    }\n\n    //! Load image from a camera stream, using OpenCV.\n    /**\n       \\param camera_index Index of the camera to capture images from.\n       \\param skip_frames Number of frames to skip before the capture.\n       \\param release_camera Tells if the camera ressource must be released at the end of the method.\n    **/\n    CImg<T>& load_camera(const unsigned int camera_index=0, const unsigned int skip_frames=0,\n                         const bool release_camera=true, const unsigned int capture_width=0,\n                         const unsigned int capture_height=0) {\n#ifdef cimg_use_opencv\n      if (camera_index>99)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_camera(): Invalid request for camera #%u \"\n                                    \"(no more than 100 cameras can be managed simultaneously).\",\n                                    cimg_instance,\n                                    camera_index);\n      static CvCapture *capture[100] = { 0 };\n      static unsigned int capture_w[100], capture_h[100];\n      if (release_camera) {\n        cimg::mutex(9);\n        if (capture[camera_index]) cvReleaseCapture(&(capture[camera_index]));\n        capture[camera_index] = 0;\n        capture_w[camera_index] = capture_h[camera_index] = 0;\n        cimg::mutex(9,0);\n        return *this;\n      }\n      if (!capture[camera_index]) {\n        cimg::mutex(9);\n        capture[camera_index] = cvCreateCameraCapture(camera_index);\n        capture_w[camera_index] = 0;\n        capture_h[camera_index] = 0;\n        cimg::mutex(9,0);\n        if (!capture[camera_index]) {\n          throw CImgIOException(_cimg_instance\n                                \"load_camera(): Failed to initialize camera #%u.\",\n                                cimg_instance,\n                                camera_index);\n        }\n      }\n      cimg::mutex(9);\n      if (capture_width!=capture_w[camera_index]) {\n        cvSetCaptureProperty(capture[camera_index],CV_CAP_PROP_FRAME_WIDTH,capture_width);\n        capture_w[camera_index] = capture_width;\n      }\n      if (capture_height!=capture_h[camera_index]) {\n        cvSetCaptureProperty(capture[camera_index],CV_CAP_PROP_FRAME_HEIGHT,capture_height);\n        capture_h[camera_index] = capture_height;\n      }\n      const IplImage *img = 0;\n      for (unsigned int i = 0; i<skip_frames; ++i) img = cvQueryFrame(capture[camera_index]);\n      img = cvQueryFrame(capture[camera_index]);\n      if (img) {\n        const int step = (int)(img->widthStep - 3*img->width);\n        assign(img->width,img->height,1,3);\n        const unsigned char* ptrs = (unsigned char*)img->imageData;\n        T *ptr_r = data(0,0,0,0), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2);\n        if (step>0) cimg_forY(*this,y) {\n            cimg_forX(*this,x) { *(ptr_b++) = (T)*(ptrs++); *(ptr_g++) = (T)*(ptrs++); *(ptr_r++) = (T)*(ptrs++); }\n            ptrs+=step;\n          } else for (ulongT siz = (ulongT)img->width*img->height; siz; --siz) {\n            *(ptr_b++) = (T)*(ptrs++); *(ptr_g++) = (T)*(ptrs++); *(ptr_r++) = (T)*(ptrs++);\n          }\n      }\n      cimg::mutex(9,0);\n      return *this;\n#else\n      cimg::unused(camera_index,skip_frames,release_camera,capture_width,capture_height);\n      throw CImgIOException(_cimg_instance\n                            \"load_camera(): This function requires the OpenCV library to run \"\n                            \"(macro 'cimg_use_opencv' must be defined).\",\n                            cimg_instance);\n#endif\n    }\n\n    //! Load image from a camera stream, using OpenCV \\newinstance.\n    static CImg<T> get_load_camera(const unsigned int camera_index=0, const unsigned int skip_frames=0,\n                                   const bool release_camera=true,\n                                   const unsigned int capture_width=0, const unsigned int capture_height=0) {\n      return CImg<T>().load_camera(camera_index,skip_frames,release_camera,capture_width,capture_height);\n    }\n\n    //! Load image using various non-native ways.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    CImg<T>& load_other(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"load_other(): Specified filename is (null).\",\n                                    cimg_instance);\n\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      try { load_magick(filename); }\n      catch (CImgException&) {\n        try { load_imagemagick_external(filename); }\n        catch (CImgException&) {\n          try { load_graphicsmagick_external(filename); }\n          catch (CImgException&) {\n            try { load_cimg(filename); }\n            catch (CImgException&) {\n              try {\n                std::fclose(cimg::fopen(filename,\"rb\"));\n              } catch (CImgException&) {\n                cimg::exception_mode(omode);\n                throw CImgIOException(_cimg_instance\n                                      \"load_other(): Failed to open file '%s'.\",\n                                      cimg_instance,\n                                      filename);\n              }\n              cimg::exception_mode(omode);\n              throw CImgIOException(_cimg_instance\n                                    \"load_other(): Failed to recognize format of file '%s'.\",\n                                    cimg_instance,\n                                    filename);\n            }\n          }\n        }\n      }\n      cimg::exception_mode(omode);\n      return *this;\n    }\n\n    //! Load image using various non-native ways \\newinstance.\n    static CImg<T> get_load_other(const char *const filename) {\n      return CImg<T>().load_other(filename);\n    }\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Data Output\n    //@{\n    //---------------------------\n\n    //! Display information about the image data.\n    /**\n       \\param title Name for the considered image.\n       \\param display_stats Tells to compute and display image statistics.\n    **/\n    const CImg<T>& print(const char *const title=0, const bool display_stats=true) const {\n\n      int xm = 0, ym = 0, zm = 0, vm = 0, xM = 0, yM = 0, zM = 0, vM = 0;\n      CImg<doubleT> st;\n      if (!is_empty() && display_stats) {\n        st = get_stats();\n        xm = (int)st[4]; ym = (int)st[5], zm = (int)st[6], vm = (int)st[7];\n        xM = (int)st[8]; yM = (int)st[9], zM = (int)st[10], vM = (int)st[11];\n      }\n\n      const ulongT siz = size(), msiz = siz*sizeof(T), siz1 = siz - 1,\n        mdisp = msiz<8*1024?0U:msiz<8*1024*1024?1U:2U, width1 = _width - 1;\n\n      CImg<charT> _title(64);\n      if (!title) cimg_snprintf(_title,_title._width,\"CImg<%s>\",pixel_type());\n\n      std::fprintf(cimg::output(),\"%s%s%s%s: %sthis%s = %p, %ssize%s = (%u,%u,%u,%u) [%lu %s], %sdata%s = (%s*)%p\",\n                   cimg::t_magenta,cimg::t_bold,title?title:_title._data,cimg::t_normal,\n                   cimg::t_bold,cimg::t_normal,(void*)this,\n                   cimg::t_bold,cimg::t_normal,_width,_height,_depth,_spectrum,\n                   (unsigned long)(mdisp==0?msiz:(mdisp==1?(msiz>>10):(msiz>>20))),\n                   mdisp==0?\"b\":(mdisp==1?\"Kio\":\"Mio\"),\n                   cimg::t_bold,cimg::t_normal,pixel_type(),(void*)begin());\n      if (_data)\n        std::fprintf(cimg::output(),\"..%p (%s) = [ \",(void*)((char*)end() - 1),_is_shared?\"shared\":\"non-shared\");\n      else std::fprintf(cimg::output(),\" (%s) = [ \",_is_shared?\"shared\":\"non-shared\");\n\n      if (!is_empty()) cimg_foroff(*this,off) {\n        std::fprintf(cimg::output(),\"%g\",(double)_data[off]);\n        if (off!=siz1) std::fprintf(cimg::output(),\"%s\",off%_width==width1?\" ; \":\" \");\n        if (off==7 && siz>16) { off = siz1 - 8; std::fprintf(cimg::output(),\"... \"); }\n      }\n      if (!is_empty() && display_stats)\n        std::fprintf(cimg::output(),\n                     \" ], %smin%s = %g, %smax%s = %g, %smean%s = %g, %sstd%s = %g, %scoords_min%s = (%u,%u,%u,%u), \"\n                     \"%scoords_max%s = (%u,%u,%u,%u).\\n\",\n                     cimg::t_bold,cimg::t_normal,st[0],\n                     cimg::t_bold,cimg::t_normal,st[1],\n                     cimg::t_bold,cimg::t_normal,st[2],\n                     cimg::t_bold,cimg::t_normal,std::sqrt(st[3]),\n                     cimg::t_bold,cimg::t_normal,xm,ym,zm,vm,\n                     cimg::t_bold,cimg::t_normal,xM,yM,zM,vM);\n      else std::fprintf(cimg::output(),\"%s].\\n\",is_empty()?\"\":\" \");\n      std::fflush(cimg::output());\n      return *this;\n    }\n\n    //! Display image into a CImgDisplay window.\n    /**\n       \\param disp Display window.\n    **/\n    const CImg<T>& display(CImgDisplay& disp) const {\n      disp.display(*this);\n      return *this;\n    }\n\n    //! Display image into a CImgDisplay window, in an interactive way.\n    /**\n        \\param disp Display window.\n        \\param display_info Tells if image information are displayed on the standard output.\n    **/\n    const CImg<T>& display(CImgDisplay &disp, const bool display_info, unsigned int *const XYZ=0,\n                           const bool exit_on_anykey=false) const {\n      return _display(disp,0,display_info,XYZ,exit_on_anykey,false);\n    }\n\n    //! Display image into an interactive window.\n    /**\n        \\param title Window title\n        \\param display_info Tells if image information are displayed on the standard output.\n    **/\n    const CImg<T>& display(const char *const title=0, const bool display_info=true, unsigned int *const XYZ=0,\n                           const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      return _display(disp,title,display_info,XYZ,exit_on_anykey,false);\n    }\n\n    const CImg<T>& _display(CImgDisplay &disp, const char *const title, const bool display_info,\n                            unsigned int *const XYZ, const bool exit_on_anykey,\n                            const bool exit_on_simpleclick) const {\n      unsigned int oldw = 0, oldh = 0, _XYZ[3] = { 0 }, key = 0;\n      int x0 = 0, y0 = 0, z0 = 0, x1 = width() - 1, y1 = height() - 1, z1 = depth() - 1,\n        old_mouse_x = -1, old_mouse_y = -1;\n\n      if (!disp) {\n        disp.assign(cimg_fitscreen(_width,_height,_depth),title?title:0,1);\n        if (!title) disp.set_title(\"CImg<%s> (%ux%ux%ux%u)\",pixel_type(),_width,_height,_depth,_spectrum);\n        else disp.set_title(\"%s\",title);\n      } else if (title) disp.set_title(\"%s\",title);\n      disp.show().flush();\n\n      const CImg<char> dtitle = CImg<char>::string(disp.title());\n      if (display_info) print(dtitle);\n\n      CImg<T> zoom;\n      for (bool reset_view = true, resize_disp = false, is_first_select = true; !key && !disp.is_closed(); ) {\n        if (reset_view) {\n          if (XYZ) { _XYZ[0] = XYZ[0]; _XYZ[1] = XYZ[1]; _XYZ[2] = XYZ[2]; }\n          else {\n            _XYZ[0] = (unsigned int)(x0 + x1)/2;\n            _XYZ[1] = (unsigned int)(y0 + y1)/2;\n            _XYZ[2] = (unsigned int)(z0 + z1)/2;\n          }\n          x0 = 0; y0 = 0; z0 = 0; x1 = width() - 1; y1 = height() - 1; z1 = depth() - 1;\n          oldw = disp._width; oldh = disp._height;\n          reset_view = false;\n        }\n        if (!x0 && !y0 && !z0 && x1==width() - 1 && y1==height() - 1 && z1==depth() - 1) {\n          if (is_empty()) zoom.assign(1,1,1,1,(T)0); else zoom.assign();\n        } else zoom = get_crop(x0,y0,z0,x1,y1,z1);\n\n        const CImg<T>& visu = zoom?zoom:*this;\n        const unsigned int\n          dx = 1U + x1 - x0, dy = 1U + y1 - y0, dz = 1U + z1 - z0,\n          tw = dx + (dz>1?dz:0U), th = dy + (dz>1?dz:0U);\n        if (!is_empty() && !disp.is_fullscreen() && resize_disp) {\n          const unsigned int\n            ttw = tw*disp.width()/oldw, tth = th*disp.height()/oldh,\n            dM = std::max(ttw,tth), diM = (unsigned int)std::max(disp.width(),disp.height()),\n            imgw = std::max(16U,ttw*diM/dM), imgh = std::max(16U,tth*diM/dM);\n          disp.set_fullscreen(false).resize(cimg_fitscreen(imgw,imgh,1),false);\n          resize_disp = false;\n        }\n        oldw = tw; oldh = th;\n\n        bool\n          go_up = false, go_down = false, go_left = false, go_right = false,\n          go_inc = false, go_dec = false, go_in = false, go_out = false,\n          go_in_center = false;\n\n        disp.set_title(\"%s\",dtitle._data);\n        if (_width>1 && visu._width==1) disp.set_title(\"%s | x=%u\",disp._title,x0);\n        if (_height>1 && visu._height==1) disp.set_title(\"%s | y=%u\",disp._title,y0);\n        if (_depth>1 && visu._depth==1) disp.set_title(\"%s | z=%u\",disp._title,z0);\n\n        if (!is_first_select) {\n          _XYZ[0] = (unsigned int)(x1 - x0)/2;\n          _XYZ[1] = (unsigned int)(y1 - y0)/2;\n          _XYZ[2] = (unsigned int)(z1 - z0)/2;\n        }\n\n        disp._mouse_x = old_mouse_x; disp._mouse_y = old_mouse_y;\n        const CImg<intT> selection = visu._select(disp,0,2,_XYZ,x0,y0,z0,true,is_first_select,_depth>1);\n        old_mouse_x = disp._mouse_x; old_mouse_y = disp._mouse_y;\n        is_first_select = false;\n\n        if (disp.wheel()) {\n          if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            go_down = !(go_up = disp.wheel()>0);\n          } else if (disp.is_keySHIFTLEFT() || disp.is_keySHIFTRIGHT()) {\n            go_left = !(go_right = disp.wheel()>0);\n          }\n          else if (disp.is_keyALT() || disp.is_keyALTGR() || _depth==1) {\n            go_out = !(go_in = disp.wheel()>0); go_in_center = false;\n          }\n          disp.set_wheel();\n        }\n\n        const int\n          sx0 = selection(0), sy0 = selection(1), sz0 = selection(2),\n          sx1 = selection(3), sy1 = selection(4), sz1 = selection(5);\n        if (sx0>=0 && sy0>=0 && sz0>=0 && sx1>=0 && sy1>=0 && sz1>=0) {\n          x1 = x0 + sx1; y1 = y0 + sy1; z1 = z0 + sz1;\n          x0+=sx0; y0+=sy0; z0+=sz0;\n          if (sx0==sx1 && sy0==sy1 && sz0==sz1) {\n            if (exit_on_simpleclick && (!zoom || is_empty())) break; else reset_view = true;\n          }\n          resize_disp = true;\n        } else switch (key = disp.key()) {\n#if cimg_OS!=2\n          case cimg::keyCTRLRIGHT : case cimg::keySHIFTRIGHT :\n#endif\n          case 0 : case cimg::keyCTRLLEFT : case cimg::keyPAD5 : case cimg::keySHIFTLEFT :\n#if cimg_OS!=2\n          case cimg::keyALTGR :\n#endif\n          case cimg::keyALT : key = 0; break;\n          case cimg::keyP : if (visu._depth>1 && (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT())) {\n              // Special mode: play stack of frames\n              const unsigned int\n                w1 = visu._width*disp.width()/(visu._width + (visu._depth>1?visu._depth:0)),\n                h1 = visu._height*disp.height()/(visu._height + (visu._depth>1?visu._depth:0));\n              float frame_timing = 5;\n              bool is_stopped = false;\n              disp.set_key(key,false).set_wheel().resize(cimg_fitscreen(w1,h1,1),false); key = 0;\n              for (unsigned int timer = 0; !key && !disp.is_closed() && !disp.button(); ) {\n                if (disp.is_resized()) disp.resize(false);\n                if (!timer) {\n                  visu.get_slice((int)_XYZ[2]).display(disp.set_title(\"%s | z=%d\",dtitle.data(),_XYZ[2]));\n                  (++_XYZ[2])%=visu._depth;\n                }\n                if (!is_stopped) { if (++timer>(unsigned int)frame_timing) timer = 0; } else timer = ~0U;\n                if (disp.wheel()) { frame_timing-=disp.wheel()/3.0f; disp.set_wheel(); }\n                switch (key = disp.key()) {\n#if cimg_OS!=2\n                case cimg::keyCTRLRIGHT :\n#endif\n                case cimg::keyCTRLLEFT : key = 0; break;\n                case cimg::keyPAGEUP : frame_timing-=0.3f; key = 0; break;\n                case cimg::keyPAGEDOWN : frame_timing+=0.3f; key = 0; break;\n                case cimg::keySPACE : is_stopped = !is_stopped; disp.set_key(key,false); key = 0; break;\n                case cimg::keyARROWLEFT : case cimg::keyARROWUP : is_stopped = true; timer = 0; key = 0; break;\n                case cimg::keyARROWRIGHT : case cimg::keyARROWDOWN : is_stopped = true;\n                  (_XYZ[2]+=visu._depth - 2)%=visu._depth; timer = 0; key = 0; break;\n                case cimg::keyD : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n                    disp.set_fullscreen(false).\n                      resize(CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,false),\n                             CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,true),false);\n                    disp.set_key(key,false); key = 0;\n                  } break;\n                case cimg::keyC : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n                    disp.set_fullscreen(false).\n                      resize(cimg_fitscreen(2*disp.width()/3,2*disp.height()/3,1),false).set_key(key,false); key = 0;\n                  } break;\n                case cimg::keyR : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n                    disp.set_fullscreen(false).\n                      resize(cimg_fitscreen(_width,_height,_depth),false).set_key(key,false); key = 0;\n                  } break;\n                case cimg::keyF : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n                    disp.resize(disp.screen_width(),disp.screen_height(),false).\n                      toggle_fullscreen().set_key(key,false); key = 0;\n                  } break;\n                }\n                frame_timing = frame_timing<1?1:(frame_timing>39?39:frame_timing);\n                disp.wait(20);\n              }\n              const unsigned int\n                w2 = (visu._width + (visu._depth>1?visu._depth:0))*disp.width()/visu._width,\n                h2 = (visu._height + (visu._depth>1?visu._depth:0))*disp.height()/visu._height;\n              disp.resize(cimg_fitscreen(w2,h2,1),false).set_title(dtitle.data()).set_key().set_button().set_wheel();\n              key = 0;\n            } break;\n          case cimg::keyHOME : reset_view = resize_disp = true; key = 0; break;\n          case cimg::keyPADADD : go_in = true; go_in_center = true; key = 0; break;\n          case cimg::keyPADSUB : go_out = true; key = 0; break;\n          case cimg::keyARROWLEFT : case cimg::keyPAD4: go_left = true; key = 0; break;\n          case cimg::keyARROWRIGHT : case cimg::keyPAD6: go_right = true; key = 0; break;\n          case cimg::keyARROWUP : case cimg::keyPAD8: go_up = true; key = 0; break;\n          case cimg::keyARROWDOWN : case cimg::keyPAD2: go_down = true; key = 0; break;\n          case cimg::keyPAD7 : go_up = go_left = true; key = 0; break;\n          case cimg::keyPAD9 : go_up = go_right = true; key = 0; break;\n          case cimg::keyPAD1 : go_down = go_left = true; key = 0; break;\n          case cimg::keyPAD3 : go_down = go_right = true; key = 0; break;\n          case cimg::keyPAGEUP : go_inc = true; key = 0; break;\n          case cimg::keyPAGEDOWN : go_dec = true; key = 0; break;\n          }\n        if (go_in) {\n          const int\n            mx = go_in_center?disp.width()/2:disp.mouse_x(),\n            my = go_in_center?disp.height()/2:disp.mouse_y(),\n            mX = mx*(width() + (depth()>1?depth():0))/disp.width(),\n            mY = my*(height() + (depth()>1?depth():0))/disp.height();\n          int X = (int)_XYZ[0], Y = (int)_XYZ[1], Z = (int)_XYZ[2];\n          if (mX<width() && mY<height())  {\n            X = x0 + mX*(1 + x1 - x0)/width(); Y = y0 + mY*(1 + y1 - y0)/height(); Z = (int)_XYZ[2];\n          }\n          if (mX<width() && mY>=height()) {\n            X = x0 + mX*(1 + x1 - x0)/width(); Z = z0 + (mY - height())*(1 + z1 - z0)/depth(); Y = (int)_XYZ[1];\n          }\n          if (mX>=width() && mY<height()) {\n            Y = y0 + mY*(1 + y1 - y0)/height(); Z = z0 + (mX - width())*(1 + z1 - z0)/depth(); X = (int)_XYZ[0];\n          }\n          if (x1 - x0>4) { x0 = X - 3*(X - x0)/4; x1 = X + 3*(x1 - X)/4; }\n          if (y1 - y0>4) { y0 = Y - 3*(Y - y0)/4; y1 = Y + 3*(y1 - Y)/4; }\n          if (z1 - z0>4) { z0 = Z - 3*(Z - z0)/4; z1 = Z + 3*(z1 - Z)/4; }\n        }\n        if (go_out) {\n          const int\n            delta_x = (x1 - x0)/8, delta_y = (y1 - y0)/8, delta_z = (z1 - z0)/8,\n            ndelta_x = delta_x?delta_x:(_width>1),\n            ndelta_y = delta_y?delta_y:(_height>1),\n            ndelta_z = delta_z?delta_z:(_depth>1);\n          x0-=ndelta_x; y0-=ndelta_y; z0-=ndelta_z;\n          x1+=ndelta_x; y1+=ndelta_y; z1+=ndelta_z;\n          if (x0<0) { x1-=x0; x0 = 0; if (x1>=width()) x1 = width() - 1; }\n          if (y0<0) { y1-=y0; y0 = 0; if (y1>=height()) y1 = height() - 1; }\n          if (z0<0) { z1-=z0; z0 = 0; if (z1>=depth()) z1 = depth() - 1; }\n          if (x1>=width()) { x0-=(x1 - width() + 1); x1 = width() - 1; if (x0<0) x0 = 0; }\n          if (y1>=height()) { y0-=(y1 - height() + 1); y1 = height() - 1; if (y0<0) y0 = 0; }\n          if (z1>=depth()) { z0-=(z1 - depth() + 1); z1 = depth() - 1; if (z0<0) z0 = 0; }\n          const float\n            ratio = (float)(x1-x0)/(y1-y0),\n            ratiow = (float)disp._width/disp._height,\n            sub = std::min(cimg::abs(ratio - ratiow),cimg::abs(1/ratio-1/ratiow));\n          if (sub>0.01) resize_disp = true;\n        }\n        if (go_left) {\n          const int delta = (x1 - x0)/4, ndelta = delta?delta:(_width>1);\n          if (x0 - ndelta>=0) { x0-=ndelta; x1-=ndelta; }\n          else { x1-=x0; x0 = 0; }\n        }\n        if (go_right) {\n          const int delta = (x1 - x0)/4, ndelta = delta?delta:(_width>1);\n          if (x1+ndelta<width()) { x0+=ndelta; x1+=ndelta; }\n          else { x0+=(width() - 1 - x1); x1 = width() - 1; }\n        }\n        if (go_up) {\n          const int delta = (y1 - y0)/4, ndelta = delta?delta:(_height>1);\n          if (y0 - ndelta>=0) { y0-=ndelta; y1-=ndelta; }\n          else { y1-=y0; y0 = 0; }\n        }\n        if (go_down) {\n          const int delta = (y1 - y0)/4, ndelta = delta?delta:(_height>1);\n          if (y1+ndelta<height()) { y0+=ndelta; y1+=ndelta; }\n          else { y0+=(height() - 1 - y1); y1 = height() - 1; }\n        }\n        if (go_inc) {\n          const int delta = (z1 - z0)/4, ndelta = delta?delta:(_depth>1);\n          if (z0 - ndelta>=0) { z0-=ndelta; z1-=ndelta; }\n          else { z1-=z0; z0 = 0; }\n        }\n        if (go_dec) {\n          const int delta = (z1 - z0)/4, ndelta = delta?delta:(_depth>1);\n          if (z1+ndelta<depth()) { z0+=ndelta; z1+=ndelta; }\n          else { z0+=(depth() - 1 - z1); z1 = depth() - 1; }\n        }\n        disp.wait(100);\n        if (!exit_on_anykey && key && key!=cimg::keyESC &&\n            (key!=cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          key = 0;\n        }\n      }\n      disp.set_key(key);\n      if (XYZ) { XYZ[0] = _XYZ[0]; XYZ[1] = _XYZ[1]; XYZ[2] = _XYZ[2]; }\n      return *this;\n    }\n\n    //! Display object 3d in an interactive window.\n    /**\n       \\param disp Display window.\n       \\param vertices Vertices data of the 3d object.\n       \\param primitives Primitives data of the 3d object.\n       \\param colors Colors data of the 3d object.\n       \\param opacities Opacities data of the 3d object.\n       \\param centering Tells if the 3d object must be centered for the display.\n       \\param render_static Rendering mode.\n       \\param render_motion Rendering mode, when the 3d object is moved.\n       \\param is_double_sided Tells if the object primitives are double-sided.\n       \\param focale Focale\n       \\param light_x X-coordinate of the light source.\n       \\param light_y Y-coordinate of the light source.\n       \\param light_z Z-coordinate of the light source.\n       \\param specular_lightness Amount of specular light.\n       \\param specular_shininess Shininess of the object material.\n       \\param display_axes Tells if the 3d axes are displayed.\n       \\param pose_matrix Pointer to 12 values, defining a 3d pose (as a 4x3 matrix).\n    **/\n    template<typename tp, typename tf, typename tc, typename to>\n    const CImg<T>& display_object3d(CImgDisplay& disp,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const CImgList<tc>& colors,\n                                    const to& opacities,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return _display_object3d(disp,0,vertices,primitives,colors,opacities,centering,render_static,\n                               render_motion,is_double_sided,focale,\n                               light_x,light_y,light_z,specular_lightness,specular_shininess,\n                               display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp, typename tf, typename tc, typename to>\n    const CImg<T>& display_object3d(const char *const title,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const CImgList<tc>& colors,\n                                    const to& opacities,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      return _display_object3d(disp,title,vertices,primitives,colors,opacities,centering,render_static,\n                               render_motion,is_double_sided,focale,\n                               light_x,light_y,light_z,specular_lightness,specular_shininess,\n                               display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp, typename tf, typename tc>\n    const CImg<T>& display_object3d(CImgDisplay &disp,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const CImgList<tc>& colors,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(disp,vertices,primitives,colors,CImgList<floatT>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp, typename tf, typename tc>\n    const CImg<T>& display_object3d(const char *const title,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const CImgList<tc>& colors,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(title,vertices,primitives,colors,CImgList<floatT>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp, typename tf>\n    const CImg<T>& display_object3d(CImgDisplay &disp,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(disp,vertices,primitives,CImgList<T>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp, typename tf>\n    const CImg<T>& display_object3d(const char *const title,\n                                    const CImg<tp>& vertices,\n                                    const CImgList<tf>& primitives,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(title,vertices,primitives,CImgList<T>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp>\n    const CImg<T>& display_object3d(CImgDisplay &disp,\n                                    const CImg<tp>& vertices,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(disp,vertices,CImgList<uintT>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    //! Display object 3d in an interactive window \\simplification.\n    template<typename tp>\n    const CImg<T>& display_object3d(const char *const title,\n                                    const CImg<tp>& vertices,\n                                    const bool centering=true,\n                                    const int render_static=4, const int render_motion=1,\n                                    const bool is_double_sided=true, const float focale=700,\n                                    const float light_x=0, const float light_y=0, const float light_z=-5e8f,\n                                    const float specular_lightness=0.2f, const float specular_shininess=0.1f,\n                                    const bool display_axes=true, float *const pose_matrix=0,\n                                    const bool exit_on_anykey=false) const {\n      return display_object3d(title,vertices,CImgList<uintT>(),centering,\n                              render_static,render_motion,is_double_sided,focale,\n                              light_x,light_y,light_z,specular_lightness,specular_shininess,\n                              display_axes,pose_matrix,exit_on_anykey);\n    }\n\n    template<typename tp, typename tf, typename tc, typename to>\n    const CImg<T>& _display_object3d(CImgDisplay& disp, const char *const title,\n                                     const CImg<tp>& vertices,\n                                     const CImgList<tf>& primitives,\n                                     const CImgList<tc>& colors,\n                                     const to& opacities,\n                                     const bool centering,\n                                     const int render_static, const int render_motion,\n                                     const bool is_double_sided, const float focale,\n                                     const float light_x, const float light_y, const float light_z,\n                                     const float specular_lightness, const float specular_shininess,\n                                     const bool display_axes, float *const pose_matrix,\n                                     const bool exit_on_anykey) const {\n      typedef typename cimg::superset<tp,float>::type tpfloat;\n\n      // Check input arguments\n      if (is_empty()) {\n        if (disp) return CImg<T>(disp.width(),disp.height(),1,(colors && colors[0].size()==1)?1:3,0).\n                    _display_object3d(disp,title,vertices,primitives,colors,opacities,centering,\n                                      render_static,render_motion,is_double_sided,focale,\n                                      light_x,light_y,light_z,specular_lightness,specular_shininess,\n                                      display_axes,pose_matrix,exit_on_anykey);\n        else return CImg<T>(1,2,1,1,64,128).resize(cimg_fitscreen(CImgDisplay::screen_width()/2,\n                                                                  CImgDisplay::screen_height()/2,1),\n                                                   1,(colors && colors[0].size()==1)?1:3,3).\n               _display_object3d(disp,title,vertices,primitives,colors,opacities,centering,\n                                 render_static,render_motion,is_double_sided,focale,\n                                 light_x,light_y,light_z,specular_lightness,specular_shininess,\n                                 display_axes,pose_matrix,exit_on_anykey);\n      } else { if (disp) disp.resize(*this,false); }\n      CImg<charT> error_message(1024);\n      if (!vertices.is_object3d(primitives,colors,opacities,true,error_message))\n        throw CImgArgumentException(_cimg_instance\n                                    \"display_object3d(): Invalid specified 3d object (%u,%u) (%s).\",\n                                    cimg_instance,vertices._width,primitives._width,error_message.data());\n      if (vertices._width && !primitives) {\n        CImgList<tf> nprimitives(vertices._width,1,1,1,1);\n        cimglist_for(nprimitives,l) nprimitives(l,0) = (tf)l;\n        return _display_object3d(disp,title,vertices,nprimitives,colors,opacities,centering,\n                                 render_static,render_motion,is_double_sided,focale,\n                                 light_x,light_y,light_z,specular_lightness,specular_shininess,\n                                 display_axes,pose_matrix,exit_on_anykey);\n      }\n      if (!disp) {\n        disp.assign(cimg_fitscreen(_width,_height,_depth),title?title:0,3);\n        if (!title) disp.set_title(\"CImg<%s> (%u vertices, %u primitives)\",\n                                   pixel_type(),vertices._width,primitives._width);\n      } else if (title) disp.set_title(\"%s\",title);\n\n      // Init 3d objects and compute object statistics\n      CImg<floatT>\n        pose,\n        rotated_vertices(vertices._width,3),\n        bbox_vertices, rotated_bbox_vertices,\n        axes_vertices, rotated_axes_vertices,\n        bbox_opacities, axes_opacities;\n      CImgList<uintT> bbox_primitives, axes_primitives;\n      CImgList<tf> reverse_primitives;\n      CImgList<T> bbox_colors, bbox_colors2, axes_colors;\n      unsigned int ns_width = 0, ns_height = 0;\n      int _is_double_sided = (int)is_double_sided;\n      bool ndisplay_axes = display_axes;\n      const CImg<T>\n        background_color(1,1,1,_spectrum,0),\n        foreground_color(1,1,1,_spectrum,255);\n      float\n        Xoff = 0, Yoff = 0, Zoff = 0, sprite_scale = 1,\n        xm = 0, xM = vertices?vertices.get_shared_row(0).max_min(xm):0,\n        ym = 0, yM = vertices?vertices.get_shared_row(1).max_min(ym):0,\n        zm = 0, zM = vertices?vertices.get_shared_row(2).max_min(zm):0;\n      const float delta = cimg::max(xM - xm,yM - ym,zM - zm);\n\n      rotated_bbox_vertices = bbox_vertices.assign(8,3,1,1,\n                                                   xm,xM,xM,xm,xm,xM,xM,xm,\n                                                   ym,ym,yM,yM,ym,ym,yM,yM,\n                                                   zm,zm,zm,zm,zM,zM,zM,zM);\n      bbox_primitives.assign(6,1,4,1,1, 0,3,2,1, 4,5,6,7, 1,2,6,5, 0,4,7,3, 0,1,5,4, 2,3,7,6);\n      bbox_colors.assign(6,_spectrum,1,1,1,background_color[0]);\n      bbox_colors2.assign(6,_spectrum,1,1,1,foreground_color[0]);\n      bbox_opacities.assign(bbox_colors._width,1,1,1,0.3f);\n\n      rotated_axes_vertices = axes_vertices.assign(7,3,1,1,\n                                                   0,20,0,0,22,-6,-6,\n                                                   0,0,20,0,-6,22,-6,\n                                                   0,0,0,20,0,0,22);\n      axes_opacities.assign(3,1,1,1,1);\n      axes_colors.assign(3,_spectrum,1,1,1,foreground_color[0]);\n      axes_primitives.assign(3,1,2,1,1, 0,1, 0,2, 0,3);\n\n      // Begin user interaction loop\n      CImg<T> visu0(*this), visu;\n      CImg<tpfloat> zbuffer(visu0.width(),visu0.height(),1,1,0);\n      bool init_pose = true, clicked = false, redraw = true;\n      unsigned int key = 0;\n      int\n        x0 = 0, y0 = 0, x1 = 0, y1 = 0,\n        nrender_static = render_static,\n        nrender_motion = render_motion;\n      disp.show().flush();\n\n      while (!disp.is_closed() && !key) {\n\n        // Init object pose\n        if (init_pose) {\n          const float\n            ratio = delta>0?(2.0f*std::min(disp.width(),disp.height())/(3.0f*delta)):1,\n            dx = (xM + xm)/2, dy = (yM + ym)/2, dz = (zM + zm)/2;\n          if (centering)\n            CImg<floatT>(4,3,1,1, ratio,0.,0.,-ratio*dx, 0.,ratio,0.,-ratio*dy, 0.,0.,ratio,-ratio*dz).move_to(pose);\n          else CImg<floatT>(4,3,1,1, 1,0,0,0, 0,1,0,0, 0,0,1,0).move_to(pose);\n          if (pose_matrix) {\n            CImg<floatT> pose0(pose_matrix,4,3,1,1,false);\n            pose0.resize(4,4,1,1,0); pose.resize(4,4,1,1,0);\n            pose0(3,3) = pose(3,3) = 1;\n            (pose0*pose).get_crop(0,0,3,2).move_to(pose);\n            Xoff = pose_matrix[12]; Yoff = pose_matrix[13]; Zoff = pose_matrix[14]; sprite_scale = pose_matrix[15];\n          } else { Xoff = Yoff = Zoff = 0; sprite_scale = 1; }\n          init_pose = false;\n          redraw = true;\n        }\n\n        // Rotate and draw 3d object\n        if (redraw) {\n          const float\n            r00 = pose(0,0), r10 = pose(1,0), r20 = pose(2,0), r30 = pose(3,0),\n            r01 = pose(0,1), r11 = pose(1,1), r21 = pose(2,1), r31 = pose(3,1),\n            r02 = pose(0,2), r12 = pose(1,2), r22 = pose(2,2), r32 = pose(3,2);\n          if ((clicked && nrender_motion>=0) || (!clicked && nrender_static>=0))\n            cimg_forX(vertices,l) {\n              const float x = (float)vertices(l,0), y = (float)vertices(l,1), z = (float)vertices(l,2);\n              rotated_vertices(l,0) = r00*x + r10*y + r20*z + r30;\n              rotated_vertices(l,1) = r01*x + r11*y + r21*z + r31;\n              rotated_vertices(l,2) = r02*x + r12*y + r22*z + r32;\n            }\n          else cimg_forX(bbox_vertices,l) {\n              const float x = bbox_vertices(l,0), y = bbox_vertices(l,1), z = bbox_vertices(l,2);\n              rotated_bbox_vertices(l,0) = r00*x + r10*y + r20*z + r30;\n              rotated_bbox_vertices(l,1) = r01*x + r11*y + r21*z + r31;\n              rotated_bbox_vertices(l,2) = r02*x + r12*y + r22*z + r32;\n            }\n\n          // Draw objects\n          const bool render_with_zbuffer = !clicked && nrender_static>0;\n          visu = visu0;\n          if ((clicked && nrender_motion<0) || (!clicked && nrender_static<0))\n            visu.draw_object3d(Xoff + visu._width/2.0f,Yoff + visu._height/2.0f,Zoff,\n                               rotated_bbox_vertices,bbox_primitives,bbox_colors,bbox_opacities,2,false,focale).\n              draw_object3d(Xoff + visu._width/2.0f,Yoff + visu._height/2.0f,Zoff,\n                            rotated_bbox_vertices,bbox_primitives,bbox_colors2,1,false,focale);\n          else visu._draw_object3d((void*)0,render_with_zbuffer?zbuffer.fill(0):CImg<tpfloat>::empty(),\n                                   Xoff + visu._width/2.0f,Yoff + visu._height/2.0f,Zoff,\n                                   rotated_vertices,reverse_primitives?reverse_primitives:primitives,\n                                   colors,opacities,clicked?nrender_motion:nrender_static,_is_double_sided==1,focale,\n                                   width()/2.0f + light_x,height()/2.0f + light_y,light_z + Zoff,\n                                   specular_lightness,specular_shininess,sprite_scale);\n          // Draw axes\n          if (ndisplay_axes) {\n            const float\n              n = 1e-8f + cimg::hypot(r00,r01,r02),\n              _r00 = r00/n, _r10 = r10/n, _r20 = r20/n,\n              _r01 = r01/n, _r11 = r11/n, _r21 = r21/n,\n              _r02 = r01/n, _r12 = r12/n, _r22 = r22/n,\n              Xaxes = 25, Yaxes = visu._height - 38.0f;\n            cimg_forX(axes_vertices,l) {\n              const float\n                x = axes_vertices(l,0),\n                y = axes_vertices(l,1),\n                z = axes_vertices(l,2);\n              rotated_axes_vertices(l,0) = _r00*x + _r10*y + _r20*z;\n              rotated_axes_vertices(l,1) = _r01*x + _r11*y + _r21*z;\n              rotated_axes_vertices(l,2) = _r02*x + _r12*y + _r22*z;\n            }\n            axes_opacities(0,0) = (rotated_axes_vertices(1,2)>0)?0.5f:1.0f;\n            axes_opacities(1,0) = (rotated_axes_vertices(2,2)>0)?0.5f:1.0f;\n            axes_opacities(2,0) = (rotated_axes_vertices(3,2)>0)?0.5f:1.0f;\n            visu.draw_object3d(Xaxes,Yaxes,0,rotated_axes_vertices,axes_primitives,\n                               axes_colors,axes_opacities,1,false,focale).\n              draw_text((int)(Xaxes + rotated_axes_vertices(4,0)),\n                        (int)(Yaxes + rotated_axes_vertices(4,1)),\n                        \"X\",axes_colors[0]._data,0,axes_opacities(0,0),13).\n              draw_text((int)(Xaxes + rotated_axes_vertices(5,0)),\n                        (int)(Yaxes + rotated_axes_vertices(5,1)),\n                        \"Y\",axes_colors[1]._data,0,axes_opacities(1,0),13).\n              draw_text((int)(Xaxes + rotated_axes_vertices(6,0)),\n                        (int)(Yaxes + rotated_axes_vertices(6,1)),\n                        \"Z\",axes_colors[2]._data,0,axes_opacities(2,0),13);\n          }\n          visu.display(disp);\n          if (!clicked || nrender_motion==nrender_static) redraw = false;\n        }\n\n        // Handle user interaction\n        disp.wait();\n        if ((disp.button() || disp.wheel()) && disp.mouse_x()>=0 && disp.mouse_y()>=0) {\n          redraw = true;\n          if (!clicked) { x0 = x1 = disp.mouse_x(); y0 = y1 = disp.mouse_y(); if (!disp.wheel()) clicked = true; }\n          else { x1 = disp.mouse_x(); y1 = disp.mouse_y(); }\n          if (disp.button()&1) {\n            const float\n              R = 0.45f*std::min(disp.width(),disp.height()),\n              R2 = R*R,\n              u0 = (float)(x0 - disp.width()/2),\n              v0 = (float)(y0 - disp.height()/2),\n              u1 = (float)(x1 - disp.width()/2),\n              v1 = (float)(y1 - disp.height()/2),\n              n0 = cimg::hypot(u0,v0),\n              n1 = cimg::hypot(u1,v1),\n              nu0 = n0>R?(u0*R/n0):u0,\n              nv0 = n0>R?(v0*R/n0):v0,\n              nw0 = (float)std::sqrt(std::max(0.0f,R2 - nu0*nu0 - nv0*nv0)),\n              nu1 = n1>R?(u1*R/n1):u1,\n              nv1 = n1>R?(v1*R/n1):v1,\n              nw1 = (float)std::sqrt(std::max(0.0f,R2 - nu1*nu1 - nv1*nv1)),\n              u = nv0*nw1 - nw0*nv1,\n              v = nw0*nu1 - nu0*nw1,\n              w = nv0*nu1 - nu0*nv1,\n              n = cimg::hypot(u,v,w),\n              alpha = (float)std::asin(n/R2)*180/cimg::PI;\n            (CImg<floatT>::rotation_matrix(u,v,w,-alpha)*pose).move_to(pose);\n            x0 = x1; y0 = y1;\n          }\n          if (disp.button()&2) {\n            if (focale>0) Zoff-=(y0 - y1)*focale/400;\n            else { const float s = std::exp((y0 - y1)/400.0f); pose*=s; sprite_scale*=s; }\n            x0 = x1; y0 = y1;\n          }\n          if (disp.wheel()) {\n            if (focale>0) Zoff-=disp.wheel()*focale/20;\n            else { const float s = std::exp(disp.wheel()/20.0f); pose*=s; sprite_scale*=s; }\n            disp.set_wheel();\n          }\n          if (disp.button()&4) { Xoff+=(x1 - x0); Yoff+=(y1 - y0); x0 = x1; y0 = y1; }\n          if ((disp.button()&1) && (disp.button()&2)) {\n            init_pose = true; disp.set_button(); x0 = x1; y0 = y1;\n            pose = CImg<floatT>(4,3,1,1, 1,0,0,0, 0,1,0,0, 0,0,1,0);\n          }\n        } else if (clicked) { x0 = x1; y0 = y1; clicked = false; redraw = true; }\n\n        CImg<charT> filename(32);\n        switch (key = disp.key()) {\n#if cimg_OS!=2\n        case cimg::keyCTRLRIGHT :\n#endif\n        case 0 : case cimg::keyCTRLLEFT : key = 0; break;\n        case cimg::keyD: if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,false),\n                     CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,true),false).\n              _is_resized = true;\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyC : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(cimg_fitscreen(2*disp.width()/3,2*disp.height()/3,1),false)._is_resized = true;\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyR : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).resize(cimg_fitscreen(_width,_height,_depth),false)._is_resized = true;\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyF : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            if (!ns_width || !ns_height ||\n                ns_width>(unsigned int)disp.screen_width() || ns_height>(unsigned int)disp.screen_height()) {\n              ns_width = disp.screen_width()*3U/4;\n              ns_height = disp.screen_height()*3U/4;\n            }\n            if (disp.is_fullscreen()) disp.resize(ns_width,ns_height,false);\n            else {\n              ns_width = disp._width; ns_height = disp._height;\n              disp.resize(disp.screen_width(),disp.screen_height(),false);\n            }\n            disp.toggle_fullscreen()._is_resized = true;\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyT : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            // Switch single/double-sided primitives.\n            if (--_is_double_sided==-2) _is_double_sided = 1;\n            if (_is_double_sided>=0) reverse_primitives.assign();\n            else primitives.get_reverse_object3d().move_to(reverse_primitives);\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyZ : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Enable/disable Z-buffer\n            if (zbuffer) zbuffer.assign();\n            else zbuffer.assign(visu0.width(),visu0.height(),1,1,0);\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyA : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Show/hide 3d axes.\n            ndisplay_axes = !ndisplay_axes;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF1 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Set rendering mode to points.\n            nrender_motion = (nrender_static==0 && nrender_motion!=0)?0:-1; nrender_static = 0;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF2 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Set rendering mode to lines.\n            nrender_motion = (nrender_static==1 && nrender_motion!=1)?1:-1; nrender_static = 1;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF3 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Set rendering mode to flat.\n            nrender_motion = (nrender_static==2 && nrender_motion!=2)?2:-1; nrender_static = 2;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF4 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Set rendering mode to flat-shaded.\n            nrender_motion = (nrender_static==3 && nrender_motion!=3)?3:-1; nrender_static = 3;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF5 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            // Set rendering mode to gouraud-shaded.\n            nrender_motion = (nrender_static==4 && nrender_motion!=4)?4:-1; nrender_static = 4;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyF6 : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Set rendering mode to phong-shaded.\n            nrender_motion = (nrender_static==5 && nrender_motion!=5)?5:-1; nrender_static = 5;\n            disp.set_key(key,false); key = 0; redraw = true;\n          } break;\n        case cimg::keyS : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Save snapshot\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.bmp\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu).draw_text(0,0,\" Saving snapshot... \",\n                              foreground_color._data,background_color._data,0.7f,13).display(disp);\n            visu.save(filename);\n            (+visu).draw_text(0,0,\" Snapshot '%s' saved. \",\n                              foreground_color._data,background_color._data,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyG : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Save object as a .off file\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.off\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu).draw_text(0,0,\" Saving object... \",\n                              foreground_color._data,background_color._data,0.7f,13).display(disp);\n            vertices.save_off(reverse_primitives?reverse_primitives:primitives,colors,filename);\n            (+visu).draw_text(0,0,\" Object '%s' saved. \",\n                              foreground_color._data,background_color._data,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyO : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Save object as a .cimg file\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n#ifdef cimg_use_zlib\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimgz\",snap_number++);\n#else\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimg\",snap_number++);\n#endif\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu).draw_text(0,0,\" Saving object... \",\n                              foreground_color._data,background_color._data,0.7f,13).display(disp);\n            vertices.get_object3dtoCImg3d(reverse_primitives?reverse_primitives:primitives,colors,opacities).\n              save(filename);\n            (+visu).draw_text(0,0,\" Object '%s' saved. \",\n                              foreground_color._data,background_color._data,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n#ifdef cimg_use_board\n        case cimg::keyP : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Save object as a .EPS file\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.eps\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu).draw_text(0,0,\" Saving EPS snapshot... \",\n                              foreground_color._data,background_color._data,0.7f,13).display(disp);\n            LibBoard::Board board;\n            (+visu)._draw_object3d(&board,zbuffer.fill(0),\n                                   Xoff + visu._width/2.0f,Yoff + visu._height/2.0f,Zoff,\n                                   rotated_vertices,reverse_primitives?reverse_primitives:primitives,\n                                   colors,opacities,clicked?nrender_motion:nrender_static,\n                                   _is_double_sided==1,focale,\n                                   visu.width()/2.0f + light_x,visu.height()/2.0f + light_y,light_z + Zoff,\n                                   specular_lightness,specular_shininess,\n                                   sprite_scale);\n            board.saveEPS(filename);\n            (+visu).draw_text(0,0,\" Object '%s' saved. \",\n                              foreground_color._data,background_color._data,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n        case cimg::keyV : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) { // Save object as a .SVG file\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.svg\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu).draw_text(0,0,\" Saving SVG snapshot... \",\n                              foreground_color._data,background_color._data,0.7f,13).display(disp);\n            LibBoard::Board board;\n            (+visu)._draw_object3d(&board,zbuffer.fill(0),\n                                   Xoff + visu._width/2.0f,Yoff + visu._height/2.0f,Zoff,\n                                   rotated_vertices,reverse_primitives?reverse_primitives:primitives,\n                                   colors,opacities,clicked?nrender_motion:nrender_static,\n                                   _is_double_sided==1,focale,\n                                   visu.width()/2.0f + light_x,visu.height()/2.0f + light_y,light_z + Zoff,\n                                   specular_lightness,specular_shininess,\n                                   sprite_scale);\n            board.saveSVG(filename);\n            (+visu).draw_text(0,0,\" Object '%s' saved. \",\n                              foreground_color._data,background_color._data,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false); key = 0;\n          } break;\n#endif\n        }\n        if (disp.is_resized()) {\n          disp.resize(false); visu0 = get_resize(disp,1);\n          if (zbuffer) zbuffer.assign(disp.width(),disp.height());\n          redraw = true;\n        }\n        if (!exit_on_anykey && key && key!=cimg::keyESC &&\n            (key!=cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          key = 0;\n        }\n      }\n      if (pose_matrix) {\n        std::memcpy(pose_matrix,pose._data,12*sizeof(float));\n        pose_matrix[12] = Xoff; pose_matrix[13] = Yoff; pose_matrix[14] = Zoff; pose_matrix[15] = sprite_scale;\n      }\n      disp.set_button().set_key(key);\n      return *this;\n    }\n\n    //! Display 1d graph in an interactive window.\n    /**\n       \\param disp Display window.\n       \\param plot_type Plot type. Can be <tt>{ 0=points | 1=segments | 2=splines | 3=bars }</tt>.\n       \\param vertex_type Vertex type.\n       \\param labelx Title for the horizontal axis, as a C-string.\n       \\param xmin Minimum value along the X-axis.\n       \\param xmax Maximum value along the X-axis.\n       \\param labely Title for the vertical axis, as a C-string.\n       \\param ymin Minimum value along the X-axis.\n       \\param ymax Maximum value along the X-axis.\n    **/\n    const CImg<T>& display_graph(CImgDisplay &disp,\n                                 const unsigned int plot_type=1, const unsigned int vertex_type=1,\n                                 const char *const labelx=0, const double xmin=0, const double xmax=0,\n                                 const char *const labely=0, const double ymin=0, const double ymax=0,\n                                 const bool exit_on_anykey=false) const {\n      return _display_graph(disp,0,plot_type,vertex_type,labelx,xmin,xmax,labely,ymin,ymax,exit_on_anykey);\n    }\n\n    //! Display 1d graph in an interactive window \\overloading.\n    const CImg<T>& display_graph(const char *const title=0,\n                                 const unsigned int plot_type=1, const unsigned int vertex_type=1,\n                                 const char *const labelx=0, const double xmin=0, const double xmax=0,\n                                 const char *const labely=0, const double ymin=0, const double ymax=0,\n                                 const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      return _display_graph(disp,title,plot_type,vertex_type,labelx,xmin,xmax,labely,ymin,ymax,exit_on_anykey);\n    }\n\n    const CImg<T>& _display_graph(CImgDisplay &disp, const char *const title=0,\n                                  const unsigned int plot_type=1, const unsigned int vertex_type=1,\n                                  const char *const labelx=0, const double xmin=0, const double xmax=0,\n                                  const char *const labely=0, const double ymin=0, const double ymax=0,\n                                  const bool exit_on_anykey=false) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"display_graph(): Empty instance.\",\n                                    cimg_instance);\n      if (!disp) disp.assign(cimg_fitscreen(CImgDisplay::screen_width()/2,CImgDisplay::screen_height()/2,1),0,0).\n                   set_title(title?\"%s\":\"CImg<%s>\",title?title:pixel_type());\n      const ulongT siz = (ulongT)_width*_height*_depth, siz1 = std::max((ulongT)1,siz - 1);\n      const unsigned int old_normalization = disp.normalization();\n      disp.show().flush()._normalization = 0;\n\n      double y0 = ymin, y1 = ymax, nxmin = xmin, nxmax = xmax;\n      if (nxmin==nxmax) { nxmin = 0; nxmax = siz1; }\n      int x0 = 0, x1 = width()*height()*depth() - 1, key = 0;\n\n      for (bool reset_view = true; !key && !disp.is_closed(); ) {\n        if (reset_view) { x0 = 0; x1 = width()*height()*depth() - 1; y0 = ymin; y1 = ymax; reset_view = false; }\n        CImg<T> zoom(x1 - x0 + 1,1,1,spectrum());\n        cimg_forC(*this,c) zoom.get_shared_channel(c) = CImg<T>(data(x0,0,0,c),x1 - x0 + 1,1,1,1,true);\n        if (y0==y1) { y0 = zoom.min_max(y1); const double dy = y1 - y0; y0-=dy/20; y1+=dy/20; }\n        if (y0==y1) { --y0; ++y1; }\n\n        const CImg<intT> selection = zoom.get_select_graph(disp,plot_type,vertex_type,\n                                                           labelx,\n                                                           nxmin + x0*(nxmax - nxmin)/siz1,\n                                                           nxmin + x1*(nxmax - nxmin)/siz1,\n                                                           labely,y0,y1,true);\n        const int mouse_x = disp.mouse_x(), mouse_y = disp.mouse_y();\n        if (selection[0]>=0) {\n          if (selection[2]<0) reset_view = true;\n          else {\n            x1 = x0 + selection[2]; x0+=selection[0];\n            if (selection[1]>=0 && selection[3]>=0) {\n              y0 = y1 - selection[3]*(y1 - y0)/(disp.height() - 32);\n              y1-=selection[1]*(y1 - y0)/(disp.height() - 32);\n            }\n          }\n        } else {\n          bool go_in = false, go_out = false, go_left = false, go_right = false, go_up = false, go_down = false;\n          switch (key = (int)disp.key()) {\n          case cimg::keyHOME : reset_view = true; key = 0; disp.set_key(); break;\n          case cimg::keyPADADD : go_in = true; go_out = false; key = 0; disp.set_key(); break;\n          case cimg::keyPADSUB : go_out = true; go_in = false; key = 0; disp.set_key(); break;\n          case cimg::keyARROWLEFT : case cimg::keyPAD4 : go_left = true; go_right = false; key = 0; disp.set_key();\n            break;\n          case cimg::keyARROWRIGHT : case cimg::keyPAD6 : go_right = true; go_left = false; key = 0; disp.set_key();\n            break;\n          case cimg::keyARROWUP : case cimg::keyPAD8 : go_up = true; go_down = false; key = 0; disp.set_key(); break;\n          case cimg::keyARROWDOWN : case cimg::keyPAD2 : go_down = true; go_up = false; key = 0; disp.set_key(); break;\n          case cimg::keyPAD7 : go_left = true; go_up = true; key = 0; disp.set_key(); break;\n          case cimg::keyPAD9 : go_right = true; go_up = true; key = 0; disp.set_key(); break;\n          case cimg::keyPAD1 : go_left = true; go_down = true; key = 0; disp.set_key(); break;\n          case cimg::keyPAD3 : go_right = true; go_down = true; key = 0; disp.set_key(); break;\n          }\n          if (disp.wheel()) {\n            if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) go_up = !(go_down = disp.wheel()<0);\n            else if (disp.is_keySHIFTLEFT() || disp.is_keySHIFTRIGHT()) go_left = !(go_right = disp.wheel()>0);\n            else go_out = !(go_in = disp.wheel()>0);\n            key = 0;\n          }\n\n          if (go_in) {\n            const int\n              xsiz = x1 - x0,\n              mx = (mouse_x - 16)*xsiz/(disp.width() - 32),\n              cx = x0 + cimg::cut(mx,0,xsiz);\n            if (x1 - x0>4) {\n              x0 = cx - 7*(cx - x0)/8; x1 = cx + 7*(x1 - cx)/8;\n              if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n                const double\n                  ysiz = y1 - y0,\n                  my = (mouse_y - 16)*ysiz/(disp.height() - 32),\n                  cy = y1 - cimg::cut(my,0.0,ysiz);\n                y0 = cy - 7*(cy - y0)/8; y1 = cy + 7*(y1 - cy)/8;\n              } else y0 = y1 = 0;\n            }\n          }\n          if (go_out) {\n            if (x0>0 || x1<(int)siz1) {\n              const int delta_x = (x1 - x0)/8, ndelta_x = delta_x?delta_x:(siz>1);\n              const double ndelta_y = (y1 - y0)/8;\n              x0-=ndelta_x; x1+=ndelta_x;\n              y0-=ndelta_y; y1+=ndelta_y;\n              if (x0<0) { x1-=x0; x0 = 0; if (x1>=(int)siz) x1 = (int)siz1; }\n              if (x1>=(int)siz) { x0-=(x1 - siz1); x1 = (int)siz1; if (x0<0) x0 = 0; }\n            }\n          }\n          if (go_left) {\n            const int delta = (x1 - x0)/5, ndelta = delta?delta:1;\n            if (x0 - ndelta>=0) { x0-=ndelta; x1-=ndelta; }\n            else { x1-=x0; x0 = 0; }\n            go_left = false;\n          }\n          if (go_right) {\n            const int delta = (x1 - x0)/5, ndelta = delta?delta:1;\n            if (x1 + ndelta<(int)siz) { x0+=ndelta; x1+=ndelta; }\n            else { x0+=(siz1 - x1); x1 = (int)siz1; }\n            go_right = false;\n          }\n          if (go_up) {\n            const double delta = (y1 - y0)/10, ndelta = delta?delta:1;\n            y0+=ndelta; y1+=ndelta;\n            go_up = false;\n          }\n          if (go_down) {\n            const double delta = (y1 - y0)/10, ndelta = delta?delta:1;\n            y0-=ndelta; y1-=ndelta;\n            go_down = false;\n          }\n        }\n        if (!exit_on_anykey && key && key!=(int)cimg::keyESC &&\n            (key!=(int)cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          disp.set_key(key,false);\n          key = 0;\n        }\n      }\n      disp._normalization = old_normalization;\n      return *this;\n    }\n\n    //! Save image as a file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param number When positive, represents an index added to the filename. Otherwise, no number is added.\n       \\param digits Number of digits used for adding the number to the filename.\n       \\note\n       - The used file format is defined by the file extension in the filename \\p filename.\n       - Parameter \\p number can be used to add a 6-digit number to the filename before saving.\n\n    **/\n    const CImg<T>& save(const char *const filename, const int number=-1, const unsigned int digits=6) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save(): Specified filename is (null).\",\n                                    cimg_instance);\n      // Do not test for empty instances, since .cimg format is able to manage empty instances.\n      const bool is_stdout = *filename=='-' && (!filename[1] || filename[1]=='.');\n      const char *const ext = cimg::split_filename(filename);\n      CImg<charT> nfilename(1024);\n      const char *const fn = is_stdout?filename:(number>=0)?cimg::number_filename(filename,number,digits,nfilename):\n        filename;\n\n#ifdef cimg_save_plugin\n      cimg_save_plugin(fn);\n#endif\n#ifdef cimg_save_plugin1\n      cimg_save_plugin1(fn);\n#endif\n#ifdef cimg_save_plugin2\n      cimg_save_plugin2(fn);\n#endif\n#ifdef cimg_save_plugin3\n      cimg_save_plugin3(fn);\n#endif\n#ifdef cimg_save_plugin4\n      cimg_save_plugin4(fn);\n#endif\n#ifdef cimg_save_plugin5\n      cimg_save_plugin5(fn);\n#endif\n#ifdef cimg_save_plugin6\n      cimg_save_plugin6(fn);\n#endif\n#ifdef cimg_save_plugin7\n      cimg_save_plugin7(fn);\n#endif\n#ifdef cimg_save_plugin8\n      cimg_save_plugin8(fn);\n#endif\n      // Ascii formats\n      if (!cimg::strcasecmp(ext,\"asc\")) return save_ascii(fn);\n      else if (!cimg::strcasecmp(ext,\"dlm\") ||\n               !cimg::strcasecmp(ext,\"txt\")) return save_dlm(fn);\n      else if (!cimg::strcasecmp(ext,\"cpp\") ||\n               !cimg::strcasecmp(ext,\"hpp\") ||\n               !cimg::strcasecmp(ext,\"h\") ||\n               !cimg::strcasecmp(ext,\"c\")) return save_cpp(fn);\n\n      // 2d binary formats\n      else if (!cimg::strcasecmp(ext,\"bmp\")) return save_bmp(fn);\n      else if (!cimg::strcasecmp(ext,\"jpg\") ||\n               !cimg::strcasecmp(ext,\"jpeg\") ||\n               !cimg::strcasecmp(ext,\"jpe\") ||\n               !cimg::strcasecmp(ext,\"jfif\") ||\n               !cimg::strcasecmp(ext,\"jif\")) return save_jpeg(fn);\n      else if (!cimg::strcasecmp(ext,\"rgb\")) return save_rgb(fn);\n      else if (!cimg::strcasecmp(ext,\"rgba\")) return save_rgba(fn);\n      else if (!cimg::strcasecmp(ext,\"png\")) return save_png(fn);\n      else if (!cimg::strcasecmp(ext,\"pgm\") ||\n               !cimg::strcasecmp(ext,\"ppm\") ||\n               !cimg::strcasecmp(ext,\"pnm\")) return save_pnm(fn);\n      else if (!cimg::strcasecmp(ext,\"pnk\")) return save_pnk(fn);\n      else if (!cimg::strcasecmp(ext,\"pfm\")) return save_pfm(fn);\n      else if (!cimg::strcasecmp(ext,\"exr\")) return save_exr(fn);\n      else if (!cimg::strcasecmp(ext,\"tif\") ||\n               !cimg::strcasecmp(ext,\"tiff\")) return save_tiff(fn);\n\n      // 3d binary formats\n      else if (!cimg::strcasecmp(ext,\"cimgz\")) return save_cimg(fn,true);\n      else if (!cimg::strcasecmp(ext,\"cimg\") || !*ext) return save_cimg(fn,false);\n      else if (!cimg::strcasecmp(ext,\"dcm\")) return save_medcon_external(fn);\n      else if (!cimg::strcasecmp(ext,\"hdr\") ||\n               !cimg::strcasecmp(ext,\"nii\")) return save_analyze(fn);\n      else if (!cimg::strcasecmp(ext,\"inr\")) return save_inr(fn);\n      else if (!cimg::strcasecmp(ext,\"mnc\")) return save_minc2(fn);\n      else if (!cimg::strcasecmp(ext,\"pan\")) return save_pandore(fn);\n      else if (!cimg::strcasecmp(ext,\"raw\")) return save_raw(fn);\n\n      // Archive files\n      else if (!cimg::strcasecmp(ext,\"gz\")) return save_gzip_external(fn);\n\n      // Image sequences\n      else if (!cimg::strcasecmp(ext,\"yuv\")) return save_yuv(fn,true);\n      else if (!cimg::strcasecmp(ext,\"avi\") ||\n               !cimg::strcasecmp(ext,\"mov\") ||\n               !cimg::strcasecmp(ext,\"asf\") ||\n               !cimg::strcasecmp(ext,\"divx\") ||\n               !cimg::strcasecmp(ext,\"flv\") ||\n               !cimg::strcasecmp(ext,\"mpg\") ||\n               !cimg::strcasecmp(ext,\"m1v\") ||\n               !cimg::strcasecmp(ext,\"m2v\") ||\n               !cimg::strcasecmp(ext,\"m4v\") ||\n               !cimg::strcasecmp(ext,\"mjp\") ||\n               !cimg::strcasecmp(ext,\"mp4\") ||\n               !cimg::strcasecmp(ext,\"mkv\") ||\n               !cimg::strcasecmp(ext,\"mpe\") ||\n               !cimg::strcasecmp(ext,\"movie\") ||\n               !cimg::strcasecmp(ext,\"ogm\") ||\n               !cimg::strcasecmp(ext,\"ogg\") ||\n               !cimg::strcasecmp(ext,\"ogv\") ||\n               !cimg::strcasecmp(ext,\"qt\") ||\n               !cimg::strcasecmp(ext,\"rm\") ||\n               !cimg::strcasecmp(ext,\"vob\") ||\n               !cimg::strcasecmp(ext,\"wmv\") ||\n               !cimg::strcasecmp(ext,\"xvid\") ||\n               !cimg::strcasecmp(ext,\"mpeg\")) return save_video(fn);\n      return save_other(fn);\n    }\n\n    //! Save image as an ascii file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_ascii(const char *const filename) const {\n      return _save_ascii(0,filename);\n    }\n\n    //! Save image as an ascii file \\overloading.\n    const CImg<T>& save_ascii(std::FILE *const file) const {\n      return _save_ascii(file,0);\n    }\n\n    const CImg<T>& _save_ascii(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_ascii(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"w\");\n      std::fprintf(nfile,\"%u %u %u %u\\n\",_width,_height,_depth,_spectrum);\n      const T* ptrs = _data;\n      cimg_forYZC(*this,y,z,c) {\n        cimg_forX(*this,x) std::fprintf(nfile,\"%.17g \",(double)*(ptrs++));\n        std::fputc('\\n',nfile);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a .cpp source file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_cpp(const char *const filename) const {\n      return _save_cpp(0,filename);\n    }\n\n    //! Save image as a .cpp source file \\overloading.\n    const CImg<T>& save_cpp(std::FILE *const file) const {\n      return _save_cpp(file,0);\n    }\n\n    const CImg<T>& _save_cpp(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_cpp(): Specified filename is (null).\",\n                                    cimg_instance);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"w\");\n      CImg<charT> varname(1024); *varname = 0;\n      if (filename) cimg_sscanf(cimg::basename(filename),\"%1023[a-zA-Z0-9_]\",varname._data);\n      if (!*varname) cimg_snprintf(varname,varname._width,\"unnamed\");\n      std::fprintf(nfile,\n                   \"/* Define image '%s' of size %ux%ux%ux%u and type '%s' */\\n\"\n                   \"%s data_%s[] = { %s\\n  \",\n                   varname._data,_width,_height,_depth,_spectrum,pixel_type(),pixel_type(),varname._data,\n                   is_empty()?\"};\":\"\");\n      if (!is_empty()) for (ulongT off = 0, siz = size() - 1; off<=siz; ++off) {\n        std::fprintf(nfile,cimg::type<T>::format(),cimg::type<T>::format((*this)[off]));\n        if (off==siz) std::fprintf(nfile,\" };\\n\");\n        else if (!((off + 1)%16)) std::fprintf(nfile,\",\\n  \");\n        else std::fprintf(nfile,\", \");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a DLM file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_dlm(const char *const filename) const {\n      return _save_dlm(0,filename);\n    }\n\n    //! Save image as a DLM file \\overloading.\n    const CImg<T>& save_dlm(std::FILE *const file) const {\n      return _save_dlm(file,0);\n    }\n\n    const CImg<T>& _save_dlm(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_dlm(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_dlm(): Instance is volumetric, values along Z will be unrolled in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n      if (_spectrum>1)\n        cimg::warn(_cimg_instance\n                   \"save_dlm(): Instance is multispectral, values along C will be unrolled in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"w\");\n      const T* ptrs = _data;\n      cimg_forYZC(*this,y,z,c) {\n        cimg_forX(*this,x) std::fprintf(nfile,\"%.17g%s\",(double)*(ptrs++),(x==width() - 1)?\"\":\",\");\n        std::fputc('\\n',nfile);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a BMP file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_bmp(const char *const filename) const {\n      return _save_bmp(0,filename);\n    }\n\n    //! Save image as a BMP file \\overloading.\n    const CImg<T>& save_bmp(std::FILE *const file) const {\n      return _save_bmp(file,0);\n    }\n\n    const CImg<T>& _save_bmp(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_bmp(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_bmp(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n      if (_spectrum>3)\n        cimg::warn(_cimg_instance\n                   \"save_bmp(): Instance is multispectral, only the three first channels will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      CImg<ucharT> header(54,1,1,1,0);\n      unsigned char align_buf[4] = { 0 };\n      const unsigned int\n        align = (4 - (3*_width)%4)%4,\n        buf_size = (3*_width + align)*height(),\n        file_size = 54 + buf_size;\n      header[0] = 'B'; header[1] = 'M';\n      header[0x02] = file_size&0xFF;\n      header[0x03] = (file_size>>8)&0xFF;\n      header[0x04] = (file_size>>16)&0xFF;\n      header[0x05] = (file_size>>24)&0xFF;\n      header[0x0A] = 0x36;\n      header[0x0E] = 0x28;\n      header[0x12] = _width&0xFF;\n      header[0x13] = (_width>>8)&0xFF;\n      header[0x14] = (_width>>16)&0xFF;\n      header[0x15] = (_width>>24)&0xFF;\n      header[0x16] = _height&0xFF;\n      header[0x17] = (_height>>8)&0xFF;\n      header[0x18] = (_height>>16)&0xFF;\n      header[0x19] = (_height>>24)&0xFF;\n      header[0x1A] = 1;\n      header[0x1B] = 0;\n      header[0x1C] = 24;\n      header[0x1D] = 0;\n      header[0x22] = buf_size&0xFF;\n      header[0x23] = (buf_size>>8)&0xFF;\n      header[0x24] = (buf_size>>16)&0xFF;\n      header[0x25] = (buf_size>>24)&0xFF;\n      header[0x27] = 0x1;\n      header[0x2B] = 0x1;\n      cimg::fwrite(header._data,54,nfile);\n\n      const T\n        *ptr_r = data(0,_height - 1,0,0),\n        *ptr_g = (_spectrum>=2)?data(0,_height - 1,0,1):0,\n        *ptr_b = (_spectrum>=3)?data(0,_height - 1,0,2):0;\n\n      switch (_spectrum) {\n      case 1 : {\n        cimg_forY(*this,y) {\n          cimg_forX(*this,x) {\n            const unsigned char val = (unsigned char)*(ptr_r++);\n            std::fputc(val,nfile); std::fputc(val,nfile); std::fputc(val,nfile);\n          }\n          cimg::fwrite(align_buf,align,nfile);\n          ptr_r-=2*_width;\n        }\n      } break;\n      case 2 : {\n        cimg_forY(*this,y) {\n          cimg_forX(*this,x) {\n            std::fputc(0,nfile);\n            std::fputc((unsigned char)(*(ptr_g++)),nfile);\n            std::fputc((unsigned char)(*(ptr_r++)),nfile);\n          }\n          cimg::fwrite(align_buf,align,nfile);\n          ptr_r-=2*_width; ptr_g-=2*_width;\n        }\n      } break;\n      default : {\n        cimg_forY(*this,y) {\n          cimg_forX(*this,x) {\n            std::fputc((unsigned char)(*(ptr_b++)),nfile);\n            std::fputc((unsigned char)(*(ptr_g++)),nfile);\n            std::fputc((unsigned char)(*(ptr_r++)),nfile);\n          }\n          cimg::fwrite(align_buf,align,nfile);\n          ptr_r-=2*_width; ptr_g-=2*_width; ptr_b-=2*_width;\n        }\n      }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a JPEG file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param quality Image quality (in %)\n    **/\n    const CImg<T>& save_jpeg(const char *const filename, const unsigned int quality=100) const {\n      return _save_jpeg(0,filename,quality);\n    }\n\n    //! Save image as a JPEG file \\overloading.\n    const CImg<T>& save_jpeg(std::FILE *const file, const unsigned int quality=100) const {\n      return _save_jpeg(file,0,quality);\n    }\n\n    const CImg<T>& _save_jpeg(std::FILE *const file, const char *const filename, const unsigned int quality) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_jpeg(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_jpeg(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n#ifndef cimg_use_jpeg\n      if (!file) return save_other(filename,quality);\n      else throw CImgIOException(_cimg_instance\n                                 \"save_jpeg(): Unable to save data in '(*FILE)' unless libjpeg is enabled.\",\n                                 cimg_instance);\n#else\n      unsigned int dimbuf = 0;\n      J_COLOR_SPACE colortype = JCS_RGB;\n\n      switch (_spectrum) {\n      case 1 : dimbuf = 1; colortype = JCS_GRAYSCALE; break;\n      case 2 : dimbuf = 3; colortype = JCS_RGB; break;\n      case 3 : dimbuf = 3; colortype = JCS_RGB; break;\n      default : dimbuf = 4; colortype = JCS_CMYK; break;\n      }\n\n      // Call libjpeg functions\n      struct jpeg_compress_struct cinfo;\n      struct jpeg_error_mgr jerr;\n      cinfo.err = jpeg_std_error(&jerr);\n      jpeg_create_compress(&cinfo);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      jpeg_stdio_dest(&cinfo,nfile);\n      cinfo.image_width = _width;\n      cinfo.image_height = _height;\n      cinfo.input_components = dimbuf;\n      cinfo.in_color_space = colortype;\n      jpeg_set_defaults(&cinfo);\n      jpeg_set_quality(&cinfo,quality<100?quality:100,TRUE);\n      jpeg_start_compress(&cinfo,TRUE);\n\n      JSAMPROW row_pointer[1];\n      CImg<ucharT> buffer(_width*dimbuf);\n\n      while (cinfo.next_scanline<cinfo.image_height) {\n        unsigned char *ptrd = buffer._data;\n\n        // Fill pixel buffer\n        switch (_spectrum) {\n        case 1 : { // Greyscale images\n          const T *ptr_g = data(0, cinfo.next_scanline);\n          for (unsigned int b = 0; b<cinfo.image_width; b++)\n            *(ptrd++) = (unsigned char)*(ptr_g++);\n        } break;\n        case 2 : { // RG images\n          const T *ptr_r = data(0,cinfo.next_scanline,0,0),\n            *ptr_g = data(0,cinfo.next_scanline,0,1);\n          for (unsigned int b = 0; b<cinfo.image_width; ++b) {\n            *(ptrd++) = (unsigned char)*(ptr_r++);\n            *(ptrd++) = (unsigned char)*(ptr_g++);\n            *(ptrd++) = 0;\n          }\n        } break;\n        case 3 : { // RGB images\n          const T *ptr_r = data(0,cinfo.next_scanline,0,0),\n            *ptr_g = data(0,cinfo.next_scanline,0,1),\n            *ptr_b = data(0,cinfo.next_scanline,0,2);\n          for (unsigned int b = 0; b<cinfo.image_width; ++b) {\n            *(ptrd++) = (unsigned char)*(ptr_r++);\n            *(ptrd++) = (unsigned char)*(ptr_g++);\n            *(ptrd++) = (unsigned char)*(ptr_b++);\n          }\n        } break;\n        default : { // CMYK images\n          const T *ptr_r = data(0,cinfo.next_scanline,0,0),\n            *ptr_g = data(0,cinfo.next_scanline,0,1),\n            *ptr_b = data(0,cinfo.next_scanline,0,2),\n            *ptr_a = data(0,cinfo.next_scanline,0,3);\n          for (unsigned int b = 0; b<cinfo.image_width; ++b) {\n            *(ptrd++) = (unsigned char)*(ptr_r++);\n            *(ptrd++) = (unsigned char)*(ptr_g++);\n            *(ptrd++) = (unsigned char)*(ptr_b++);\n            *(ptrd++) = (unsigned char)*(ptr_a++);\n          }\n        }\n        }\n        *row_pointer = buffer._data;\n        jpeg_write_scanlines(&cinfo,row_pointer,1);\n      }\n      jpeg_finish_compress(&cinfo);\n      if (!file) cimg::fclose(nfile);\n      jpeg_destroy_compress(&cinfo);\n      return *this;\n#endif\n    }\n\n    //! Save image, using built-in ImageMagick++ library.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param bytes_per_pixel Force the number of bytes per pixel for the saving, when possible.\n    **/\n    const CImg<T>& save_magick(const char *const filename, const unsigned int bytes_per_pixel=0) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_magick(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n#ifdef cimg_use_magick\n      double stmin, stmax = (double)max_min(stmin);\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_magick(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename);\n\n      if (_spectrum>3)\n        cimg::warn(_cimg_instance\n                   \"save_magick(): Instance is multispectral, only the three first channels will be \"\n                   \"saved in file '%s'.\",\n                   cimg_instance,\n                   filename);\n\n      if (stmin<0 || (bytes_per_pixel==1 && stmax>=256) || stmax>=65536)\n        cimg::warn(_cimg_instance\n                   \"save_magick(): Instance has pixel values in [%g,%g], probable type overflow in file '%s'.\",\n                   cimg_instance,\n                   filename,stmin,stmax);\n\n      Magick::Image image(Magick::Geometry(_width,_height),\"black\");\n      image.type(Magick::TrueColorType);\n      image.depth(bytes_per_pixel?(8*bytes_per_pixel):(stmax>=256?16:8));\n      const T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = _spectrum>1?data(0,0,0,1):0,\n        *ptr_b = _spectrum>2?data(0,0,0,2):0;\n      Magick::PixelPacket *pixels = image.getPixels(0,0,_width,_height);\n      switch (_spectrum) {\n      case 1 : // Scalar images\n        for (ulongT off = (ulongT)_width*_height; off; --off) {\n          pixels->red = pixels->green = pixels->blue = (Magick::Quantum)*(ptr_r++);\n          ++pixels;\n        }\n        break;\n      case 2 : // RG images\n        for (ulongT off = (ulongT)_width*_height; off; --off) {\n          pixels->red = (Magick::Quantum)*(ptr_r++);\n          pixels->green = (Magick::Quantum)*(ptr_g++);\n          pixels->blue = 0; ++pixels;\n        }\n        break;\n      default : // RGB images\n        for (ulongT off = (ulongT)_width*_height; off; --off) {\n          pixels->red = (Magick::Quantum)*(ptr_r++);\n          pixels->green = (Magick::Quantum)*(ptr_g++);\n          pixels->blue = (Magick::Quantum)*(ptr_b++);\n          ++pixels;\n        }\n      }\n      image.syncPixels();\n      image.write(filename);\n      return *this;\n#else\n      cimg::unused(bytes_per_pixel);\n      throw CImgIOException(_cimg_instance\n                            \"save_magick(): Unable to save file '%s' unless libMagick++ is enabled.\",\n                            cimg_instance,\n                            filename);\n#endif\n    }\n\n    //! Save image as a PNG file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param bytes_per_pixel Force the number of bytes per pixels for the saving, when possible.\n    **/\n    const CImg<T>& save_png(const char *const filename, const unsigned int bytes_per_pixel=0) const {\n      return _save_png(0,filename,bytes_per_pixel);\n    }\n\n    //! Save image as a PNG file \\overloading.\n    const CImg<T>& save_png(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {\n      return _save_png(file,0,bytes_per_pixel);\n    }\n\n    const CImg<T>& _save_png(std::FILE *const file, const char *const filename,\n                             const unsigned int bytes_per_pixel=0) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_png(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n\n#ifndef cimg_use_png\n      cimg::unused(bytes_per_pixel);\n      if (!file) return save_other(filename);\n      else throw CImgIOException(_cimg_instance\n                                 \"save_png(): Unable to save data in '(*FILE)' unless libpng is enabled.\",\n                                 cimg_instance);\n#else\n      const char *volatile nfilename = filename; // two 'volatile' here to remove a g++ warning due to 'setjmp'.\n      std::FILE *volatile nfile = file?file:cimg::fopen(nfilename,\"wb\");\n      volatile double stmin, stmax = (double)max_min(stmin);\n\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_png(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename);\n\n      if (_spectrum>4)\n        cimg::warn(_cimg_instance\n                   \"save_png(): Instance is multispectral, only the three first channels will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename);\n\n      if (stmin<0 || (bytes_per_pixel==1 && stmax>=256) || stmax>=65536)\n        cimg::warn(_cimg_instance\n                   \"save_png(): Instance has pixel values in [%g,%g], probable type overflow in file '%s'.\",\n                   cimg_instance,\n                   filename,stmin,stmax);\n\n      // Setup PNG structures for write\n      png_voidp user_error_ptr = 0;\n      png_error_ptr user_error_fn = 0, user_warning_fn = 0;\n      png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING,user_error_ptr, user_error_fn,\n                                                    user_warning_fn);\n      if(!png_ptr){\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"save_png(): Failed to initialize 'png_ptr' structure when saving file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_infop info_ptr = png_create_info_struct(png_ptr);\n      if (!info_ptr) {\n        png_destroy_write_struct(&png_ptr,(png_infopp)0);\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"save_png(): Failed to initialize 'info_ptr' structure when saving file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      if (setjmp(png_jmpbuf(png_ptr))) {\n        png_destroy_write_struct(&png_ptr, &info_ptr);\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"save_png(): Encountered unknown fatal error in libpng when saving file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_init_io(png_ptr, nfile);\n\n      const int bit_depth = bytes_per_pixel?(bytes_per_pixel*8):(stmax>=256?16:8);\n\n      int color_type;\n      switch (spectrum()) {\n      case 1 : color_type = PNG_COLOR_TYPE_GRAY; break;\n      case 2 : color_type = PNG_COLOR_TYPE_GRAY_ALPHA; break;\n      case 3 : color_type = PNG_COLOR_TYPE_RGB; break;\n      default : color_type = PNG_COLOR_TYPE_RGB_ALPHA;\n      }\n      const int interlace_type = PNG_INTERLACE_NONE;\n      const int compression_type = PNG_COMPRESSION_TYPE_DEFAULT;\n      const int filter_method = PNG_FILTER_TYPE_DEFAULT;\n      png_set_IHDR(png_ptr,info_ptr,_width,_height,bit_depth,color_type,interlace_type,compression_type,filter_method);\n      png_write_info(png_ptr,info_ptr);\n      const int byte_depth = bit_depth>>3;\n      const int numChan = spectrum()>4?4:spectrum();\n      const int pixel_bit_depth_flag = numChan * (bit_depth - 1);\n\n      // Allocate Memory for Image Save and Fill pixel data\n      png_bytep *const imgData = new png_byte*[_height];\n      for (unsigned int row = 0; row<_height; ++row) imgData[row] = new png_byte[byte_depth*numChan*_width];\n      const T *pC0 = data(0,0,0,0);\n      switch (pixel_bit_depth_flag) {\n      case 7 :  { // Gray 8-bit\n        cimg_forY(*this,y) {\n          unsigned char *ptrd = imgData[y];\n          cimg_forX(*this,x) *(ptrd++) = (unsigned char)*(pC0++);\n        }\n      } break;\n      case 14 : { // Gray w/ Alpha 8-bit\n        const T *pC1 = data(0,0,0,1);\n        cimg_forY(*this,y) {\n          unsigned char *ptrd = imgData[y];\n          cimg_forX(*this,x) {\n            *(ptrd++) = (unsigned char)*(pC0++);\n            *(ptrd++) = (unsigned char)*(pC1++);\n          }\n        }\n      } break;\n      case 21 :  { // RGB 8-bit\n        const T *pC1 = data(0,0,0,1), *pC2 = data(0,0,0,2);\n        cimg_forY(*this,y) {\n          unsigned char *ptrd = imgData[y];\n          cimg_forX(*this,x) {\n            *(ptrd++) = (unsigned char)*(pC0++);\n            *(ptrd++) = (unsigned char)*(pC1++);\n            *(ptrd++) = (unsigned char)*(pC2++);\n          }\n        }\n      } break;\n      case 28 : { // RGB x/ Alpha 8-bit\n        const T *pC1 = data(0,0,0,1), *pC2 = data(0,0,0,2), *pC3 = data(0,0,0,3);\n        cimg_forY(*this,y){\n          unsigned char *ptrd = imgData[y];\n          cimg_forX(*this,x){\n            *(ptrd++) = (unsigned char)*(pC0++);\n            *(ptrd++) = (unsigned char)*(pC1++);\n            *(ptrd++) = (unsigned char)*(pC2++);\n            *(ptrd++) = (unsigned char)*(pC3++);\n          }\n        }\n      } break;\n      case 15 : { // Gray 16-bit\n        cimg_forY(*this,y){\n          unsigned short *ptrd = (unsigned short*)(imgData[y]);\n          cimg_forX(*this,x) *(ptrd++) = (unsigned short)*(pC0++);\n          if (!cimg::endianness()) cimg::invert_endianness((unsigned short*)imgData[y],_width);\n        }\n      } break;\n      case 30 : { // Gray w/ Alpha 16-bit\n        const T *pC1 = data(0,0,0,1);\n        cimg_forY(*this,y){\n          unsigned short *ptrd = (unsigned short*)(imgData[y]);\n          cimg_forX(*this,x) {\n            *(ptrd++) = (unsigned short)*(pC0++);\n            *(ptrd++) = (unsigned short)*(pC1++);\n          }\n          if (!cimg::endianness()) cimg::invert_endianness((unsigned short*)imgData[y],2*_width);\n        }\n      } break;\n      case 45 : { // RGB 16-bit\n        const T *pC1 = data(0,0,0,1), *pC2 = data(0,0,0,2);\n        cimg_forY(*this,y) {\n          unsigned short *ptrd = (unsigned short*)(imgData[y]);\n          cimg_forX(*this,x) {\n            *(ptrd++) = (unsigned short)*(pC0++);\n            *(ptrd++) = (unsigned short)*(pC1++);\n            *(ptrd++) = (unsigned short)*(pC2++);\n          }\n          if (!cimg::endianness()) cimg::invert_endianness((unsigned short*)imgData[y],3*_width);\n        }\n      } break;\n      case 60 : { // RGB w/ Alpha 16-bit\n        const T *pC1 = data(0,0,0,1), *pC2 = data(0,0,0,2), *pC3 = data(0,0,0,3);\n        cimg_forY(*this,y) {\n          unsigned short *ptrd = (unsigned short*)(imgData[y]);\n          cimg_forX(*this,x) {\n            *(ptrd++) = (unsigned short)*(pC0++);\n            *(ptrd++) = (unsigned short)*(pC1++);\n            *(ptrd++) = (unsigned short)*(pC2++);\n            *(ptrd++) = (unsigned short)*(pC3++);\n          }\n          if (!cimg::endianness()) cimg::invert_endianness((unsigned short*)imgData[y],4*_width);\n        }\n      } break;\n      default :\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimg_instance\n                              \"save_png(): Encountered unknown fatal error in libpng when saving file '%s'.\",\n                              cimg_instance,\n                              nfilename?nfilename:\"(FILE*)\");\n      }\n      png_write_image(png_ptr,imgData);\n      png_write_end(png_ptr,info_ptr);\n      png_destroy_write_struct(&png_ptr, &info_ptr);\n\n      // Deallocate Image Write Memory\n      cimg_forY(*this,n) delete[] imgData[n];\n      delete[] imgData;\n\n      if (!file) cimg::fclose(nfile);\n      return *this;\n#endif\n    }\n\n    //! Save image as a PNM file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param bytes_per_pixel Force the number of bytes per pixels for the saving.\n    **/\n    const CImg<T>& save_pnm(const char *const filename, const unsigned int bytes_per_pixel=0) const {\n      return _save_pnm(0,filename,bytes_per_pixel);\n    }\n\n    //! Save image as a PNM file \\overloading.\n    const CImg<T>& save_pnm(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {\n      return _save_pnm(file,0,bytes_per_pixel);\n    }\n\n    const CImg<T>& _save_pnm(std::FILE *const file, const char *const filename,\n                             const unsigned int bytes_per_pixel=0) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_pnm(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n\n      double stmin, stmax = (double)max_min(stmin);\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_pnm(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n      if (_spectrum>3)\n        cimg::warn(_cimg_instance\n                   \"save_pnm(): Instance is multispectral, only the three first channels will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n      if (stmin<0 || (bytes_per_pixel==1 && stmax>=256) || stmax>=65536)\n        cimg::warn(_cimg_instance\n                   \"save_pnm(): Instance has pixel values in [%g,%g], probable type overflow in file '%s'.\",\n                   cimg_instance,\n                   stmin,stmax,filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = (_spectrum>=2)?data(0,0,0,1):0,\n        *ptr_b = (_spectrum>=3)?data(0,0,0,2):0;\n      const ulongT buf_size = std::min((ulongT)(1024*1024),(ulongT)(_width*_height*(_spectrum==1?1UL:3UL)));\n\n      std::fprintf(nfile,\"P%c\\n%u %u\\n%u\\n\",\n                   (_spectrum==1?'5':'6'),_width,_height,stmax<256?255:(stmax<4096?4095:65535));\n\n      switch (_spectrum) {\n      case 1 : { // Scalar image\n        if (bytes_per_pixel==1 || (!bytes_per_pixel && stmax<256)) { // Binary PGM 8 bits\n          CImg<ucharT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size);\n            unsigned char *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) *(ptrd++) = (unsigned char)*(ptr_r++);\n            cimg::fwrite(buf._data,N,nfile);\n            to_write-=N;\n          }\n        } else { // Binary PGM 16 bits\n          CImg<ushortT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size);\n            unsigned short *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) *(ptrd++) = (unsigned short)*(ptr_r++);\n            if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n            cimg::fwrite(buf._data,N,nfile);\n            to_write-=N;\n          }\n        }\n      } break;\n      case 2 : { // RG image\n        if (bytes_per_pixel==1 || (!bytes_per_pixel && stmax<256)) { // Binary PPM 8 bits\n          CImg<ucharT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size/3);\n            unsigned char *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) {\n              *(ptrd++) = (unsigned char)*(ptr_r++);\n              *(ptrd++) = (unsigned char)*(ptr_g++);\n              *(ptrd++) = 0;\n            }\n            cimg::fwrite(buf._data,3*N,nfile);\n            to_write-=N;\n          }\n        } else {             // Binary PPM 16 bits\n          CImg<ushortT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size/3);\n            unsigned short *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) {\n              *(ptrd++) = (unsigned short)*(ptr_r++);\n              *(ptrd++) = (unsigned short)*(ptr_g++);\n              *(ptrd++) = 0;\n            }\n            if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n            cimg::fwrite(buf._data,3*N,nfile);\n            to_write-=N;\n          }\n        }\n      } break;\n      default : { // RGB image\n        if (bytes_per_pixel==1 || (!bytes_per_pixel && stmax<256)) { // Binary PPM 8 bits\n          CImg<ucharT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size/3);\n            unsigned char *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) {\n              *(ptrd++) = (unsigned char)*(ptr_r++);\n              *(ptrd++) = (unsigned char)*(ptr_g++);\n              *(ptrd++) = (unsigned char)*(ptr_b++);\n            }\n            cimg::fwrite(buf._data,3*N,nfile);\n            to_write-=N;\n          }\n        } else { // Binary PPM 16 bits\n          CImg<ushortT> buf((unsigned int)buf_size);\n          for (longT to_write = (longT)width()*height(); to_write>0; ) {\n            const ulongT N = std::min((ulongT)to_write,buf_size/3);\n            unsigned short *ptrd = buf._data;\n            for (ulongT i = N; i>0; --i) {\n              *(ptrd++) = (unsigned short)*(ptr_r++);\n              *(ptrd++) = (unsigned short)*(ptr_g++);\n              *(ptrd++) = (unsigned short)*(ptr_b++);\n            }\n            if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n            cimg::fwrite(buf._data,3*N,nfile);\n            to_write-=N;\n          }\n        }\n      }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a PNK file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_pnk(const char *const filename) const {\n      return _save_pnk(0,filename);\n    }\n\n    //! Save image as a PNK file \\overloading.\n    const CImg<T>& save_pnk(std::FILE *const file) const {\n      return _save_pnk(file,0);\n    }\n\n    const CImg<T>& _save_pnk(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_pnk(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_spectrum>1)\n        cimg::warn(_cimg_instance\n                   \"save_pnk(): Instance is multispectral, only the first channel will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      const ulongT buf_size = std::min((ulongT)1024*1024,(ulongT)_width*_height*_depth);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const T *ptr = data(0,0,0,0);\n\n      if (!cimg::type<T>::is_float() && sizeof(T)==1 && _depth<2) // Can be saved as regular PNM file.\n        _save_pnm(file,filename,0);\n      else if (!cimg::type<T>::is_float() && sizeof(T)==1) { // Save as extended P5 file: Binary byte-valued 3d.\n        std::fprintf(nfile,\"P5\\n%u %u %u\\n255\\n\",_width,_height,_depth);\n        CImg<ucharT> buf((unsigned int)buf_size);\n        for (longT to_write = (longT)width()*height()*depth(); to_write>0; ) {\n          const ulongT N = std::min((ulongT)to_write,buf_size);\n          unsigned char *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) *(ptrd++) = (unsigned char)*(ptr++);\n          cimg::fwrite(buf._data,N,nfile);\n          to_write-=N;\n        }\n      } else if (!cimg::type<T>::is_float()) { // Save as P8: Binary int32-valued 3d.\n        if (_depth>1) std::fprintf(nfile,\"P8\\n%u %u %u\\n%d\\n\",_width,_height,_depth,(int)max());\n        else std::fprintf(nfile,\"P8\\n%u %u\\n%d\\n\",_width,_height,(int)max());\n        CImg<intT> buf((unsigned int)buf_size);\n        for (longT to_write = (longT)width()*height()*depth(); to_write>0; ) {\n          const ulongT N = std::min((ulongT)to_write,buf_size);\n          int *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) *(ptrd++) = (int)*(ptr++);\n          cimg::fwrite(buf._data,N,nfile);\n          to_write-=N;\n        }\n      } else { // Save as P9: Binary float-valued 3d.\n        if (_depth>1) std::fprintf(nfile,\"P9\\n%u %u %u\\n%g\\n\",_width,_height,_depth,(double)max());\n        else std::fprintf(nfile,\"P9\\n%u %u\\n%g\\n\",_width,_height,(double)max());\n        CImg<floatT> buf((unsigned int)buf_size);\n        for (longT to_write = (longT)width()*height()*depth(); to_write>0; ) {\n          const ulongT N = std::min((ulongT)to_write,buf_size);\n          float *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) *(ptrd++) = (float)*(ptr++);\n          cimg::fwrite(buf._data,N,nfile);\n          to_write-=N;\n        }\n      }\n\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a PFM file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_pfm(const char *const filename) const {\n      get_mirror('y')._save_pfm(0,filename);\n      return *this;\n    }\n\n    //! Save image as a PFM file \\overloading.\n    const CImg<T>& save_pfm(std::FILE *const file) const {\n      get_mirror('y')._save_pfm(file,0);\n      return *this;\n    }\n\n    const CImg<T>& _save_pfm(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_pfm(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_pfm(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n      if (_spectrum>3)\n        cimg::warn(_cimg_instance\n                   \"save_pfm(): image instance is multispectral, only the three first channels will be saved \"\n                   \"in file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const T\n        *ptr_r = data(0,0,0,0),\n        *ptr_g = (_spectrum>=2)?data(0,0,0,1):0,\n        *ptr_b = (_spectrum>=3)?data(0,0,0,2):0;\n      const unsigned int buf_size = std::min(1024*1024U,_width*_height*(_spectrum==1?1:3));\n\n      std::fprintf(nfile,\"P%c\\n%u %u\\n1.0\\n\",\n                   (_spectrum==1?'f':'F'),_width,_height);\n\n      switch (_spectrum) {\n      case 1 : { // Scalar image\n        CImg<floatT> buf(buf_size);\n        for (longT to_write = (longT)width()*height(); to_write>0; ) {\n          const ulongT N = std::min((ulongT)to_write,(ulongT)buf_size);\n          float *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) *(ptrd++) = (float)*(ptr_r++);\n          if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n          cimg::fwrite(buf._data,N,nfile);\n          to_write-=N;\n        }\n      } break;\n      case 2 : { // RG image\n        CImg<floatT> buf(buf_size);\n        for (longT to_write = (longT)width()*height(); to_write>0; ) {\n          const unsigned int N = std::min((unsigned int)to_write,buf_size/3);\n          float *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) {\n            *(ptrd++) = (float)*(ptr_r++);\n            *(ptrd++) = (float)*(ptr_g++);\n            *(ptrd++) = 0;\n          }\n          if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n          cimg::fwrite(buf._data,3*N,nfile);\n          to_write-=N;\n        }\n      } break;\n      default : { // RGB image\n        CImg<floatT> buf(buf_size);\n        for (longT to_write = (longT)width()*height(); to_write>0; ) {\n          const unsigned int N = std::min((unsigned int)to_write,buf_size/3);\n          float *ptrd = buf._data;\n          for (ulongT i = N; i>0; --i) {\n            *(ptrd++) = (float)*(ptr_r++);\n            *(ptrd++) = (float)*(ptr_g++);\n            *(ptrd++) = (float)*(ptr_b++);\n          }\n          if (!cimg::endianness()) cimg::invert_endianness(buf._data,buf_size);\n          cimg::fwrite(buf._data,3*N,nfile);\n          to_write-=N;\n        }\n      }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a RGB file.\n    /**\n      \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_rgb(const char *const filename) const {\n      return _save_rgb(0,filename);\n    }\n\n    //! Save image as a RGB file \\overloading.\n    const CImg<T>& save_rgb(std::FILE *const file) const {\n      return _save_rgb(file,0);\n    }\n\n    const CImg<T>& _save_rgb(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_rgb(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_spectrum!=3)\n        cimg::warn(_cimg_instance\n                   \"save_rgb(): image instance has not exactly 3 channels, for file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const ulongT wh = (ulongT)_width*_height;\n      unsigned char *const buffer = new unsigned char[3*wh], *nbuffer = buffer;\n      const T\n        *ptr1 = data(0,0,0,0),\n        *ptr2 = _spectrum>1?data(0,0,0,1):0,\n        *ptr3 = _spectrum>2?data(0,0,0,2):0;\n      switch (_spectrum) {\n      case 1 : { // Scalar image\n        for (ulongT k = 0; k<wh; ++k) {\n          const unsigned char val = (unsigned char)*(ptr1++);\n          *(nbuffer++) = val;\n          *(nbuffer++) = val;\n          *(nbuffer++) = val;\n        }\n      } break;\n      case 2 : { // RG image\n        for (ulongT k = 0; k<wh; ++k) {\n          *(nbuffer++) = (unsigned char)(*(ptr1++));\n          *(nbuffer++) = (unsigned char)(*(ptr2++));\n          *(nbuffer++) = 0;\n        }\n      } break;\n      default : { // RGB image\n        for (ulongT k = 0; k<wh; ++k) {\n          *(nbuffer++) = (unsigned char)(*(ptr1++));\n          *(nbuffer++) = (unsigned char)(*(ptr2++));\n          *(nbuffer++) = (unsigned char)(*(ptr3++));\n        }\n      }\n      }\n      cimg::fwrite(buffer,3*wh,nfile);\n      if (!file) cimg::fclose(nfile);\n      delete[] buffer;\n      return *this;\n    }\n\n    //! Save image as a RGBA file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    const CImg<T>& save_rgba(const char *const filename) const {\n      return _save_rgba(0,filename);\n    }\n\n    //! Save image as a RGBA file \\overloading.\n    const CImg<T>& save_rgba(std::FILE *const file) const {\n      return _save_rgba(file,0);\n    }\n\n    const CImg<T>& _save_rgba(std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_rgba(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if (_spectrum!=4)\n        cimg::warn(_cimg_instance\n                   \"save_rgba(): image instance has not exactly 4 channels, for file '%s'.\",\n                   cimg_instance,\n                   filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const ulongT wh = (ulongT)_width*_height;\n      unsigned char *const buffer = new unsigned char[4*wh], *nbuffer = buffer;\n      const T\n        *ptr1 = data(0,0,0,0),\n        *ptr2 = _spectrum>1?data(0,0,0,1):0,\n        *ptr3 = _spectrum>2?data(0,0,0,2):0,\n        *ptr4 = _spectrum>3?data(0,0,0,3):0;\n      switch (_spectrum) {\n      case 1 : { // Scalar images\n        for (ulongT k = 0; k<wh; ++k) {\n          const unsigned char val = (unsigned char)*(ptr1++);\n          *(nbuffer++) = val;\n          *(nbuffer++) = val;\n          *(nbuffer++) = val;\n          *(nbuffer++) = 255;\n        }\n      } break;\n      case 2 : { // RG images\n        for (ulongT k = 0; k<wh; ++k) {\n          *(nbuffer++) = (unsigned char)(*(ptr1++));\n          *(nbuffer++) = (unsigned char)(*(ptr2++));\n          *(nbuffer++) = 0;\n          *(nbuffer++) = 255;\n        }\n      } break;\n      case 3 : { // RGB images\n        for (ulongT k = 0; k<wh; ++k) {\n          *(nbuffer++) = (unsigned char)(*(ptr1++));\n          *(nbuffer++) = (unsigned char)(*(ptr2++));\n          *(nbuffer++) = (unsigned char)(*(ptr3++));\n          *(nbuffer++) = 255;\n        }\n      } break;\n      default : { // RGBA images\n        for (ulongT k = 0; k<wh; ++k) {\n          *(nbuffer++) = (unsigned char)(*(ptr1++));\n          *(nbuffer++) = (unsigned char)(*(ptr2++));\n          *(nbuffer++) = (unsigned char)(*(ptr3++));\n          *(nbuffer++) = (unsigned char)(*(ptr4++));\n        }\n      }\n      }\n      cimg::fwrite(buffer,4*wh,nfile);\n      if (!file) cimg::fclose(nfile);\n      delete[] buffer;\n      return *this;\n    }\n\n    //! Save image as a TIFF file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param compression_type Type of data compression. Can be <tt>{ 0=None | 1=LZW | 2=JPEG }</tt>.\n       \\note\n       - libtiff support is enabled by defining the precompilation\n        directive \\c cimg_use_tif.\n       - When libtiff is enabled, 2D and 3D (multipage) several\n        channel per pixel are supported for\n        <tt>char,uchar,short,ushort,float</tt> and \\c double pixel types.\n       - If \\c cimg_use_tif is not defined at compile time the\n        function uses CImg<T>&save_other(const char*).\n     **/\n    const CImg<T>& save_tiff(const char *const filename, const unsigned int compression_type=0,\n                             const float *const voxel_size=0, const char *const description=0,\n                             const bool use_bigtiff=true) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_tiff(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n#ifdef cimg_use_tiff\n      const bool\n        _use_bigtiff = use_bigtiff && sizeof(ulongT)>=8 && size()*sizeof(T)>=1UL<<31; // No bigtiff for small images.\n      TIFF *tif = TIFFOpen(filename,_use_bigtiff?\"w8\":\"w4\");\n      if (tif) {\n        cimg_forZ(*this,z) _save_tiff(tif,z,z,compression_type,voxel_size,description);\n        TIFFClose(tif);\n      } else throw CImgIOException(_cimg_instance\n                                   \"save_tiff(): Failed to open file '%s' for writing.\",\n                                   cimg_instance,\n                                   filename);\n      return *this;\n#else\n      cimg::unused(compression_type,voxel_size,description,use_bigtiff);\n      return save_other(filename);\n#endif\n    }\n\n#ifdef cimg_use_tiff\n\n#define _cimg_save_tiff(types,typed,compression_type) if (!std::strcmp(types,pixel_type())) { \\\n      const typed foo = (typed)0; return _save_tiff(tif,directory,z,foo,compression_type,voxel_size,description); }\n\n    // [internal] Save a plane into a tiff file\n    template<typename t>\n    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const unsigned int z, const t& pixel_t,\n                              const unsigned int compression_type, const float *const voxel_size,\n                              const char *const description) const {\n      if (is_empty() || !tif || pixel_t) return *this;\n      const char *const filename = TIFFFileName(tif);\n      uint32 rowsperstrip = (uint32)-1;\n      uint16 spp = _spectrum, bpp = sizeof(t)*8, photometric;\n      if (spp==3 || spp==4) photometric = PHOTOMETRIC_RGB;\n      else photometric = PHOTOMETRIC_MINISBLACK;\n      TIFFSetDirectory(tif,directory);\n      TIFFSetField(tif,TIFFTAG_IMAGEWIDTH,_width);\n      TIFFSetField(tif,TIFFTAG_IMAGELENGTH,_height);\n      if (voxel_size) {\n        const float vx = voxel_size[0], vy = voxel_size[1], vz = voxel_size[2];\n        TIFFSetField(tif,TIFFTAG_RESOLUTIONUNIT,RESUNIT_NONE);\n        TIFFSetField(tif,TIFFTAG_XRESOLUTION,1.0f/vx);\n        TIFFSetField(tif,TIFFTAG_YRESOLUTION,1.0f/vy);\n        CImg<charT> s_description(256);\n        cimg_snprintf(s_description,s_description._width,\"VX=%g VY=%g VZ=%g spacing=%g\",vx,vy,vz,vz);\n        TIFFSetField(tif,TIFFTAG_IMAGEDESCRIPTION,s_description.data());\n      }\n      if (description) TIFFSetField(tif,TIFFTAG_IMAGEDESCRIPTION,description);\n      TIFFSetField(tif,TIFFTAG_ORIENTATION,ORIENTATION_TOPLEFT);\n      TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,spp);\n      if (cimg::type<t>::is_float()) TIFFSetField(tif,TIFFTAG_SAMPLEFORMAT,3);\n      else if (cimg::type<t>::min()==0) TIFFSetField(tif,TIFFTAG_SAMPLEFORMAT,1);\n      else TIFFSetField(tif,TIFFTAG_SAMPLEFORMAT,2);\n      TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,bpp);\n      TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);\n      TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,photometric);\n      TIFFSetField(tif,TIFFTAG_COMPRESSION,compression_type==2?COMPRESSION_JPEG:\n                   compression_type==1?COMPRESSION_LZW:COMPRESSION_NONE);\n      rowsperstrip = TIFFDefaultStripSize(tif,rowsperstrip);\n      TIFFSetField(tif,TIFFTAG_ROWSPERSTRIP,rowsperstrip);\n      TIFFSetField(tif,TIFFTAG_FILLORDER,FILLORDER_MSB2LSB);\n      TIFFSetField(tif,TIFFTAG_SOFTWARE,\"CImg\");\n      t *const buf = (t*)_TIFFmalloc(TIFFStripSize(tif));\n      if (buf) {\n        for (unsigned int row = 0; row<_height; row+=rowsperstrip) {\n          uint32 nrow = (row + rowsperstrip>_height?_height - row:rowsperstrip);\n          tstrip_t strip = TIFFComputeStrip(tif,row,0);\n          tsize_t i = 0;\n          for (unsigned int rr = 0; rr<nrow; ++rr)\n            for (unsigned int cc = 0; cc<_width; ++cc)\n              for (unsigned int vv = 0; vv<spp; ++vv)\n                buf[i++] = (t)(*this)(cc,row + rr,z,vv);\n          if (TIFFWriteEncodedStrip(tif,strip,buf,i*sizeof(t))<0)\n            throw CImgIOException(_cimg_instance\n                                  \"save_tiff(): Invalid strip writing when saving file '%s'.\",\n                                  cimg_instance,\n                                  filename?filename:\"(FILE*)\");\n        }\n        _TIFFfree(buf);\n      }\n      TIFFWriteDirectory(tif);\n      return (*this);\n    }\n\n    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const unsigned int z,\n                              const unsigned int compression_type, const float *const voxel_size,\n                              const char *const description) const {\n      _cimg_save_tiff(\"bool\",unsigned char,compression_type);\n      _cimg_save_tiff(\"unsigned char\",unsigned char,compression_type);\n      _cimg_save_tiff(\"char\",char,compression_type);\n      _cimg_save_tiff(\"unsigned short\",unsigned short,compression_type);\n      _cimg_save_tiff(\"short\",short,compression_type);\n      _cimg_save_tiff(\"unsigned int\",unsigned int,compression_type);\n      _cimg_save_tiff(\"int\",int,compression_type);\n      _cimg_save_tiff(\"unsigned int64\",unsigned int,compression_type);\n      _cimg_save_tiff(\"int64\",int,compression_type);\n      _cimg_save_tiff(\"float\",float,compression_type);\n      _cimg_save_tiff(\"double\",float,compression_type);\n      const char *const filename = TIFFFileName(tif);\n      throw CImgInstanceException(_cimg_instance\n                                  \"save_tiff(): Unsupported pixel type '%s' for file '%s'.\",\n                                  cimg_instance,\n                                  pixel_type(),filename?filename:\"(FILE*)\");\n      return *this;\n    }\n#endif\n\n    //! Save image as a MINC2 file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param imitate_file If non-zero, reference filename, as a C-string, to borrow header from.\n    **/\n    const CImg<T>& save_minc2(const char *const filename,\n                              const char *const imitate_file=0) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                   \"save_minc2(): Specified filename is (null).\",\n                                   cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n#ifndef cimg_use_minc2\n     cimg::unused(imitate_file);\n     return save_other(filename);\n#else\n     minc::minc_1_writer wtr;\n     if (imitate_file)\n       wtr.open(filename, imitate_file);\n     else {\n       minc::minc_info di;\n       if(width()) di.push_back(minc::dim_info(width(),width()*0.5,-1,minc::dim_info::DIM_X));\n       if(height()) di.push_back(minc::dim_info(height(),height()*0.5,-1,minc::dim_info::DIM_Y));\n       if(depth()) di.push_back(minc::dim_info(depth(),depth()*0.5,-1,minc::dim_info::DIM_Z));\n       if(spectrum()) di.push_back(minc::dim_info(spectrum(),spectrum()*0.5,-1,minc::dim_info::DIM_TIME));\n       wtr.open(filename,di,1,NC_FLOAT,0);\n     }\n     if(typeid(T)==typeid(unsigned char))\n       wtr.setup_write_byte();\n     else if(typeid(T)==typeid(int))\n       wtr.setup_write_int();\n     else if(typeid(T)==typeid(double))\n       wtr.setup_write_double();\n     else\n       wtr.setup_write_float();\n     minc::save_standard_volume(wtr, this->_data);\n     return *this;\n#endif\n    }\n\n    //! Save image as an ANALYZE7.5 or NIFTI file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param voxel_size Pointer to 3 consecutive values that tell about the voxel sizes along the X,Y and Z dimensions.\n    **/\n    const CImg<T>& save_analyze(const char *const filename, const float *const voxel_size=0) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_analyze(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n      std::FILE *file;\n      CImg<charT> hname(1024), iname(1024);\n      const char *const ext = cimg::split_filename(filename);\n      short datatype = -1;\n      if (!*ext) {\n        cimg_snprintf(hname,hname._width,\"%s.hdr\",filename);\n        cimg_snprintf(iname,iname._width,\"%s.img\",filename);\n      }\n      if (!cimg::strncasecmp(ext,\"hdr\",3)) {\n        std::strcpy(hname,filename);\n        std::strncpy(iname,filename,iname._width - 1);\n        cimg_sprintf(iname._data + std::strlen(iname) - 3,\"img\");\n      }\n      if (!cimg::strncasecmp(ext,\"img\",3)) {\n        std::strcpy(hname,filename);\n        std::strncpy(iname,filename,iname._width - 1);\n        cimg_sprintf(hname._data + std::strlen(iname) - 3,\"hdr\");\n      }\n      if (!cimg::strncasecmp(ext,\"nii\",3)) {\n        std::strncpy(hname,filename,hname._width - 1); *iname = 0;\n      }\n\n      CImg<charT> header(*iname?348:352,1,1,1,0);\n      int *const iheader = (int*)header._data;\n      *iheader = 348;\n      std::strcpy(header._data + 4,\"CImg\");\n      std::strcpy(header._data + 14,\" \");\n      ((short*)&(header[36]))[0] = 4096;\n      ((char*)&(header[38]))[0] = 114;\n      ((short*)&(header[40]))[0] = 4;\n      ((short*)&(header[40]))[1] = (short)_width;\n      ((short*)&(header[40]))[2] = (short)_height;\n      ((short*)&(header[40]))[3] = (short)_depth;\n      ((short*)&(header[40]))[4] = (short)_spectrum;\n      if (!cimg::strcasecmp(pixel_type(),\"bool\")) datatype = 2;\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned char\")) datatype = 2;\n      if (!cimg::strcasecmp(pixel_type(),\"char\")) datatype = 2;\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned short\")) datatype = 4;\n      if (!cimg::strcasecmp(pixel_type(),\"short\")) datatype = 4;\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned int\")) datatype = 8;\n      if (!cimg::strcasecmp(pixel_type(),\"int\")) datatype = 8;\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned int64\")) datatype = 8;\n      if (!cimg::strcasecmp(pixel_type(),\"int64\")) datatype = 8;\n      if (!cimg::strcasecmp(pixel_type(),\"float\")) datatype = 16;\n      if (!cimg::strcasecmp(pixel_type(),\"double\")) datatype = 64;\n      if (datatype<0)\n        throw CImgIOException(_cimg_instance\n                              \"save_analyze(): Unsupported pixel type '%s' for file '%s'.\",\n                              cimg_instance,\n                              pixel_type(),filename);\n\n      ((short*)&(header[70]))[0] = datatype;\n      ((short*)&(header[72]))[0] = sizeof(T);\n      ((float*)&(header[108]))[0] = (float)(*iname?0:header.width());\n      ((float*)&(header[112]))[0] = 1;\n      ((float*)&(header[76]))[0] = 0;\n      if (voxel_size) {\n        ((float*)&(header[76]))[1] = voxel_size[0];\n        ((float*)&(header[76]))[2] = voxel_size[1];\n        ((float*)&(header[76]))[3] = voxel_size[2];\n      } else ((float*)&(header[76]))[1] = ((float*)&(header[76]))[2] = ((float*)&(header[76]))[3] = 1;\n      file = cimg::fopen(hname,\"wb\");\n      cimg::fwrite(header._data,header.width(),file);\n      if (*iname) { cimg::fclose(file); file = cimg::fopen(iname,\"wb\"); }\n      cimg::fwrite(_data,size(),file);\n      cimg::fclose(file);\n      return *this;\n    }\n\n    //! Save image as a .cimg file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param is_compressed Tells if the file contains compressed image data.\n    **/\n    const CImg<T>& save_cimg(const char *const filename, const bool is_compressed=false) const {\n      CImgList<T>(*this,true).save_cimg(filename,is_compressed);\n      return *this;\n    }\n\n    //! Save image as a .cimg file \\overloading.\n    const CImg<T>& save_cimg(std::FILE *const file, const bool is_compressed=false) const {\n      CImgList<T>(*this,true).save_cimg(file,is_compressed);\n      return *this;\n    }\n\n    //! Save image as a sub-image into an existing .cimg file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param n0 Index of the image inside the file.\n      \\param x0 X-coordinate of the sub-image location.\n      \\param y0 Y-coordinate of the sub-image location.\n      \\param z0 Z-coordinate of the sub-image location.\n      \\param c0 C-coordinate of the sub-image location.\n    **/\n    const CImg<T>& save_cimg(const char *const filename,\n                             const unsigned int n0,\n                             const unsigned int x0, const unsigned int y0,\n                             const unsigned int z0, const unsigned int c0) const {\n      CImgList<T>(*this,true).save_cimg(filename,n0,x0,y0,z0,c0);\n      return *this;\n    }\n\n    //! Save image as a sub-image into an existing .cimg file \\overloading.\n    const CImg<T>& save_cimg(std::FILE *const file,\n                             const unsigned int n0,\n                             const unsigned int x0, const unsigned int y0,\n                             const unsigned int z0, const unsigned int c0) const {\n      CImgList<T>(*this,true).save_cimg(file,n0,x0,y0,z0,c0);\n      return *this;\n    }\n\n    //! Save blank image as a .cimg file.\n    /**\n        \\param filename Filename, as a C-string.\n        \\param dx Width of the image.\n        \\param dy Height of the image.\n        \\param dz Depth of the image.\n        \\param dc Number of channels of the image.\n        \\note\n        - All pixel values of the saved image are set to \\c 0.\n        - Use this method to save large images without having to instanciate and allocate them.\n    **/\n    static void save_empty_cimg(const char *const filename,\n                                const unsigned int dx, const unsigned int dy=1,\n                                const unsigned int dz=1, const unsigned int dc=1) {\n      return CImgList<T>::save_empty_cimg(filename,1,dx,dy,dz,dc);\n    }\n\n    //! Save blank image as a .cimg file \\overloading.\n    /**\n       Same as save_empty_cimg(const char *,unsigned int,unsigned int,unsigned int,unsigned int)\n       with a file stream argument instead of a filename string.\n    **/\n    static void save_empty_cimg(std::FILE *const file,\n                                const unsigned int dx, const unsigned int dy=1,\n                                const unsigned int dz=1, const unsigned int dc=1) {\n      return CImgList<T>::save_empty_cimg(file,1,dx,dy,dz,dc);\n    }\n\n    //! Save image as an INRIMAGE-4 file.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param voxel_size Pointer to 3 values specifying the voxel sizes along the X,Y and Z dimensions.\n    **/\n    const CImg<T>& save_inr(const char *const filename, const float *const voxel_size=0) const {\n      return _save_inr(0,filename,voxel_size);\n    }\n\n    //! Save image as an INRIMAGE-4 file \\overloading.\n    const CImg<T>& save_inr(std::FILE *const file, const float *const voxel_size=0) const {\n      return _save_inr(file,0,voxel_size);\n    }\n\n    const CImg<T>& _save_inr(std::FILE *const file, const char *const filename, const float *const voxel_size) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_inr(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n\n      int inrpixsize = -1;\n      const char *inrtype = \"unsigned fixed\\nPIXSIZE=8 bits\\nSCALE=2**0\";\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned char\")) {\n        inrtype = \"unsigned fixed\\nPIXSIZE=8 bits\\nSCALE=2**0\"; inrpixsize = 1;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"char\")) {\n        inrtype = \"fixed\\nPIXSIZE=8 bits\\nSCALE=2**0\"; inrpixsize = 1;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned short\")) {\n        inrtype = \"unsigned fixed\\nPIXSIZE=16 bits\\nSCALE=2**0\";inrpixsize = 2;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"short\")) {\n        inrtype = \"fixed\\nPIXSIZE=16 bits\\nSCALE=2**0\"; inrpixsize = 2;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"unsigned int\")) {\n        inrtype = \"unsigned fixed\\nPIXSIZE=32 bits\\nSCALE=2**0\";inrpixsize = 4;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"int\")) {\n        inrtype = \"fixed\\nPIXSIZE=32 bits\\nSCALE=2**0\"; inrpixsize = 4;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"float\")) {\n        inrtype = \"float\\nPIXSIZE=32 bits\"; inrpixsize = 4;\n      }\n      if (!cimg::strcasecmp(pixel_type(),\"double\")) {\n        inrtype = \"float\\nPIXSIZE=64 bits\"; inrpixsize = 8;\n      }\n      if (inrpixsize<=0)\n        throw CImgIOException(_cimg_instance\n                              \"save_inr(): Unsupported pixel type '%s' for file '%s'\",\n                              cimg_instance,\n                              pixel_type(),filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      CImg<charT> header(257);\n      int err = cimg_snprintf(header,header._width,\"#INRIMAGE-4#{\\nXDIM=%u\\nYDIM=%u\\nZDIM=%u\\nVDIM=%u\\n\",\n                              _width,_height,_depth,_spectrum);\n      if (voxel_size) err+=cimg_sprintf(header._data + err,\"VX=%g\\nVY=%g\\nVZ=%g\\n\",\n                                        voxel_size[0],voxel_size[1],voxel_size[2]);\n      err+=cimg_sprintf(header._data + err,\"TYPE=%s\\nCPU=%s\\n\",inrtype,cimg::endianness()?\"sun\":\"decm\");\n      std::memset(header._data + err,'\\n',252 - err);\n      std::memcpy(header._data + 252,\"##}\\n\",4);\n      cimg::fwrite(header._data,256,nfile);\n      cimg_forXYZ(*this,x,y,z) cimg_forC(*this,c) cimg::fwrite(&((*this)(x,y,z,c)),1,nfile);\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as an OpenEXR file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\note The OpenEXR file format is <a href=\"http://en.wikipedia.org/wiki/OpenEXR\">described here</a>.\n    **/\n    const CImg<T>& save_exr(const char *const filename) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_exr(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_exr(): Instance is volumetric, only the first slice will be saved in file '%s'.\",\n                   cimg_instance,\n                   filename);\n\n#ifndef cimg_use_openexr\n      return save_other(filename);\n#else\n      Imf::Rgba *const ptrd0 = new Imf::Rgba[(size_t)_width*_height], *ptrd = ptrd0, rgba;\n      switch (_spectrum) {\n      case 1 : { // Grayscale image.\n        for (const T *ptr_r = data(), *const ptr_e = ptr_r + (ulongT)_width*_height; ptr_r<ptr_e;) {\n          rgba.r = rgba.g = rgba.b = (half)(*(ptr_r++));\n          rgba.a = (half)1;\n          *(ptrd++) = rgba;\n        }\n      } break;\n      case 2 : { // RG image.\n        for (const T *ptr_r = data(), *ptr_g = data(0,0,0,1),\n               *const ptr_e = ptr_r + (ulongT)_width*_height; ptr_r<ptr_e; ) {\n          rgba.r = (half)(*(ptr_r++));\n          rgba.g = (half)(*(ptr_g++));\n          rgba.b = (half)0;\n          rgba.a = (half)1;\n          *(ptrd++) = rgba;\n        }\n      } break;\n      case 3 : { // RGB image.\n        for (const T *ptr_r = data(), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2),\n               *const ptr_e = ptr_r + (ulongT)_width*_height; ptr_r<ptr_e;) {\n          rgba.r = (half)(*(ptr_r++));\n          rgba.g = (half)(*(ptr_g++));\n          rgba.b = (half)(*(ptr_b++));\n          rgba.a = (half)1;\n          *(ptrd++) = rgba;\n        }\n      } break;\n      default : { // RGBA image.\n        for (const T *ptr_r = data(), *ptr_g = data(0,0,0,1), *ptr_b = data(0,0,0,2), *ptr_a = data(0,0,0,3),\n               *const ptr_e = ptr_r + (ulongT)_width*_height; ptr_r<ptr_e;) {\n          rgba.r = (half)(*(ptr_r++));\n          rgba.g = (half)(*(ptr_g++));\n          rgba.b = (half)(*(ptr_b++));\n          rgba.a = (half)(*(ptr_a++));\n          *(ptrd++) = rgba;\n        }\n      } break;\n      }\n      Imf::RgbaOutputFile outFile(filename,_width,_height,\n                                  _spectrum==1?Imf::WRITE_Y:_spectrum==2?Imf::WRITE_YA:_spectrum==3?\n                                  Imf::WRITE_RGB:Imf::WRITE_RGBA);\n      outFile.setFrameBuffer(ptrd0,1,_width);\n      outFile.writePixels(_height);\n      delete[] ptrd0;\n      return *this;\n#endif\n    }\n\n    //! Save image as a Pandore-5 file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param colorspace Colorspace data field in output file\n       (see <a href=\"http://www.greyc.ensicaen.fr/~regis/Pandore\">Pandore file specifications</a>\n       for more information).\n    **/\n    const CImg<T>& save_pandore(const char *const filename, const unsigned int colorspace=0) const {\n      return _save_pandore(0,filename,colorspace);\n    }\n\n    //! Save image as a Pandore-5 file \\overloading.\n    /**\n        Same as save_pandore(const char *,unsigned int) const\n        with a file stream argument instead of a filename string.\n    **/\n    const CImg<T>& save_pandore(std::FILE *const file, const unsigned int colorspace=0) const {\n      return _save_pandore(file,0,colorspace);\n    }\n\n    unsigned int _save_pandore_header_length(unsigned int id, unsigned int *dims, const unsigned int colorspace) const {\n      unsigned int nbdims = 0;\n      if (id==2 || id==3 || id==4) {\n        dims[0] = 1; dims[1] = _width; nbdims = 2;\n      }\n      if (id==5 || id==6 || id==7) {\n        dims[0] = 1; dims[1] = _height; dims[2] = _width; nbdims=3;\n      }\n      if (id==8 || id==9 || id==10) {\n        dims[0] = _spectrum; dims[1] = _depth; dims[2] = _height; dims[3] = _width; nbdims = 4;\n      }\n      if (id==16 || id==17 || id==18) {\n        dims[0] = 3; dims[1] = _height; dims[2] = _width; dims[3] = colorspace; nbdims = 4;\n      }\n      if (id==19 || id==20 || id==21) {\n        dims[0] = 3; dims[1] = _depth; dims[2] = _height; dims[3] = _width; dims[4] = colorspace; nbdims = 5;\n      }\n      if (id==22 || id==23 || id==25) {\n        dims[0] = _spectrum; dims[1] = _width; nbdims = 2;\n      }\n      if (id==26 || id==27 || id==29) {\n        dims[0] = _spectrum; dims[1] = _height; dims[2] = _width; nbdims=3;\n      }\n      if (id==30 || id==31 || id==33) {\n        dims[0] = _spectrum; dims[1] = _depth; dims[2] = _height; dims[3] = _width; nbdims = 4;\n      }\n      return nbdims;\n    }\n\n    const CImg<T>& _save_pandore(std::FILE *const file, const char *const filename,\n                                 const unsigned int colorspace) const {\n\n#define __cimg_save_pandore_case(dtype) \\\n       dtype *buffer = new dtype[size()]; \\\n       const T *ptrs = _data; \\\n       cimg_foroff(*this,off) *(buffer++) = (dtype)(*(ptrs++)); \\\n       buffer-=size(); \\\n       cimg::fwrite(buffer,size(),nfile); \\\n       delete[] buffer\n\n#define _cimg_save_pandore_case(sy,sz,sv,stype,id) \\\n      if (!saved && (sy?(sy==_height):true) && (sz?(sz==_depth):true) && \\\n          (sv?(sv==_spectrum):true) && !std::strcmp(stype,pixel_type())) { \\\n        unsigned int *iheader = (unsigned int*)(header + 12); \\\n        nbdims = _save_pandore_header_length((*iheader=id),dims,colorspace); \\\n        cimg::fwrite(header,36,nfile); \\\n        if (sizeof(unsigned long)==4) { CImg<ulongT> ndims(5); \\\n          for (int d = 0; d<5; ++d) ndims[d] = (unsigned long)dims[d]; cimg::fwrite(ndims._data,nbdims,nfile); } \\\n        else if (sizeof(unsigned int)==4) { CImg<uintT> ndims(5); \\\n          for (int d = 0; d<5; ++d) ndims[d] = (unsigned int)dims[d]; cimg::fwrite(ndims._data,nbdims,nfile); } \\\n        else if (sizeof(unsigned short)==4) { CImg<ushortT> ndims(5); \\\n          for (int d = 0; d<5; ++d) ndims[d] = (unsigned short)dims[d]; cimg::fwrite(ndims._data,nbdims,nfile); } \\\n        else throw CImgIOException(_cimg_instance \\\n                                   \"save_pandore(): Unsupported datatype for file '%s'.\",\\\n                                   cimg_instance, \\\n                                   filename?filename:\"(FILE*)\"); \\\n        if (id==2 || id==5 || id==8 || id==16 || id==19 || id==22 || id==26 || id==30) { \\\n          __cimg_save_pandore_case(unsigned char); \\\n        } else if (id==3 || id==6 || id==9 || id==17 || id==20 || id==23 || id==27 || id==31) { \\\n          if (sizeof(unsigned long)==4) { __cimg_save_pandore_case(unsigned long); } \\\n          else if (sizeof(unsigned int)==4) { __cimg_save_pandore_case(unsigned int); } \\\n          else if (sizeof(unsigned short)==4) { __cimg_save_pandore_case(unsigned short); } \\\n          else throw CImgIOException(_cimg_instance \\\n                                     \"save_pandore(): Unsupported datatype for file '%s'.\",\\\n                                     cimg_instance, \\\n                                     filename?filename:\"(FILE*)\"); \\\n        } else if (id==4 || id==7 || id==10 || id==18 || id==21 || id==25 || id==29 || id==33) { \\\n          if (sizeof(double)==4) { __cimg_save_pandore_case(double); } \\\n          else if (sizeof(float)==4) { __cimg_save_pandore_case(float); } \\\n          else throw CImgIOException(_cimg_instance \\\n                                     \"save_pandore(): Unsupported datatype for file '%s'.\",\\\n                                     cimg_instance, \\\n                                     filename?filename:\"(FILE*)\"); \\\n        } \\\n        saved = true; \\\n      }\n\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_pandore(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      unsigned char header[36] = { 'P','A','N','D','O','R','E','0','4',0,0,0,\n                                   0,0,0,0,'C','I','m','g',0,0,0,0,0,\n                                   'N','o',' ','d','a','t','e',0,0,0,0 };\n      unsigned int nbdims, dims[5] = { 0 };\n      bool saved = false;\n      _cimg_save_pandore_case(1,1,1,\"unsigned char\",2);\n      _cimg_save_pandore_case(1,1,1,\"char\",3);\n      _cimg_save_pandore_case(1,1,1,\"unsigned short\",3);\n      _cimg_save_pandore_case(1,1,1,\"short\",3);\n      _cimg_save_pandore_case(1,1,1,\"unsigned int\",3);\n      _cimg_save_pandore_case(1,1,1,\"int\",3);\n      _cimg_save_pandore_case(1,1,1,\"unsigned int64\",3);\n      _cimg_save_pandore_case(1,1,1,\"int64\",3);\n      _cimg_save_pandore_case(1,1,1,\"float\",4);\n      _cimg_save_pandore_case(1,1,1,\"double\",4);\n\n      _cimg_save_pandore_case(0,1,1,\"unsigned char\",5);\n      _cimg_save_pandore_case(0,1,1,\"char\",6);\n      _cimg_save_pandore_case(0,1,1,\"unsigned short\",6);\n      _cimg_save_pandore_case(0,1,1,\"short\",6);\n      _cimg_save_pandore_case(0,1,1,\"unsigned int\",6);\n      _cimg_save_pandore_case(0,1,1,\"int\",6);\n      _cimg_save_pandore_case(0,1,1,\"unsigned int64\",6);\n      _cimg_save_pandore_case(0,1,1,\"int64\",6);\n      _cimg_save_pandore_case(0,1,1,\"float\",7);\n      _cimg_save_pandore_case(0,1,1,\"double\",7);\n\n      _cimg_save_pandore_case(0,0,1,\"unsigned char\",8);\n      _cimg_save_pandore_case(0,0,1,\"char\",9);\n      _cimg_save_pandore_case(0,0,1,\"unsigned short\",9);\n      _cimg_save_pandore_case(0,0,1,\"short\",9);\n      _cimg_save_pandore_case(0,0,1,\"unsigned int\",9);\n      _cimg_save_pandore_case(0,0,1,\"int\",9);\n      _cimg_save_pandore_case(0,0,1,\"unsigned int64\",9);\n      _cimg_save_pandore_case(0,0,1,\"int64\",9);\n      _cimg_save_pandore_case(0,0,1,\"float\",10);\n      _cimg_save_pandore_case(0,0,1,\"double\",10);\n\n      _cimg_save_pandore_case(0,1,3,\"unsigned char\",16);\n      _cimg_save_pandore_case(0,1,3,\"char\",17);\n      _cimg_save_pandore_case(0,1,3,\"unsigned short\",17);\n      _cimg_save_pandore_case(0,1,3,\"short\",17);\n      _cimg_save_pandore_case(0,1,3,\"unsigned int\",17);\n      _cimg_save_pandore_case(0,1,3,\"int\",17);\n      _cimg_save_pandore_case(0,1,3,\"unsigned int64\",17);\n      _cimg_save_pandore_case(0,1,3,\"int64\",17);\n      _cimg_save_pandore_case(0,1,3,\"float\",18);\n      _cimg_save_pandore_case(0,1,3,\"double\",18);\n\n      _cimg_save_pandore_case(0,0,3,\"unsigned char\",19);\n      _cimg_save_pandore_case(0,0,3,\"char\",20);\n      _cimg_save_pandore_case(0,0,3,\"unsigned short\",20);\n      _cimg_save_pandore_case(0,0,3,\"short\",20);\n      _cimg_save_pandore_case(0,0,3,\"unsigned int\",20);\n      _cimg_save_pandore_case(0,0,3,\"int\",20);\n      _cimg_save_pandore_case(0,0,3,\"unsigned int64\",20);\n      _cimg_save_pandore_case(0,0,3,\"int64\",20);\n      _cimg_save_pandore_case(0,0,3,\"float\",21);\n      _cimg_save_pandore_case(0,0,3,\"double\",21);\n\n      _cimg_save_pandore_case(1,1,0,\"unsigned char\",22);\n      _cimg_save_pandore_case(1,1,0,\"char\",23);\n      _cimg_save_pandore_case(1,1,0,\"unsigned short\",23);\n      _cimg_save_pandore_case(1,1,0,\"short\",23);\n      _cimg_save_pandore_case(1,1,0,\"unsigned int\",23);\n      _cimg_save_pandore_case(1,1,0,\"int\",23);\n      _cimg_save_pandore_case(1,1,0,\"unsigned int64\",23);\n      _cimg_save_pandore_case(1,1,0,\"int64\",23);\n      _cimg_save_pandore_case(1,1,0,\"float\",25);\n      _cimg_save_pandore_case(1,1,0,\"double\",25);\n\n      _cimg_save_pandore_case(0,1,0,\"unsigned char\",26);\n      _cimg_save_pandore_case(0,1,0,\"char\",27);\n      _cimg_save_pandore_case(0,1,0,\"unsigned short\",27);\n      _cimg_save_pandore_case(0,1,0,\"short\",27);\n      _cimg_save_pandore_case(0,1,0,\"unsigned int\",27);\n      _cimg_save_pandore_case(0,1,0,\"int\",27);\n      _cimg_save_pandore_case(0,1,0,\"unsigned int64\",27);\n      _cimg_save_pandore_case(0,1,0,\"int64\",27);\n      _cimg_save_pandore_case(0,1,0,\"float\",29);\n      _cimg_save_pandore_case(0,1,0,\"double\",29);\n\n      _cimg_save_pandore_case(0,0,0,\"unsigned char\",30);\n      _cimg_save_pandore_case(0,0,0,\"char\",31);\n      _cimg_save_pandore_case(0,0,0,\"unsigned short\",31);\n      _cimg_save_pandore_case(0,0,0,\"short\",31);\n      _cimg_save_pandore_case(0,0,0,\"unsigned int\",31);\n      _cimg_save_pandore_case(0,0,0,\"int\",31);\n      _cimg_save_pandore_case(0,0,0,\"unsigned int64\",31);\n      _cimg_save_pandore_case(0,0,0,\"int64\",31);\n      _cimg_save_pandore_case(0,0,0,\"float\",33);\n      _cimg_save_pandore_case(0,0,0,\"double\",33);\n\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a raw data file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param is_multiplexed Tells if the image channels are stored in a multiplexed way (\\c true) or not (\\c false).\n       \\note The .raw format does not store the image dimensions in the output file,\n       so you have to keep track of them somewhere to be able to read the file correctly afterwards.\n    **/\n    const CImg<T>& save_raw(const char *const filename, const bool is_multiplexed=false) const {\n      return _save_raw(0,filename,is_multiplexed);\n    }\n\n    //! Save image as a raw data file \\overloading.\n    /**\n       Same as save_raw(const char *,bool) const\n       with a file stream argument instead of a filename string.\n    **/\n    const CImg<T>& save_raw(std::FILE *const file, const bool is_multiplexed=false) const {\n      return _save_raw(file,0,is_multiplexed);\n    }\n\n    const CImg<T>& _save_raw(std::FILE *const file, const char *const filename, const bool is_multiplexed) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_raw(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      if (!is_multiplexed) cimg::fwrite(_data,size(),nfile);\n      else {\n        CImg<T> buf(_spectrum);\n        cimg_forXYZ(*this,x,y,z) {\n          cimg_forC(*this,c) buf[c] = (*this)(x,y,z,c);\n          cimg::fwrite(buf._data,_spectrum,nfile);\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save image as a .yuv video file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param is_rgb Tells if pixel values of the instance image are RGB-coded (\\c true) or YUV-coded (\\c false).\n       \\note Each slice of the instance image is considered to be a single frame of the output video file.\n    **/\n    const CImg<T>& save_yuv(const char *const filename, const bool is_rgb=true) const {\n      get_split('z').save_yuv(filename,is_rgb);\n      return *this;\n    }\n\n    //! Save image as a .yuv video file \\overloading.\n    /**\n       Same as save_yuv(const char*,bool) const\n       with a file stream argument instead of a filename string.\n    **/\n    const CImg<T>& save_yuv(std::FILE *const file, const bool is_rgb=true) const {\n      get_split('z').save_yuv(file,is_rgb);\n      return *this;\n    }\n\n    //! Save 3d object as an Object File Format (.off) file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param primitives List of 3d object primitives.\n       \\param colors List of 3d object colors.\n       \\note\n       - Instance image contains the vertices data of the 3d object.\n       - Textured, transparent or sphere-shaped primitives cannot be managed by the .off file format.\n       Such primitives will be lost or simplified during file saving.\n       - The .off file format is <a href=\"http://people.sc.fsu.edu/~jburkardt/html/off_format.html\">described here</a>.\n    **/\n    template<typename tf, typename tc>\n    const CImg<T>& save_off(const CImgList<tf>& primitives, const CImgList<tc>& colors,\n                            const char *const filename) const {\n      return _save_off(primitives,colors,0,filename);\n    }\n\n    //! Save 3d object as an Object File Format (.off) file \\overloading.\n    /**\n       Same as save_off(const CImgList<tf>&,const CImgList<tc>&,const char*) const\n       with a file stream argument instead of a filename string.\n    **/\n    template<typename tf, typename tc>\n    const CImg<T>& save_off(const CImgList<tf>& primitives, const CImgList<tc>& colors,\n                            std::FILE *const file) const {\n      return _save_off(primitives,colors,file,0);\n    }\n\n    template<typename tf, typename tc>\n    const CImg<T>& _save_off(const CImgList<tf>& primitives, const CImgList<tc>& colors,\n                             std::FILE *const file, const char *const filename) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_off(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty())\n        throw CImgInstanceException(_cimg_instance\n                                    \"save_off(): Empty instance, for file '%s'.\",\n                                    cimg_instance,\n                                    filename?filename:\"(FILE*)\");\n\n      CImgList<T> opacities;\n      CImg<charT> error_message(1024);\n      if (!is_object3d(primitives,colors,opacities,true,error_message))\n        throw CImgInstanceException(_cimg_instance\n                                    \"save_off(): Invalid specified 3d object, for file '%s' (%s).\",\n                                    cimg_instance,\n                                    filename?filename:\"(FILE*)\",error_message.data());\n\n      const CImg<tc> default_color(1,3,1,1,200);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"w\");\n      unsigned int supported_primitives = 0;\n      cimglist_for(primitives,l) if (primitives[l].size()!=5) ++supported_primitives;\n      std::fprintf(nfile,\"OFF\\n%u %u %u\\n\",_width,supported_primitives,3*primitives._width);\n      cimg_forX(*this,i) std::fprintf(nfile,\"%f %f %f\\n\",\n                                      (float)((*this)(i,0)),(float)((*this)(i,1)),(float)((*this)(i,2)));\n      cimglist_for(primitives,l) {\n        const CImg<tc>& color = l<colors.width()?colors[l]:default_color;\n        const unsigned int psiz = primitives[l].size(), csiz = color.size();\n        const float r = color[0]/255.0f, g = (csiz>1?color[1]:r)/255.0f, b = (csiz>2?color[2]:g)/255.0f;\n        switch (psiz) {\n        case 1 : std::fprintf(nfile,\"1 %u %f %f %f\\n\",\n                              (unsigned int)primitives(l,0),r,g,b); break;\n        case 2 : std::fprintf(nfile,\"2 %u %u %f %f %f\\n\",\n                              (unsigned int)primitives(l,0),(unsigned int)primitives(l,1),r,g,b); break;\n        case 3 : std::fprintf(nfile,\"3 %u %u %u %f %f %f\\n\",\n                              (unsigned int)primitives(l,0),(unsigned int)primitives(l,2),\n                              (unsigned int)primitives(l,1),r,g,b); break;\n        case 4 : std::fprintf(nfile,\"4 %u %u %u %u %f %f %f\\n\",\n                              (unsigned int)primitives(l,0),(unsigned int)primitives(l,3),\n                              (unsigned int)primitives(l,2),(unsigned int)primitives(l,1),r,g,b); break;\n        case 5 : std::fprintf(nfile,\"2 %u %u %f %f %f\\n\",\n                              (unsigned int)primitives(l,0),(unsigned int)primitives(l,1),r,g,b); break;\n        case 6 : {\n          const unsigned int xt = (unsigned int)primitives(l,2), yt = (unsigned int)primitives(l,3);\n          const float\n            rt = color.atXY(xt,yt,0)/255.0f,\n            gt = (csiz>1?color.atXY(xt,yt,1):r)/255.0f,\n            bt = (csiz>2?color.atXY(xt,yt,2):g)/255.0f;\n          std::fprintf(nfile,\"2 %u %u %f %f %f\\n\",\n                       (unsigned int)primitives(l,0),(unsigned int)primitives(l,1),rt,gt,bt);\n        } break;\n        case 9 : {\n          const unsigned int xt = (unsigned int)primitives(l,3), yt = (unsigned int)primitives(l,4);\n          const float\n            rt = color.atXY(xt,yt,0)/255.0f,\n            gt = (csiz>1?color.atXY(xt,yt,1):r)/255.0f,\n            bt = (csiz>2?color.atXY(xt,yt,2):g)/255.0f;\n          std::fprintf(nfile,\"3 %u %u %u %f %f %f\\n\",\n                       (unsigned int)primitives(l,0),(unsigned int)primitives(l,2),\n                       (unsigned int)primitives(l,1),rt,gt,bt);\n        } break;\n        case 12 : {\n          const unsigned int xt = (unsigned int)primitives(l,4), yt = (unsigned int)primitives(l,5);\n          const float\n            rt = color.atXY(xt,yt,0)/255.0f,\n            gt = (csiz>1?color.atXY(xt,yt,1):r)/255.0f,\n            bt = (csiz>2?color.atXY(xt,yt,2):g)/255.0f;\n          std::fprintf(nfile,\"4 %u %u %u %u %f %f %f\\n\",\n                       (unsigned int)primitives(l,0),(unsigned int)primitives(l,3),\n                       (unsigned int)primitives(l,2),(unsigned int)primitives(l,1),rt,gt,bt);\n        } break;\n        }\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save volumetric image as a video, using the OpenCV library.\n    /**\n      \\param filename Filename to write data to.\n      \\param fps Number of frames per second.\n      \\param codec Type of compression (See http://www.fourcc.org/codecs.php to see available codecs).\n      \\param keep_open Tells if the video writer associated to the specified filename\n        must be kept open or not (to allow frames to be added in the same file afterwards).\n    **/\n    const CImg<T>& save_video(const char *const filename, const unsigned int fps=25,\n                              const char *codec=0, const bool keep_open=false) const {\n      if (is_empty()) { CImgList<T>().save_video(filename,fps,codec,keep_open); return *this; }\n      CImgList<T> list;\n      get_split('z').move_to(list);\n      list.save_video(filename,fps,codec,keep_open);\n      return *this;\n    }\n\n    //! Save volumetric image as a video, using ffmpeg external binary.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param fps Video framerate.\n       \\param codec Video codec, as a C-string.\n       \\param bitrate Video bitrate.\n       \\note\n       - Each slice of the instance image is considered to be a single frame of the output video file.\n       - This method uses \\c ffmpeg, an external executable binary provided by\n         <a href=\"http://www.ffmpeg.org\">FFmpeg</a>.\n       It must be installed for the method to succeed.\n    **/\n    const CImg<T>& save_ffmpeg_external(const char *const filename, const unsigned int fps=25,\n                                        const char *const codec=0, const unsigned int bitrate=2048) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_ffmpeg_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n      CImgList<T> list;\n      get_split('z').move_to(list);\n      list.save_ffmpeg_external(filename,fps,codec,bitrate);\n      return *this;\n    }\n\n    //! Save image using gzip external binary.\n    /**\n       \\param filename Filename, as a C-string.\n       \\note This method uses \\c gzip, an external executable binary provided by\n         <a href=\"//http://www.gzip.org\">gzip</a>.\n       It must be installed for the method to succeed.\n    **/\n    const CImg<T>& save_gzip_external(const char *const filename) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_gzip_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      const char\n        *ext = cimg::split_filename(filename,body),\n        *ext2 = cimg::split_filename(body,0);\n      std::FILE *file;\n      do {\n        if (!cimg::strcasecmp(ext,\"gz\")) {\n          if (*ext2) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                   cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext2);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.cimg\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        } else {\n          if (*ext) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                  cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.cimg\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        }\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      save(filename_tmp);\n      cimg_snprintf(command,command._width,\"%s -c \\\"%s\\\" > \\\"%s\\\"\",\n                    cimg::gzip_path(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    CImg<charT>::string(filename)._system_strescape().data());\n      cimg::system(command);\n      file = std_fopen(filename,\"rb\");\n      if (!file)\n        throw CImgIOException(_cimg_instance\n                              \"save_gzip_external(): Failed to save file '%s' with external command 'gzip'.\",\n                              cimg_instance,\n                              filename);\n\n      else cimg::fclose(file);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Save image using GraphicsMagick's external binary.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param quality Image quality (expressed in percent), when the file format supports it.\n       \\note This method uses \\c gm, an external executable binary provided by\n         <a href=\"http://www.graphicsmagick.org\">GraphicsMagick</a>.\n       It must be installed for the method to succeed.\n    **/\n    const CImg<T>& save_graphicsmagick_external(const char *const filename, const unsigned int quality=100) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_graphicsmagick_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_other(): File '%s', saving a volumetric image with an external call to \"\n                   \"GraphicsMagick only writes the first image slice.\",\n                   cimg_instance,filename);\n\n#ifdef cimg_use_png\n#define _cimg_sge_ext1 \"png\"\n#define _cimg_sge_ext2 \"png\"\n#else\n#define _cimg_sge_ext1 \"pgm\"\n#define _cimg_sge_ext2 \"ppm\"\n#endif\n      CImg<charT> command(1024), filename_tmp(256);\n      std::FILE *file;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),\n                      _spectrum==1?_cimg_sge_ext1:_cimg_sge_ext2);\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n#ifdef cimg_use_png\n      save_png(filename_tmp);\n#else\n      save_pnm(filename_tmp);\n#endif\n      cimg_snprintf(command,command._width,\"%s convert -quality %u \\\"%s\\\" \\\"%s\\\"\",\n                    cimg::graphicsmagick_path(),quality,\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    CImg<charT>::string(filename)._system_strescape().data());\n      cimg::system(command);\n      file = std_fopen(filename,\"rb\");\n      if (!file)\n        throw CImgIOException(_cimg_instance\n                              \"save_graphicsmagick_external(): Failed to save file '%s' with external command 'gm'.\",\n                              cimg_instance,\n                              filename);\n\n      if (file) cimg::fclose(file);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Save image using ImageMagick's external binary.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param quality Image quality (expressed in percent), when the file format supports it.\n       \\note This method uses \\c convert, an external executable binary provided by\n       <a href=\"http://www.imagemagick.org\">ImageMagick</a>.\n       It must be installed for the method to succeed.\n    **/\n    const CImg<T>& save_imagemagick_external(const char *const filename, const unsigned int quality=100) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_imagemagick_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_other(): File '%s', saving a volumetric image with an external call to \"\n                   \"ImageMagick only writes the first image slice.\",\n                   cimg_instance,filename);\n#ifdef cimg_use_png\n#define _cimg_sie_ext1 \"png\"\n#define _cimg_sie_ext2 \"png\"\n#else\n#define _cimg_sie_ext1 \"pgm\"\n#define _cimg_sie_ext2 \"ppm\"\n#endif\n      CImg<charT> command(1024), filename_tmp(256);\n      std::FILE *file;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",cimg::temporary_path(),\n                      cimg_file_separator,cimg::filenamerand(),_spectrum==1?_cimg_sie_ext1:_cimg_sie_ext2);\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n#ifdef cimg_use_png\n      save_png(filename_tmp);\n#else\n      save_pnm(filename_tmp);\n#endif\n      cimg_snprintf(command,command._width,\"%s -quality %u \\\"%s\\\" \\\"%s\\\"\",\n                    cimg::imagemagick_path(),quality,\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    CImg<charT>::string(filename)._system_strescape().data());\n      cimg::system(command);\n      file = std_fopen(filename,\"rb\");\n      if (!file)\n        throw CImgIOException(_cimg_instance\n                              \"save_imagemagick_external(): Failed to save file '%s' with external command 'convert'.\",\n                              cimg_instance,\n                              filename);\n\n      if (file) cimg::fclose(file);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Save image as a Dicom file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\note This method uses \\c medcon, an external executable binary provided by\n         <a href=\"http://xmedcon.sourceforge.net\">(X)Medcon</a>.\n       It must be installed for the method to succeed.\n    **/\n    const CImg<T>& save_medcon_external(const char *const filename) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_medcon_external(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      std::FILE *file;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s.hdr\",cimg::filenamerand());\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      save_analyze(filename_tmp);\n      cimg_snprintf(command,command._width,\"%s -w -c dicom -o \\\"%s\\\" -f \\\"%s\\\"\",\n                    cimg::medcon_path(),\n                    CImg<charT>::string(filename)._system_strescape().data(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command);\n      std::remove(filename_tmp);\n      cimg::split_filename(filename_tmp,body);\n      cimg_snprintf(filename_tmp,filename_tmp._width,\"%s.img\",body._data);\n      std::remove(filename_tmp);\n\n      file = std_fopen(filename,\"rb\");\n      if (!file) {\n        cimg_snprintf(command,command._width,\"m000-%s\",filename);\n        file = std_fopen(command,\"rb\");\n        if (!file) {\n          cimg::fclose(cimg::fopen(filename,\"r\"));\n          throw CImgIOException(_cimg_instance\n                                \"save_medcon_external(): Failed to save file '%s' with external command 'medcon'.\",\n                                cimg_instance,\n                                filename);\n        }\n      }\n      cimg::fclose(file);\n      std::rename(command,filename);\n      return *this;\n    }\n\n    // Save image for non natively supported formats.\n    /**\n       \\param filename Filename, as a C-string.\n       \\param quality Image quality (expressed in percent), when the file format supports it.\n       \\note\n       - The filename extension tells about the desired file format.\n       - This method tries to save the instance image as a file, using external tools from\n       <a href=\"http://www.imagemagick.org\">ImageMagick</a> or\n       <a href=\"http://www.graphicsmagick.org\">GraphicsMagick</a>.\n         At least one of these tool must be installed for the method to succeed.\n       - It is recommended to use the generic method save(const char*, int) const instead,\n         as it can handle some file formats natively.\n    **/\n    const CImg<T>& save_other(const char *const filename, const unsigned int quality=100) const {\n      if (!filename)\n        throw CImgArgumentException(_cimg_instance\n                                    \"save_other(): Specified filename is (null).\",\n                                    cimg_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n      if (_depth>1)\n        cimg::warn(_cimg_instance\n                   \"save_other(): File '%s', saving a volumetric image with an external call to \"\n                   \"ImageMagick or GraphicsMagick only writes the first image slice.\",\n                   cimg_instance,filename);\n\n      const unsigned int omode = cimg::exception_mode();\n      bool is_saved = true;\n      cimg::exception_mode(0);\n      try { save_magick(filename); }\n      catch (CImgException&) {\n        try { save_imagemagick_external(filename,quality); }\n        catch (CImgException&) {\n          try { save_graphicsmagick_external(filename,quality); }\n          catch (CImgException&) {\n            is_saved = false;\n          }\n        }\n      }\n      cimg::exception_mode(omode);\n      if (!is_saved)\n        throw CImgIOException(_cimg_instance\n                              \"save_other(): Failed to save file '%s'. Format is not natively supported, \"\n                              \"and no external commands succeeded.\",\n                              cimg_instance,\n                              filename);\n      return *this;\n    }\n\n    //! Serialize a CImg<T> instance into a raw CImg<unsigned char> buffer.\n    /**\n       \\param is_compressed tells if zlib compression must be used for serialization\n       (this requires 'cimg_use_zlib' been enabled).\n    **/\n    CImg<ucharT> get_serialize(const bool is_compressed=false) const {\n      return CImgList<T>(*this,true).get_serialize(is_compressed);\n    }\n\n    // [internal] Return a 40x38 color logo of a 'danger' item.\n    static CImg<T> _logo40x38() {\n      CImg<T> res(40,38,1,3);\n      const unsigned char *ptrs = cimg::logo40x38;\n      T *ptr1 = res.data(0,0,0,0), *ptr2 = res.data(0,0,0,1), *ptr3 = res.data(0,0,0,2);\n      for (ulongT off = 0; off<(ulongT)res._width*res._height;) {\n        const unsigned char n = *(ptrs++), r = *(ptrs++), g = *(ptrs++), b = *(ptrs++);\n        for (unsigned int l = 0; l<n; ++off, ++l) { *(ptr1++) = (T)r; *(ptr2++) = (T)g; *(ptr3++) = (T)b; }\n      }\n      return res;\n    }\n\n    //@}\n  };\n\n  /*\n   #-----------------------------------------\n   #\n   #\n   #\n   # Definition of the CImgList<T> structure\n   #\n   #\n   #\n   #------------------------------------------\n   */\n  //! Represent a list of images CImg<T>.\n  template<typename T>\n  struct CImgList {\n    unsigned int _width, _allocated_width;\n    CImg<T> *_data;\n\n    //! Simple iterator type, to loop through each image of a list.\n    /**\n       \\note\n       - The \\c CImgList<T>::iterator type is defined as a <tt>CImg<T>*</tt>.\n       - You may use it like this:\n       \\code\n       CImgList<> list;   // Assuming this image list is not empty.\n       for (CImgList<>::iterator it = list.begin(); it<list.end(); ++it) (*it).mirror('x');\n       \\endcode\n       - Using the loop macro \\c cimglist_for is another (more concise) alternative:\n       \\code\n       cimglist_for(list,l) list[l].mirror('x');\n       \\endcode\n    **/\n    typedef CImg<T>* iterator;\n\n    //! Simple const iterator type, to loop through each image of a \\c const list instance.\n    /**\n       \\note\n       - The \\c CImgList<T>::const_iterator type is defined to be a <tt>const CImg<T>*</tt>.\n       - Similar to CImgList<T>::iterator, but for constant list instances.\n    **/\n    typedef const CImg<T>* const_iterator;\n\n    //! Pixel value type.\n    /**\n       Refer to the pixels value type of the images in the list.\n       \\note\n       - The \\c CImgList<T>::value_type type of a \\c CImgList<T> is defined to be a \\c T.\n         It is then similar to CImg<T>::value_type.\n       - \\c CImgList<T>::value_type is actually not used in %CImg methods. It has been mainly defined for\n         compatibility with STL naming conventions.\n    **/\n    typedef T value_type;\n\n    // Define common types related to template type T.\n    typedef typename cimg::superset<T,bool>::type Tbool;\n    typedef typename cimg::superset<T,unsigned char>::type Tuchar;\n    typedef typename cimg::superset<T,char>::type Tchar;\n    typedef typename cimg::superset<T,unsigned short>::type Tushort;\n    typedef typename cimg::superset<T,short>::type Tshort;\n    typedef typename cimg::superset<T,unsigned int>::type Tuint;\n    typedef typename cimg::superset<T,int>::type Tint;\n    typedef typename cimg::superset<T,cimg_ulong>::type Tulong;\n    typedef typename cimg::superset<T,cimg_long>::type Tlong;\n    typedef typename cimg::superset<T,float>::type Tfloat;\n    typedef typename cimg::superset<T,double>::type Tdouble;\n    typedef typename cimg::last<T,bool>::type boolT;\n    typedef typename cimg::last<T,unsigned char>::type ucharT;\n    typedef typename cimg::last<T,char>::type charT;\n    typedef typename cimg::last<T,unsigned short>::type ushortT;\n    typedef typename cimg::last<T,short>::type shortT;\n    typedef typename cimg::last<T,unsigned int>::type uintT;\n    typedef typename cimg::last<T,int>::type intT;\n    typedef typename cimg::last<T,cimg_ulong>::type ulongT;\n    typedef typename cimg::last<T,cimg_long>::type longT;\n    typedef typename cimg::last<T,cimg_uint64>::type uint64T;\n    typedef typename cimg::last<T,cimg_int64>::type int64T;\n    typedef typename cimg::last<T,float>::type floatT;\n    typedef typename cimg::last<T,double>::type doubleT;\n\n    //@}\n    //---------------------------\n    //\n    //! \\name Plugins\n    //@{\n    //---------------------------\n#ifdef cimglist_plugin\n#include cimglist_plugin\n#endif\n#ifdef cimglist_plugin1\n#include cimglist_plugin1\n#endif\n#ifdef cimglist_plugin2\n#include cimglist_plugin2\n#endif\n#ifdef cimglist_plugin3\n#include cimglist_plugin3\n#endif\n#ifdef cimglist_plugin4\n#include cimglist_plugin4\n#endif\n#ifdef cimglist_plugin5\n#include cimglist_plugin5\n#endif\n#ifdef cimglist_plugin6\n#include cimglist_plugin6\n#endif\n#ifdef cimglist_plugin7\n#include cimglist_plugin7\n#endif\n#ifdef cimglist_plugin8\n#include cimglist_plugin8\n#endif\n\n    //@}\n    //--------------------------------------------------------\n    //\n    //! \\name Constructors / Destructor / Instance Management\n    //@{\n    //--------------------------------------------------------\n\n    //! Destructor.\n    /**\n       Destroy current list instance.\n       \\note\n       - Any allocated buffer is deallocated.\n       - Destroying an empty list does nothing actually.\n     **/\n    ~CImgList() {\n      delete[] _data;\n    }\n\n    //! Default constructor.\n    /**\n       Construct a new empty list instance.\n       \\note\n       - An empty list has no pixel data and its dimension width() is set to \\c 0, as well as its\n         image buffer pointer data().\n       - An empty list may be reassigned afterwards, with the family of the assign() methods.\n         In all cases, the type of pixels stays \\c T.\n     **/\n    CImgList():\n      _width(0),_allocated_width(0),_data(0) {}\n\n    //! Construct list containing empty images.\n    /**\n       \\param n Number of empty images.\n       \\note Useful when you know by advance the number of images you want to manage, as\n       it will allocate the right amount of memory for the list, without needs for reallocation\n       (that may occur when starting from an empty list and inserting several images in it).\n    **/\n    explicit CImgList(const unsigned int n):_width(n) {\n      if (n) _data = new CImg<T>[_allocated_width = std::max(16U,(unsigned int)cimg::nearest_pow2(n))];\n      else { _allocated_width = 0; _data = 0; }\n    }\n\n    //! Construct list containing images of specified size.\n    /**\n       \\param n Number of images.\n       \\param width Width of images.\n       \\param height Height of images.\n       \\param depth Depth of images.\n       \\param spectrum Number of channels of images.\n       \\note Pixel values are not initialized and may probably contain garbage.\n    **/\n    CImgList(const unsigned int n, const unsigned int width, const unsigned int height=1,\n             const unsigned int depth=1, const unsigned int spectrum=1):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(n);\n      cimglist_apply(*this,assign)(width,height,depth,spectrum);\n    }\n\n    //! Construct list containing images of specified size, and initialize pixel values.\n    /**\n       \\param n Number of images.\n       \\param width Width of images.\n       \\param height Height of images.\n       \\param depth Depth of images.\n       \\param spectrum Number of channels of images.\n       \\param val Initialization value for images pixels.\n    **/\n    CImgList(const unsigned int n, const unsigned int width, const unsigned int height,\n             const unsigned int depth, const unsigned int spectrum, const T& val):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(n);\n      cimglist_apply(*this,assign)(width,height,depth,spectrum,val);\n    }\n\n    //! Construct list containing images of specified size, and initialize pixel values from a sequence of integers.\n    /**\n       \\param n Number of images.\n       \\param width Width of images.\n       \\param height Height of images.\n       \\param depth Depth of images.\n       \\param spectrum Number of channels of images.\n       \\param val0 First value of the initializing integers sequence.\n       \\param val1 Second value of the initializing integers sequence.\n       \\warning You must specify at least <tt>width*height*depth*spectrum</tt> values in your argument list,\n         or you will probably segfault.\n    **/\n    CImgList(const unsigned int n, const unsigned int width, const unsigned int height,\n             const unsigned int depth, const unsigned int spectrum, const int val0, const int val1, ...):\n      _width(0),_allocated_width(0),_data(0) {\n#define _CImgList_stdarg(t) { \\\n        assign(n,width,height,depth,spectrum); \\\n        const ulongT siz = (ulongT)width*height*depth*spectrum, nsiz = siz*n; \\\n        T *ptrd = _data->_data; \\\n        va_list ap; \\\n        va_start(ap,val1); \\\n        for (ulongT l = 0, s = 0, i = 0; i<nsiz; ++i) { \\\n          *(ptrd++) = (T)(i==0?val0:(i==1?val1:va_arg(ap,t))); \\\n          if ((++s)==siz) { ptrd = _data[++l]._data; s = 0; } \\\n        } \\\n        va_end(ap); \\\n      }\n      _CImgList_stdarg(int);\n    }\n\n    //! Construct list containing images of specified size, and initialize pixel values from a sequence of doubles.\n    /**\n       \\param n Number of images.\n       \\param width Width of images.\n       \\param height Height of images.\n       \\param depth Depth of images.\n       \\param spectrum Number of channels of images.\n       \\param val0 First value of the initializing doubles sequence.\n       \\param val1 Second value of the initializing doubles sequence.\n       \\warning You must specify at least <tt>width*height*depth*spectrum</tt> values in your argument list,\n         or you will probably segfault.\n    **/\n    CImgList(const unsigned int n, const unsigned int width, const unsigned int height,\n             const unsigned int depth, const unsigned int spectrum, const double val0, const double val1, ...):\n      _width(0),_allocated_width(0),_data(0) {\n      _CImgList_stdarg(double);\n    }\n\n    //! Construct list containing copies of an input image.\n    /**\n       \\param n Number of images.\n       \\param img Input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of \\c img.\n    **/\n    template<typename t>\n    CImgList(const unsigned int n, const CImg<t>& img, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(n);\n      cimglist_apply(*this,assign)(img,is_shared);\n    }\n\n    //! Construct list from one image.\n    /**\n       \\param img Input image to copy in the constructed list.\n       \\param is_shared Tells if the element of the list is a shared or non-shared copy of \\c img.\n     **/\n    template<typename t>\n    explicit CImgList(const CImg<t>& img, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(1);\n      _data[0].assign(img,is_shared);\n    }\n\n    //! Construct list from two images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n     **/\n    template<typename t1, typename t2>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(2);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared);\n    }\n\n    //! Construct list from three images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(3);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n    }\n\n    //! Construct list from four images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param img4 Fourth input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3, typename t4>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n             const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(4);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared);\n    }\n\n    //! Construct list from five images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param img4 Fourth input image to copy in the constructed list.\n       \\param img5 Fifth input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n             const CImg<t5>& img5, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(5);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared);\n    }\n\n    //! Construct list from six images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param img4 Fourth input image to copy in the constructed list.\n       \\param img5 Fifth input image to copy in the constructed list.\n       \\param img6 Sixth input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n             const CImg<t5>& img5, const CImg<t6>& img6, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(6);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n    }\n\n    //! Construct list from seven images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param img4 Fourth input image to copy in the constructed list.\n       \\param img5 Fifth input image to copy in the constructed list.\n       \\param img6 Sixth input image to copy in the constructed list.\n       \\param img7 Seventh input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6, typename t7>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n             const CImg<t5>& img5, const CImg<t6>& img6, const CImg<t7>& img7, const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(7);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n      _data[6].assign(img7,is_shared);\n    }\n\n    //! Construct list from eight images.\n    /**\n       \\param img1 First input image to copy in the constructed list.\n       \\param img2 Second input image to copy in the constructed list.\n       \\param img3 Third input image to copy in the constructed list.\n       \\param img4 Fourth input image to copy in the constructed list.\n       \\param img5 Fifth input image to copy in the constructed list.\n       \\param img6 Sixth input image to copy in the constructed list.\n       \\param img7 Seventh input image to copy in the constructed list.\n       \\param img8 Eighth input image to copy in the constructed list.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6, typename t7, typename t8>\n    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n             const CImg<t5>& img5, const CImg<t6>& img6, const CImg<t7>& img7, const CImg<t8>& img8,\n             const bool is_shared=false):\n      _width(0),_allocated_width(0),_data(0) {\n      assign(8);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n      _data[6].assign(img7,is_shared); _data[7].assign(img8,is_shared);\n    }\n\n    //! Construct list copy.\n    /**\n       \\param list Input list to copy.\n       \\note The shared state of each element of the constructed list is kept the same as in \\c list.\n    **/\n    template<typename t>\n    CImgList(const CImgList<t>& list):_width(0),_allocated_width(0),_data(0) {\n      assign(list._width);\n      cimglist_for(*this,l) _data[l].assign(list[l],false);\n    }\n\n    //! Construct list copy \\specialization.\n    CImgList(const CImgList<T>& list):_width(0),_allocated_width(0),_data(0) {\n      assign(list._width);\n      cimglist_for(*this,l) _data[l].assign(list[l],list[l]._is_shared);\n    }\n\n    //! Construct list copy, and force the shared state of the list elements.\n    /**\n       \\param list Input list to copy.\n       \\param is_shared Tells if the elements of the list are shared or non-shared copies of input images.\n    **/\n    template<typename t>\n    CImgList(const CImgList<t>& list, const bool is_shared):_width(0),_allocated_width(0),_data(0) {\n      assign(list._width);\n      cimglist_for(*this,l) _data[l].assign(list[l],is_shared);\n    }\n\n    //! Construct list by reading the content of a file.\n    /**\n       \\param filename Filename, as a C-string.\n    **/\n    explicit CImgList(const char *const filename):_width(0),_allocated_width(0),_data(0) {\n      assign(filename);\n    }\n\n    //! Construct list from the content of a display window.\n    /**\n       \\param disp Display window to get content from.\n       \\note Constructed list contains a single image only.\n    **/\n    explicit CImgList(const CImgDisplay& disp):_width(0),_allocated_width(0),_data(0) {\n      assign(disp);\n    }\n\n    //! Return a list with elements being shared copies of images in the list instance.\n    /**\n      \\note <tt>list2 = list1.get_shared()</tt> is equivalent to <tt>list2.assign(list1,true)</tt>.\n    **/\n    CImgList<T> get_shared() {\n      CImgList<T> res(_width);\n      cimglist_for(*this,l) res[l].assign(_data[l],true);\n      return res;\n    }\n\n    //! Return a list with elements being shared copies of images in the list instance \\const.\n    const CImgList<T> get_shared() const {\n      CImgList<T> res(_width);\n      cimglist_for(*this,l) res[l].assign(_data[l],true);\n      return res;\n    }\n\n    //! Destructor \\inplace.\n    /**\n       \\see CImgList().\n    **/\n    CImgList<T>& assign() {\n      delete[] _data;\n      _width = _allocated_width = 0;\n      _data = 0;\n      return *this;\n    }\n\n    //! Destructor \\inplace.\n    /**\n       Equivalent to assign().\n       \\note Only here for compatibility with STL naming conventions.\n    **/\n    CImgList<T>& clear() {\n      return assign();\n    }\n\n    //! Construct list containing empty images \\inplace.\n    /**\n       \\see CImgList(unsigned int).\n    **/\n    CImgList<T>& assign(const unsigned int n) {\n      if (!n) return assign();\n      if (_allocated_width<n || _allocated_width>(n<<2)) {\n        delete[] _data;\n        _data = new CImg<T>[_allocated_width = std::max(16U,(unsigned int)cimg::nearest_pow2(n))];\n      }\n      _width = n;\n      return *this;\n    }\n\n    //! Construct list containing images of specified size \\inplace.\n    /**\n       \\see CImgList(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int).\n    **/\n    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height=1,\n                        const unsigned int depth=1, const unsigned int spectrum=1) {\n      assign(n);\n      cimglist_apply(*this,assign)(width,height,depth,spectrum);\n      return *this;\n    }\n\n    //! Construct list containing images of specified size, and initialize pixel values \\inplace.\n    /**\n       \\see CImgList(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, const T).\n    **/\n    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height,\n                        const unsigned int depth, const unsigned int spectrum, const T& val) {\n      assign(n);\n      cimglist_apply(*this,assign)(width,height,depth,spectrum,val);\n      return *this;\n    }\n\n    //! Construct list with images of specified size, and initialize pixel values from a sequence of integers \\inplace.\n    /**\n       \\see CImgList(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, const int, const int, ...).\n    **/\n    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height,\n                        const unsigned int depth, const unsigned int spectrum, const int val0, const int val1, ...) {\n      _CImgList_stdarg(int);\n      return *this;\n    }\n\n    //! Construct list with images of specified size, and initialize pixel values from a sequence of doubles \\inplace.\n    /**\n       \\see CImgList(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, const double, const double, ...).\n    **/\n    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height,\n                        const unsigned int depth, const unsigned int spectrum,\n                        const double val0, const double val1, ...) {\n      _CImgList_stdarg(double);\n      return *this;\n    }\n\n    //! Construct list containing copies of an input image \\inplace.\n    /**\n       \\see CImgList(unsigned int, const CImg<t>&, bool).\n    **/\n    template<typename t>\n    CImgList<T>& assign(const unsigned int n, const CImg<t>& img, const bool is_shared=false) {\n      assign(n);\n      cimglist_apply(*this,assign)(img,is_shared);\n      return *this;\n    }\n\n    //! Construct list from one image \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, bool).\n    **/\n    template<typename t>\n    CImgList<T>& assign(const CImg<t>& img, const bool is_shared=false) {\n      assign(1);\n      _data[0].assign(img,is_shared);\n      return *this;\n    }\n\n    //! Construct list from two images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const bool is_shared=false) {\n      assign(2);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared);\n      return *this;\n    }\n\n    //! Construct list from three images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool is_shared=false) {\n      assign(3);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      return *this;\n    }\n\n    //! Construct list from four images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3, typename t4>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n                        const bool is_shared=false) {\n      assign(4);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared);\n      return *this;\n    }\n\n    //! Construct list from five images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n                        const CImg<t5>& img5, const bool is_shared=false) {\n      assign(5);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared);\n      return *this;\n    }\n\n    //! Construct list from six images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n                        const CImg<t5>& img5, const CImg<t6>& img6, const bool is_shared=false) {\n      assign(6);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n      return *this;\n    }\n\n    //! Construct list from seven images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6, typename t7>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n                        const CImg<t5>& img5, const CImg<t6>& img6, const CImg<t7>& img7, const bool is_shared=false) {\n      assign(7);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n      _data[6].assign(img7,is_shared);\n      return *this;\n    }\n\n    //! Construct list from eight images \\inplace.\n    /**\n       \\see CImgList(const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, const CImg<t>&, bool).\n    **/\n    template<typename t1, typename t2, typename t3, typename t4, typename t5, typename t6, typename t7, typename t8>\n    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,\n                        const CImg<t5>& img5, const CImg<t6>& img6, const CImg<t7>& img7, const CImg<t8>& img8,\n                        const bool is_shared=false) {\n      assign(8);\n      _data[0].assign(img1,is_shared); _data[1].assign(img2,is_shared); _data[2].assign(img3,is_shared);\n      _data[3].assign(img4,is_shared); _data[4].assign(img5,is_shared); _data[5].assign(img6,is_shared);\n      _data[6].assign(img7,is_shared); _data[7].assign(img8,is_shared);\n      return *this;\n    }\n\n    //! Construct list as a copy of an existing list and force the shared state of the list elements \\inplace.\n    /**\n      \\see CImgList(const CImgList<t>&, bool is_shared).\n    **/\n    template<typename t>\n    CImgList<T>& assign(const CImgList<t>& list, const bool is_shared=false) {\n      cimg::unused(is_shared);\n      assign(list._width);\n      cimglist_for(*this,l) _data[l].assign(list[l],false);\n      return *this;\n    }\n\n    //! Construct list as a copy of an existing list and force shared state of elements \\inplace \\specialization.\n    CImgList<T>& assign(const CImgList<T>& list, const bool is_shared=false) {\n      if (this==&list) return *this;\n      CImgList<T> res(list._width);\n      cimglist_for(res,l) res[l].assign(list[l],is_shared);\n      return res.move_to(*this);\n    }\n\n    //! Construct list by reading the content of a file \\inplace.\n    /**\n      \\see CImgList(const char *const).\n    **/\n    CImgList<T>& assign(const char *const filename) {\n      return load(filename);\n    }\n\n    //! Construct list from the content of a display window \\inplace.\n    /**\n      \\see CImgList(const CImgDisplay&).\n    **/\n    CImgList<T>& assign(const CImgDisplay &disp) {\n      return assign(CImg<T>(disp));\n    }\n\n    //! Transfer the content of the list instance to another list.\n    /**\n       \\param list Destination list.\n       \\note When returning, the current list instance is empty and the initial content of \\c list is destroyed.\n    **/\n    template<typename t>\n    CImgList<t>& move_to(CImgList<t>& list) {\n      list.assign(_width);\n      bool is_one_shared_element = false;\n      cimglist_for(*this,l) is_one_shared_element|=_data[l]._is_shared;\n      if (is_one_shared_element) cimglist_for(*this,l) list[l].assign(_data[l]);\n      else cimglist_for(*this,l) _data[l].move_to(list[l]);\n      assign();\n      return list;\n    }\n\n    //! Transfer the content of the list instance at a specified position in another list.\n    /**\n       \\param list Destination list.\n       \\param pos Index of the insertion in the list.\n       \\note When returning, the list instance is empty and the initial content of \\c list is preserved\n       (only images indexes may be modified).\n     **/\n    template<typename t>\n    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos) {\n      if (is_empty()) return list;\n      const unsigned int npos = pos>list._width?list._width:pos;\n      list.insert(_width,npos);\n      bool is_one_shared_element = false;\n      cimglist_for(*this,l) is_one_shared_element|=_data[l]._is_shared;\n      if (is_one_shared_element) cimglist_for(*this,l) list[npos + l].assign(_data[l]);\n      else cimglist_for(*this,l) _data[l].move_to(list[npos + l]);\n      assign();\n      return list;\n    }\n\n    //! Swap all fields between two list instances.\n    /**\n       \\param list List to swap fields with.\n       \\note Can be used to exchange the content of two lists in a fast way.\n    **/\n    CImgList<T>& swap(CImgList<T>& list) {\n      cimg::swap(_width,list._width,_allocated_width,list._allocated_width);\n      cimg::swap(_data,list._data);\n      return list;\n    }\n\n    //! Return a reference to an empty list.\n    /**\n      \\note Can be used to define default values in a function taking a CImgList<T> as an argument.\n      \\code\n      void f(const CImgList<char>& list=CImgList<char>::empty());\n      \\endcode\n    **/\n    static CImgList<T>& empty() {\n      static CImgList<T> _empty;\n      return _empty.assign();\n    }\n\n    //! Return a reference to an empty list \\const.\n    static const CImgList<T>& const_empty() {\n      static const CImgList<T> _empty;\n      return _empty;\n    }\n\n    //@}\n    //------------------------------------------\n    //\n    //! \\name Overloaded Operators\n    //@{\n    //------------------------------------------\n\n    //! Return a reference to one image element of the list.\n    /**\n       \\param pos Indice of the image element.\n    **/\n    CImg<T>& operator()(const unsigned int pos) {\n#if cimg_verbosity>=3\n      if (pos>=_width) {\n        cimg::warn(_cimglist_instance\n                   \"operator(): Invalid image request, at position [%u].\",\n                   cimglist_instance,\n                   pos);\n        return *_data;\n      }\n#endif\n      return _data[pos];\n    }\n\n    //! Return a reference to one image of the list.\n    /**\n       \\param pos Indice of the image element.\n    **/\n    const CImg<T>& operator()(const unsigned int pos) const {\n      return const_cast<CImgList<T>*>(this)->operator()(pos);\n    }\n\n    //! Return a reference to one pixel value of one image of the list.\n    /**\n       \\param pos Indice of the image element.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list(n,x,y,z,c)</tt> is equivalent to <tt>list[n](x,y,z,c)</tt>.\n    **/\n    T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,\n                  const unsigned int z=0, const unsigned int c=0) {\n      return (*this)[pos](x,y,z,c);\n    }\n\n    //! Return a reference to one pixel value of one image of the list \\const.\n    const T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,\n                        const unsigned int z=0, const unsigned int c=0) const {\n      return (*this)[pos](x,y,z,c);\n    }\n\n    //! Return pointer to the first image of the list.\n    /**\n       \\note Images in a list are stored as a buffer of \\c CImg<T>.\n    **/\n    operator CImg<T>*() {\n      return _data;\n    }\n\n    //! Return pointer to the first image of the list \\const.\n    operator const CImg<T>*() const {\n      return _data;\n    }\n\n    //! Construct list from one image \\inplace.\n    /**\n        \\param img Input image to copy in the constructed list.\n        \\note <tt>list = img;</tt> is equivalent to <tt>list.assign(img);</tt>.\n    **/\n    template<typename t>\n    CImgList<T>& operator=(const CImg<t>& img) {\n      return assign(img);\n    }\n\n    //! Construct list from another list.\n    /**\n       \\param list Input list to copy.\n       \\note <tt>list1 = list2</tt> is equivalent to <tt>list1.assign(list2);</tt>.\n    **/\n    template<typename t>\n    CImgList<T>& operator=(const CImgList<t>& list) {\n      return assign(list);\n    }\n\n    //! Construct list from another list \\specialization.\n    CImgList<T>& operator=(const CImgList<T>& list) {\n      return assign(list);\n    }\n\n    //! Construct list by reading the content of a file \\inplace.\n    /**\n       \\see CImgList(const char *const).\n    **/\n    CImgList<T>& operator=(const char *const filename) {\n      return assign(filename);\n    }\n\n    //! Construct list from the content of a display window \\inplace.\n    /**\n        \\see CImgList(const CImgDisplay&).\n    **/\n    CImgList<T>& operator=(const CImgDisplay& disp) {\n      return assign(disp);\n    }\n\n    //! Return a non-shared copy of a list.\n    /**\n        \\note <tt>+list</tt> is equivalent to <tt>CImgList<T>(list,false)</tt>.\n          It forces the copy to have non-shared elements.\n    **/\n    CImgList<T> operator+() const {\n      return CImgList<T>(*this,false);\n    }\n\n    //! Return a copy of the list instance, where image \\c img has been inserted at the end.\n    /**\n       \\param img Image inserted at the end of the instance copy.\n       \\note Define a convenient way to create temporary lists of images, as in the following code:\n       \\code\n       (img1,img2,img3,img4).display(\"My four images\");\n       \\endcode\n    **/\n    template<typename t>\n    CImgList<T>& operator,(const CImg<t>& img) {\n      return insert(img);\n    }\n\n    //! Return a copy of the list instance, where image \\c img has been inserted at the end \\const.\n    template<typename t>\n    CImgList<T> operator,(const CImg<t>& img) const {\n      return (+*this).insert(img);\n    }\n\n    //! Return a copy of the list instance, where all elements of input list \\c list have been inserted at the end.\n    /**\n       \\param list List inserted at the end of the instance copy.\n    **/\n    template<typename t>\n    CImgList<T>& operator,(const CImgList<t>& list) {\n      return insert(list);\n    }\n\n    //! Return a copy of the list instance, where all elements of input \\c list have been inserted at the end \\const.\n    template<typename t>\n    CImgList<T>& operator,(const CImgList<t>& list) const {\n      return (+*this).insert(list);\n    }\n\n    //! Return image corresponding to the appending of all images of the instance list along specified axis.\n    /**\n      \\param axis Appending axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\note <tt>list>'x'</tt> is equivalent to <tt>list.get_append('x')</tt>.\n    **/\n    CImg<T> operator>(const char axis) const {\n      return get_append(axis,0);\n    }\n\n    //! Return list corresponding to the splitting of all images of the instance list along specified axis.\n    /**\n      \\param axis Axis used for image splitting.\n      \\note <tt>list<'x'</tt> is equivalent to <tt>list.get_split('x')</tt>.\n    **/\n    CImgList<T> operator<(const char axis) const {\n      return get_split(axis);\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Instance Characteristics\n    //@{\n    //-------------------------------------\n\n    //! Return the type of image pixel values as a C string.\n    /**\n       Return a \\c char* string containing the usual type name of the image pixel values\n       (i.e. a stringified version of the template parameter \\c T).\n       \\note\n       - The returned string may contain spaces (as in \\c \"unsigned char\").\n       - If the pixel type \\c T does not correspond to a registered type, the string <tt>\"unknown\"</tt> is returned.\n    **/\n    static const char* pixel_type() {\n      return cimg::type<T>::string();\n    }\n\n    //! Return the size of the list, i.e. the number of images contained in it.\n    /**\n      \\note Similar to size() but returns result as a (signed) integer.\n    **/\n    int width() const {\n      return (int)_width;\n    }\n\n    //! Return the size of the list, i.e. the number of images contained in it.\n    /**\n      \\note Similar to width() but returns result as an unsigned integer.\n    **/\n    unsigned int size() const {\n      return _width;\n    }\n\n    //! Return pointer to the first image of the list.\n    /**\n       \\note Images in a list are stored as a buffer of \\c CImg<T>.\n    **/\n    CImg<T> *data() {\n      return _data;\n    }\n\n    //! Return pointer to the first image of the list \\const.\n    const CImg<T> *data() const {\n      return _data;\n    }\n\n    //! Return pointer to the pos-th image of the list.\n    /**\n       \\param pos Indice of the image element to access.\n       \\note <tt>list.data(n);</tt> is equivalent to <tt>list.data + n;</tt>.\n    **/\n#if cimg_verbosity>=3\n    CImg<T> *data(const unsigned int pos) {\n      if (pos>=size())\n        cimg::warn(_cimglist_instance\n                   \"data(): Invalid pointer request, at position [%u].\",\n                   cimglist_instance,\n                   pos);\n      return _data + pos;\n    }\n\n    const CImg<T> *data(const unsigned int l) const {\n      return const_cast<CImgList<T>*>(this)->data(l);\n    }\n#else\n    CImg<T> *data(const unsigned int l) {\n      return _data + l;\n    }\n\n    //! Return pointer to the pos-th image of the list \\const.\n    const CImg<T> *data(const unsigned int l) const {\n      return _data + l;\n    }\n#endif\n\n    //! Return iterator to the first image of the list.\n    /**\n    **/\n    iterator begin() {\n      return _data;\n    }\n\n    //! Return iterator to the first image of the list \\const.\n    const_iterator begin() const {\n      return _data;\n    }\n\n    //! Return iterator to one position after the last image of the list.\n    /**\n    **/\n    iterator end() {\n      return _data + _width;\n    }\n\n    //! Return iterator to one position after the last image of the list \\const.\n    const_iterator end() const {\n      return _data + _width;\n    }\n\n    //! Return reference to the first image of the list.\n    /**\n    **/\n    CImg<T>& front() {\n      return *_data;\n    }\n\n    //! Return reference to the first image of the list \\const.\n    const CImg<T>& front() const {\n      return *_data;\n    }\n\n    //! Return a reference to the last image of the list.\n    /**\n    **/\n    const CImg<T>& back() const {\n      return *(_data + _width - 1);\n    }\n\n    //! Return a reference to the last image of the list \\const.\n    CImg<T>& back() {\n      return *(_data + _width - 1);\n    }\n\n    //! Return pos-th image of the list.\n    /**\n       \\param pos Indice of the image element to access.\n    **/\n    CImg<T>& at(const int pos) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"at(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _data[cimg::cut(pos,0,width() - 1)];\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions.\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note <tt>list.atNXYZC(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZC(x,y,z,c);</tt>.\n    **/\n    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {\n      return (pos<0 || pos>=(int)_width)?(cimg::temporary(out_value)=out_value):_data[pos].atXYZC(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions \\const.\n    T atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (pos<0 || pos>=(int)_width)?out_value:_data[pos].atXYZC(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions.\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list.atNXYZC(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZC(x,y,z,c);</tt>.\n    **/\n    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXYZC(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXYZC(pos,x,y,z,c);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions \\const.\n    T atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXYZC(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXYZC(pos,x,y,z,c);\n    }\n\n    T& _atNXYZC(const int pos, const int x, const int y, const int z, const int c) {\n      return _data[cimg::cut(pos,0,width() - 1)].atXYZC(x,y,z,c);\n    }\n\n    T _atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {\n      return _data[cimg::cut(pos,0,width() - 1)].atXYZC(x,y,z,c);\n    }\n\n    //! Access pixel value with Dirichlet boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y,\\c z).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {\n      return (pos<0 || pos>=(int)_width)?(cimg::temporary(out_value)=out_value):_data[pos].atXYZ(x,y,z,c,out_value);\n    }\n\n    //! Access pixel value with Dirichlet boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y,\\c z) \\const.\n    T atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (pos<0 || pos>=(int)_width)?out_value:_data[pos].atXYZ(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 4 first coordinates (\\c pos, \\c x,\\c y,\\c z).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n   T& atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXYZ(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXYZ(pos,x,y,z,c);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 4 first coordinates (\\c pos, \\c x,\\c y,\\c z) \\const.\n    T atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXYZ(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXYZ(pos,x,y,z,c);\n    }\n\n    T& _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {\n      return _data[cimg::cut(pos,0,width() - 1)].atXYZ(x,y,z,c);\n    }\n\n    T _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {\n      return _data[cimg::cut(pos,0,width() - 1)].atXYZ(x,y,z,c);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atNXY(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {\n      return (pos<0 || pos>=(int)_width)?(cimg::temporary(out_value)=out_value):_data[pos].atXY(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y) \\const.\n    T atNXY(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (pos<0 || pos>=(int)_width)?out_value:_data[pos].atXY(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXY(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXY(pos,x,y,z,c);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 3 first coordinates (\\c pos, \\c x,\\c y) \\const.\n    T atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNXY(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNXY(pos,x,y,z,c);\n    }\n\n    T& _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {\n      return _data[cimg::cut(pos,0,width() - 1)].atXY(x,y,z,c);\n    }\n\n    T _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {\n      return _data[cimg::cut(pos,0,width() - 1)].atXY(x,y,z,c);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the 2 first coordinates (\\c pos,\\c x).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atNX(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {\n      return (pos<0 || pos>=(int)_width)?(cimg::temporary(out_value)=out_value):_data[pos].atX(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the 2 first coordinates (\\c pos,\\c x) \\const.\n    T atNX(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (pos<0 || pos>=(int)_width)?out_value:_data[pos].atX(x,y,z,c,out_value);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 2 first coordinates (\\c pos, \\c x).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNX(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNX(pos,x,y,z,c);\n    }\n\n    //! Access to pixel value with Neumann boundary conditions for the 2 first coordinates (\\c pos, \\c x) \\const.\n    T atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atNX(): Empty instance.\",\n                                    cimglist_instance);\n\n      return _atNX(pos,x,y,z,c);\n    }\n\n    T& _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {\n      return _data[cimg::cut(pos,0,width() - 1)].atX(x,y,z,c);\n    }\n\n    T _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {\n      return _data[cimg::cut(pos,0,width() - 1)].atX(x,y,z,c);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the first coordinate (\\c pos).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\param out_value Default value returned if \\c offset is outside image bounds.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atN(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {\n      return (pos<0 || pos>=(int)_width)?(cimg::temporary(out_value)=out_value):(*this)(pos,x,y,z,c);\n    }\n\n    //! Access to pixel value with Dirichlet boundary conditions for the first coordinate (\\c pos) \\const.\n    T atN(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {\n      return (pos<0 || pos>=(int)_width)?out_value:(*this)(pos,x,y,z,c);\n    }\n\n    //! Return pixel value with Neumann boundary conditions for the first coordinate (\\c pos).\n    /**\n       \\param pos Indice of the image element to access.\n       \\param x X-coordinate of the pixel value.\n       \\param y Y-coordinate of the pixel value.\n       \\param z Z-coordinate of the pixel value.\n       \\param c C-coordinate of the pixel value.\n       \\note <tt>list.atNXYZ(p,x,y,z,c);</tt> is equivalent to <tt>list[p].atXYZ(x,y,z,c);</tt>.\n    **/\n    T& atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atN(): Empty instance.\",\n                                    cimglist_instance);\n      return _atN(pos,x,y,z,c);\n    }\n\n    //! Return pixel value with Neumann boundary conditions for the first coordinate (\\c pos) \\const.\n    T atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"atN(): Empty instance.\",\n                                    cimglist_instance);\n      return _atN(pos,x,y,z,c);\n    }\n\n    T& _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {\n      return _data[cimg::cut(pos,0,width() - 1)](x,y,z,c);\n    }\n\n    T _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {\n      return _data[cimg::cut(pos,0,width() - 1)](x,y,z,c);\n    }\n\n    //! Return a C-string containing the values of all images in the instance list.\n    /**\n       \\param separator Character separator set between consecutive pixel values.\n       \\param max_size Maximum size of the returned string.\n       \\note The result is returne as a <tt>CImg<char></tt> image whose pixel buffer contains the desired C-string.\n    **/\n    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0) const {\n      if (is_empty()) return CImg<ucharT>(1,1,1,1,0);\n      CImgList<charT> items;\n      for (unsigned int l = 0; l<_width - 1; ++l) {\n        CImg<charT> item = _data[l].value_string(separator,0);\n        item.back() = separator;\n        item.move_to(items);\n      }\n      _data[_width - 1].value_string(separator,0).move_to(items);\n      CImg<charT> res; (items>'x').move_to(res);\n      if (max_size) { res.crop(0,max_size); res(max_size) = 0; }\n      return res;\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Instance Checking\n    //@{\n    //-------------------------------------\n\n    //! Return \\c true if list is empty.\n    /**\n    **/\n    bool is_empty() const {\n      return (!_data || !_width);\n    }\n\n    //! Test if number of image elements is equal to specified value.\n    /**\n        \\param size_n Number of image elements to test.\n    **/\n    bool is_sameN(const unsigned int size_n) const {\n      return _width==size_n;\n    }\n\n    //! Test if number of image elements is equal between two images lists.\n    /**\n        \\param list Input list to compare with.\n    **/\n    template<typename t>\n    bool is_sameN(const CImgList<t>& list) const {\n      return is_sameN(list._width);\n    }\n\n    // Define useful functions to check list dimensions.\n    // (cannot be documented because macro-generated).\n#define _cimglist_def_is_same1(axis) \\\n    bool is_same##axis(const unsigned int val) const { \\\n      bool res = true; \\\n      for (unsigned int l = 0; l<_width && res; ++l) res = _data[l].is_same##axis(val); return res; \\\n    } \\\n    bool is_sameN##axis(const unsigned int n, const unsigned int val) const { \\\n      return is_sameN(n) && is_same##axis(val); \\\n    } \\\n\n#define _cimglist_def_is_same2(axis1,axis2) \\\n    bool is_same##axis1##axis2(const unsigned int val1, const unsigned int val2) const { \\\n      bool res = true; \\\n      for (unsigned int l = 0; l<_width && res; ++l) res = _data[l].is_same##axis1##axis2(val1,val2); return res; \\\n    } \\\n    bool is_sameN##axis1##axis2(const unsigned int n, const unsigned int val1, const unsigned int val2) const { \\\n      return is_sameN(n) && is_same##axis1##axis2(val1,val2); \\\n    } \\\n\n#define _cimglist_def_is_same3(axis1,axis2,axis3) \\\n    bool is_same##axis1##axis2##axis3(const unsigned int val1, const unsigned int val2, \\\n                                      const unsigned int val3) const { \\\n      bool res = true; \\\n      for (unsigned int l = 0; l<_width && res; ++l) res = _data[l].is_same##axis1##axis2##axis3(val1,val2,val3); \\\n      return res; \\\n    } \\\n    bool is_sameN##axis1##axis2##axis3(const unsigned int n, const unsigned int val1, \\\n                                       const unsigned int val2, const unsigned int val3) const { \\\n      return is_sameN(n) && is_same##axis1##axis2##axis3(val1,val2,val3); \\\n    } \\\n\n#define _cimglist_def_is_same(axis) \\\n    template<typename t> bool is_same##axis(const CImg<t>& img) const { \\\n      bool res = true; for (unsigned int l = 0; l<_width && res; ++l) res = _data[l].is_same##axis(img); return res; \\\n    } \\\n    template<typename t> bool is_same##axis(const CImgList<t>& list) const { \\\n      const unsigned int lmin = std::min(_width,list._width); \\\n      bool res = true; for (unsigned int l = 0; l<lmin && res; ++l) res = _data[l].is_same##axis(list[l]); return res; \\\n    } \\\n    template<typename t> bool is_sameN##axis(const unsigned int n, const CImg<t>& img) const { \\\n      return (is_sameN(n) && is_same##axis(img)); \\\n    } \\\n    template<typename t> bool is_sameN##axis(const CImgList<t>& list) const { \\\n      return (is_sameN(list) && is_same##axis(list)); \\\n    }\n\n    _cimglist_def_is_same(XY)\n    _cimglist_def_is_same(XZ)\n    _cimglist_def_is_same(XC)\n    _cimglist_def_is_same(YZ)\n    _cimglist_def_is_same(YC)\n    _cimglist_def_is_same(XYZ)\n    _cimglist_def_is_same(XYC)\n    _cimglist_def_is_same(YZC)\n    _cimglist_def_is_same(XYZC)\n    _cimglist_def_is_same1(X)\n    _cimglist_def_is_same1(Y)\n    _cimglist_def_is_same1(Z)\n    _cimglist_def_is_same1(C)\n    _cimglist_def_is_same2(X,Y)\n    _cimglist_def_is_same2(X,Z)\n    _cimglist_def_is_same2(X,C)\n    _cimglist_def_is_same2(Y,Z)\n    _cimglist_def_is_same2(Y,C)\n    _cimglist_def_is_same2(Z,C)\n    _cimglist_def_is_same3(X,Y,Z)\n    _cimglist_def_is_same3(X,Y,C)\n    _cimglist_def_is_same3(X,Z,C)\n    _cimglist_def_is_same3(Y,Z,C)\n\n    //! Test if dimensions of each image of the list match specified arguments.\n    /**\n      \\param dx Checked image width.\n      \\param dy Checked image height.\n      \\param dz Checked image depth.\n      \\param dc Checked image spectrum.\n    **/\n    bool is_sameXYZC(const unsigned int dx, const unsigned int dy,\n                     const unsigned int dz, const unsigned int dc) const {\n      bool res = true;\n      for (unsigned int l = 0; l<_width && res; ++l) res = _data[l].is_sameXYZC(dx,dy,dz,dc);\n      return res;\n    }\n\n    //! Test if list dimensions match specified arguments.\n    /**\n       \\param n Number of images in the list.\n       \\param dx Checked image width.\n       \\param dy Checked image height.\n       \\param dz Checked image depth.\n       \\param dc Checked image spectrum.\n    **/\n    bool is_sameNXYZC(const unsigned int n,\n                      const unsigned int dx, const unsigned int dy,\n                      const unsigned int dz, const unsigned int dc) const {\n      return is_sameN(n) && is_sameXYZC(dx,dy,dz,dc);\n    }\n\n    //! Test if list contains one particular pixel location.\n    /**\n       \\param n Index of the image whom checked pixel value belong to.\n       \\param x X-coordinate of the checked pixel value.\n       \\param y Y-coordinate of the checked pixel value.\n       \\param z Z-coordinate of the checked pixel value.\n       \\param c C-coordinate of the checked pixel value.\n    **/\n    bool containsNXYZC(const int n, const int x=0, const int y=0, const int z=0, const int c=0) const {\n      if (is_empty()) return false;\n      return n>=0 && n<(int)_width && x>=0 && x<_data[n].width() && y>=0 && y<_data[n].height() &&\n        z>=0 && z<_data[n].depth() && c>=0 && c<_data[n].spectrum();\n    }\n\n    //! Test if list contains image with specified indice.\n    /**\n       \\param n Index of the checked image.\n    **/\n    bool containsN(const int n) const {\n      if (is_empty()) return false;\n      return n>=0 && n<(int)_width;\n    }\n\n    //! Test if one image of the list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n       \\param[out] n Index of image containing the pixel value, if test succeeds.\n       \\param[out] x X-coordinate of the pixel value, if test succeeds.\n       \\param[out] y Y-coordinate of the pixel value, if test succeeds.\n       \\param[out] z Z-coordinate of the pixel value, if test succeeds.\n       \\param[out] c C-coordinate of the pixel value, if test succeeds.\n       \\note If true, set coordinates (n,x,y,z,c).\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& n, t& x, t&y, t& z, t& c) const {\n      if (is_empty()) return false;\n      cimglist_for(*this,l) if (_data[l].contains(pixel,x,y,z,c)) { n = (t)l; return true; }\n      return false;\n    }\n\n    //! Test if one of the image list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n       \\param[out] n Index of image containing the pixel value, if test succeeds.\n       \\param[out] x X-coordinate of the pixel value, if test succeeds.\n       \\param[out] y Y-coordinate of the pixel value, if test succeeds.\n       \\param[out] z Z-coordinate of the pixel value, if test succeeds.\n       \\note If true, set coordinates (n,x,y,z).\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& n, t& x, t&y, t& z) const {\n      t c;\n      return contains(pixel,n,x,y,z,c);\n    }\n\n    //! Test if one of the image list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n       \\param[out] n Index of image containing the pixel value, if test succeeds.\n       \\param[out] x X-coordinate of the pixel value, if test succeeds.\n       \\param[out] y Y-coordinate of the pixel value, if test succeeds.\n       \\note If true, set coordinates (n,x,y).\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& n, t& x, t&y) const {\n      t z, c;\n      return contains(pixel,n,x,y,z,c);\n    }\n\n    //! Test if one of the image list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n       \\param[out] n Index of image containing the pixel value, if test succeeds.\n       \\param[out] x X-coordinate of the pixel value, if test succeeds.\n       \\note If true, set coordinates (n,x).\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& n, t& x) const {\n      t y, z, c;\n      return contains(pixel,n,x,y,z,c);\n    }\n\n    //! Test if one of the image list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n       \\param[out] n Index of image containing the pixel value, if test succeeds.\n       \\note If true, set coordinates (n).\n    **/\n    template<typename t>\n    bool contains(const T& pixel, t& n) const {\n      t x, y, z, c;\n      return contains(pixel,n,x,y,z,c);\n    }\n\n    //! Test if one of the image list contains the specified referenced value.\n    /**\n       \\param pixel Reference to pixel value to test.\n    **/\n    bool contains(const T& pixel) const {\n      unsigned int n, x, y, z, c;\n      return contains(pixel,n,x,y,z,c);\n    }\n\n    //! Test if the list contains the image 'img'.\n    /**\n       \\param img Reference to image to test.\n       \\param[out] n Index of image in the list, if test succeeds.\n       \\note If true, returns the position (n) of the image in the list.\n    **/\n    template<typename t>\n    bool contains(const CImg<T>& img, t& n) const {\n      if (is_empty()) return false;\n      const CImg<T> *const ptr = &img;\n      cimglist_for(*this,i) if (_data + i==ptr) { n = (t)i; return true; }\n      return false;\n    }\n\n    //! Test if the list contains the image img.\n    /**\n       \\param img Reference to image to test.\n    **/\n    bool contains(const CImg<T>& img) const {\n      unsigned int n;\n      return contains(img,n);\n    }\n\n    //@}\n    //-------------------------------------\n    //\n    //! \\name Mathematical Functions\n    //@{\n    //-------------------------------------\n\n    //! Return a reference to the minimum pixel value of the instance list.\n    /**\n    **/\n    T& min() {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"min(): Empty instance.\",\n                                    cimglist_instance);\n      T *ptr_min = _data->_data;\n      T min_value = *ptr_min;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) if (*ptrs<min_value) min_value = *(ptr_min=ptrs);\n      }\n      return *ptr_min;\n    }\n\n    //! Return a reference to the minimum pixel value of the instance list \\const.\n    const T& min() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"min(): Empty instance.\",\n                                    cimglist_instance);\n      const T *ptr_min = _data->_data;\n      T min_value = *ptr_min;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) if (*ptrs<min_value) min_value = *(ptr_min=ptrs);\n      }\n      return *ptr_min;\n    }\n\n    //! Return a reference to the maximum pixel value of the instance list.\n    /**\n    **/\n    T& max() {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"max(): Empty instance.\",\n                                    cimglist_instance);\n      T *ptr_max = _data->_data;\n      T max_value = *ptr_max;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) if (*ptrs>max_value) max_value = *(ptr_max=ptrs);\n      }\n      return *ptr_max;\n    }\n\n    //! Return a reference to the maximum pixel value of the instance list \\const.\n    const T& max() const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"max(): Empty instance.\",\n                                    cimglist_instance);\n      const T *ptr_max = _data->_data;\n      T max_value = *ptr_max;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) if (*ptrs>max_value) max_value = *(ptr_max=ptrs);\n      }\n      return *ptr_max;\n    }\n\n    //! Return a reference to the minimum pixel value of the instance list and return the maximum vvalue as well.\n    /**\n       \\param[out] max_val Value of the maximum value found.\n    **/\n    template<typename t>\n    T& min_max(t& max_val) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"min_max(): Empty instance.\",\n                                    cimglist_instance);\n      T *ptr_min = _data->_data;\n      T min_value = *ptr_min, max_value = min_value;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) {\n          const T val = *ptrs;\n          if (val<min_value) { min_value = val; ptr_min = ptrs; }\n          if (val>max_value) max_value = val;\n        }\n      }\n      max_val = (t)max_value;\n      return *ptr_min;\n    }\n\n    //! Return a reference to the minimum pixel value of the instance list and return the maximum vvalue as well \\const.\n    /**\n       \\param[out] max_val Value of the maximum value found.\n    **/\n    template<typename t>\n    const T& min_max(t& max_val) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"min_max(): Empty instance.\",\n                                    cimglist_instance);\n      const T *ptr_min = _data->_data;\n      T min_value = *ptr_min, max_value = min_value;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) {\n          const T val = *ptrs;\n          if (val<min_value) { min_value = val; ptr_min = ptrs; }\n          if (val>max_value) max_value = val;\n        }\n      }\n      max_val = (t)max_value;\n      return *ptr_min;\n    }\n\n    //! Return a reference to the minimum pixel value of the instance list and return the minimum value as well.\n    /**\n       \\param[out] min_val Value of the minimum value found.\n    **/\n    template<typename t>\n    T& max_min(t& min_val) {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"max_min(): Empty instance.\",\n                                    cimglist_instance);\n      T *ptr_max = _data->_data;\n      T min_value = *ptr_max, max_value = min_value;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) {\n          const T val = *ptrs;\n          if (val>max_value) { max_value = val; ptr_max = ptrs; }\n          if (val<min_value) min_value = val;\n        }\n      }\n      min_val = (t)min_value;\n      return *ptr_max;\n    }\n\n    //! Return a reference to the minimum pixel value of the instance list and return the minimum value as well \\const.\n    template<typename t>\n    const T& max_min(t& min_val) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"max_min(): Empty instance.\",\n                                    cimglist_instance);\n      const T *ptr_max = _data->_data;\n      T min_value = *ptr_max, max_value = min_value;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_for(img,ptrs,T) {\n          const T val = *ptrs;\n          if (val>max_value) { max_value = val; ptr_max = ptrs; }\n          if (val<min_value) min_value = val;\n        }\n      }\n      min_val = (t)min_value;\n      return *ptr_max;\n    }\n\n    //@}\n    //---------------------------\n    //\n    //! \\name List Manipulation\n    //@{\n    //---------------------------\n\n    //! Insert a copy of the image \\c img into the current image list, at position \\c pos.\n    /**\n        \\param img Image to insert a copy to the list.\n        \\param pos Index of the insertion.\n        \\param is_shared Tells if the inserted image is a shared copy of \\c img or not.\n    **/\n    template<typename t>\n    CImgList<T>& insert(const CImg<t>& img, const unsigned int pos=~0U, const bool is_shared=false) {\n      const unsigned int npos = pos==~0U?_width:pos;\n      if (npos>_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"insert(): Invalid insertion request of specified image (%u,%u,%u,%u,%p) \"\n                                    \"at position %u.\",\n                                    cimglist_instance,\n                                    img._width,img._height,img._depth,img._spectrum,img._data,npos);\n      if (is_shared)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"insert(): Invalid insertion request of specified shared image \"\n                                    \"CImg<%s>(%u,%u,%u,%u,%p) at position %u (pixel types are different).\",\n                                    cimglist_instance,\n                                    img.pixel_type(),img._width,img._height,img._depth,img._spectrum,img._data,npos);\n\n      CImg<T> *const new_data = (++_width>_allocated_width)?new CImg<T>[_allocated_width?(_allocated_width<<=1):\n                                                                        (_allocated_width=16)]:0;\n      if (!_data) { // Insert new element into empty list.\n        _data = new_data;\n        *_data = img;\n      } else {\n        if (new_data) { // Insert with re-allocation.\n          if (npos) std::memcpy(new_data,_data,sizeof(CImg<T>)*npos);\n          if (npos!=_width - 1) std::memcpy(new_data + npos + 1,_data + npos,sizeof(CImg<T>)*(_width - 1 - npos));\n          std::memset(_data,0,sizeof(CImg<T>)*(_width - 1));\n          delete[] _data;\n          _data = new_data;\n        } else if (npos!=_width - 1) // Insert without re-allocation.\n          std::memmove(_data + npos + 1,_data + npos,sizeof(CImg<T>)*(_width - 1 - npos));\n        _data[npos]._width = _data[npos]._height = _data[npos]._depth = _data[npos]._spectrum = 0;\n        _data[npos]._data = 0;\n        _data[npos] = img;\n      }\n      return *this;\n    }\n\n    //! Insert a copy of the image \\c img into the current image list, at position \\c pos \\specialization.\n    CImgList<T>& insert(const CImg<T>& img, const unsigned int pos=~0U, const bool is_shared=false) {\n      const unsigned int npos = pos==~0U?_width:pos;\n      if (npos>_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"insert(): Invalid insertion request of specified image (%u,%u,%u,%u,%p) \"\n                                    \"at position %u.\",\n                                    cimglist_instance,\n                                    img._width,img._height,img._depth,img._spectrum,img._data,npos);\n      CImg<T> *const new_data = (++_width>_allocated_width)?new CImg<T>[_allocated_width?(_allocated_width<<=1):\n                                                                        (_allocated_width=16)]:0;\n      if (!_data) { // Insert new element into empty list.\n        _data = new_data;\n        if (is_shared && img) {\n          _data->_width = img._width;\n          _data->_height = img._height;\n          _data->_depth = img._depth;\n          _data->_spectrum = img._spectrum;\n          _data->_is_shared = true;\n          _data->_data = img._data;\n        } else *_data = img;\n      }\n      else {\n        if (new_data) { // Insert with re-allocation.\n          if (npos) std::memcpy(new_data,_data,sizeof(CImg<T>)*npos);\n          if (npos!=_width - 1) std::memcpy(new_data + npos + 1,_data + npos,sizeof(CImg<T>)*(_width - 1 - npos));\n          if (is_shared && img) {\n            new_data[npos]._width = img._width;\n            new_data[npos]._height = img._height;\n            new_data[npos]._depth = img._depth;\n            new_data[npos]._spectrum = img._spectrum;\n            new_data[npos]._is_shared = true;\n            new_data[npos]._data = img._data;\n          } else {\n            new_data[npos]._width = new_data[npos]._height = new_data[npos]._depth = new_data[npos]._spectrum = 0;\n            new_data[npos]._data = 0;\n            new_data[npos] = img;\n          }\n          std::memset(_data,0,sizeof(CImg<T>)*(_width - 1));\n          delete[] _data;\n          _data = new_data;\n        } else { // Insert without re-allocation.\n          if (npos!=_width - 1) std::memmove(_data + npos + 1,_data + npos,sizeof(CImg<T>)*(_width - 1 - npos));\n          if (is_shared && img) {\n            _data[npos]._width = img._width;\n            _data[npos]._height = img._height;\n            _data[npos]._depth = img._depth;\n            _data[npos]._spectrum = img._spectrum;\n            _data[npos]._is_shared = true;\n            _data[npos]._data = img._data;\n          } else {\n            _data[npos]._width = _data[npos]._height = _data[npos]._depth = _data[npos]._spectrum = 0;\n            _data[npos]._data = 0;\n            _data[npos] = img;\n          }\n        }\n      }\n      return *this;\n    }\n\n    //! Insert a copy of the image \\c img into the current image list, at position \\c pos \\newinstance.\n    template<typename t>\n    CImgList<T> get_insert(const CImg<t>& img, const unsigned int pos=~0U, const bool is_shared=false) const {\n      return (+*this).insert(img,pos,is_shared);\n    }\n\n    //! Insert n empty images img into the current image list, at position \\p pos.\n    /**\n       \\param n Number of empty images to insert.\n       \\param pos Index of the insertion.\n    **/\n    CImgList<T>& insert(const unsigned int n, const unsigned int pos=~0U) {\n      CImg<T> empty;\n      if (!n) return *this;\n      const unsigned int npos = pos==~0U?_width:pos;\n      for (unsigned int i = 0; i<n; ++i) insert(empty,npos+i);\n      return *this;\n    }\n\n    //! Insert n empty images img into the current image list, at position \\p pos \\newinstance.\n    CImgList<T> get_insert(const unsigned int n, const unsigned int pos=~0U) const {\n      return (+*this).insert(n,pos);\n    }\n\n    //! Insert \\c n copies of the image \\c img into the current image list, at position \\c pos.\n    /**\n       \\param n Number of image copies to insert.\n       \\param img Image to insert by copy.\n       \\param pos Index of the insertion.\n       \\param is_shared Tells if inserted images are shared copies of \\c img or not.\n    **/\n    template<typename t>\n    CImgList<T>& insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U,\n                        const bool is_shared=false) {\n      if (!n) return *this;\n      const unsigned int npos = pos==~0U?_width:pos;\n      insert(img,npos,is_shared);\n      for (unsigned int i = 1; i<n; ++i) insert(_data[npos],npos + i,is_shared);\n      return *this;\n    }\n\n    //! Insert \\c n copies of the image \\c img into the current image list, at position \\c pos \\newinstance.\n    template<typename t>\n    CImgList<T> get_insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U,\n                           const bool is_shared=false) const {\n      return (+*this).insert(n,img,pos,is_shared);\n    }\n\n    //! Insert a copy of the image list \\c list into the current image list, starting from position \\c pos.\n    /**\n      \\param list Image list to insert.\n      \\param pos Index of the insertion.\n      \\param is_shared Tells if inserted images are shared copies of images of \\c list or not.\n    **/\n    template<typename t>\n    CImgList<T>& insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool is_shared=false) {\n      const unsigned int npos = pos==~0U?_width:pos;\n      if ((void*)this!=(void*)&list) cimglist_for(list,l) insert(list[l],npos + l,is_shared);\n      else insert(CImgList<T>(list),npos,is_shared);\n      return *this;\n    }\n\n    //! Insert a copy of the image list \\c list into the current image list, starting from position \\c pos \\newinstance.\n    template<typename t>\n    CImgList<T> get_insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool is_shared=false) const {\n      return (+*this).insert(list,pos,is_shared);\n    }\n\n    //! Insert n copies of the list \\c list at position \\c pos of the current list.\n    /**\n      \\param n Number of list copies to insert.\n      \\param list Image list to insert.\n      \\param pos Index of the insertion.\n      \\param is_shared Tells if inserted images are shared copies of images of \\c list or not.\n    **/\n    template<typename t>\n    CImgList<T>& insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U,\n                        const bool is_shared=false) {\n      if (!n) return *this;\n      const unsigned int npos = pos==~0U?_width:pos;\n      for (unsigned int i = 0; i<n; ++i) insert(list,npos,is_shared);\n      return *this;\n    }\n\n    //! Insert n copies of the list \\c list at position \\c pos of the current list \\newinstance.\n    template<typename t>\n    CImgList<T> get_insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U,\n                           const bool is_shared=false) const {\n      return (+*this).insert(n,list,pos,is_shared);\n    }\n\n    //! Remove all images between from indexes.\n    /**\n      \\param pos1 Starting index of the removal.\n      \\param pos2 Ending index of the removal.\n    **/\n    CImgList<T>& remove(const unsigned int pos1, const unsigned int pos2) {\n      const unsigned int\n        npos1 = pos1<pos2?pos1:pos2,\n        tpos2 = pos1<pos2?pos2:pos1,\n        npos2 = tpos2<_width?tpos2:_width - 1;\n      if (npos1>=_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"remove(): Invalid remove request at positions %u->%u.\",\n                                    cimglist_instance,\n                                    npos1,tpos2);\n      else {\n        if (tpos2>=_width)\n          throw CImgArgumentException(_cimglist_instance\n                                      \"remove(): Invalid remove request at positions %u->%u.\",\n                                      cimglist_instance,\n                                      npos1,tpos2);\n\n        for (unsigned int k = npos1; k<=npos2; ++k) _data[k].assign();\n        const unsigned int nb = 1 + npos2 - npos1;\n        if (!(_width-=nb)) return assign();\n        if (_width>(_allocated_width>>2) || _allocated_width<=16) { // Removing items without reallocation.\n          if (npos1!=_width) std::memmove(_data + npos1,_data + npos2 + 1,sizeof(CImg<T>)*(_width - npos1));\n          std::memset(_data + _width,0,sizeof(CImg<T>)*nb);\n        } else { // Removing items with reallocation.\n          _allocated_width>>=2;\n          while (_allocated_width>16 && _width<(_allocated_width>>1)) _allocated_width>>=1;\n          CImg<T> *const new_data = new CImg<T>[_allocated_width];\n          if (npos1) std::memcpy(new_data,_data,sizeof(CImg<T>)*npos1);\n          if (npos1!=_width) std::memcpy(new_data + npos1,_data + npos2 + 1,sizeof(CImg<T>)*(_width - npos1));\n          if (_width!=_allocated_width) std::memset(new_data + _width,0,sizeof(CImg<T>)*(_allocated_width - _width));\n          std::memset(_data,0,sizeof(CImg<T>)*(_width + nb));\n          delete[] _data;\n          _data = new_data;\n        }\n      }\n      return *this;\n    }\n\n    //! Remove all images between from indexes \\newinstance.\n    CImgList<T> get_remove(const unsigned int pos1, const unsigned int pos2) const {\n      return (+*this).remove(pos1,pos2);\n    }\n\n    //! Remove image at index \\c pos from the image list.\n    /**\n      \\param pos Index of the image to remove.\n    **/\n    CImgList<T>& remove(const unsigned int pos) {\n      return remove(pos,pos);\n    }\n\n    //! Remove image at index \\c pos from the image list \\newinstance.\n    CImgList<T> get_remove(const unsigned int pos) const {\n      return (+*this).remove(pos);\n    }\n\n    //! Remove last image.\n    /**\n    **/\n    CImgList<T>& remove() {\n      return remove(_width - 1);\n    }\n\n    //! Remove last image \\newinstance.\n    CImgList<T> get_remove() const {\n      return (+*this).remove();\n    }\n\n    //! Reverse list order.\n    CImgList<T>& reverse() {\n      for (unsigned int l = 0; l<_width/2; ++l) (*this)[l].swap((*this)[_width - 1 - l]);\n      return *this;\n    }\n\n    //! Reverse list order \\newinstance.\n    CImgList<T> get_reverse() const {\n      return (+*this).reverse();\n    }\n\n    //! Return a sublist.\n    /**\n      \\param pos0 Starting index of the sublist.\n      \\param pos1 Ending index of the sublist.\n    **/\n    CImgList<T>& images(const unsigned int pos0, const unsigned int pos1) {\n      return get_images(pos0,pos1).move_to(*this);\n    }\n\n    //! Return a sublist \\newinstance.\n    CImgList<T> get_images(const unsigned int pos0, const unsigned int pos1) const {\n      if (pos0>pos1 || pos1>=_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"images(): Specified sub-list indices (%u->%u) are out of bounds.\",\n                                    cimglist_instance,\n                                    pos0,pos1);\n      CImgList<T> res(pos1 - pos0 + 1);\n      cimglist_for(res,l) res[l].assign(_data[pos0 + l]);\n      return res;\n    }\n\n    //! Return a shared sublist.\n    /**\n      \\param pos0 Starting index of the sublist.\n      \\param pos1 Ending index of the sublist.\n    **/\n    CImgList<T> get_shared_images(const unsigned int pos0, const unsigned int pos1) {\n      if (pos0>pos1 || pos1>=_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"get_shared_images(): Specified sub-list indices (%u->%u) are out of bounds.\",\n                                    cimglist_instance,\n                                    pos0,pos1);\n      CImgList<T> res(pos1 - pos0 + 1);\n      cimglist_for(res,l) res[l].assign(_data[pos0 + l],_data[pos0 + l]?true:false);\n      return res;\n    }\n\n    //! Return a shared sublist \\newinstance.\n    const CImgList<T> get_shared_images(const unsigned int pos0, const unsigned int pos1) const {\n      if (pos0>pos1 || pos1>=_width)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"get_shared_images(): Specified sub-list indices (%u->%u) are out of bounds.\",\n                                    cimglist_instance,\n                                    pos0,pos1);\n      CImgList<T> res(pos1 - pos0 + 1);\n      cimglist_for(res,l) res[l].assign(_data[pos0 + l],_data[pos0 + l]?true:false);\n      return res;\n    }\n\n    //! Return a single image which is the appending of all images of the current CImgList instance.\n    /**\n       \\param axis Appending axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param align Appending alignment.\n    **/\n    CImg<T> get_append(const char axis, const float align=0) const {\n      if (is_empty()) return CImg<T>();\n      if (_width==1) return +((*this)[0]);\n      unsigned int dx = 0, dy = 0, dz = 0, dc = 0, pos = 0;\n      CImg<T> res;\n      switch (cimg::lowercase(axis)) {\n      case 'x' : { // Along the X-axis.\n        cimglist_for(*this,l) {\n          const CImg<T>& img = (*this)[l];\n          if (img) {\n            dx+=img._width;\n            dy = std::max(dy,img._height);\n            dz = std::max(dz,img._depth);\n            dc = std::max(dc,img._spectrum);\n          }\n        }\n        res.assign(dx,dy,dz,dc,(T)0);\n        if (res) cimglist_for(*this,l) {\n            const CImg<T>& img = (*this)[l];\n            if (img) res.draw_image(pos,\n                                    (int)(align*(dy - img._height)),\n                                    (int)(align*(dz - img._depth)),\n                                    (int)(align*(dc - img._spectrum)),\n                                    img);\n            pos+=img._width;\n          }\n      } break;\n      case 'y' : { // Along the Y-axis.\n        cimglist_for(*this,l) {\n          const CImg<T>& img = (*this)[l];\n          if (img) {\n            dx = std::max(dx,img._width);\n            dy+=img._height;\n            dz = std::max(dz,img._depth);\n            dc = std::max(dc,img._spectrum);\n          }\n        }\n        res.assign(dx,dy,dz,dc,(T)0);\n        if (res) cimglist_for(*this,l) {\n            const CImg<T>& img = (*this)[l];\n            if (img) res.draw_image((int)(align*(dx - img._width)),\n                                    pos,\n                                    (int)(align*(dz - img._depth)),\n                                    (int)(align*(dc - img._spectrum)),\n                                    img);\n            pos+=img._height;\n          }\n      } break;\n      case 'z' : { // Along the Z-axis.\n        cimglist_for(*this,l) {\n          const CImg<T>& img = (*this)[l];\n          if (img) {\n            dx = std::max(dx,img._width);\n            dy = std::max(dy,img._height);\n            dz+=img._depth;\n            dc = std::max(dc,img._spectrum);\n          }\n        }\n        res.assign(dx,dy,dz,dc,(T)0);\n        if (res) cimglist_for(*this,l) {\n            const CImg<T>& img = (*this)[l];\n            if (img) res.draw_image((int)(align*(dx - img._width)),\n                                    (int)(align*(dy - img._height)),\n                                    pos,\n                                    (int)(align*(dc - img._spectrum)),\n                                    img);\n            pos+=img._depth;\n          }\n      } break;\n      default : { // Along the C-axis.\n        cimglist_for(*this,l) {\n          const CImg<T>& img = (*this)[l];\n          if (img) {\n            dx = std::max(dx,img._width);\n            dy = std::max(dy,img._height);\n            dz = std::max(dz,img._depth);\n            dc+=img._spectrum;\n          }\n        }\n        res.assign(dx,dy,dz,dc,(T)0);\n        if (res) cimglist_for(*this,l) {\n            const CImg<T>& img = (*this)[l];\n            if (img) res.draw_image((int)(align*(dx - img._width)),\n                                    (int)(align*(dy - img._height)),\n                                    (int)(align*(dz - img._depth)),\n                                    pos,\n                                    img);\n            pos+=img._spectrum;\n          }\n      }\n      }\n      return res;\n    }\n\n    //! Return a list where each image has been split along the specified axis.\n    /**\n        \\param axis Axis to split images along.\n        \\param nb Number of spliting parts for each image.\n    **/\n    CImgList<T>& split(const char axis, const int nb=-1) {\n      return get_split(axis,nb).move_to(*this);\n    }\n\n    //! Return a list where each image has been split along the specified axis \\newinstance.\n    CImgList<T> get_split(const char axis, const int nb=-1) const {\n      CImgList<T> res;\n      cimglist_for(*this,l) _data[l].get_split(axis,nb).move_to(res,~0U);\n      return res;\n    }\n\n    //! Insert image at the end of the list.\n    /**\n      \\param img Image to insert.\n    **/\n    template<typename t>\n    CImgList<T>& push_back(const CImg<t>& img) {\n      return insert(img);\n    }\n\n    //! Insert image at the front of the list.\n    /**\n      \\param img Image to insert.\n    **/\n    template<typename t>\n    CImgList<T>& push_front(const CImg<t>& img) {\n      return insert(img,0);\n    }\n\n    //! Insert list at the end of the current list.\n    /**\n      \\param list List to insert.\n    **/\n    template<typename t>\n    CImgList<T>& push_back(const CImgList<t>& list) {\n      return insert(list);\n    }\n\n    //! Insert list at the front of the current list.\n    /**\n      \\param list List to insert.\n    **/\n    template<typename t>\n    CImgList<T>& push_front(const CImgList<t>& list) {\n      return insert(list,0);\n    }\n\n    //! Remove last image.\n    /**\n    **/\n    CImgList<T>& pop_back() {\n      return remove(_width - 1);\n    }\n\n    //! Remove first image.\n    /**\n    **/\n    CImgList<T>& pop_front() {\n      return remove(0);\n    }\n\n    //! Remove image pointed by iterator.\n    /**\n      \\param iter Iterator pointing to the image to remove.\n    **/\n    CImgList<T>& erase(const iterator iter) {\n      return remove(iter - _data);\n    }\n\n    //@}\n    //----------------------------------\n    //\n    //! \\name Data Input\n    //@{\n    //----------------------------------\n\n    //! Display a simple interactive interface to select images or sublists.\n    /**\n       \\param disp Window instance to display selection and user interface.\n       \\param feature_type Can be \\c false to select a single image, or \\c true to select a sublist.\n       \\param axis Axis along whom images are appended for visualization.\n       \\param align Alignment setting when images have not all the same size.\n       \\return A one-column vector containing the selected image indexes.\n    **/\n    CImg<intT> get_select(CImgDisplay &disp, const bool feature_type=true,\n                          const char axis='x', const float align=0,\n                          const bool exit_on_anykey=false) const {\n      return _select(disp,0,feature_type,axis,align,exit_on_anykey,0,false,false,false);\n    }\n\n    //! Display a simple interactive interface to select images or sublists.\n    /**\n       \\param title Title of a new window used to display selection and user interface.\n       \\param feature_type Can be \\c false to select a single image, or \\c true to select a sublist.\n       \\param axis Axis along whom images are appended for visualization.\n       \\param align Alignment setting when images have not all the same size.\n       \\return A one-column vector containing the selected image indexes.\n    **/\n    CImg<intT> get_select(const char *const title, const bool feature_type=true,\n                          const char axis='x', const float align=0,\n                          const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      return _select(disp,title,feature_type,axis,align,exit_on_anykey,0,false,false,false);\n    }\n\n    CImg<intT> _select(CImgDisplay &disp, const char *const title, const bool feature_type,\n                       const char axis, const float align, const bool exit_on_anykey,\n                       const unsigned int orig, const bool resize_disp,\n                       const bool exit_on_rightbutton, const bool exit_on_wheel) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"select(): Empty instance.\",\n                                    cimglist_instance);\n\n      // Create image correspondence table and get list dimensions for visualization.\n      CImgList<uintT> _indices;\n      unsigned int max_width = 0, max_height = 0, sum_width = 0, sum_height = 0;\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        const unsigned int\n          w = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,false),\n          h = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,true);\n        if (w>max_width) max_width = w;\n        if (h>max_height) max_height = h;\n        sum_width+=w; sum_height+=h;\n        if (axis=='x') CImg<uintT>(w,1,1,1,(unsigned int)l).move_to(_indices);\n        else CImg<uintT>(h,1,1,1,(unsigned int)l).move_to(_indices);\n      }\n      const CImg<uintT> indices0 = _indices>'x';\n\n      // Create display window.\n      if (!disp) {\n        if (axis=='x') disp.assign(cimg_fitscreen(sum_width,max_height,1),title?title:0,1);\n        else disp.assign(cimg_fitscreen(max_width,sum_height,1),title?title:0,1);\n        if (!title) disp.set_title(\"CImgList<%s> (%u)\",pixel_type(),_width);\n      } else if (title) disp.set_title(\"%s\",title);\n      if (resize_disp) {\n        if (axis=='x') disp.resize(cimg_fitscreen(sum_width,max_height,1),false);\n        else disp.resize(cimg_fitscreen(max_width,sum_height,1),false);\n      }\n\n      const unsigned int old_normalization = disp.normalization();\n      bool old_is_resized = disp.is_resized();\n      disp._normalization = 0;\n      disp.show().set_key(0);\n      static const unsigned char foreground_color[] = { 255,255,255 }, background_color[] = { 0,0,0 };\n\n      // Enter event loop.\n      CImg<ucharT> visu0, visu;\n      CImg<uintT> indices;\n      CImg<intT> positions(_width,4,1,1,-1);\n      int oindice0 = -1, oindice1 = -1, indice0 = -1, indice1 = -1;\n      bool is_clicked = false, is_selected = false, text_down = false, update_display = true;\n      unsigned int key = 0;\n\n      while (!is_selected && !disp.is_closed() && !key) {\n\n        // Create background image.\n        if (!visu0) {\n          visu0.assign(disp._width,disp._height,1,3,0); visu.assign();\n          (indices0.get_resize(axis=='x'?visu0._width:visu0._height,1)).move_to(indices);\n          unsigned int ind = 0;\n          if (axis=='x') for (unsigned int x = 0; x<visu0._width; ) {\n              const unsigned int x0 = x;\n              ind = indices[x];\n              while (x<indices._width && indices[x++]==ind) {}\n              const CImg<T>\n                onexone(1,1,1,1,(T)0),\n                &src = _data[ind]?_data[ind]:onexone;\n              CImg<ucharT> res;\n              src.__get_select(disp,old_normalization,(src._width - 1)/2,(src._height - 1)/2,(src._depth - 1)/2).\n                move_to(res);\n              const unsigned int h = CImgDisplay::_fitscreen(res._width,res._height,1,128,-85,true);\n              res.resize(x - x0,std::max(32U,h*disp._height/max_height),1,res._spectrum==1?3:-100);\n              positions(ind,0) = positions(ind,2) = (int)x0;\n              positions(ind,1) = positions(ind,3) = (int)(align*(visu0.height() - res.height()));\n              positions(ind,2)+=res._width;\n              positions(ind,3)+=res._height - 1;\n              visu0.draw_image(positions(ind,0),positions(ind,1),res);\n            } else for (unsigned int y = 0; y<visu0._height; ) {\n              const unsigned int y0 = y;\n              ind = indices[y];\n              while (y<visu0._height && indices[++y]==ind) {}\n              const CImg<T> &src = _data[ind];\n              const CImg<Tuchar>\n                img2d = src._depth>1?src.get_projections2d((src._width - 1)/2,(src._height - 1)/2,(src._depth - 1)/2):\n                cimg::type<Tuchar>::string()==cimg::type<T>::string()?src.get_shared():src;\n              CImg<ucharT> res = old_normalization==1 ||\n                (old_normalization==3 && cimg::type<T>::string()!=cimg::type<unsigned char>::string())?\n                CImg<ucharT>(img2d.get_normalize((Tuchar)0,(Tuchar)255)):\n                CImg<ucharT>(img2d);\n              if (res._spectrum>3) res.channels(0,2);\n              const unsigned int w = CImgDisplay::_fitscreen(res._width,res._height,1,128,-85,false);\n              res.resize(std::max(32U,w*disp._width/max_width),y - y0,1,res._spectrum==1?3:-100);\n              positions(ind,0) = positions(ind,2) = (int)(align*(visu0.width() - res.width()));\n              positions(ind,1) = positions(ind,3) = (int)y0;\n              positions(ind,2)+=res._width - 1;\n              positions(ind,3)+=res._height;\n              visu0.draw_image(positions(ind,0),positions(ind,1),res);\n            }\n          if (axis=='x') --positions(ind,2); else --positions(ind,3);\n          update_display = true;\n        }\n\n        if (!visu || oindice0!=indice0 || oindice1!=indice1) {\n          if (indice0>=0 && indice1>=0) {\n            visu.assign(visu0,false);\n            const int indm = std::min(indice0,indice1), indM = std::max(indice0,indice1);\n            for (int ind = indm; ind<=indM; ++ind) if (positions(ind,0)>=0) {\n                visu.draw_rectangle(positions(ind,0),positions(ind,1),positions(ind,2),positions(ind,3),\n                                    background_color,0.2f);\n                if ((axis=='x' && positions(ind,2) - positions(ind,0)>=8) ||\n                    (axis!='x' && positions(ind,3) - positions(ind,1)>=8))\n                  visu.draw_rectangle(positions(ind,0),positions(ind,1),positions(ind,2),positions(ind,3),\n                                      foreground_color,0.9f,0xAAAAAAAA);\n              }\n            const int yt = (int)text_down?visu.height() - 13:0;\n            if (is_clicked) visu.draw_text(0,yt,\" Images #%u - #%u, Size = %u\",\n                                           foreground_color,background_color,0.7f,13,\n                                           orig + indm,orig + indM,indM - indm + 1);\n            else visu.draw_text(0,yt,\" Image #%u (%u,%u,%u,%u)\",foreground_color,background_color,0.7f,13,\n                                orig + indice0,\n                                _data[indice0]._width,\n                                _data[indice0]._height,\n                                _data[indice0]._depth,\n                                _data[indice0]._spectrum);\n            update_display = true;\n          } else visu.assign();\n        }\n        if (!visu) { visu.assign(visu0,true); update_display = true; }\n        if (update_display) { visu.display(disp); update_display = false; }\n        disp.wait();\n\n        // Manage user events.\n        const int xm = disp.mouse_x(), ym = disp.mouse_y();\n        int indice = -1;\n\n        if (xm>=0) {\n          indice = (int)indices(axis=='x'?xm:ym);\n          if (disp.button()&1) {\n            if (!is_clicked) { is_clicked = true; oindice0 = indice0; indice0 = indice; }\n            oindice1 = indice1; indice1 = indice;\n            if (!feature_type) is_selected = true;\n          } else {\n            if (!is_clicked) { oindice0 = oindice1 = indice0; indice0 = indice1 = indice; }\n            else is_selected = true;\n          }\n        } else {\n          if (is_clicked) {\n            if (!(disp.button()&1)) { is_clicked = is_selected = false; indice0 = indice1 = -1; }\n            else indice1 = -1;\n          } else indice0 = indice1 = -1;\n        }\n\n        if (disp.button()&4) { is_clicked = is_selected = false; indice0 = indice1 = -1; }\n        if (disp.button()&2 && exit_on_rightbutton) { is_selected = true; indice1 = indice0 = -1; }\n        if (disp.wheel() && exit_on_wheel) is_selected = true;\n\n        CImg<charT> filename(32);\n        switch (key = disp.key()) {\n#if cimg_OS!=2\n        case cimg::keyCTRLRIGHT :\n#endif\n        case 0 : case cimg::keyCTRLLEFT : key = 0; break;\n        case cimg::keyD : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,false),\n                     CImgDisplay::_fitscreen(3*disp.width()/2,3*disp.height()/2,1,128,-100,true),false).\n              _is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyC : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(cimg_fitscreen(2*disp.width()/3,2*disp.height()/3,1),false)._is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyR : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.set_fullscreen(false).\n              resize(cimg_fitscreen(axis=='x'?sum_width:max_width,axis=='x'?max_height:sum_height,1),false).\n              _is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyF : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            disp.resize(disp.screen_width(),disp.screen_height(),false).toggle_fullscreen()._is_resized = true;\n            disp.set_key(key,false); key = 0; visu0.assign();\n          } break;\n        case cimg::keyS : if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.bmp\",snap_number++);\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            if (visu0) {\n              (+visu0).draw_text(0,0,\" Saving snapshot... \",\n                                 foreground_color,background_color,0.7f,13).display(disp);\n              visu0.save(filename);\n              (+visu0).draw_text(0,0,\" Snapshot '%s' saved. \",\n                                 foreground_color,background_color,0.7f,13,filename._data).display(disp);\n            }\n            disp.set_key(key,false).wait(); key = 0;\n          } break;\n        case cimg::keyO :\n          if (disp.is_keyCTRLLEFT() || disp.is_keyCTRLRIGHT()) {\n            static unsigned int snap_number = 0;\n            std::FILE *file;\n            do {\n#ifdef cimg_use_zlib\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimgz\",snap_number++);\n#else\n              cimg_snprintf(filename,filename._width,cimg_appname \"_%.4u.cimg\",snap_number++);\n#endif\n              if ((file=std_fopen(filename,\"r\"))!=0) cimg::fclose(file);\n            } while (file);\n            (+visu0).draw_text(0,0,\" Saving instance... \",\n                               foreground_color,background_color,0.7f,13).display(disp);\n            save(filename);\n            (+visu0).draw_text(0,0,\" Instance '%s' saved. \",\n                               foreground_color,background_color,0.7f,13,filename._data).display(disp);\n            disp.set_key(key,false).wait(); key = 0;\n          } break;\n        }\n        if (disp.is_resized()) { disp.resize(false); visu0.assign(); }\n        if (ym>=0 && ym<13) { if (!text_down) { visu.assign(); text_down = true; }}\n        else if (ym>=visu.height() - 13) { if(text_down) { visu.assign(); text_down = false; }}\n        if (!exit_on_anykey && key && key!=cimg::keyESC &&\n            (key!=cimg::keyW || (!disp.is_keyCTRLLEFT() && !disp.is_keyCTRLRIGHT()))) {\n          key = 0;\n        }\n      }\n      CImg<intT> res(1,2,1,1,-1);\n      if (is_selected) {\n        if (feature_type) res.fill(std::min(indice0,indice1),std::max(indice0,indice1));\n        else res.fill(indice0);\n      }\n      if (!(disp.button()&2)) disp.set_button();\n      disp._normalization = old_normalization;\n      disp._is_resized = old_is_resized;\n      disp.set_key(key);\n      return res;\n    }\n\n    //! Load a list from a file.\n    /**\n     \\param filename Filename to read data from.\n    **/\n    CImgList<T>& load(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load(): Specified filename is (null).\",\n                                    cimglist_instance);\n\n      if (!cimg::strncasecmp(filename,\"http://\",7) || !cimg::strncasecmp(filename,\"https://\",8)) {\n        CImg<charT> filename_local(256);\n        load(cimg::load_network(filename,filename_local));\n        std::remove(filename_local);\n        return *this;\n      }\n\n      const bool is_stdin = *filename=='-' && (!filename[1] || filename[1]=='.');\n      const char *const ext = cimg::split_filename(filename);\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      bool is_loaded = true;\n      try {\n#ifdef cimglist_load_plugin\n        cimglist_load_plugin(filename);\n#endif\n#ifdef cimglist_load_plugin1\n        cimglist_load_plugin1(filename);\n#endif\n#ifdef cimglist_load_plugin2\n        cimglist_load_plugin2(filename);\n#endif\n#ifdef cimglist_load_plugin3\n        cimglist_load_plugin3(filename);\n#endif\n#ifdef cimglist_load_plugin4\n        cimglist_load_plugin4(filename);\n#endif\n#ifdef cimglist_load_plugin5\n        cimglist_load_plugin5(filename);\n#endif\n#ifdef cimglist_load_plugin6\n        cimglist_load_plugin6(filename);\n#endif\n#ifdef cimglist_load_plugin7\n        cimglist_load_plugin7(filename);\n#endif\n#ifdef cimglist_load_plugin8\n        cimglist_load_plugin8(filename);\n#endif\n        if (!cimg::strcasecmp(ext,\"tif\") ||\n            !cimg::strcasecmp(ext,\"tiff\")) load_tiff(filename);\n        else if (!cimg::strcasecmp(ext,\"gif\")) load_gif_external(filename);\n        else if (!cimg::strcasecmp(ext,\"cimg\") ||\n                 !cimg::strcasecmp(ext,\"cimgz\") ||\n                 !*ext) load_cimg(filename);\n        else if (!cimg::strcasecmp(ext,\"rec\") ||\n                 !cimg::strcasecmp(ext,\"par\")) load_parrec(filename);\n        else if (!cimg::strcasecmp(ext,\"avi\") ||\n                 !cimg::strcasecmp(ext,\"mov\") ||\n                 !cimg::strcasecmp(ext,\"asf\") ||\n                 !cimg::strcasecmp(ext,\"divx\") ||\n                 !cimg::strcasecmp(ext,\"flv\") ||\n                 !cimg::strcasecmp(ext,\"mpg\") ||\n                 !cimg::strcasecmp(ext,\"m1v\") ||\n                 !cimg::strcasecmp(ext,\"m2v\") ||\n                 !cimg::strcasecmp(ext,\"m4v\") ||\n                 !cimg::strcasecmp(ext,\"mjp\") ||\n                 !cimg::strcasecmp(ext,\"mp4\") ||\n                 !cimg::strcasecmp(ext,\"mkv\") ||\n                 !cimg::strcasecmp(ext,\"mpe\") ||\n                 !cimg::strcasecmp(ext,\"movie\") ||\n                 !cimg::strcasecmp(ext,\"ogm\") ||\n                 !cimg::strcasecmp(ext,\"ogg\") ||\n                 !cimg::strcasecmp(ext,\"ogv\") ||\n                 !cimg::strcasecmp(ext,\"qt\") ||\n                 !cimg::strcasecmp(ext,\"rm\") ||\n                 !cimg::strcasecmp(ext,\"vob\") ||\n                 !cimg::strcasecmp(ext,\"wmv\") ||\n                 !cimg::strcasecmp(ext,\"xvid\") ||\n                 !cimg::strcasecmp(ext,\"mpeg\")) load_video(filename);\n        else if (!cimg::strcasecmp(ext,\"gz\")) load_gzip_external(filename);\n        else is_loaded = false;\n      } catch (CImgIOException&) { is_loaded = false; }\n\n      // If nothing loaded, try to guess file format from magic number in file.\n      if (!is_loaded && !is_stdin) {\n        std::FILE *const file = std::fopen(filename,\"rb\");\n        if (!file) {\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimglist_instance\n                                \"load(): Failed to open file '%s'.\",\n                                cimglist_instance,\n                                filename);\n        }\n\n        const char *const f_type = cimg::ftype(file,filename);\n        std::fclose(file);\n        is_loaded = true;\n        try {\n          if (!cimg::strcasecmp(f_type,\"gif\")) load_gif_external(filename);\n          else if (!cimg::strcasecmp(f_type,\"tif\")) load_tiff(filename);\n          else is_loaded = false;\n        } catch (CImgIOException&) { is_loaded = false; }\n      }\n\n      // If nothing loaded, try to load file as a single image.\n      if (!is_loaded) {\n        assign(1);\n        try {\n          _data->load(filename);\n        } catch (CImgIOException&) {\n          cimg::exception_mode(omode);\n          throw CImgIOException(_cimglist_instance\n                                \"load(): Failed to recognize format of file '%s'.\",\n                                cimglist_instance,\n                                filename);\n        }\n      }\n      cimg::exception_mode(omode);\n      return *this;\n    }\n\n    //! Load a list from a file \\newinstance.\n    static CImgList<T> get_load(const char *const filename) {\n      return CImgList<T>().load(filename);\n    }\n\n    //! Load a list from a .cimg file.\n    /**\n      \\param filename Filename to read data from.\n    **/\n    CImgList<T>& load_cimg(const char *const filename) {\n      return _load_cimg(0,filename);\n    }\n\n    //! Load a list from a .cimg file \\newinstance.\n    static CImgList<T> get_load_cimg(const char *const filename) {\n      return CImgList<T>().load_cimg(filename);\n    }\n\n    //! Load a list from a .cimg file.\n    /**\n      \\param file File to read data from.\n    **/\n    CImgList<T>& load_cimg(std::FILE *const file) {\n      return _load_cimg(file,0);\n    }\n\n    //! Load a list from a .cimg file \\newinstance.\n    static CImgList<T> get_load_cimg(std::FILE *const file) {\n      return CImgList<T>().load_cimg(file);\n    }\n\n    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename) {\n#ifdef cimg_use_zlib\n#define _cimgz_load_cimg_case(Tss) { \\\n   Bytef *const cbuf = new Bytef[csiz]; \\\n   cimg::fread(cbuf,csiz,nfile); \\\n   raw.assign(W,H,D,C); \\\n   uLongf destlen = (ulongT)raw.size()*sizeof(Tss); \\\n   uncompress((Bytef*)raw._data,&destlen,cbuf,csiz); \\\n   delete[] cbuf; \\\n   if (endian!=cimg::endianness()) cimg::invert_endianness(raw._data,raw.size()); \\\n   raw.move_to(img); \\\n}\n#else\n#define _cimgz_load_cimg_case(Tss) \\\n   throw CImgIOException(_cimglist_instance \\\n                         \"load_cimg(): Unable to load compressed data from file '%s' unless zlib is enabled.\", \\\n                         cimglist_instance, \\\n                         filename?filename:\"(FILE*)\");\n#endif\n\n#define _cimg_load_cimg_case(Ts,Tss) \\\n      if (!loaded && !cimg::strcasecmp(Ts,str_pixeltype)) { \\\n        for (unsigned int l = 0; l<N; ++l) { \\\n          j = 0; while ((i=std::fgetc(nfile))!='\\n' && i>=0 && j<255) tmp[j++] = (char)i; tmp[j] = 0; \\\n          W = H = D = C = 0; csiz = 0; \\\n          if ((err = cimg_sscanf(tmp,\"%u %u %u %u #%lu\",&W,&H,&D,&C,&csiz))<4) \\\n            throw CImgIOException(_cimglist_instance \\\n                                  \"load_cimg(): Invalid specified size (%u,%u,%u,%u) of image %u in file '%s'.\", \\\n                                  cimglist_instance, \\\n                                  W,H,D,C,l,filename?filename:(\"(FILE*)\")); \\\n          if (W*H*D*C>0) { \\\n            CImg<Tss> raw; \\\n            CImg<T> &img = _data[l]; \\\n            if (err==5) _cimgz_load_cimg_case(Tss) \\\n            else { \\\n              img.assign(W,H,D,C); \\\n              T *ptrd = img._data; \\\n              for (ulongT to_read = img.size(); to_read; ) { \\\n                raw.assign((unsigned int)std::min(to_read,cimg_iobuffer)); \\\n                cimg::fread(raw._data,raw._width,nfile); \\\n                if (endian!=cimg::endianness()) cimg::invert_endianness(raw._data,raw.size()); \\\n                const Tss *ptrs = raw._data; \\\n                for (ulongT off = (ulongT)raw._width; off; --off) *(ptrd++) = (T)*(ptrs++); \\\n                to_read-=raw._width; \\\n              } \\\n            } \\\n          } \\\n        } \\\n        loaded = true; \\\n      }\n\n      if (!filename && !file)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_cimg(): Specified filename is (null).\",\n                                    cimglist_instance);\n\n      const ulongT cimg_iobuffer = (ulongT)24*1024*1024;\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      bool loaded = false, endian = cimg::endianness();\n      CImg<charT> tmp(256), str_pixeltype(256), str_endian(256);\n      *tmp = *str_pixeltype = *str_endian = 0;\n      unsigned int j, N = 0, W, H, D, C;\n      unsigned long csiz;\n      int i, err;\n      do {\n        j = 0; while ((i=std::fgetc(nfile))!='\\n' && i>=0 && j<255) tmp[j++] = (char)i; tmp[j] = 0;\n      } while (*tmp=='#' && i>=0);\n      err = cimg_sscanf(tmp,\"%u%*c%255[A-Za-z64_]%*c%255[sA-Za-z_ ]\",\n                        &N,str_pixeltype._data,str_endian._data);\n      if (err<2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"load_cimg(): CImg header not found in file '%s'.\",\n                              cimglist_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (!cimg::strncasecmp(\"little\",str_endian,6)) endian = false;\n      else if (!cimg::strncasecmp(\"big\",str_endian,3)) endian = true;\n      assign(N);\n      _cimg_load_cimg_case(\"bool\",bool);\n      _cimg_load_cimg_case(\"unsigned_char\",unsigned char);\n      _cimg_load_cimg_case(\"uchar\",unsigned char);\n      _cimg_load_cimg_case(\"char\",char);\n      _cimg_load_cimg_case(\"unsigned_short\",unsigned short);\n      _cimg_load_cimg_case(\"ushort\",unsigned short);\n      _cimg_load_cimg_case(\"short\",short);\n      _cimg_load_cimg_case(\"unsigned_int\",unsigned int);\n      _cimg_load_cimg_case(\"uint\",unsigned int);\n      _cimg_load_cimg_case(\"int\",int);\n      _cimg_load_cimg_case(\"unsigned_long\",ulongT);\n      _cimg_load_cimg_case(\"ulong\",ulongT);\n      _cimg_load_cimg_case(\"long\",longT);\n      _cimg_load_cimg_case(\"unsigned_int64\",uint64T);\n      _cimg_load_cimg_case(\"uint64\",uint64T);\n      _cimg_load_cimg_case(\"int64\",int64T);\n      _cimg_load_cimg_case(\"float\",float);\n      _cimg_load_cimg_case(\"double\",double);\n\n      if (!loaded) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"load_cimg(): Unsupported pixel type '%s' for file '%s'.\",\n                              cimglist_instance,\n                              str_pixeltype._data,filename?filename:\"(FILE*)\");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load a sublist list from a (non compressed) .cimg file.\n    /**\n      \\param filename Filename to read data from.\n      \\param n0 Starting index of images to read (~0U for max).\n      \\param n1 Ending index of images to read (~0U for max).\n      \\param x0 Starting X-coordinates of image regions to read.\n      \\param y0 Starting Y-coordinates of image regions to read.\n      \\param z0 Starting Z-coordinates of image regions to read.\n      \\param c0 Starting C-coordinates of image regions to read.\n      \\param x1 Ending X-coordinates of image regions to read (~0U for max).\n      \\param y1 Ending Y-coordinates of image regions to read (~0U for max).\n      \\param z1 Ending Z-coordinates of image regions to read (~0U for max).\n      \\param c1 Ending C-coordinates of image regions to read (~0U for max).\n    **/\n    CImgList<T>& load_cimg(const char *const filename,\n                           const unsigned int n0, const unsigned int n1,\n                           const unsigned int x0, const unsigned int y0,\n                           const unsigned int z0, const unsigned int c0,\n                           const unsigned int x1, const unsigned int y1,\n                           const unsigned int z1, const unsigned int c1) {\n      return _load_cimg(0,filename,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n    }\n\n    //! Load a sublist list from a (non compressed) .cimg file \\newinstance.\n    static CImgList<T> get_load_cimg(const char *const filename,\n                                     const unsigned int n0, const unsigned int n1,\n                                     const unsigned int x0, const unsigned int y0,\n                                     const unsigned int z0, const unsigned int c0,\n                                     const unsigned int x1, const unsigned int y1,\n                                     const unsigned int z1, const unsigned int c1) {\n      return CImgList<T>().load_cimg(filename,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n    }\n\n    //! Load a sub-image list from a (non compressed) .cimg file \\overloading.\n    CImgList<T>& load_cimg(std::FILE *const file,\n                           const unsigned int n0, const unsigned int n1,\n                           const unsigned int x0, const unsigned int y0,\n                           const unsigned int z0, const unsigned int c0,\n                           const unsigned int x1, const unsigned int y1,\n                           const unsigned int z1, const unsigned int c1) {\n      return _load_cimg(file,0,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n    }\n\n    //! Load a sub-image list from a (non compressed) .cimg file \\newinstance.\n    static CImgList<T> get_load_cimg(std::FILE *const file,\n                                     const unsigned int n0, const unsigned int n1,\n                                     const unsigned int x0, const unsigned int y0,\n                                     const unsigned int z0, const unsigned int c0,\n                                     const unsigned int x1, const unsigned int y1,\n                                     const unsigned int z1, const unsigned int c1) {\n      return CImgList<T>().load_cimg(file,n0,n1,x0,y0,z0,c0,x1,y1,z1,c1);\n    }\n\n    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename,\n                            const unsigned int n0, const unsigned int n1,\n                            const unsigned int x0, const unsigned int y0,\n                            const unsigned int z0, const unsigned int c0,\n                            const unsigned int x1, const unsigned int y1,\n                            const unsigned int z1, const unsigned int c1) {\n#define _cimg_load_cimg_case2(Ts,Tss) \\\n      if (!loaded && !cimg::strcasecmp(Ts,str_pixeltype)) { \\\n        for (unsigned int l = 0; l<=nn1; ++l) { \\\n          j = 0; while ((i=std::fgetc(nfile))!='\\n' && i>=0) tmp[j++] = (char)i; tmp[j] = 0; \\\n          W = H = D = C = 0; \\\n          if (cimg_sscanf(tmp,\"%u %u %u %u\",&W,&H,&D,&C)!=4) \\\n            throw CImgIOException(_cimglist_instance \\\n                                  \"load_cimg(): Invalid specified size (%u,%u,%u,%u) of image %u in file '%s'\", \\\n                                  cimglist_instance, \\\n                                  W,H,D,C,l,filename?filename:\"(FILE*)\"); \\\n          if (W*H*D*C>0) { \\\n            if (l<nn0 || nx0>=W || ny0>=H || nz0>=D || nc0>=C) cimg::fseek(nfile,W*H*D*C*sizeof(Tss),SEEK_CUR); \\\n            else { \\\n              const unsigned int \\\n                _nx1 = nx1==~0U?W - 1:nx1, \\\n                _ny1 = ny1==~0U?H - 1:ny1, \\\n                _nz1 = nz1==~0U?D - 1:nz1, \\\n                _nc1 = nc1==~0U?C - 1:nc1; \\\n              if (_nx1>=W || _ny1>=H || _nz1>=D || _nc1>=C) \\\n                throw CImgArgumentException(_cimglist_instance \\\n                                            \"load_cimg(): Invalid specified coordinates \" \\\n                                            \"[%u](%u,%u,%u,%u) -> [%u](%u,%u,%u,%u) \" \\\n                                            \"because image [%u] in file '%s' has size (%u,%u,%u,%u).\", \\\n                                            cimglist_instance, \\\n                                            n0,x0,y0,z0,c0,n1,x1,y1,z1,c1,l,filename?filename:\"(FILE*)\",W,H,D,C); \\\n              CImg<Tss> raw(1 + _nx1 - nx0); \\\n              CImg<T> &img = _data[l - nn0]; \\\n              img.assign(1 + _nx1 - nx0,1 + _ny1 - ny0,1 + _nz1 - nz0,1 + _nc1 - nc0); \\\n              T *ptrd = img._data; \\\n              ulongT skipvb = nc0*W*H*D*sizeof(Tss); \\\n              if (skipvb) cimg::fseek(nfile,skipvb,SEEK_CUR); \\\n              for (unsigned int c = 1 + _nc1 - nc0; c; --c) { \\\n                const ulongT skipzb = nz0*W*H*sizeof(Tss); \\\n                if (skipzb) cimg::fseek(nfile,skipzb,SEEK_CUR); \\\n                for (unsigned int z = 1 + _nz1 - nz0; z; --z) { \\\n                  const ulongT skipyb = ny0*W*sizeof(Tss); \\\n                  if (skipyb) cimg::fseek(nfile,skipyb,SEEK_CUR); \\\n                  for (unsigned int y = 1 + _ny1 - ny0; y; --y) { \\\n                    const ulongT skipxb = nx0*sizeof(Tss); \\\n                    if (skipxb) cimg::fseek(nfile,skipxb,SEEK_CUR); \\\n                    cimg::fread(raw._data,raw._width,nfile); \\\n                    if (endian!=cimg::endianness()) cimg::invert_endianness(raw._data,raw._width); \\\n                    const Tss *ptrs = raw._data; \\\n                    for (unsigned int off = raw._width; off; --off) *(ptrd++) = (T)*(ptrs++); \\\n                    const ulongT skipxe = (W - 1 - _nx1)*sizeof(Tss); \\\n                    if (skipxe) cimg::fseek(nfile,skipxe,SEEK_CUR); \\\n                  } \\\n                  const ulongT skipye = (H - 1 - _ny1)*W*sizeof(Tss); \\\n                  if (skipye) cimg::fseek(nfile,skipye,SEEK_CUR); \\\n                } \\\n                const ulongT skipze = (D - 1 - _nz1)*W*H*sizeof(Tss); \\\n                if (skipze) cimg::fseek(nfile,skipze,SEEK_CUR); \\\n              } \\\n              const ulongT skipve = (C - 1 - _nc1)*W*H*D*sizeof(Tss); \\\n              if (skipve) cimg::fseek(nfile,skipve,SEEK_CUR); \\\n            } \\\n          } \\\n        } \\\n        loaded = true; \\\n      }\n\n      if (!filename && !file)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_cimg(): Specified filename is (null).\",\n                                    cimglist_instance);\n      unsigned int\n        nn0 = std::min(n0,n1), nn1 = std::max(n0,n1),\n        nx0 = std::min(x0,x1), nx1 = std::max(x0,x1),\n        ny0 = std::min(y0,y1), ny1 = std::max(y0,y1),\n        nz0 = std::min(z0,z1), nz1 = std::max(z0,z1),\n        nc0 = std::min(c0,c1), nc1 = std::max(c0,c1);\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      bool loaded = false, endian = cimg::endianness();\n      CImg<charT> tmp(256), str_pixeltype(256), str_endian(256);\n      *tmp = *str_pixeltype = *str_endian = 0;\n      unsigned int j, N, W, H, D, C;\n      int i, err;\n      j = 0; while ((i=std::fgetc(nfile))!='\\n' && i!=EOF && j<256) tmp[j++] = (char)i; tmp[j] = 0;\n      err = cimg_sscanf(tmp,\"%u%*c%255[A-Za-z64_]%*c%255[sA-Za-z_ ]\",\n                        &N,str_pixeltype._data,str_endian._data);\n      if (err<2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"load_cimg(): CImg header not found in file '%s'.\",\n                              cimglist_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (!cimg::strncasecmp(\"little\",str_endian,6)) endian = false;\n      else if (!cimg::strncasecmp(\"big\",str_endian,3)) endian = true;\n      nn1 = n1==~0U?N - 1:n1;\n      if (nn1>=N)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_cimg(): Invalid specified coordinates [%u](%u,%u,%u,%u) -> [%u](%u,%u,%u,%u) \"\n                                    \"because file '%s' contains only %u images.\",\n                                    cimglist_instance,\n                                    n0,x0,y0,z0,c0,n1,x1,y1,z1,c1,filename?filename:\"(FILE*)\",N);\n      assign(1 + nn1 - n0);\n      _cimg_load_cimg_case2(\"bool\",bool);\n      _cimg_load_cimg_case2(\"unsigned_char\",unsigned char);\n      _cimg_load_cimg_case2(\"uchar\",unsigned char);\n      _cimg_load_cimg_case2(\"char\",char);\n      _cimg_load_cimg_case2(\"unsigned_short\",unsigned short);\n      _cimg_load_cimg_case2(\"ushort\",unsigned short);\n      _cimg_load_cimg_case2(\"short\",short);\n      _cimg_load_cimg_case2(\"unsigned_int\",unsigned int);\n      _cimg_load_cimg_case2(\"uint\",unsigned int);\n      _cimg_load_cimg_case2(\"int\",int);\n      _cimg_load_cimg_case2(\"unsigned_long\",ulongT);\n      _cimg_load_cimg_case2(\"ulong\",ulongT);\n      _cimg_load_cimg_case2(\"long\",longT);\n      _cimg_load_cimg_case2(\"unsigned_int64\",uint64T);\n      _cimg_load_cimg_case2(\"uint64\",uint64T);\n      _cimg_load_cimg_case2(\"int64\",int64T);\n      _cimg_load_cimg_case2(\"float\",float);\n      _cimg_load_cimg_case2(\"double\",double);\n      if (!loaded) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"load_cimg(): Unsupported pixel type '%s' for file '%s'.\",\n                              cimglist_instance,\n                              str_pixeltype._data,filename?filename:\"(FILE*)\");\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load a list from a PAR/REC (Philips) file.\n    /**\n      \\param filename Filename to read data from.\n    **/\n    CImgList<T>& load_parrec(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_parrec(): Specified filename is (null).\",\n                                    cimglist_instance);\n\n      CImg<charT> body(1024), filenamepar(1024), filenamerec(1024);\n      *body = *filenamepar = *filenamerec = 0;\n      const char *const ext = cimg::split_filename(filename,body);\n      if (!std::strcmp(ext,\"par\")) {\n        std::strncpy(filenamepar,filename,filenamepar._width - 1);\n        cimg_snprintf(filenamerec,filenamerec._width,\"%s.rec\",body._data);\n      }\n      if (!std::strcmp(ext,\"PAR\")) {\n        std::strncpy(filenamepar,filename,filenamepar._width - 1);\n        cimg_snprintf(filenamerec,filenamerec._width,\"%s.REC\",body._data);\n      }\n      if (!std::strcmp(ext,\"rec\")) {\n        std::strncpy(filenamerec,filename,filenamerec._width - 1);\n        cimg_snprintf(filenamepar,filenamepar._width,\"%s.par\",body._data);\n      }\n      if (!std::strcmp(ext,\"REC\")) {\n        std::strncpy(filenamerec,filename,filenamerec._width - 1);\n        cimg_snprintf(filenamepar,filenamepar._width,\"%s.PAR\",body._data);\n      }\n      std::FILE *file = cimg::fopen(filenamepar,\"r\");\n\n      // Parse header file\n      CImgList<floatT> st_slices;\n      CImgList<uintT> st_global;\n      CImg<charT> line(256); *line = 0;\n      int err;\n      do { err = std::fscanf(file,\"%255[^\\n]%*c\",line._data); } while (err!=EOF && (*line=='#' || *line=='.'));\n      do {\n        unsigned int sn,size_x,size_y,pixsize;\n        float rs,ri,ss;\n        err = std::fscanf(file,\"%u%*u%*u%*u%*u%*u%*u%u%*u%u%u%g%g%g%*[^\\n]\",&sn,&pixsize,&size_x,&size_y,&ri,&rs,&ss);\n        if (err==7) {\n          CImg<floatT>::vector((float)sn,(float)pixsize,(float)size_x,(float)size_y,ri,rs,ss,0).move_to(st_slices);\n          unsigned int i; for (i = 0; i<st_global._width && sn<=st_global[i][2]; ++i) {}\n          if (i==st_global._width) CImg<uintT>::vector(size_x,size_y,sn).move_to(st_global);\n          else {\n            CImg<uintT> &vec = st_global[i];\n            if (size_x>vec[0]) vec[0] = size_x;\n            if (size_y>vec[1]) vec[1] = size_y;\n            vec[2] = sn;\n          }\n          st_slices[st_slices._width - 1][7] = (float)i;\n        }\n      } while (err==7);\n\n      // Read data\n      std::FILE *file2 = cimg::fopen(filenamerec,\"rb\");\n      cimglist_for(st_global,l) {\n        const CImg<uintT>& vec = st_global[l];\n        CImg<T>(vec[0],vec[1],vec[2]).move_to(*this);\n      }\n\n      cimglist_for(st_slices,l) {\n        const CImg<floatT>& vec = st_slices[l];\n        const unsigned int\n          sn = (unsigned int)vec[0] - 1,\n          pixsize = (unsigned int)vec[1],\n          size_x = (unsigned int)vec[2],\n          size_y = (unsigned int)vec[3],\n          imn = (unsigned int)vec[7];\n        const float ri = vec[4], rs = vec[5], ss = vec[6];\n        switch (pixsize) {\n        case 8 : {\n          CImg<ucharT> buf(size_x,size_y);\n          cimg::fread(buf._data,size_x*size_y,file2);\n          if (cimg::endianness()) cimg::invert_endianness(buf._data,size_x*size_y);\n          CImg<T>& img = (*this)[imn];\n          cimg_forXY(img,x,y) img(x,y,sn) = (T)(( buf(x,y)*rs + ri )/(rs*ss));\n        } break;\n        case 16 : {\n          CImg<ushortT> buf(size_x,size_y);\n          cimg::fread(buf._data,size_x*size_y,file2);\n          if (cimg::endianness()) cimg::invert_endianness(buf._data,size_x*size_y);\n          CImg<T>& img = (*this)[imn];\n          cimg_forXY(img,x,y) img(x,y,sn) = (T)(( buf(x,y)*rs + ri )/(rs*ss));\n        } break;\n        case 32 : {\n          CImg<uintT> buf(size_x,size_y);\n          cimg::fread(buf._data,size_x*size_y,file2);\n          if (cimg::endianness()) cimg::invert_endianness(buf._data,size_x*size_y);\n          CImg<T>& img = (*this)[imn];\n          cimg_forXY(img,x,y) img(x,y,sn) = (T)(( buf(x,y)*rs + ri )/(rs*ss));\n        } break;\n        default :\n          cimg::fclose(file);\n          cimg::fclose(file2);\n          throw CImgIOException(_cimglist_instance\n                                \"load_parrec(): Unsupported %d-bits pixel type for file '%s'.\",\n                                cimglist_instance,\n                                pixsize,filename);\n        }\n      }\n      cimg::fclose(file);\n      cimg::fclose(file2);\n      if (!_width)\n        throw CImgIOException(_cimglist_instance\n                              \"load_parrec(): Failed to recognize valid PAR-REC data in file '%s'.\",\n                              cimglist_instance,\n                              filename);\n      return *this;\n    }\n\n    //! Load a list from a PAR/REC (Philips) file \\newinstance.\n    static CImgList<T> get_load_parrec(const char *const filename) {\n      return CImgList<T>().load_parrec(filename);\n    }\n\n    //! Load a list from a YUV image sequence file.\n    /**\n        \\param filename Filename to read data from.\n        \\param size_x Width of the images.\n        \\param size_y Height of the images.\n        \\param first_frame Index of first image frame to read.\n        \\param last_frame Index of last image frame to read.\n        \\param step_frame Step applied between each frame.\n        \\param yuv2rgb Apply YUV to RGB transformation during reading.\n    **/\n    CImgList<T>& load_yuv(const char *const filename,\n                          const unsigned int size_x, const unsigned int size_y,\n                          const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                          const unsigned int step_frame=1, const bool yuv2rgb=true) {\n      return _load_yuv(0,filename,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb);\n    }\n\n    //! Load a list from a YUV image sequence file \\newinstance.\n    static CImgList<T> get_load_yuv(const char *const filename,\n                                    const unsigned int size_x, const unsigned int size_y=1,\n                                    const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                    const unsigned int step_frame=1, const bool yuv2rgb=true) {\n      return CImgList<T>().load_yuv(filename,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb);\n    }\n\n    //! Load a list from an image sequence YUV file \\overloading.\n    CImgList<T>& load_yuv(std::FILE *const file,\n                          const unsigned int size_x, const unsigned int size_y,\n                          const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                          const unsigned int step_frame=1, const bool yuv2rgb=true) {\n      return _load_yuv(file,0,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb);\n    }\n\n    //! Load a list from an image sequence YUV file \\newinstance.\n    static CImgList<T> get_load_yuv(std::FILE *const file,\n                                    const unsigned int size_x, const unsigned int size_y=1,\n                                    const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                    const unsigned int step_frame=1, const bool yuv2rgb=true) {\n      return CImgList<T>().load_yuv(file,size_x,size_y,first_frame,last_frame,step_frame,yuv2rgb);\n    }\n\n    CImgList<T>& _load_yuv(std::FILE *const file, const char *const filename,\n                           const unsigned int size_x, const unsigned int size_y,\n                           const unsigned int first_frame, const unsigned int last_frame,\n                           const unsigned int step_frame, const bool yuv2rgb) {\n      if (!filename && !file)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_yuv(): Specified filename is (null).\",\n                                    cimglist_instance);\n      if (size_x%2 || size_y%2)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_yuv(): Invalid odd XY dimensions %ux%u in file '%s'.\",\n                                    cimglist_instance,\n                                    size_x,size_y,filename?filename:\"(FILE*)\");\n      if (!size_x || !size_y)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_yuv(): Invalid sequence size (%u,%u) in file '%s'.\",\n                                    cimglist_instance,\n                                    size_x,size_y,filename?filename:\"(FILE*)\");\n\n      const unsigned int\n        nfirst_frame = first_frame<last_frame?first_frame:last_frame,\n        nlast_frame = first_frame<last_frame?last_frame:first_frame,\n        nstep_frame = step_frame?step_frame:1;\n\n      CImg<ucharT> tmp(size_x,size_y,1,3), UV(size_x/2,size_y/2,1,2);\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb\");\n      bool stop_flag = false;\n      int err;\n      if (nfirst_frame) {\n        err = cimg::fseek(nfile,nfirst_frame*(size_x*size_y + size_x*size_y/2),SEEK_CUR);\n        if (err) {\n          if (!file) cimg::fclose(nfile);\n          throw CImgIOException(_cimglist_instance\n                                \"load_yuv(): File '%s' doesn't contain frame number %u.\",\n                                cimglist_instance,\n                                filename?filename:\"(FILE*)\",nfirst_frame);\n        }\n      }\n      unsigned int frame;\n      for (frame = nfirst_frame; !stop_flag && frame<=nlast_frame; frame+=nstep_frame) {\n        tmp.fill(0);\n        // *TRY* to read the luminance part, do not replace by cimg::fread!\n        err = (int)std::fread((void*)(tmp._data),1,(ulongT)tmp._width*tmp._height,nfile);\n        if (err!=(int)(tmp._width*tmp._height)) {\n          stop_flag = true;\n          if (err>0)\n            cimg::warn(_cimglist_instance\n                       \"load_yuv(): File '%s' contains incomplete data or given image dimensions \"\n                       \"(%u,%u) are incorrect.\",\n                       cimglist_instance,\n                       filename?filename:\"(FILE*)\",size_x,size_y);\n        } else {\n          UV.fill(0);\n          // *TRY* to read the luminance part, do not replace by cimg::fread!\n          err = (int)std::fread((void*)(UV._data),1,(size_t)(UV.size()),nfile);\n          if (err!=(int)(UV.size())) {\n            stop_flag = true;\n            if (err>0)\n              cimg::warn(_cimglist_instance\n                         \"load_yuv(): File '%s' contains incomplete data or given image dimensions (%u,%u) \"\n                         \"are incorrect.\",\n                         cimglist_instance,\n                         filename?filename:\"(FILE*)\",size_x,size_y);\n          } else {\n            cimg_forXY(UV,x,y) {\n              const int x2 = x*2, y2 = y*2;\n              tmp(x2,y2,1) = tmp(x2 + 1,y2,1) = tmp(x2,y2 + 1,1) = tmp(x2 + 1,y2 + 1,1) = UV(x,y,0);\n              tmp(x2,y2,2) = tmp(x2 + 1,y2,2) = tmp(x2,y2 + 1,2) = tmp(x2 + 1,y2 + 1,2) = UV(x,y,1);\n            }\n            if (yuv2rgb) tmp.YCbCrtoRGB();\n            insert(tmp);\n            if (nstep_frame>1) cimg::fseek(nfile,(nstep_frame - 1)*(size_x*size_y + size_x*size_y/2),SEEK_CUR);\n          }\n        }\n      }\n      if (stop_flag && nlast_frame!=~0U && frame!=nlast_frame)\n        cimg::warn(_cimglist_instance\n                   \"load_yuv(): Frame %d not reached since only %u frames were found in file '%s'.\",\n                   cimglist_instance,\n                   nlast_frame,frame - 1,filename?filename:\"(FILE*)\");\n\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Load an image from a video file, using OpenCV library.\n    /**\n      \\param filename Filename, as a C-string.\n      \\param first_frame Index of the first frame to read.\n      \\param last_frame Index of the last frame to read.\n      \\param step_frame Step value for frame reading.\n      \\note If step_frame==0, the current video stream is forced to be released (without any frames read).\n    **/\n    CImgList<T>& load_video(const char *const filename,\n                            const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                            const unsigned int step_frame=1) {\n#ifndef cimg_use_opencv\n      if (first_frame || last_frame!=~0U || step_frame>1)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_video() : File '%s', arguments 'first_frame', 'last_frame' \"\n                                    \"and 'step_frame' can be only set when using OpenCV \"\n                                    \"(-Dcimg_use_opencv must be enabled).\",\n                                    cimglist_instance,filename);\n      return load_ffmpeg_external(filename);\n#else\n      static CvCapture *captures[32] = { 0 };\n      static CImgList<charT> filenames(32);\n      static CImg<uintT> positions(32,1,1,1,0);\n      static int last_used_index = -1;\n\n      // Detect if a video capture already exists for the specified filename.\n      cimg::mutex(9);\n      int index = -1;\n      if (filename) {\n        if (last_used_index>=0 && !std::strcmp(filename,filenames[last_used_index])) {\n          index = last_used_index;\n        } else cimglist_for(filenames,l) if (filenames[l] && !std::strcmp(filename,filenames[l])) {\n            index = l; break;\n          }\n      } else index = last_used_index;\n      cimg::mutex(9,0);\n\n      // Release stream if needed.\n      if (!step_frame || (index>=0 && positions[index]>first_frame)) {\n        if (index>=0) {\n          cimg::mutex(9);\n          cvReleaseCapture(&captures[index]);\n          captures[index] = 0; filenames[index].assign(); positions[index] = 0;\n          if (last_used_index==index) last_used_index = -1;\n          index = -1;\n          cimg::mutex(9,0);\n        } else\n          if (filename)\n            cimg::warn(_cimglist_instance\n                       \"load_video() : File '%s', no opened video stream associated with filename found.\",\n                       cimglist_instance,filename);\n          else\n            cimg::warn(_cimglist_instance\n                       \"load_video() : No opened video stream found.\",\n                       cimglist_instance,filename);\n        if (!step_frame) return *this;\n      }\n\n      // Find empty slot for capturing video stream.\n      if (index<0) {\n        if (!filename)\n          throw CImgArgumentException(_cimglist_instance\n                                      \"load_video(): No already open video reader found. You must specify a \"\n                                      \"non-(null) filename argument for the first call.\",\n                                      cimglist_instance);\n        else { cimg::mutex(9); cimglist_for(filenames,l) if (!filenames[l]) { index = l; break; } cimg::mutex(9,0); }\n        if (index<0)\n          throw CImgIOException(_cimglist_instance\n                                \"load_video(): File '%s', no video reader slots available. \"\n                                \"You have to release some of your previously opened videos.\",\n                                cimglist_instance,filename);\n        cimg::mutex(9);\n        captures[index] = cvCaptureFromFile(filename);\n        CImg<charT>::string(filename).move_to(filenames[index]);\n        positions[index] = 0;\n        cimg::mutex(9,0);\n        if (!captures[index]) {\n          filenames[index].assign();\n          std::fclose(cimg::fopen(filename,\"rb\"));  // Check file availability.\n          throw CImgIOException(_cimglist_instance\n                                \"load_video(): File '%s', unable to detect format of video file.\",\n                                cimglist_instance,filename);\n        }\n      }\n\n      cimg::mutex(9);\n      const unsigned int nb_frames = (unsigned int)std::max(0.,cvGetCaptureProperty(captures[index],\n                                                                                     CV_CAP_PROP_FRAME_COUNT));\n      cimg::mutex(9,0);\n      assign();\n\n      // Skip frames if necessary.\n      bool go_on = true;\n      unsigned int &pos = positions[index];\n      while (pos<first_frame) {\n        cimg::mutex(9);\n        if (!cvGrabFrame(captures[index])) { cimg::mutex(9,0); go_on = false; break; }\n        cimg::mutex(9,0);\n        ++pos;\n      }\n\n      // Read and convert frames.\n      const IplImage *src = 0;\n      if (go_on) {\n        const unsigned int _last_frame = std::min(nb_frames?nb_frames - 1:~0U,last_frame);\n        while (pos<=_last_frame) {\n          cimg::mutex(9);\n          src = cvQueryFrame(captures[index]);\n          if (src) {\n            CImg<T> frame(src->width,src->height,1,3);\n            const int step = (int)(src->widthStep - 3*src->width);\n            const unsigned char* ptrs = (unsigned char*)src->imageData;\n            T *ptr_r = frame.data(0,0,0,0), *ptr_g = frame.data(0,0,0,1), *ptr_b = frame.data(0,0,0,2);\n            if (step>0) cimg_forY(frame,y) {\n                cimg_forX(frame,x) { *(ptr_b++) = (T)*(ptrs++); *(ptr_g++) = (T)*(ptrs++); *(ptr_r++) = (T)*(ptrs++); }\n                ptrs+=step;\n              } else for (ulongT siz = (ulongT)src->width*src->height; siz; --siz) {\n                *(ptr_b++) = (T)*(ptrs++); *(ptr_g++) = (T)*(ptrs++); *(ptr_r++) = (T)*(ptrs++);\n              }\n            frame.move_to(*this);\n            ++pos;\n\n            bool skip_failed = false;\n            for (unsigned int i = 1; i<step_frame && pos<=_last_frame; ++i, ++pos)\n              if (!cvGrabFrame(captures[index])) { skip_failed = true; break; }\n            if (skip_failed) src = 0;\n          }\n          cimg::mutex(9,0);\n          if (!src) break;\n        }\n      }\n\n      if (!src || (nb_frames && pos>=nb_frames)) { // Close video stream when necessary.\n        cimg::mutex(9);\n        cvReleaseCapture(&captures[index]);\n        captures[index] = 0;\n        filenames[index].assign();\n        positions[index] = 0;\n        index = -1;\n        cimg::mutex(9,0);\n      }\n\n      cimg::mutex(9);\n      last_used_index = index;\n      cimg::mutex(9,0);\n\n      if (is_empty())\n        throw CImgIOException(_cimglist_instance\n                              \"load_video(): File '%s', unable to locate frame %u.\",\n                              cimglist_instance,filename,first_frame);\n      return *this;\n#endif\n    }\n\n    //! Load an image from a video file, using OpenCV library \\newinstance.\n    static CImgList<T> get_load_video(const char *const filename,\n                           const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                           const unsigned int step_frame=1) {\n      return CImgList<T>().load_video(filename,first_frame,last_frame,step_frame);\n    }\n\n    //! Load an image from a video file using the external tool 'ffmpeg'.\n    /**\n      \\param filename Filename to read data from.\n    **/\n    CImgList<T>& load_ffmpeg_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_ffmpeg_external(): Specified filename is (null).\",\n                                    cimglist_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256), filename_tmp2(256);\n      std::FILE *file = 0;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_000001.ppm\",filename_tmp._data);\n        if ((file=std_fopen(filename_tmp2,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_%%6d.ppm\",filename_tmp._data);\n#if cimg_OS!=2\n      cimg_snprintf(command,command._width,\"%s -i \\\"%s\\\" \\\"%s\\\" >/dev/null 2>&1\",\n                    cimg::ffmpeg_path(),\n                    CImg<charT>::string(filename)._system_strescape().data(),\n                    CImg<charT>::string(filename_tmp2)._system_strescape().data());\n#else\n      cimg_snprintf(command,command._width,\"\\\"%s -i \\\"%s\\\" \\\"%s\\\"\\\" >NUL 2>&1\",\n                    cimg::ffmpeg_path(),\n                    CImg<charT>::string(filename)._system_strescape().data(),\n                    CImg<charT>::string(filename_tmp2)._system_strescape().data());\n#endif\n      cimg::system(command,0);\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      assign();\n      unsigned int i = 1;\n      for (bool stop_flag = false; !stop_flag; ++i) {\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_%.6u.ppm\",filename_tmp._data,i);\n        CImg<T> img;\n        try { img.load_pnm(filename_tmp2); }\n        catch (CImgException&) { stop_flag = true; }\n        if (img) { img.move_to(*this); std::remove(filename_tmp2); }\n      }\n      cimg::exception_mode(omode);\n      if (is_empty())\n        throw CImgIOException(_cimglist_instance\n                              \"load_ffmpeg_external(): Failed to open file '%s' with external command 'ffmpeg'.\",\n                              cimglist_instance,\n                              filename);\n      return *this;\n    }\n\n    //! Load an image from a video file using the external tool 'ffmpeg' \\newinstance.\n    static CImgList<T> get_load_ffmpeg_external(const char *const filename) {\n      return CImgList<T>().load_ffmpeg_external(filename);\n    }\n\n    //! Load gif file, using ImageMagick or GraphicsMagick's external tools.\n    /**\n      \\param filename Filename to read data from.\n      \\param use_graphicsmagick Tells if GraphicsMagick's tool 'gm' is used instead of ImageMagick's tool 'convert'.\n    **/\n    CImgList<T>& load_gif_external(const char *const filename) {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_gif_external(): Specified filename is (null).\",\n                                    cimglist_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      if (!_load_gif_external(filename,false))\n        if (!_load_gif_external(filename,true))\n          try { assign(CImg<T>().load_other(filename)); } catch (CImgException&) { assign(); }\n      if (is_empty())\n        throw CImgIOException(_cimglist_instance\n                              \"load_gif_external(): Failed to open file '%s'.\",\n                              cimglist_instance,filename);\n      return *this;\n    }\n\n    CImgList<T>& _load_gif_external(const char *const filename, const bool use_graphicsmagick=false) {\n      CImg<charT> command(1024), filename_tmp(256), filename_tmp2(256);\n      std::FILE *file = 0;\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        if (use_graphicsmagick) cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s.png.0\",filename_tmp._data);\n        else cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s-0.png\",filename_tmp._data);\n        if ((file=std_fopen(filename_tmp2,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n#if cimg_OS!=2\n      if (use_graphicsmagick) cimg_snprintf(command,command._width,\"%s convert \\\"%s\\\" \\\"%s.png\\\" >/dev/null 2>&1\",\n                                            cimg::graphicsmagick_path(),\n                                            CImg<charT>::string(filename)._system_strescape().data(),\n                                            CImg<charT>::string(filename_tmp)._system_strescape().data());\n      else cimg_snprintf(command,command._width,\"%s \\\"%s\\\" \\\"%s.png\\\" >/dev/null 2>&1\",\n                         cimg::imagemagick_path(),\n                         CImg<charT>::string(filename)._system_strescape().data(),\n                         CImg<charT>::string(filename_tmp)._system_strescape().data());\n#else\n      if (use_graphicsmagick) cimg_snprintf(command,command._width,\"\\\"%s convert \\\"%s\\\" \\\"%s.png\\\"\\\" >NUL 2>&1\",\n                                            cimg::graphicsmagick_path(),\n                                            CImg<charT>::string(filename)._system_strescape().data(),\n                                            CImg<charT>::string(filename_tmp)._system_strescape().data());\n      else cimg_snprintf(command,command._width,\"\\\"%s \\\"%s\\\" \\\"%s.png\\\"\\\" >NUL 2>&1\",\n                         cimg::imagemagick_path(),\n                         CImg<charT>::string(filename)._system_strescape().data(),\n                         CImg<charT>::string(filename_tmp)._system_strescape().data());\n#endif\n      cimg::system(command,0);\n      const unsigned int omode = cimg::exception_mode();\n      cimg::exception_mode(0);\n      assign();\n\n      // Try to read a single frame gif.\n      cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s.png\",filename_tmp._data);\n      CImg<T> img;\n      try { img.load_png(filename_tmp2); }\n      catch (CImgException&) { }\n      if (img) { img.move_to(*this); std::remove(filename_tmp2); }\n      else { // Try to read animated gif.\n        unsigned int i = 0;\n        for (bool stop_flag = false; !stop_flag; ++i) {\n          if (use_graphicsmagick) cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s.png.%u\",filename_tmp._data,i);\n          else cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s-%u.png\",filename_tmp._data,i);\n          CImg<T> img;\n          try { img.load_png(filename_tmp2); }\n          catch (CImgException&) { stop_flag = true; }\n          if (img) { img.move_to(*this); std::remove(filename_tmp2); }\n        }\n      }\n      cimg::exception_mode(omode);\n      return *this;\n    }\n\n    //! Load gif file, using ImageMagick or GraphicsMagick's external tools \\newinstance.\n    static CImgList<T> get_load_gif_external(const char *const filename) {\n      return CImgList<T>().load_gif_external(filename);\n    }\n\n    //! Load a gzipped list, using external tool 'gunzip'.\n    /**\n      \\param filename Filename to read data from.\n    **/\n    CImgList<T>& load_gzip_external(const char *const filename) {\n      if (!filename)\n        throw CImgIOException(_cimglist_instance\n                              \"load_gzip_external(): Specified filename is (null).\",\n                              cimglist_instance);\n      std::fclose(cimg::fopen(filename,\"rb\"));            // Check if file exists.\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      const char\n        *ext = cimg::split_filename(filename,body),\n        *ext2 = cimg::split_filename(body,0);\n      std::FILE *file = 0;\n      do {\n        if (!cimg::strcasecmp(ext,\"gz\")) {\n          if (*ext2) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                   cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext2);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        } else {\n          if (*ext) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                  cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        }\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimg_snprintf(command,command._width,\"%s -c \\\"%s\\\" > \\\"%s\\\"\",\n                    cimg::gunzip_path(),\n                    CImg<charT>::string(filename)._system_strescape().data(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data());\n      cimg::system(command);\n      if (!(file = std_fopen(filename_tmp,\"rb\"))) {\n        cimg::fclose(cimg::fopen(filename,\"r\"));\n        throw CImgIOException(_cimglist_instance\n                              \"load_gzip_external(): Failed to open file '%s'.\",\n                              cimglist_instance,\n                              filename);\n\n      } else cimg::fclose(file);\n      load(filename_tmp);\n      std::remove(filename_tmp);\n      return *this;\n    }\n\n    //! Load a gzipped list, using external tool 'gunzip' \\newinstance.\n    static CImgList<T> get_load_gzip_external(const char *const filename) {\n      return CImgList<T>().load_gzip_external(filename);\n    }\n\n    //! Load a 3d object from a .OFF file.\n    /**\n      \\param filename Filename to read data from.\n      \\param[out] primitives At return, contains the list of 3d object primitives.\n      \\param[out] colors At return, contains the list of 3d object colors.\n      \\return List of 3d object vertices.\n    **/\n    template<typename tf, typename tc>\n    CImgList<T>& load_off(const char *const filename,\n                          CImgList<tf>& primitives, CImgList<tc>& colors) {\n      return get_load_off(filename,primitives,colors).move_to(*this);\n    }\n\n    //! Load a 3d object from a .OFF file \\newinstance.\n    template<typename tf, typename tc>\n      static CImgList<T> get_load_off(const char *const filename,\n                                      CImgList<tf>& primitives, CImgList<tc>& colors) {\n      return CImg<T>().load_off(filename,primitives,colors)<'x';\n    }\n\n    //! Load images from a TIFF file.\n    /**\n        \\param filename Filename to read data from.\n        \\param first_frame Index of first image frame to read.\n        \\param last_frame Index of last image frame to read.\n        \\param step_frame Step applied between each frame.\n    **/\n    CImgList<T>& load_tiff(const char *const filename,\n                           const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                           const unsigned int step_frame=1,\n                           float *const voxel_size=0,\n                           CImg<charT> *const description=0) {\n      const unsigned int\n        nfirst_frame = first_frame<last_frame?first_frame:last_frame,\n        nstep_frame = step_frame?step_frame:1;\n      unsigned int nlast_frame = first_frame<last_frame?last_frame:first_frame;\n#ifndef cimg_use_tiff\n      cimg::unused(voxel_size,description);\n      if (nfirst_frame || nlast_frame!=~0U || nstep_frame!=1)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"load_tiff(): Unable to load sub-images from file '%s' unless libtiff is enabled.\",\n                                    cimglist_instance,\n                                    filename);\n\n      return assign(CImg<T>::get_load_tiff(filename));\n#else\n      TIFF *tif = TIFFOpen(filename,\"r\");\n      if (tif) {\n        unsigned int nb_images = 0;\n        do ++nb_images; while (TIFFReadDirectory(tif));\n        if (nfirst_frame>=nb_images || (nlast_frame!=~0U && nlast_frame>=nb_images))\n          cimg::warn(_cimglist_instance\n                     \"load_tiff(): Invalid specified frame range is [%u,%u] (step %u) since \"\n                     \"file '%s' contains %u image(s).\",\n                     cimglist_instance,\n                     nfirst_frame,nlast_frame,nstep_frame,filename,nb_images);\n\n        if (nfirst_frame>=nb_images) return assign();\n        if (nlast_frame>=nb_images) nlast_frame = nb_images - 1;\n        assign(1 + (nlast_frame - nfirst_frame)/nstep_frame);\n        TIFFSetDirectory(tif,0);\n#if cimg_verbosity>=3\n        TIFFSetWarningHandler(0);\n        TIFFSetErrorHandler(0);\n#endif\n        cimglist_for(*this,l) _data[l]._load_tiff(tif,nfirst_frame + l*nstep_frame,voxel_size,description);\n        TIFFClose(tif);\n      } else throw CImgIOException(_cimglist_instance\n                                   \"load_tiff(): Failed to open file '%s'.\",\n                                   cimglist_instance,\n                                   filename);\n      return *this;\n#endif\n    }\n\n    //! Load a multi-page TIFF file \\newinstance.\n    static CImgList<T> get_load_tiff(const char *const filename,\n                                     const unsigned int first_frame=0, const unsigned int last_frame=~0U,\n                                     const unsigned int step_frame=1,\n                                     float *const voxel_size=0,\n                                     CImg<charT> *const description=0) {\n      return CImgList<T>().load_tiff(filename,first_frame,last_frame,step_frame,voxel_size,description);\n    }\n\n    //@}\n    //----------------------------------\n    //\n    //! \\name Data Output\n    //@{\n    //----------------------------------\n\n    //! Print information about the list on the standard output.\n    /**\n      \\param title Label set to the information displayed.\n      \\param display_stats Tells if image statistics must be computed and displayed.\n    **/\n    const CImgList<T>& print(const char *const title=0, const bool display_stats=true) const {\n      unsigned int msiz = 0;\n      cimglist_for(*this,l) msiz+=_data[l].size();\n      msiz*=sizeof(T);\n      const unsigned int mdisp = msiz<8*1024?0U:msiz<8*1024*1024?1U:2U;\n      CImg<charT> _title(64);\n      if (!title) cimg_snprintf(_title,_title._width,\"CImgList<%s>\",pixel_type());\n      std::fprintf(cimg::output(),\"%s%s%s%s: %sthis%s = %p, %ssize%s = %u/%u [%u %s], %sdata%s = (CImg<%s>*)%p\",\n                   cimg::t_magenta,cimg::t_bold,title?title:_title._data,cimg::t_normal,\n                   cimg::t_bold,cimg::t_normal,(void*)this,\n                   cimg::t_bold,cimg::t_normal,_width,_allocated_width,\n                   mdisp==0?msiz:(mdisp==1?(msiz>>10):(msiz>>20)),\n                   mdisp==0?\"b\":(mdisp==1?\"Kio\":\"Mio\"),\n                   cimg::t_bold,cimg::t_normal,pixel_type(),(void*)begin());\n      if (_data) std::fprintf(cimg::output(),\"..%p.\\n\",(void*)((char*)end() - 1));\n      else std::fprintf(cimg::output(),\".\\n\");\n\n      char tmp[16] = { 0 };\n      cimglist_for(*this,ll) {\n        cimg_snprintf(tmp,sizeof(tmp),\"[%d]\",ll);\n        std::fprintf(cimg::output(),\"  \");\n        _data[ll].print(tmp,display_stats);\n        if (ll==3 && width()>8) { ll = width() - 5; std::fprintf(cimg::output(),\"  ...\\n\"); }\n      }\n      std::fflush(cimg::output());\n      return *this;\n    }\n\n    //! Display the current CImgList instance in an existing CImgDisplay window (by reference).\n    /**\n       \\param disp Reference to an existing CImgDisplay instance, where the current image list will be displayed.\n       \\param axis Appending axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n       \\param align Appending alignmenet.\n       \\note This function displays the list images of the current CImgList instance into an existing\n         CImgDisplay window.\n       Images of the list are appended in a single temporarly image for visualization purposes.\n       The function returns immediately.\n    **/\n    const CImgList<T>& display(CImgDisplay &disp, const char axis='x', const float align=0) const {\n      disp.display(*this,axis,align);\n      return *this;\n    }\n\n    //! Display the current CImgList instance in a new display window.\n    /**\n        \\param disp Display window.\n        \\param display_info Tells if image information are displayed on the standard output.\n       \\param axis Alignment axis for images viewing.\n       \\param align Apending alignment.\n       \\note This function opens a new window with a specific title and displays the list images of the\n         current CImgList instance into it.\n       Images of the list are appended in a single temporarly image for visualization purposes.\n       The function returns when a key is pressed or the display window is closed by the user.\n    **/\n    const CImgList<T>& display(CImgDisplay &disp, const bool display_info,\n                               const char axis='x', const float align=0,\n                               unsigned int *const XYZ=0, const bool exit_on_anykey=false) const {\n      bool is_exit = false;\n      return _display(disp,0,0,display_info,axis,align,XYZ,exit_on_anykey,0,true,is_exit);\n    }\n\n    //! Display the current CImgList instance in a new display window.\n    /**\n      \\param title Title of the opening display window.\n      \\param display_info Tells if list information must be written on standard output.\n      \\param axis Appending axis. Can be <tt>{ 'x' | 'y' | 'z' | 'c' }</tt>.\n      \\param align Appending alignment.\n    **/\n    const CImgList<T>& display(const char *const title=0, const bool display_info=true,\n                               const char axis='x', const float align=0,\n                               unsigned int *const XYZ=0, const bool exit_on_anykey=false) const {\n      CImgDisplay disp;\n      bool is_exit = false;\n      return _display(disp,title,0,display_info,axis,align,XYZ,exit_on_anykey,0,true,is_exit);\n    }\n\n    const CImgList<T>& _display(CImgDisplay &disp, const char *const title, const CImgList<charT> *const titles,\n                                const bool display_info, const char axis, const float align, unsigned int *const XYZ,\n                                const bool exit_on_anykey, const unsigned int orig, const bool is_first_call,\n                                bool &is_exit) const {\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"display(): Empty instance.\",\n                                    cimglist_instance);\n      if (!disp) {\n        if (axis=='x') {\n          unsigned int sum_width = 0, max_height = 0;\n          cimglist_for(*this,l) {\n            const CImg<T> &img = _data[l];\n            const unsigned int\n              w = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,false),\n              h = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,true);\n            sum_width+=w;\n            if (h>max_height) max_height = h;\n          }\n          disp.assign(cimg_fitscreen(sum_width,max_height,1),title?title:titles?titles->__display()._data:0,1);\n        } else {\n          unsigned int max_width = 0, sum_height = 0;\n          cimglist_for(*this,l) {\n            const CImg<T> &img = _data[l];\n            const unsigned int\n              w = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,false),\n              h = CImgDisplay::_fitscreen(img._width,img._height,img._depth,128,-85,true);\n            if (w>max_width) max_width = w;\n            sum_height+=h;\n          }\n          disp.assign(cimg_fitscreen(max_width,sum_height,1),title?title:titles?titles->__display()._data:0,1);\n        }\n        if (!title && !titles) disp.set_title(\"CImgList<%s> (%u)\",pixel_type(),_width);\n      } else if (title) disp.set_title(\"%s\",title);\n      else if (titles) disp.set_title(\"%s\",titles->__display()._data);\n      const CImg<char> dtitle = CImg<char>::string(disp.title());\n      if (display_info) print(disp.title());\n      disp.show().flush();\n\n      if (_width==1) {\n        const unsigned int dw = disp._width, dh = disp._height;\n        if (!is_first_call)\n          disp.resize(cimg_fitscreen(_data[0]._width,_data[0]._height,_data[0]._depth),false);\n        disp.set_title(\"%s (%ux%ux%ux%u)\",\n                       dtitle.data(),_data[0]._width,_data[0]._height,_data[0]._depth,_data[0]._spectrum);\n        _data[0]._display(disp,0,false,XYZ,exit_on_anykey,!is_first_call);\n        if (disp.key()) is_exit = true;\n        disp.resize(cimg_fitscreen(dw,dh,1),false).set_title(\"%s\",dtitle.data());\n      } else {\n        bool disp_resize = !is_first_call;\n        while (!disp.is_closed() && !is_exit) {\n          const CImg<intT> s = _select(disp,0,true,axis,align,exit_on_anykey,orig,disp_resize,!is_first_call,true);\n          disp_resize = true;\n          if (s[0]<0 && !disp.wheel()) { // No selections done.\n            if (disp.button()&2) { disp.flush(); break; }\n            is_exit = true;\n          } else if (disp.wheel()) { // Zoom in/out.\n            const int wheel = disp.wheel();\n            disp.set_wheel();\n            if (!is_first_call && wheel<0) break;\n            if (wheel>0 && _width>=4) {\n              const unsigned int\n                delta = std::max(1U,(unsigned int)cimg::round(0.3*_width)),\n                ind0 = (unsigned int)std::max(0,s[0] - (int)delta),\n                ind1 = (unsigned int)std::min(width() - 1,s[0] + (int)delta);\n              if ((ind0!=0 || ind1!=_width - 1) && ind1 - ind0>=3) {\n                const CImgList<T> sublist = get_shared_images(ind0,ind1);\n                CImgList<charT> t_sublist;\n                if (titles) t_sublist = titles->get_shared_images(ind0,ind1);\n                sublist._display(disp,0,titles?&t_sublist:0,false,axis,align,XYZ,exit_on_anykey,\n                                 orig + ind0,false,is_exit);\n              }\n            }\n          } else if (s[0]!=0 || s[1]!=width() - 1) {\n            const CImgList<T> sublist = get_shared_images(s[0],s[1]);\n            CImgList<charT> t_sublist;\n            if (titles) t_sublist = titles->get_shared_images(s[0],s[1]);\n            sublist._display(disp,0,titles?&t_sublist:0,false,axis,align,XYZ,exit_on_anykey,\n                             orig + s[0],false,is_exit);\n          }\n          disp.set_title(\"%s\",dtitle.data());\n        }\n      }\n      return *this;\n    }\n\n    // [internal] Return string to describe display title.\n    CImg<charT> __display() const {\n      CImg<charT> res, str;\n      cimglist_for(*this,l) {\n        CImg<charT>::string(_data[l]).move_to(str);\n        if (l!=width() - 1) {\n          str.resize(str._width + 1,1,1,1,0);\n          str[str._width - 2] = ',';\n          str[str._width - 1] = ' ';\n        }\n        res.append(str,'x');\n      }\n      if (!res) return CImg<charT>(1,1,1,1,0).move_to(res);\n      cimg::strellipsize(res,128,false);\n      if (_width>1) {\n        const unsigned int l = (unsigned int)std::strlen(res);\n        if (res._width<=l + 16) res.resize(l + 16,1,1,1,0);\n        cimg_snprintf(res._data + l,16,\" (#%u)\",_width);\n      }\n      return res;\n    }\n\n    //! Save list into a file.\n    /**\n      \\param filename Filename to write data to.\n      \\param number When positive, represents an index added to the filename. Otherwise, no number is added.\n      \\param digits Number of digits used for adding the number to the filename.\n    **/\n    const CImgList<T>& save(const char *const filename, const int number=-1, const unsigned int digits=6) const {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save(): Specified filename is (null).\",\n                                    cimglist_instance);\n      // Do not test for empty instances, since .cimg format is able to manage empty instances.\n      const bool is_stdout = *filename=='-' && (!filename[1] || filename[1]=='.');\n      const char *const ext = cimg::split_filename(filename);\n      CImg<charT> nfilename(1024);\n      const char *const fn = is_stdout?filename:number>=0?cimg::number_filename(filename,number,digits,nfilename):\n        filename;\n\n#ifdef cimglist_save_plugin\n      cimglist_save_plugin(fn);\n#endif\n#ifdef cimglist_save_plugin1\n      cimglist_save_plugin1(fn);\n#endif\n#ifdef cimglist_save_plugin2\n      cimglist_save_plugin2(fn);\n#endif\n#ifdef cimglist_save_plugin3\n      cimglist_save_plugin3(fn);\n#endif\n#ifdef cimglist_save_plugin4\n      cimglist_save_plugin4(fn);\n#endif\n#ifdef cimglist_save_plugin5\n      cimglist_save_plugin5(fn);\n#endif\n#ifdef cimglist_save_plugin6\n      cimglist_save_plugin6(fn);\n#endif\n#ifdef cimglist_save_plugin7\n      cimglist_save_plugin7(fn);\n#endif\n#ifdef cimglist_save_plugin8\n      cimglist_save_plugin8(fn);\n#endif\n      if (!cimg::strcasecmp(ext,\"cimgz\")) return save_cimg(fn,true);\n      else if (!cimg::strcasecmp(ext,\"cimg\") || !*ext) return save_cimg(fn,false);\n      else if (!cimg::strcasecmp(ext,\"yuv\")) return save_yuv(fn,true);\n      else if (!cimg::strcasecmp(ext,\"avi\") ||\n               !cimg::strcasecmp(ext,\"mov\") ||\n               !cimg::strcasecmp(ext,\"asf\") ||\n               !cimg::strcasecmp(ext,\"divx\") ||\n               !cimg::strcasecmp(ext,\"flv\") ||\n               !cimg::strcasecmp(ext,\"mpg\") ||\n               !cimg::strcasecmp(ext,\"m1v\") ||\n               !cimg::strcasecmp(ext,\"m2v\") ||\n               !cimg::strcasecmp(ext,\"m4v\") ||\n               !cimg::strcasecmp(ext,\"mjp\") ||\n               !cimg::strcasecmp(ext,\"mp4\") ||\n               !cimg::strcasecmp(ext,\"mkv\") ||\n               !cimg::strcasecmp(ext,\"mpe\") ||\n               !cimg::strcasecmp(ext,\"movie\") ||\n               !cimg::strcasecmp(ext,\"ogm\") ||\n               !cimg::strcasecmp(ext,\"ogg\") ||\n               !cimg::strcasecmp(ext,\"ogv\") ||\n               !cimg::strcasecmp(ext,\"qt\") ||\n               !cimg::strcasecmp(ext,\"rm\") ||\n               !cimg::strcasecmp(ext,\"vob\") ||\n               !cimg::strcasecmp(ext,\"wmv\") ||\n               !cimg::strcasecmp(ext,\"xvid\") ||\n               !cimg::strcasecmp(ext,\"mpeg\")) return save_video(fn);\n#ifdef cimg_use_tiff\n      else if (!cimg::strcasecmp(ext,\"tif\") ||\n          !cimg::strcasecmp(ext,\"tiff\")) return save_tiff(fn);\n#endif\n      else if (!cimg::strcasecmp(ext,\"gz\")) return save_gzip_external(fn);\n      else {\n        if (_width==1) _data[0].save(fn,-1);\n        else cimglist_for(*this,l) { _data[l].save(fn,is_stdout?-1:l); if (is_stdout) std::fputc(EOF,cimg::_stdout()); }\n      }\n      return *this;\n    }\n\n    //! Tell if an image list can be saved as one single file.\n    /**\n       \\param filename Filename, as a C-string.\n       \\return \\c true if the file format supports multiple images, \\c false otherwise.\n    **/\n    static bool is_saveable(const char *const filename) {\n      const char *const ext = cimg::split_filename(filename);\n      if (!cimg::strcasecmp(ext,\"cimgz\") ||\n#ifdef cimg_use_tiff\n          !cimg::strcasecmp(ext,\"tif\") ||\n          !cimg::strcasecmp(ext,\"tiff\") ||\n#endif\n          !cimg::strcasecmp(ext,\"yuv\") ||\n          !cimg::strcasecmp(ext,\"avi\") ||\n          !cimg::strcasecmp(ext,\"mov\") ||\n          !cimg::strcasecmp(ext,\"asf\") ||\n          !cimg::strcasecmp(ext,\"divx\") ||\n          !cimg::strcasecmp(ext,\"flv\") ||\n          !cimg::strcasecmp(ext,\"mpg\") ||\n          !cimg::strcasecmp(ext,\"m1v\") ||\n          !cimg::strcasecmp(ext,\"m2v\") ||\n          !cimg::strcasecmp(ext,\"m4v\") ||\n          !cimg::strcasecmp(ext,\"mjp\") ||\n          !cimg::strcasecmp(ext,\"mp4\") ||\n          !cimg::strcasecmp(ext,\"mkv\") ||\n          !cimg::strcasecmp(ext,\"mpe\") ||\n          !cimg::strcasecmp(ext,\"movie\") ||\n          !cimg::strcasecmp(ext,\"ogm\") ||\n          !cimg::strcasecmp(ext,\"ogg\") ||\n          !cimg::strcasecmp(ext,\"ogv\") ||\n          !cimg::strcasecmp(ext,\"qt\") ||\n          !cimg::strcasecmp(ext,\"rm\") ||\n          !cimg::strcasecmp(ext,\"vob\") ||\n          !cimg::strcasecmp(ext,\"wmv\") ||\n          !cimg::strcasecmp(ext,\"xvid\") ||\n          !cimg::strcasecmp(ext,\"mpeg\")) return true;\n      return false;\n    }\n\n    //! Save image sequence as a GIF animated file.\n    /**\n       \\param filename Filename to write data to.\n       \\param fps Number of desired frames per second.\n       \\param nb_loops Number of loops (\\c 0 for infinite looping).\n    **/\n    const CImgList<T>& save_gif_external(const char *const filename, const float fps=25,\n                                         const unsigned int nb_loops=0) {\n      CImg<charT> command(1024), filename_tmp(256), filename_tmp2(256);\n      CImgList<charT> filenames;\n      std::FILE *file = 0;\n\n#ifdef cimg_use_png\n#define _cimg_save_gif_ext \"png\"\n#else\n#define _cimg_save_gif_ext \"ppm\"\n#endif\n\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_000001.\" _cimg_save_gif_ext,filename_tmp._data);\n        if ((file=std_fopen(filename_tmp2,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimglist_for(*this,l) {\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_%.6u.\" _cimg_save_gif_ext,filename_tmp._data,l + 1);\n        CImg<charT>::string(filename_tmp2).move_to(filenames);\n        if (_data[l]._depth>1 || _data[l]._spectrum!=3) _data[l].get_resize(-100,-100,1,3).save(filename_tmp2);\n        else _data[l].save(filename_tmp2);\n      }\n\n#if cimg_OS!=2\n      cimg_snprintf(command,command._width,\"%s -delay %u -loop %u\",\n                    cimg::imagemagick_path(),(unsigned int)std::max(0.0f,cimg::round(100/fps)),nb_loops);\n      CImg<ucharT>::string(command).move_to(filenames,0);\n      cimg_snprintf(command,command._width,\"\\\"%s\\\" >/dev/null 2>&1\",\n                    CImg<charT>::string(filename)._system_strescape().data());\n      CImg<ucharT>::string(command).move_to(filenames);\n#else\n      cimg_snprintf(command,command._width,\"\\\"%s -delay %u -loop %u\",\n                    cimg::imagemagick_path(),(unsigned int)std::max(0.0f,cimg::round(100/fps)),nb_loops);\n      CImg<ucharT>::string(command).move_to(filenames,0);\n      cimg_snprintf(command,command._width,\"\\\"%s\\\"\\\" >NUL 2>&1\",\n                    CImg<charT>::string(filename)._system_strescape().data());\n      CImg<ucharT>::string(command).move_to(filenames);\n#endif\n      CImg<charT> _command = filenames>'x';\n      cimg_for(_command,p,char) if (!*p) *p = ' ';\n      _command.back() = 0;\n\n      cimg::system(_command);\n      file = std_fopen(filename,\"rb\");\n      if (!file)\n        throw CImgIOException(_cimglist_instance\n                              \"save_gif_external(): Failed to save file '%s' with external command 'convert'.\",\n                              cimglist_instance,\n                              filename);\n      else cimg::fclose(file);\n      cimglist_for_in(*this,1,filenames._width - 1,l) std::remove(filenames[l]);\n      return *this;\n    }\n\n    const CImgList<T>& _save_yuv(std::FILE *const file, const char *const filename, const bool is_rgb) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save_yuv(): Specified filename is (null).\",\n                                    cimglist_instance);\n      if (is_empty()) { cimg::fempty(file,filename); return *this; }\n      if ((*this)[0].width()%2 || (*this)[0].height()%2)\n        throw CImgInstanceException(_cimglist_instance\n                                    \"save_yuv(): Invalid odd instance dimensions (%u,%u) for file '%s'.\",\n                                    cimglist_instance,\n                                    (*this)[0].width(),(*this)[0].height(),\n                                    filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      cimglist_for(*this,l) {\n        CImg<ucharT> YCbCr((*this)[l]);\n        if (is_rgb) YCbCr.RGBtoYCbCr();\n        cimg::fwrite(YCbCr._data,(size_t)YCbCr._width*YCbCr._height,nfile);\n        cimg::fwrite(YCbCr.get_resize(YCbCr._width/2, YCbCr._height/2,1,3,3).data(0,0,0,1),\n                     (size_t)YCbCr._width*YCbCr._height/2,nfile);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save list as a YUV image sequence file.\n    /**\n      \\param filename Filename to write data to.\n      \\param is_rgb Tells if the RGB to YUV conversion must be done for saving.\n    **/\n    const CImgList<T>& save_yuv(const char *const filename=0, const bool is_rgb=true) const {\n      return _save_yuv(0,filename,is_rgb);\n    }\n\n    //! Save image sequence into a YUV file.\n    /**\n      \\param file File to write data to.\n      \\param is_rgb Tells if the RGB to YUV conversion must be done for saving.\n    **/\n    const CImgList<T>& save_yuv(std::FILE *const file, const bool is_rgb=true) const {\n      return _save_yuv(file,0,is_rgb);\n    }\n\n    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename, const bool is_compressed) const {\n      if (!file && !filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save_cimg(): Specified filename is (null).\",\n                                    cimglist_instance);\n#ifndef cimg_use_zlib\n      if (is_compressed)\n        cimg::warn(_cimglist_instance\n                   \"save_cimg(): Unable to save compressed data in file '%s' unless zlib is enabled, \"\n                   \"saving them uncompressed.\",\n                   cimglist_instance,\n                   filename?filename:\"(FILE*)\");\n#endif\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const char *const ptype = pixel_type(), *const etype = cimg::endianness()?\"big\":\"little\";\n      if (std::strstr(ptype,\"unsigned\")==ptype) std::fprintf(nfile,\"%u unsigned_%s %s_endian\\n\",_width,ptype + 9,etype);\n      else std::fprintf(nfile,\"%u %s %s_endian\\n\",_width,ptype,etype);\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        std::fprintf(nfile,\"%u %u %u %u\",img._width,img._height,img._depth,img._spectrum);\n        if (img._data) {\n          CImg<T> tmp;\n          if (cimg::endianness()) { tmp = img; cimg::invert_endianness(tmp._data,tmp.size()); }\n          const CImg<T>& ref = cimg::endianness()?tmp:img;\n          bool failed_to_compress = true;\n          if (is_compressed) {\n#ifdef cimg_use_zlib\n            const ulongT siz = sizeof(T)*ref.size();\n            uLongf csiz = siz + siz/100 + 16;\n            Bytef *const cbuf = new Bytef[csiz];\n            if (compress(cbuf,&csiz,(Bytef*)ref._data,siz))\n              cimg::warn(_cimglist_instance\n                         \"save_cimg(): Failed to save compressed data for file '%s', saving them uncompressed.\",\n                         cimglist_instance,\n                         filename?filename:\"(FILE*)\");\n            else {\n              std::fprintf(nfile,\" #%lu\\n\",csiz);\n              cimg::fwrite(cbuf,csiz,nfile);\n              delete[] cbuf;\n              failed_to_compress = false;\n            }\n#endif\n          }\n          if (failed_to_compress) { // Write in a non-compressed way.\n            std::fputc('\\n',nfile);\n            cimg::fwrite(ref._data,ref.size(),nfile);\n          }\n        } else std::fputc('\\n',nfile);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Save list into a .cimg file.\n    /**\n       \\param filename Filename to write data to.\n       \\param is_compressed Tells if data compression must be enabled.\n    **/\n    const CImgList<T>& save_cimg(const char *const filename, const bool is_compressed=false) const {\n      return _save_cimg(0,filename,is_compressed);\n    }\n\n    //! Save list into a .cimg file.\n    /**\n       \\param file File to write data to.\n       \\param is_compressed Tells if data compression must be enabled.\n    **/\n    const CImgList<T>& save_cimg(std::FILE *file, const bool is_compressed=false) const {\n      return _save_cimg(file,0,is_compressed);\n    }\n\n    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename,\n                                 const unsigned int n0,\n                                 const unsigned int x0, const unsigned int y0,\n                                 const unsigned int z0, const unsigned int c0) const {\n#define _cimg_save_cimg_case(Ts,Tss) \\\n      if (!saved && !cimg::strcasecmp(Ts,str_pixeltype)) { \\\n        for (unsigned int l = 0; l<lmax; ++l) { \\\n          j = 0; while ((i=std::fgetc(nfile))!='\\n') tmp[j++]=(char)i; tmp[j] = 0; \\\n          W = H = D = C = 0; \\\n          if (cimg_sscanf(tmp,\"%u %u %u %u\",&W,&H,&D,&C)!=4) \\\n            throw CImgIOException(_cimglist_instance \\\n                                  \"save_cimg(): Invalid size (%u,%u,%u,%u) of image[%u], for file '%s'.\", \\\n                                  cimglist_instance, \\\n                                  W,H,D,C,l,filename?filename:\"(FILE*)\"); \\\n          if (W*H*D*C>0) { \\\n            if (l<n0 || x0>=W || y0>=H || z0>=D || c0>=D) cimg::fseek(nfile,W*H*D*C*sizeof(Tss),SEEK_CUR); \\\n            else { \\\n              const CImg<T>& img = (*this)[l - n0]; \\\n              const T *ptrs = img._data; \\\n              const unsigned int \\\n                x1 = x0 + img._width - 1, \\\n                y1 = y0 + img._height - 1, \\\n                z1 = z0 + img._depth - 1, \\\n                c1 = c0 + img._spectrum - 1, \\\n                nx1 = x1>=W?W - 1:x1, \\\n                ny1 = y1>=H?H - 1:y1, \\\n                nz1 = z1>=D?D - 1:z1, \\\n                nc1 = c1>=C?C - 1:c1; \\\n              CImg<Tss> raw(1 + nx1 - x0); \\\n              const unsigned int skipvb = c0*W*H*D*sizeof(Tss); \\\n              if (skipvb) cimg::fseek(nfile,skipvb,SEEK_CUR); \\\n              for (unsigned int v = 1 + nc1 - c0; v; --v) { \\\n                const unsigned int skipzb = z0*W*H*sizeof(Tss); \\\n                if (skipzb) cimg::fseek(nfile,skipzb,SEEK_CUR); \\\n                for (unsigned int z = 1 + nz1 - z0; z; --z) { \\\n                  const unsigned int skipyb = y0*W*sizeof(Tss); \\\n                  if (skipyb) cimg::fseek(nfile,skipyb,SEEK_CUR); \\\n                  for (unsigned int y = 1 + ny1 - y0; y; --y) { \\\n                    const unsigned int skipxb = x0*sizeof(Tss); \\\n                    if (skipxb) cimg::fseek(nfile,skipxb,SEEK_CUR); \\\n                    raw.assign(ptrs, raw._width); \\\n                    ptrs+=img._width; \\\n                    if (endian) cimg::invert_endianness(raw._data,raw._width); \\\n                    cimg::fwrite(raw._data,raw._width,nfile); \\\n                    const unsigned int skipxe = (W - 1 - nx1)*sizeof(Tss); \\\n                    if (skipxe) cimg::fseek(nfile,skipxe,SEEK_CUR); \\\n                  } \\\n                  const unsigned int skipye = (H - 1 - ny1)*W*sizeof(Tss); \\\n                  if (skipye) cimg::fseek(nfile,skipye,SEEK_CUR); \\\n                } \\\n                const unsigned int skipze = (D - 1 - nz1)*W*H*sizeof(Tss); \\\n                if (skipze) cimg::fseek(nfile,skipze,SEEK_CUR); \\\n              } \\\n              const unsigned int skipve = (C - 1 - nc1)*W*H*D*sizeof(Tss); \\\n              if (skipve) cimg::fseek(nfile,skipve,SEEK_CUR); \\\n            } \\\n          } \\\n        } \\\n        saved = true; \\\n      }\n\n      if (!file && !filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save_cimg(): Specified filename is (null).\",\n                                    cimglist_instance);\n      if (is_empty())\n        throw CImgInstanceException(_cimglist_instance\n                                    \"save_cimg(): Empty instance, for file '%s'.\",\n                                    cimglist_instance,\n                                    filename?filename:\"(FILE*)\");\n\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"rb+\");\n      bool saved = false, endian = cimg::endianness();\n      CImg<charT> tmp(256), str_pixeltype(256), str_endian(256);\n      *tmp = *str_pixeltype = *str_endian = 0;\n      unsigned int j, N, W, H, D, C;\n      int i, err;\n      j = 0; while ((i=std::fgetc(nfile))!='\\n' && i!=EOF && j<256) tmp[j++] = (char)i; tmp[j] = 0;\n      err = cimg_sscanf(tmp,\"%u%*c%255[A-Za-z64_]%*c%255[sA-Za-z_ ]\",&N,str_pixeltype._data,str_endian._data);\n      if (err<2) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"save_cimg(): CImg header not found in file '%s'.\",\n                              cimglist_instance,\n                              filename?filename:\"(FILE*)\");\n      }\n      if (!cimg::strncasecmp(\"little\",str_endian,6)) endian = false;\n      else if (!cimg::strncasecmp(\"big\",str_endian,3)) endian = true;\n      const unsigned int lmax = std::min(N,n0 + _width);\n      _cimg_save_cimg_case(\"bool\",bool);\n      _cimg_save_cimg_case(\"unsigned_char\",unsigned char);\n      _cimg_save_cimg_case(\"uchar\",unsigned char);\n      _cimg_save_cimg_case(\"char\",char);\n      _cimg_save_cimg_case(\"unsigned_short\",unsigned short);\n      _cimg_save_cimg_case(\"ushort\",unsigned short);\n      _cimg_save_cimg_case(\"short\",short);\n      _cimg_save_cimg_case(\"unsigned_int\",unsigned int);\n      _cimg_save_cimg_case(\"uint\",unsigned int);\n      _cimg_save_cimg_case(\"int\",int);\n      _cimg_save_cimg_case(\"unsigned_int64\",uint64T);\n      _cimg_save_cimg_case(\"uint64\",uint64T);\n      _cimg_save_cimg_case(\"int64\",int64T);\n      _cimg_save_cimg_case(\"float\",float);\n      _cimg_save_cimg_case(\"double\",double);\n      if (!saved) {\n        if (!file) cimg::fclose(nfile);\n        throw CImgIOException(_cimglist_instance\n                              \"save_cimg(): Unsupported data type '%s' for file '%s'.\",\n                              cimglist_instance,\n                              filename?filename:\"(FILE*)\",str_pixeltype._data);\n      }\n      if (!file) cimg::fclose(nfile);\n      return *this;\n    }\n\n    //! Insert the image instance into into an existing .cimg file, at specified coordinates.\n    /**\n      \\param filename Filename to write data to.\n      \\param n0 Starting index of images to write.\n      \\param x0 Starting X-coordinates of image regions to write.\n      \\param y0 Starting Y-coordinates of image regions to write.\n      \\param z0 Starting Z-coordinates of image regions to write.\n      \\param c0 Starting C-coordinates of image regions to write.\n    **/\n    const CImgList<T>& save_cimg(const char *const filename,\n                                 const unsigned int n0,\n                                 const unsigned int x0, const unsigned int y0,\n                                 const unsigned int z0, const unsigned int c0) const {\n      return _save_cimg(0,filename,n0,x0,y0,z0,c0);\n    }\n\n    //! Insert the image instance into into an existing .cimg file, at specified coordinates.\n    /**\n      \\param file File to write data to.\n      \\param n0 Starting index of images to write.\n      \\param x0 Starting X-coordinates of image regions to write.\n      \\param y0 Starting Y-coordinates of image regions to write.\n      \\param z0 Starting Z-coordinates of image regions to write.\n      \\param c0 Starting C-coordinates of image regions to write.\n    **/\n    const CImgList<T>& save_cimg(std::FILE *const file,\n                                 const unsigned int n0,\n                                 const unsigned int x0, const unsigned int y0,\n                                 const unsigned int z0, const unsigned int c0) const {\n      return _save_cimg(file,0,n0,x0,y0,z0,c0);\n    }\n\n    static void _save_empty_cimg(std::FILE *const file, const char *const filename,\n                                const unsigned int nb,\n                                const unsigned int dx, const unsigned int dy,\n                                const unsigned int dz, const unsigned int dc) {\n      std::FILE *const nfile = file?file:cimg::fopen(filename,\"wb\");\n      const ulongT siz = (ulongT)dx*dy*dz*dc*sizeof(T);\n      std::fprintf(nfile,\"%u %s\\n\",nb,pixel_type());\n      for (unsigned int i=nb; i; --i) {\n        std::fprintf(nfile,\"%u %u %u %u\\n\",dx,dy,dz,dc);\n        for (ulongT off = siz; off; --off) std::fputc(0,nfile);\n      }\n      if (!file) cimg::fclose(nfile);\n    }\n\n    //! Save empty (non-compressed) .cimg file with specified dimensions.\n    /**\n        \\param filename Filename to write data to.\n        \\param nb Number of images to write.\n        \\param dx Width of images in the written file.\n        \\param dy Height of images in the written file.\n        \\param dz Depth of images in the written file.\n        \\param dc Spectrum of images in the written file.\n    **/\n    static void save_empty_cimg(const char *const filename,\n                                const unsigned int nb,\n                                const unsigned int dx, const unsigned int dy=1,\n                                const unsigned int dz=1, const unsigned int dc=1) {\n      return _save_empty_cimg(0,filename,nb,dx,dy,dz,dc);\n    }\n\n    //! Save empty .cimg file with specified dimensions.\n    /**\n        \\param file File to write data to.\n        \\param nb Number of images to write.\n        \\param dx Width of images in the written file.\n        \\param dy Height of images in the written file.\n        \\param dz Depth of images in the written file.\n        \\param dc Spectrum of images in the written file.\n    **/\n    static void save_empty_cimg(std::FILE *const file,\n                                const unsigned int nb,\n                                const unsigned int dx, const unsigned int dy=1,\n                                const unsigned int dz=1, const unsigned int dc=1) {\n      return _save_empty_cimg(file,0,nb,dx,dy,dz,dc);\n    }\n\n    //! Save list as a TIFF file.\n    /**\n      \\param filename Filename to write data to.\n      \\param compression_type Compression mode used to write data.\n    **/\n    const CImgList<T>& save_tiff(const char *const filename, const unsigned int compression_type=0,\n                                 const float *const voxel_size=0, const char *const description=0,\n                                 const bool use_bigtiff=true) const {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save_tiff(): Specified filename is (null).\",\n                                    cimglist_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n#ifndef cimg_use_tiff\n      if (_width==1) _data[0].save_tiff(filename,compression_type,voxel_size,description,use_bigtiff);\n      else cimglist_for(*this,l) {\n          CImg<charT> nfilename(1024);\n          cimg::number_filename(filename,l,6,nfilename);\n          _data[l].save_tiff(nfilename,compression_type,voxel_size,description,use_bigtiff);\n        }\n#else\n      ulongT siz = 0;\n      cimglist_for(*this,l) siz+=_data[l].size();\n      const bool _use_bigtiff = use_bigtiff && sizeof(siz)>=8 && siz*sizeof(T)>=1UL<<31; // No bigtiff for small images.\n      TIFF *tif = TIFFOpen(filename,_use_bigtiff?\"w8\":\"w4\");\n      if (tif) {\n        for (unsigned int dir = 0, l = 0; l<_width; ++l) {\n          const CImg<T>& img = (*this)[l];\n          cimg_forZ(img,z) img._save_tiff(tif,dir++,z,compression_type,voxel_size,description);\n        }\n        TIFFClose(tif);\n      } else\n        throw CImgIOException(_cimglist_instance\n                              \"save_tiff(): Failed to open stream for file '%s'.\",\n                              cimglist_instance,\n                              filename);\n#endif\n      return *this;\n    }\n\n    //! Save list as a gzipped file, using external tool 'gzip'.\n    /**\n      \\param filename Filename to write data to.\n    **/\n    const CImgList<T>& save_gzip_external(const char *const filename) const {\n      if (!filename)\n        throw CImgIOException(_cimglist_instance\n                              \"save_gzip_external(): Specified filename is (null).\",\n                              cimglist_instance);\n\n      CImg<charT> command(1024), filename_tmp(256), body(256);\n      const char\n        *ext = cimg::split_filename(filename,body),\n        *ext2 = cimg::split_filename(body,0);\n      std::FILE *file;\n      do {\n        if (!cimg::strcasecmp(ext,\"gz\")) {\n          if (*ext2) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                   cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext2);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.cimg\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        } else {\n          if (*ext) cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.%s\",\n                                  cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext);\n          else cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s.cimg\",\n                             cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        }\n        if ((file=std_fopen(filename_tmp,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n\n      if (is_saveable(body)) {\n        save(filename_tmp);\n        cimg_snprintf(command,command._width,\"%s -c \\\"%s\\\" > \\\"%s\\\"\",\n                      cimg::gzip_path(),\n                      CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                      CImg<charT>::string(filename)._system_strescape().data());\n        cimg::system(command);\n        file = std_fopen(filename,\"rb\");\n        if (!file)\n          throw CImgIOException(_cimglist_instance\n                                \"save_gzip_external(): Failed to save file '%s' with external command 'gzip'.\",\n                                cimglist_instance,\n                                filename);\n        else cimg::fclose(file);\n        std::remove(filename_tmp);\n      } else {\n        CImg<charT> nfilename(1024);\n        cimglist_for(*this,l) {\n          cimg::number_filename(body,l,6,nfilename);\n          if (*ext) cimg_sprintf(nfilename._data + std::strlen(nfilename),\".%s\",ext);\n          _data[l].save_gzip_external(nfilename);\n        }\n      }\n      return *this;\n    }\n\n    //! Save image sequence, using the OpenCV library.\n    /**\n       \\param filename Filename to write data to.\n       \\param fps Number of frames per second.\n       \\param codec Type of compression (See http://www.fourcc.org/codecs.php to see available codecs).\n       \\param keep_open Tells if the video writer associated to the specified filename\n       must be kept open or not (to allow frames to be added in the same file afterwards).\n    **/\n    const CImgList<T>& save_video(const char *const filename, const unsigned int fps=25,\n                                  const char *codec=0, const bool keep_open=false) const {\n#ifndef cimg_use_opencv\n      cimg::unused(codec,keep_open);\n      return save_ffmpeg_external(filename,fps);\n#else\n      static CvVideoWriter *writers[32] = { 0 };\n      static CImgList<charT> filenames(32);\n      static CImg<intT> sizes(32,2,1,1,0);\n      static int last_used_index = -1;\n\n      // Detect if a video writer already exists for the specified filename.\n      cimg::mutex(9);\n      int index = -1;\n      if (filename) {\n        if (last_used_index>=0 && !std::strcmp(filename,filenames[last_used_index])) {\n          index = last_used_index;\n        } else cimglist_for(filenames,l) if (filenames[l] && !std::strcmp(filename,filenames[l])) {\n            index = l; break;\n          }\n      } else index = last_used_index;\n      cimg::mutex(9,0);\n\n      // Find empty slot for capturing video stream.\n      if (index<0) {\n        if (!filename)\n          throw CImgArgumentException(_cimglist_instance\n                                      \"save_video(): No already open video writer found. You must specify a \"\n                                      \"non-(null) filename argument for the first call.\",\n                                      cimglist_instance);\n        else { cimg::mutex(9); cimglist_for(filenames,l) if (!filenames[l]) { index = l; break; } cimg::mutex(9,0); }\n        if (index<0)\n          throw CImgIOException(_cimglist_instance\n                                \"save_video(): File '%s', no video writer slots available. \"\n                                \"You have to release some of your previously opened videos.\",\n                                cimglist_instance,filename);\n        if (is_empty())\n          throw CImgInstanceException(_cimglist_instance\n                                      \"save_video(): Instance list is empty.\",\n                                      cimglist_instance);\n        const unsigned int W = _data?_data[0]._width:0, H = _data?_data[0]._height:0;\n        if (!W || !H)\n          throw CImgInstanceException(_cimglist_instance\n                                      \"save_video(): Frame [0] is an empty image.\",\n                                      cimglist_instance);\n\n#define _cimg_docase(x) ((x)>='a'&&(x)<='z'?(x) + 'A' - 'a':(x))\n        const char\n          *const _codec = codec && *codec?codec:\"mp4v\",\n          codec0 = _cimg_docase(_codec[0]),\n          codec1 = _codec[0]?_cimg_docase(_codec[1]):0,\n          codec2 = _codec[1]?_cimg_docase(_codec[2]):0,\n          codec3 = _codec[2]?_cimg_docase(_codec[3]):0;\n        cimg::mutex(9);\n        writers[index] = cvCreateVideoWriter(filename,CV_FOURCC(codec0,codec1,codec2,codec3),\n                                             fps,cvSize(W,H));\n        CImg<charT>::string(filename).move_to(filenames[index]);\n        sizes(index,0) = W; sizes(index,1) = H;\n        cimg::mutex(9,0);\n        if (!writers[index])\n          throw CImgIOException(_cimglist_instance\n                                \"save_video(): File '%s', unable to initialize video writer with codec '%c%c%c%c'.\",\n                                cimglist_instance,filename,\n                                codec0,codec1,codec2,codec3);\n      }\n\n      if (!is_empty()) {\n        const unsigned int W = sizes(index,0), H = sizes(index,1);\n        cimg::mutex(9);\n        IplImage *ipl = cvCreateImage(cvSize(W,H),8,3);\n        cimglist_for(*this,l) {\n          CImg<T> &src = _data[l];\n          if (src.is_empty())\n            cimg::warn(_cimglist_instance\n                       \"save_video(): Skip empty frame %d for file '%s'.\",\n                       cimglist_instance,l,filename);\n          if (src._depth>1 || src._spectrum>3)\n            cimg::warn(_cimglist_instance\n                       \"save_video(): Frame %u has incompatible dimension (%u,%u,%u,%u). \"\n                       \"Some image data may be ignored when writing frame into video file '%s'.\",\n                       cimglist_instance,l,src._width,src._height,src._depth,src._spectrum,filename);\n          if (src._width==W && src._height==H && src._spectrum==3) {\n            const T *ptr_r = src.data(0,0,0,0), *ptr_g = src.data(0,0,0,1), *ptr_b = src.data(0,0,0,2);\n            char *ptrd = ipl->imageData;\n            cimg_forXY(src,x,y) {\n              *(ptrd++) = (char)*(ptr_b++); *(ptrd++) = (char)*(ptr_g++); *(ptrd++) = (char)*(ptr_r++);\n            }\n          } else {\n            CImg<unsigned char> _src(src,false);\n            _src.channels(0,std::min(_src._spectrum - 1,2U)).resize(W,H);\n            _src.resize(W,H,1,3,_src._spectrum==1);\n            const unsigned char *ptr_r = _src.data(0,0,0,0), *ptr_g = _src.data(0,0,0,1), *ptr_b = _src.data(0,0,0,2);\n            char *ptrd = ipl->imageData;\n            cimg_forXY(_src,x,y) {\n              *(ptrd++) = (char)*(ptr_b++); *(ptrd++) = (char)*(ptr_g++); *(ptrd++) = (char)*(ptr_r++);\n            }\n          }\n          cvWriteFrame(writers[index],ipl);\n        }\n        cvReleaseImage(&ipl);\n        cimg::mutex(9,0);\n      }\n\n      cimg::mutex(9);\n      if (!keep_open) {\n        cvReleaseVideoWriter(&writers[index]);\n        writers[index] = 0;\n        filenames[index].assign();\n        sizes(index,0) = sizes(index,1) = 0;\n        last_used_index = -1;\n      } else last_used_index = index;\n      cimg::mutex(9,0);\n\n      return *this;\n#endif\n    }\n\n    //! Save image sequence, using the external tool 'ffmpeg'.\n    /**\n      \\param filename Filename to write data to.\n      \\param fps Number of frames per second.\n      \\param codec Type of compression.\n      \\param bitrate Output bitrate\n    **/\n    const CImgList<T>& save_ffmpeg_external(const char *const filename, const unsigned int fps=25,\n                                            const char *const codec=0, const unsigned int bitrate=2048) const {\n      if (!filename)\n        throw CImgArgumentException(_cimglist_instance\n                                    \"save_ffmpeg_external(): Specified filename is (null).\",\n                                    cimglist_instance);\n      if (is_empty()) { cimg::fempty(0,filename); return *this; }\n\n      const char\n        *const ext = cimg::split_filename(filename),\n        *const _codec = codec?codec:!cimg::strcasecmp(ext,\"flv\")?\"flv\":\"mpeg2video\";\n\n      CImg<charT> command(1024), filename_tmp(256), filename_tmp2(256);\n      CImgList<charT> filenames;\n      std::FILE *file = 0;\n      cimglist_for(*this,l) if (!_data[l].is_sameXYZ(_data[0]))\n        throw CImgInstanceException(_cimglist_instance\n                                    \"save_ffmpeg_external(): Invalid instance dimensions for file '%s'.\",\n                                    cimglist_instance,\n                                    filename);\n      do {\n        cimg_snprintf(filename_tmp,filename_tmp._width,\"%s%c%s\",\n                      cimg::temporary_path(),cimg_file_separator,cimg::filenamerand());\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_000001.ppm\",filename_tmp._data);\n        if ((file=std_fopen(filename_tmp2,\"rb\"))!=0) cimg::fclose(file);\n      } while (file);\n      cimglist_for(*this,l) {\n        cimg_snprintf(filename_tmp2,filename_tmp2._width,\"%s_%.6u.ppm\",filename_tmp._data,l + 1);\n        CImg<charT>::string(filename_tmp2).move_to(filenames);\n        if (_data[l]._depth>1 || _data[l]._spectrum!=3) _data[l].get_resize(-100,-100,1,3).save_pnm(filename_tmp2);\n        else _data[l].save_pnm(filename_tmp2);\n      }\n#if cimg_OS!=2\n      cimg_snprintf(command,command._width,\"%s -i \\\"%s_%%6d.ppm\\\" -vcodec %s -b %uk -r %u -y \\\"%s\\\" >/dev/null 2>&1\",\n                    cimg::ffmpeg_path(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    _codec,bitrate,fps,\n                    CImg<charT>::string(filename)._system_strescape().data());\n#else\n      cimg_snprintf(command,command._width,\"\\\"%s -i \\\"%s_%%6d.ppm\\\" -vcodec %s -b %uk -r %u -y \\\"%s\\\"\\\" >NUL 2>&1\",\n                    cimg::ffmpeg_path(),\n                    CImg<charT>::string(filename_tmp)._system_strescape().data(),\n                    _codec,bitrate,fps,\n                    CImg<charT>::string(filename)._system_strescape().data());\n#endif\n      cimg::system(command);\n      file = std_fopen(filename,\"rb\");\n      if (!file)\n        throw CImgIOException(_cimglist_instance\n                              \"save_ffmpeg_external(): Failed to save file '%s' with external command 'ffmpeg'.\",\n                              cimglist_instance,\n                              filename);\n      else cimg::fclose(file);\n      cimglist_for(*this,l) std::remove(filenames[l]);\n      return *this;\n    }\n\n    //! Serialize a CImgList<T> instance into a raw CImg<unsigned char> buffer.\n    /**\n       \\param is_compressed tells if zlib compression must be used for serialization\n       (this requires 'cimg_use_zlib' been enabled).\n    **/\n    CImg<ucharT> get_serialize(const bool is_compressed=false) const {\n#ifndef cimg_use_zlib\n      if (is_compressed)\n        cimg::warn(_cimglist_instance\n                   \"get_serialize(): Unable to compress data unless zlib is enabled, \"\n                   \"storing them uncompressed.\",\n                   cimglist_instance);\n#endif\n      CImgList<ucharT> stream;\n      CImg<charT> tmpstr(128);\n      const char *const ptype = pixel_type(), *const etype = cimg::endianness()?\"big\":\"little\";\n      if (std::strstr(ptype,\"unsigned\")==ptype)\n        cimg_snprintf(tmpstr,tmpstr._width,\"%u unsigned_%s %s_endian\\n\",_width,ptype + 9,etype);\n      else\n        cimg_snprintf(tmpstr,tmpstr._width,\"%u %s %s_endian\\n\",_width,ptype,etype);\n      CImg<ucharT>::string(tmpstr,false).move_to(stream);\n      cimglist_for(*this,l) {\n        const CImg<T>& img = _data[l];\n        cimg_snprintf(tmpstr,tmpstr._width,\"%u %u %u %u\",img._width,img._height,img._depth,img._spectrum);\n        CImg<ucharT>::string(tmpstr,false).move_to(stream);\n        if (img._data) {\n          CImg<T> tmp;\n          if (cimg::endianness()) { tmp = img; cimg::invert_endianness(tmp._data,tmp.size()); }\n          const CImg<T>& ref = cimg::endianness()?tmp:img;\n          bool failed_to_compress = true;\n          if (is_compressed) {\n#ifdef cimg_use_zlib\n            const ulongT siz = sizeof(T)*ref.size();\n            uLongf csiz = (ulongT)compressBound(siz);\n            Bytef *const cbuf = new Bytef[csiz];\n            if (compress(cbuf,&csiz,(Bytef*)ref._data,siz))\n              cimg::warn(_cimglist_instance\n                         \"get_serialize(): Failed to save compressed data, saving them uncompressed.\",\n                         cimglist_instance);\n            else {\n              cimg_snprintf(tmpstr,tmpstr._width,\" #%lu\\n\",csiz);\n              CImg<ucharT>::string(tmpstr,false).move_to(stream);\n              CImg<ucharT>(cbuf,csiz).move_to(stream);\n              delete[] cbuf;\n              failed_to_compress = false;\n            }\n#endif\n          }\n          if (failed_to_compress) { // Write in a non-compressed way.\n            CImg<charT>::string(\"\\n\",false).move_to(stream);\n            stream.insert(1);\n            stream.back().assign((unsigned char*)ref._data,ref.size()*sizeof(T),1,1,1,true);\n          }\n        } else CImg<charT>::string(\"\\n\",false).move_to(stream);\n      }\n      cimglist_apply(stream,unroll)('y');\n      return stream>'y';\n    }\n\n    //! Unserialize a CImg<unsigned char> serialized buffer into a CImgList<T> list.\n    template<typename t>\n    static CImgList<T> get_unserialize(const CImg<t>& buffer) {\n#ifdef cimg_use_zlib\n#define _cimgz_unserialize_case(Tss) { \\\n        Bytef *cbuf = (Bytef*)stream; \\\n        if (sizeof(t)!=1 || cimg::type<t>::string()==cimg::type<bool>::string()) { \\\n          cbuf = new Bytef[csiz]; Bytef *_cbuf = cbuf; \\\n          for (ulongT i = 0; i<csiz; ++i) *(_cbuf++) = (Bytef)*(stream++); \\\n          is_bytef = false; \\\n        } else { stream+=csiz; is_bytef = true; } \\\n        CImg<Tss> raw(W,H,D,C); \\\n        uLongf destlen = raw.size()*sizeof(Tss); \\\n        uncompress((Bytef*)raw._data,&destlen,cbuf,csiz); \\\n        if (!is_bytef) delete[] cbuf; \\\n        if (endian!=cimg::endianness()) cimg::invert_endianness(raw._data,raw.size()); \\\n        raw.move_to(img); \\\n      }\n#else\n#define _cimgz_unserialize_case(Tss) \\\n      throw CImgArgumentException(\"CImgList<%s>::get_unserialize(): Unable to unserialize compressed data \" \\\n                                  \"unless zlib is enabled.\", \\\n                                  pixel_type());\n#endif\n\n#define _cimg_unserialize_case(Ts,Tss) \\\n      if (!loaded && !cimg::strcasecmp(Ts,str_pixeltype)) { \\\n        for (unsigned int l = 0; l<N; ++l) { \\\n          j = 0; while ((i=(int)*stream)!='\\n' && stream<estream && j<255) { ++stream; tmp[j++] = (char)i; } \\\n          ++stream; tmp[j] = 0; \\\n          W = H = D = C = 0; csiz = 0; \\\n          if ((err = cimg_sscanf(tmp,\"%u %u %u %u #%lu\",&W,&H,&D,&C,&csiz))<4) \\\n            throw CImgArgumentException(\"CImgList<%s>::unserialize(): Invalid specified size (%u,%u,%u,%u) for \" \\\n                                        \"image #%u in serialized buffer.\", \\\n                                        pixel_type(),W,H,D,C,l); \\\n          if (W*H*D*C>0) { \\\n            CImg<T> &img = res._data[l]; \\\n            if (err==5) _cimgz_unserialize_case(Tss) \\\n            else { \\\n              if (sizeof(t)!=1) { \\\n                CImg<ucharT> raw(W*sizeof(Tss),H,D,C);  \\\n                cimg_for(raw,p,unsigned char) *p = (unsigned char)*(stream++); \\\n                img.assign((Tss*)raw._data,W,H,D,C); \\\n              } else img.assign((Tss*)stream,W,H,D,C); \\\n              if (endian!=cimg::endianness()) cimg::invert_endianness(img._data,img.size()); \\\n            } \\\n          } \\\n        } \\\n        loaded = true; \\\n      }\n\n      if (buffer.is_empty())\n        throw CImgArgumentException(\"CImgList<%s>::get_unserialize(): Specified serialized buffer is (null).\",\n                                    pixel_type());\n      CImgList<T> res;\n      const t *stream = buffer._data, *const estream = buffer._data + buffer.size();\n      bool loaded = false, endian = cimg::endianness(), is_bytef = false;\n      CImg<charT> tmp(256), str_pixeltype(256), str_endian(256);\n      *tmp = *str_pixeltype = *str_endian = 0;\n      unsigned int j, N = 0, W, H, D, C;\n      ulongT csiz;\n      int i, err;\n      cimg::unused(is_bytef);\n      do {\n        j = 0; while ((i=(int)*stream)!='\\n' && stream<estream && j<255) { ++stream; tmp[j++] = (char)i; }\n        ++stream; tmp[j] = 0;\n      } while (*tmp=='#' && stream<estream);\n      err = cimg_sscanf(tmp,\"%u%*c%255[A-Za-z64_]%*c%255[sA-Za-z_ ]\",\n                        &N,str_pixeltype._data,str_endian._data);\n      if (err<2)\n        throw CImgArgumentException(\"CImgList<%s>::get_unserialize(): CImg header not found in serialized buffer.\",\n                                    pixel_type());\n      if (!cimg::strncasecmp(\"little\",str_endian,6)) endian = false;\n      else if (!cimg::strncasecmp(\"big\",str_endian,3)) endian = true;\n      res.assign(N);\n      _cimg_unserialize_case(\"bool\",bool);\n      _cimg_unserialize_case(\"unsigned_char\",unsigned char);\n      _cimg_unserialize_case(\"uchar\",unsigned char);\n      _cimg_unserialize_case(\"char\",char);\n      _cimg_unserialize_case(\"unsigned_short\",unsigned short);\n      _cimg_unserialize_case(\"ushort\",unsigned short);\n      _cimg_unserialize_case(\"short\",short);\n      _cimg_unserialize_case(\"unsigned_int\",unsigned int);\n      _cimg_unserialize_case(\"uint\",unsigned int);\n      _cimg_unserialize_case(\"int\",int);\n      _cimg_unserialize_case(\"unsigned_int64\",uint64T);\n      _cimg_unserialize_case(\"uint64\",uint64T);\n      _cimg_unserialize_case(\"int64\",int64T);\n      _cimg_unserialize_case(\"float\",float);\n      _cimg_unserialize_case(\"double\",double);\n      if (!loaded)\n        throw CImgArgumentException(\"CImgList<%s>::get_unserialize(): Unsupported pixel type '%s' defined \"\n                                    \"in serialized buffer.\",\n                                    pixel_type(),str_pixeltype._data);\n      return res;\n    }\n\n    //@}\n    //----------------------------------\n    //\n    //! \\name Others\n    //@{\n    //----------------------------------\n\n    //! Crop font along the X-axis.\n    /**\n    **/\n    CImgList<T>& crop_font() {\n      return get_crop_font().move_to(*this);\n    }\n\n    //! Crop font along the X-axis \\newinstance.\n    /**\n    **/\n    CImgList<T> get_crop_font() const {\n      CImgList<T> res;\n      cimglist_for(*this,l) {\n        const CImg<T>& letter = (*this)[l];\n        int xmin = letter.width(), xmax = 0;\n        cimg_forXY(letter,x,y) if (letter(x,y)) { if (x<xmin) xmin = x; if (x>xmax) xmax = x; }\n        if (xmin>xmax) CImg<T>(letter._width,letter._height,1,letter._spectrum,0).move_to(res);\n        else letter.get_crop(xmin,0,xmax,letter._height - 1).move_to(res);\n      }\n      res[' '].resize(res['f']._width,-100,-100,-100,0);\n      if (' ' + 256<res.size()) res[' ' + 256].resize(res['f']._width,-100,-100,-100,0);\n      return res;\n    }\n\n    //! Return a CImg pre-defined font with desired size.\n    /**\n       \\param font_height Height of the desired font (exact match for 13,23,53,103).\n       \\param is_variable_width Decide if the font has a variable (\\c true) or fixed (\\c false) width.\n    **/\n    static const CImgList<ucharT>& font(const unsigned int font_height, const bool is_variable_width=true) {\n      if (!font_height) return CImgList<ucharT>::const_empty();\n      cimg::mutex(11);\n\n      // Decompress nearest base font data if needed.\n      static const char *data_fonts[] = { cimg::data_font12x13, cimg::data_font20x23, cimg::data_font47x53, 0 };\n      static const unsigned int data_widths[] = { 12,20,47,90 }, data_heights[] = { 13,23,53,103 },\n                                data_Ms[] = { 86,79,57,47 };\n      const unsigned int data_ind = font_height<=13U?0U:font_height<=23U?1U:font_height<=53U?2U:3U;\n      static CImg<ucharT> base_fonts[4];\n      CImg<ucharT> &base_font = base_fonts[data_ind];\n      if (!base_font) {\n        const unsigned int w = data_widths[data_ind], h = data_heights[data_ind], M = data_Ms[data_ind];\n        base_font.assign(256*w,h);\n        const char *data_font = data_fonts[data_ind];\n        unsigned char *ptrd = base_font;\n        const unsigned char *const ptrde = base_font.end();\n\n        // Special case needed for 90x103 to avoid MS compiler limit with big strings.\n        CImg<char> data90x103;\n        if (!data_font) {\n          ((CImg<char>(cimg::_data_font90x103[0],\n                       (unsigned int)std::strlen(cimg::_data_font90x103[0]),1,1,1,true),\n            CImg<char>(cimg::_data_font90x103[1],\n                       (unsigned int)std::strlen(cimg::_data_font90x103[1]) + 1,1,1,1,true))>'x').\n            move_to(data90x103);\n          data_font = data90x103.data();\n        }\n\n        // Uncompress font data (decode RLE).\n        for (const char *ptrs = data_font; *ptrs; ++ptrs) {\n          const int c = (int)(*ptrs - M - 32), v = c>=0?255:0, n = c>=0?c:-c;\n          if (ptrd + n<=ptrde) { std::memset(ptrd,v,n); ptrd+=n; }\n          else { std::memset(ptrd,v,ptrde - ptrd); break; }\n        }\n      }\n\n      // Find optimal font cache location to return.\n      static CImgList<ucharT> fonts[16];\n      static bool is_variable_widths[16] = { 0 };\n      unsigned int ind = ~0U;\n      for (int i = 0; i<16; ++i)\n        if (!fonts[i] || (is_variable_widths[i]==is_variable_width && font_height==fonts[i][0]._height)) {\n          ind = (unsigned int)i; break; // Found empty slot or cached font.\n        }\n      if (ind==~0U) { // No empty slots nor existing font in cache.\n        fonts->assign();\n        std::memmove(fonts,fonts + 1,15*sizeof(CImgList<ucharT>));\n        std::memmove(is_variable_widths,is_variable_widths + 1,15*sizeof(bool));\n        std::memset(fonts + (ind=15),0,sizeof(CImgList<ucharT>)); // Free a slot in cache for new font.\n      }\n      CImgList<ucharT> &font = fonts[ind];\n\n      // Render requested font.\n      if (!font) {\n        const unsigned int padding_x = font_height<33U?1U:font_height<53U?2U:font_height<103U?3U:4U;\n        is_variable_widths[ind] = is_variable_width;\n        font = base_font.get_split('x',256);\n        if (font_height!=font[0]._height)\n          cimglist_for(font,l)\n            font[l].resize(std::max(1U,font[l]._width*font_height/font[l]._height),font_height,-100,-100,\n                           font[0]._height>font_height?2:5);\n        if (is_variable_width) font.crop_font();\n        cimglist_for(font,l) font[l].resize(font[l]._width + padding_x,-100,1,1,0,0,0.5);\n        font.insert(256,0);\n        cimglist_for_in(font,0,255,l) font[l].assign(font[l + 256]._width,font[l + 256]._height,1,3,1);\n      }\n      cimg::mutex(11,0);\n      return font;\n    }\n\n    //! Compute a 1d Fast Fourier Transform, along specified axis.\n    /**\n       \\param axis Axis along which the Fourier transform is computed.\n       \\param invert Tells if the direct (\\c false) or inverse transform (\\c true) is computed.\n    **/\n    CImgList<T>& FFT(const char axis, const bool invert=false) {\n      if (is_empty()) return *this;\n      if (_width==1) insert(1);\n      if (_width>2)\n        cimg::warn(_cimglist_instance\n                   \"FFT(): Instance has more than 2 images\",\n                   cimglist_instance);\n\n      CImg<T>::FFT(_data[0],_data[1],axis,invert);\n      return *this;\n    }\n\n    //! Compute a 1-D Fast Fourier Transform, along specified axis \\newinstance.\n    CImgList<Tfloat> get_FFT(const char axis, const bool invert=false) const {\n      return CImgList<Tfloat>(*this,false).FFT(axis,invert);\n    }\n\n    //! Compute a n-d Fast Fourier Transform.\n    /**\n      \\param invert Tells if the direct (\\c false) or inverse transform (\\c true) is computed.\n    **/\n    CImgList<T>& FFT(const bool invert=false) {\n      if (is_empty()) return *this;\n      if (_width==1) insert(1);\n      if (_width>2)\n        cimg::warn(_cimglist_instance\n                   \"FFT(): Instance has more than 2 images\",\n                   cimglist_instance);\n\n      CImg<T>::FFT(_data[0],_data[1],invert);\n      return *this;\n    }\n\n    //! Compute a n-d Fast Fourier Transform \\newinstance.\n    CImgList<Tfloat> get_FFT(const bool invert=false) const {\n      return CImgList<Tfloat>(*this,false).FFT(invert);\n    }\n\n    //! Reverse primitives orientations of a 3d object.\n    /**\n    **/\n    CImgList<T>& reverse_object3d() {\n      cimglist_for(*this,l) {\n        CImg<T>& p = _data[l];\n        switch (p.size()) {\n        case 2 : case 3: cimg::swap(p[0],p[1]); break;\n        case 6 : cimg::swap(p[0],p[1],p[2],p[4],p[3],p[5]); break;\n        case 9 : cimg::swap(p[0],p[1],p[3],p[5],p[4],p[6]); break;\n        case 4 : cimg::swap(p[0],p[1],p[2],p[3]); break;\n        case 12 : cimg::swap(p[0],p[1],p[2],p[3],p[4],p[6],p[5],p[7],p[8],p[10],p[9],p[11]); break;\n        }\n      }\n      return *this;\n    }\n\n    //! Reverse primitives orientations of a 3d object \\newinstance.\n    CImgList<T> get_reverse_object3d() const {\n      return (+*this).reverse_object3d();\n    }\n\n    //@}\n  }; // struct CImgList<T> { ...\n\n  /*\n    #---------------------------------------------\n    #\n    # Completion of previously declared functions\n    #\n    #----------------------------------------------\n  */\n\nnamespace cimg {\n\n  // Functions to return standard streams 'stdin', 'stdout' and 'stderr'.\n  // (throw a CImgIOException when macro 'cimg_use_r' is defined).\n  inline FILE* _stdin(const bool throw_exception) {\n#ifndef cimg_use_r\n    cimg::unused(throw_exception);\n    return stdin;\n#else\n    if (throw_exception) {\n      cimg::exception_mode(0);\n      throw CImgIOException(\"cimg::stdin(): Reference to 'stdin' stream not allowed in R mode \"\n                            \"('cimg_use_r' is defined).\");\n    }\n    return 0;\n#endif\n  }\n\n  inline FILE* _stdout(const bool throw_exception) {\n#ifndef cimg_use_r\n    cimg::unused(throw_exception);\n    return stdout;\n#else\n    if (throw_exception) {\n      cimg::exception_mode(0);\n      throw CImgIOException(\"cimg::stdout(): Reference to 'stdout' stream not allowed in R mode \"\n                            \"('cimg_use_r' is defined).\");\n    }\n    return 0;\n#endif\n  }\n\n  inline FILE* _stderr(const bool throw_exception) {\n#ifndef cimg_use_r\n    cimg::unused(throw_exception);\n    return stderr;\n#else\n    if (throw_exception) {\n      cimg::exception_mode(0);\n      throw CImgIOException(\"cimg::stderr(): Reference to 'stderr' stream not allowed in R mode \"\n                            \"('cimg_use_r' is defined).\");\n    }\n    return 0;\n#endif\n  }\n\n  // Open a file (with wide character support on Windows).\n  inline std::FILE *win_fopen(const char *const path, const char *const mode) {\n#if cimg_OS==2\n    // Convert 'path' to a wide-character string.\n    int err = MultiByteToWideChar(CP_UTF8,0,path,-1,0,0);\n    if (!err) return std_fopen(path,mode);\n    CImg<wchar_t> wpath(err);\n    err = MultiByteToWideChar(CP_UTF8,0,path,-1,wpath,err);\n    if (!err) return std_fopen(path,mode);\n\n    // Convert 'mode' to a wide-character string.\n    err = MultiByteToWideChar(CP_UTF8,0,mode,-1,0,0);\n    if (!err) return std_fopen(path,mode);\n    CImg<wchar_t> wmode(err);\n    err = MultiByteToWideChar(CP_UTF8,0,mode,-1,wmode,err);\n    if (!err) return std_fopen(path,mode);\n\n    return _wfopen(wpath,wmode);\n#else\n    return std_fopen(path,mode);\n#endif\n  }\n\n  //! Get/set path to store temporary files.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path where temporary files can be saved.\n  **/\n  inline const char* temporary_path(const char *const user_path, const bool reinit_path) {\n#define _cimg_test_temporary_path(p)                                    \\\n    if (!path_found) {                                                  \\\n      cimg_snprintf(s_path,s_path.width(),\"%s\",p);                      \\\n      cimg_snprintf(tmp,tmp._width,\"%s%c%s\",s_path.data(),cimg_file_separator,filename_tmp._data); \\\n      if ((file=std_fopen(tmp,\"wb\"))!=0) { cimg::fclose(file); std::remove(tmp); path_found = true; } \\\n    }\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      CImg<char> tmp(1024), filename_tmp(256);\n      std::FILE *file = 0;\n      cimg_snprintf(filename_tmp,filename_tmp._width,\"%s.tmp\",cimg::filenamerand());\n      char *tmpPath = std::getenv(\"TMP\");\n      if (!tmpPath) { tmpPath = std::getenv(\"TEMP\"); winformat_string(tmpPath); }\n      if (tmpPath) _cimg_test_temporary_path(tmpPath);\n#if cimg_OS==2\n      _cimg_test_temporary_path(\"C:\\\\WINNT\\\\Temp\");\n      _cimg_test_temporary_path(\"C:\\\\WINDOWS\\\\Temp\");\n      _cimg_test_temporary_path(\"C:\\\\Temp\");\n      _cimg_test_temporary_path(\"C:\");\n      _cimg_test_temporary_path(\"D:\\\\WINNT\\\\Temp\");\n      _cimg_test_temporary_path(\"D:\\\\WINDOWS\\\\Temp\");\n      _cimg_test_temporary_path(\"D:\\\\Temp\");\n      _cimg_test_temporary_path(\"D:\");\n#else\n      _cimg_test_temporary_path(\"/tmp\");\n      _cimg_test_temporary_path(\"/var/tmp\");\n#endif\n      if (!path_found) {\n        *s_path = 0;\n        std::strncpy(tmp,filename_tmp,tmp._width - 1);\n        if ((file=std_fopen(tmp,\"wb\"))!=0) { cimg::fclose(file); std::remove(tmp); path_found = true; }\n      }\n      if (!path_found) {\n        cimg::mutex(7,0);\n        throw CImgIOException(\"cimg::temporary_path(): Failed to locate path for writing temporary files.\\n\");\n      }\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the <i>Program Files/</i> directory (Windows only).\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the program files.\n  **/\n#if cimg_OS==2\n  inline const char* programfiles_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(MAX_PATH);\n      *s_path = 0;\n      // Note: in the following line, 0x26 = CSIDL_PROGRAM_FILES (not defined on every compiler).\n#if !defined(__INTEL_COMPILER)\n      if (!SHGetSpecialFolderPathA(0,s_path,0x0026,false)) {\n        const char *const pfPath = std::getenv(\"PROGRAMFILES\");\n        if (pfPath) std::strncpy(s_path,pfPath,MAX_PATH - 1);\n        else std::strcpy(s_path,\"C:\\\\PROGRA~1\");\n      }\n#else\n      std::strcpy(s_path,\"C:\\\\PROGRA~1\");\n#endif\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n#endif\n\n  //! Get/set path to the ImageMagick's \\c convert binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c convert binary.\n  **/\n  inline const char* imagemagick_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      const char *const pf_path = programfiles_path();\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\convert.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%.2d-\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%d-Q\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%d\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%.2d-\\\\VISUA~1\\\\BIN\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%d-Q\\\\VISUA~1\\\\BIN\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\IMAGEM~1.%d\\\\VISUA~1\\\\BIN\\\\convert.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%.2d-\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%d-Q\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%d\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%.2d-\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%d-Q\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\IMAGEM~1.%d\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%.2d-\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%d-Q\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%d\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%.2d-\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%d-Q\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\IMAGEM~1.%d\\\\VISUA~1\\\\BIN\\\\convert.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"convert.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./convert\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"convert\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the GraphicsMagick's \\c gm binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c gm binary.\n  **/\n  inline const char* graphicsmagick_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      const char *const pf_path = programfiles_path();\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\gm.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%.2d-\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%d-Q\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%d\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%.2d-\\\\VISUA~1\\\\BIN\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%d-Q\\\\VISUA~1\\\\BIN\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\GRAPHI~1.%d\\\\VISUA~1\\\\BIN\\\\gm.exe\",pf_path,k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%.2d-\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%d-Q\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%d\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%.2d-\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%d-Q\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"C:\\\\GRAPHI~1.%d\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%.2d-\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%d-Q\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%d\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=10 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%.2d-\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 9; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%d-Q\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      for (int k = 32; k>=0 && !path_found; --k) {\n        cimg_snprintf(s_path,s_path._width,\"D:\\\\GRAPHI~1.%d\\\\VISUA~1\\\\BIN\\\\gm.exe\",k);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gm.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./gm\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gm\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the XMedcon's \\c medcon binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c medcon binary.\n  **/\n  inline const char* medcon_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      const char *const pf_path = programfiles_path();\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\medcon.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\XMedCon\\\\bin\\\\medcon.bat\",pf_path);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) {\n        cimg_snprintf(s_path,s_path._width,\"%s\\\\XMedCon\\\\bin\\\\medcon.exe\",pf_path);\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) {\n        std::strcpy(s_path,\"C:\\\\XMedCon\\\\bin\\\\medcon.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"medcon.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./medcon\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"medcon\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the FFMPEG's \\c ffmpeg binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c ffmpeg binary.\n  **/\n  inline const char *ffmpeg_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\ffmpeg.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"ffmpeg.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./ffmpeg\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"ffmpeg\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the \\c gzip binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c gzip binary.\n  **/\n  inline const char *gzip_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\gzip.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gzip.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./gzip\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gzip\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the \\c gunzip binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c gunzip binary.\n  **/\n  inline const char *gunzip_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\gunzip.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gunzip.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./gunzip\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"gunzip\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the \\c dcraw binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c dcraw binary.\n  **/\n  inline const char *dcraw_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\dcraw.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"dcraw.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./dcraw\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"dcraw\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the \\c wget binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c wget binary.\n  **/\n  inline const char *wget_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\wget.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"wget.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./wget\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"wget\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  //! Get/set path to the \\c curl binary.\n  /**\n     \\param user_path Specified path, or \\c 0 to get the path currently used.\n     \\param reinit_path Force path to be recalculated (may take some time).\n     \\return Path containing the \\c curl binary.\n  **/\n  inline const char *curl_path(const char *const user_path, const bool reinit_path) {\n    static CImg<char> s_path;\n    cimg::mutex(7);\n    if (reinit_path) s_path.assign();\n    if (user_path) {\n      if (!s_path) s_path.assign(1024);\n      std::strncpy(s_path,user_path,1023);\n    } else if (!s_path) {\n      s_path.assign(1024);\n      bool path_found = false;\n      std::FILE *file = 0;\n#if cimg_OS==2\n      if (!path_found) {\n        std::strcpy(s_path,\".\\\\curl.exe\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"curl.exe\");\n#else\n      if (!path_found) {\n        std::strcpy(s_path,\"./curl\");\n        if ((file=std_fopen(s_path,\"r\"))!=0) { cimg::fclose(file); path_found = true; }\n      }\n      if (!path_found) std::strcpy(s_path,\"curl\");\n#endif\n      winformat_string(s_path);\n    }\n    cimg::mutex(7,0);\n    return s_path;\n  }\n\n  // [internal] Sorting function, used by cimg::files().\n  inline int _sort_files(const void* a, const void* b) {\n    const CImg<char> &sa = *(CImg<char>*)a, &sb = *(CImg<char>*)b;\n    return std::strcmp(sa._data,sb._data);\n  }\n\n  //! Return list of files/directories in specified directory.\n  /**\n     \\param path Path to the directory. Set to 0 for current directory.\n     \\param is_pattern Tell if specified path has a matching pattern in it.\n     \\param mode Output type, can be primary { 0=files only | 1=folders only | 2=files + folders }.\n     \\param include_path Tell if \\c path must be included in resulting filenames.\n     \\return A list of filenames.\n  **/\n  inline CImgList<char> files(const char *const path, const bool is_pattern=false,\n                              const unsigned int mode=2, const bool include_path=false) {\n    if (!path || !*path) return files(\"*\",true,mode,include_path);\n    CImgList<char> res;\n\n    // If path is a valid folder name, ignore argument 'is_pattern'.\n    const bool _is_pattern = is_pattern && !cimg::is_directory(path);\n    bool is_root = false, is_current = false;\n    cimg::unused(is_root,is_current);\n\n    // Clean format of input path.\n    CImg<char> pattern, _path = CImg<char>::string(path);\n#if cimg_OS==2\n    for (char *ps = _path; *ps; ++ps) if (*ps=='\\\\') *ps='/';\n#endif\n    char *pd = _path;\n    for (char *ps = pd; *ps; ++ps) { if (*ps!='/' || *ps!=*(ps+1)) *(pd++) = *ps; }\n    *pd = 0;\n    unsigned int lp = (unsigned int)std::strlen(_path);\n    if (!_is_pattern && lp && _path[lp - 1]=='/') {\n      _path[lp - 1] = 0; --lp;\n#if cimg_OS!=2\n      is_root = !*_path;\n#endif\n    }\n\n    // Separate folder path and matching pattern.\n    if (_is_pattern) {\n      const unsigned int bpos = (unsigned int)(cimg::basename(_path,'/') - _path.data());\n      CImg<char>::string(_path).move_to(pattern);\n      if (bpos) {\n        _path[bpos - 1] = 0; // End 'path' at last slash.\n#if cimg_OS!=2\n        is_root = !*_path;\n#endif\n      } else { // No path to folder specified, assuming current folder.\n        is_current = true; *_path = 0;\n      }\n      lp = (unsigned int)std::strlen(_path);\n    }\n\n    // Windows version.\n#if cimg_OS==2\n    if (!_is_pattern) {\n      pattern.assign(lp + 3);\n      std::memcpy(pattern,_path,lp);\n      pattern[lp] = '/'; pattern[lp + 1] = '*'; pattern[lp + 2] = 0;\n    }\n    WIN32_FIND_DATAA file_data;\n    const HANDLE dir = FindFirstFileA(pattern.data(),&file_data);\n    if (dir==INVALID_HANDLE_VALUE) return CImgList<char>::const_empty();\n    do {\n      const char *const filename = file_data.cFileName;\n      if (*filename!='.' || (filename[1] && (filename[1]!='.' || filename[2]))) {\n        const unsigned int lf = (unsigned int)std::strlen(filename);\n        const bool is_directory = (file_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)!=0;\n        if ((!mode && !is_directory) || (mode==1 && is_directory) || mode>=2) {\n          if (include_path) {\n            CImg<char> full_filename((lp?lp+1:0) + lf + 1);\n            if (lp) { std::memcpy(full_filename,_path,lp); full_filename[lp] = '/'; }\n            std::memcpy(full_filename._data + (lp?lp + 1:0),filename,lf + 1);\n            full_filename.move_to(res);\n          } else CImg<char>(filename,lf + 1).move_to(res);\n        }\n      }\n    } while (FindNextFileA(dir,&file_data));\n    FindClose(dir);\n\n    // Unix version (posix).\n#elif cimg_OS == 1\n    DIR *const dir = opendir(is_root?\"/\":is_current?\".\":_path.data());\n    if (!dir) return CImgList<char>::const_empty();\n    struct dirent *ent;\n    while ((ent=readdir(dir))!=0) {\n      const char *const filename = ent->d_name;\n      if (*filename!='.' || (filename[1] && (filename[1]!='.' || filename[2]))) {\n        const unsigned int lf = (unsigned int)std::strlen(filename);\n        CImg<char> full_filename(lp + lf + 2);\n\n        if (!is_current) {\n          full_filename.assign(lp + lf + 2);\n          if (lp) std::memcpy(full_filename,_path,lp);\n          full_filename[lp] = '/';\n          std::memcpy(full_filename._data + lp + 1,filename,lf + 1);\n        } else full_filename.assign(filename,lf + 1);\n\n        struct stat st;\n        if (stat(full_filename,&st)==-1) continue;\n        const bool is_directory = (st.st_mode & S_IFDIR)!=0;\n        if ((!mode && !is_directory) || (mode==1 && is_directory) || mode==2) {\n          if (include_path) {\n            if (!_is_pattern || (_is_pattern && !fnmatch(pattern,full_filename,0)))\n              full_filename.move_to(res);\n          } else {\n            if (!_is_pattern || (_is_pattern && !fnmatch(pattern,full_filename,0)))\n              CImg<char>(filename,lf + 1).move_to(res);\n          }\n        }\n      }\n    }\n    closedir(dir);\n#endif\n\n    // Sort resulting list by lexicographic order.\n    if (res._width>=2) std::qsort(res._data,res._width,sizeof(CImg<char>),_sort_files);\n\n    return res;\n  }\n\n  //! Try to guess format from an image file.\n  /**\n     \\param file Input file (can be \\c 0 if \\c filename is set).\n     \\param filename Filename, as a C-string (can be \\c 0 if \\c file is set).\n     \\return C-string containing the guessed file format, or \\c 0 if nothing has been guessed.\n  **/\n  inline const char *ftype(std::FILE *const file, const char *const filename) {\n    if (!file && !filename)\n      throw CImgArgumentException(\"cimg::ftype(): Specified filename is (null).\");\n    static const char\n      *const _pnm = \"pnm\",\n      *const _pfm = \"pfm\",\n      *const _bmp = \"bmp\",\n      *const _gif = \"gif\",\n      *const _jpg = \"jpg\",\n      *const _off = \"off\",\n      *const _pan = \"pan\",\n      *const _png = \"png\",\n      *const _tif = \"tif\",\n      *const _inr = \"inr\",\n      *const _dcm = \"dcm\";\n    const char *f_type = 0;\n    CImg<char> header;\n    const unsigned int omode = cimg::exception_mode();\n    cimg::exception_mode(0);\n    try {\n      header._load_raw(file,filename,512,1,1,1,false,false,0);\n      const unsigned char *const uheader = (unsigned char*)header._data;\n      if (!std::strncmp(header,\"OFF\\n\",4)) f_type = _off; // OFF.\n      else if (!std::strncmp(header,\"#INRIMAGE\",9)) f_type = _inr; // INRIMAGE.\n      else if (!std::strncmp(header,\"PANDORE\",7)) f_type = _pan; // PANDORE.\n      else if (!std::strncmp(header.data() + 128,\"DICM\",4)) f_type = _dcm; // DICOM.\n      else if (uheader[0]==0xFF && uheader[1]==0xD8 && uheader[2]==0xFF) f_type = _jpg;  // JPEG.\n      else if (header[0]=='B' && header[1]=='M') f_type = _bmp;  // BMP.\n      else if (header[0]=='G' && header[1]=='I' && header[2]=='F' && header[3]=='8' && header[5]=='a' && // GIF.\n               (header[4]=='7' || header[4]=='9')) f_type = _gif;\n      else if (uheader[0]==0x89 && uheader[1]==0x50 && uheader[2]==0x4E && uheader[3]==0x47 &&  // PNG.\n               uheader[4]==0x0D && uheader[5]==0x0A && uheader[6]==0x1A && uheader[7]==0x0A) f_type = _png;\n      else if ((uheader[0]==0x49 && uheader[1]==0x49) || (uheader[0]==0x4D && uheader[1]==0x4D)) f_type = _tif; // TIFF.\n      else { // PNM or PFM.\n        CImgList<char> _header = header.get_split(CImg<char>::vector('\\n'),0,false);\n        cimglist_for(_header,l) {\n          if (_header(l,0)=='#') continue;\n          if (_header[l]._height==2 && _header(l,0)=='P') {\n            const char c = _header(l,1);\n            if (c=='f' || c=='F') { f_type = _pfm; break; }\n            if (c>='1' && c<='9') { f_type = _pnm; break; }\n          }\n          f_type = 0; break;\n        }\n      }\n    } catch (CImgIOException&) { }\n    cimg::exception_mode(omode);\n    return f_type;\n  }\n\n  //! Load file from network as a local temporary file.\n  /**\n     \\param filename Filename, as a C-string.\n     \\param[out] filename_local C-string containing the path to a local copy of \\c filename.\n     \\param timeout Maximum time (in seconds) authorized for downloading the file from the URL.\n     \\param try_fallback When using libcurl, tells using system calls as fallbacks in case of libcurl failure.\n     \\return Value of \\c filename_local.\n     \\note Use the \\c libcurl library, or the external binaries \\c wget or \\c curl to perform the download.\n  **/\n  inline char *load_network(const char *const url, char *const filename_local,\n                            const unsigned int timeout, const bool try_fallback,\n                            const char *const referer) {\n    if (!url)\n      throw CImgArgumentException(\"cimg::load_network(): Specified URL is (null).\");\n    if (!filename_local)\n      throw CImgArgumentException(\"cimg::load_network(): Specified destination string is (null).\");\n\n    const char *const __ext = cimg::split_filename(url), *const _ext = (*__ext && __ext>url)?__ext - 1:__ext;\n    CImg<char> ext = CImg<char>::string(_ext);\n    std::FILE *file = 0;\n    *filename_local = 0;\n    if (ext._width>16 || !cimg::strncasecmp(ext,\"cgi\",3)) *ext = 0;\n    else cimg::strwindows_reserved(ext);\n    do {\n      cimg_snprintf(filename_local,256,\"%s%c%s%s\",\n                    cimg::temporary_path(),cimg_file_separator,cimg::filenamerand(),ext._data);\n      if ((file=std_fopen(filename_local,\"rb\"))!=0) cimg::fclose(file);\n    } while (file);\n\n#ifdef cimg_use_curl\n    const unsigned int omode = cimg::exception_mode();\n    cimg::exception_mode(0);\n    try {\n      CURL *curl = 0;\n      CURLcode res;\n      curl = curl_easy_init();\n      if (curl) {\n        file = cimg::fopen(filename_local,\"wb\");\n        curl_easy_setopt(curl,CURLOPT_URL,url);\n        curl_easy_setopt(curl,CURLOPT_WRITEFUNCTION,0);\n        curl_easy_setopt(curl,CURLOPT_WRITEDATA,file);\n        curl_easy_setopt(curl,CURLOPT_SSL_VERIFYPEER,0L);\n        curl_easy_setopt(curl,CURLOPT_SSL_VERIFYHOST,0L);\n        curl_easy_setopt(curl,CURLOPT_FOLLOWLOCATION,1L);\n        if (timeout) curl_easy_setopt(curl,CURLOPT_TIMEOUT,(long)timeout);\n        if (std::strchr(url,'?')) curl_easy_setopt(curl,CURLOPT_HTTPGET,1L);\n        if (referer) curl_easy_setopt(curl,CURLOPT_REFERER,referer);\n        res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        cimg::fseek(file,0,SEEK_END); // Check if file size is 0.\n        const cimg_ulong siz = cimg::ftell(file);\n        cimg::fclose(file);\n        if (siz>0 && res==CURLE_OK) {\n          cimg::exception_mode(omode);\n          return filename_local;\n        } else std::remove(filename_local);\n      }\n    } catch (...) { }\n    cimg::exception_mode(omode);\n    if (!try_fallback) throw CImgIOException(\"cimg::load_network(): Failed to load file '%s' with libcurl.\",url);\n#endif\n\n    CImg<char> command((unsigned int)std::strlen(url) + 64);\n    cimg::unused(try_fallback);\n\n    // Try with 'curl' first.\n    if (timeout) {\n      if (referer)\n        cimg_snprintf(command,command._width,\"%s -e %s -m %u -f --silent --compressed -o \\\"%s\\\" \\\"%s\\\"\",\n                      cimg::curl_path(),referer,timeout,filename_local,url);\n      else\n        cimg_snprintf(command,command._width,\"%s -m %u -f --silent --compressed -o \\\"%s\\\" \\\"%s\\\"\",\n                      cimg::curl_path(),timeout,filename_local,url);\n    } else {\n      if (referer)\n        cimg_snprintf(command,command._width,\"%s -e %s -f --silent --compressed -o \\\"%s\\\" \\\"%s\\\"\",\n                      cimg::curl_path(),referer,filename_local,url);\n      else\n        cimg_snprintf(command,command._width,\"%s -f --silent --compressed -o \\\"%s\\\" \\\"%s\\\"\",\n                      cimg::curl_path(),filename_local,url);\n    }\n    cimg::system(command);\n\n    if (!(file = std_fopen(filename_local,\"rb\"))) {\n\n      // Try with 'wget' otherwise.\n      if (timeout) {\n        if (referer)\n          cimg_snprintf(command,command._width,\"%s --referer=%s -T %u -q -r -l 0 --no-cache -O \\\"%s\\\" \\\"%s\\\"\",\n                        cimg::wget_path(),referer,timeout,filename_local,url);\n        else\n          cimg_snprintf(command,command._width,\"%s -T %u -q -r -l 0 --no-cache -O \\\"%s\\\" \\\"%s\\\"\",\n                        cimg::wget_path(),timeout,filename_local,url);\n      } else {\n        if (referer)\n          cimg_snprintf(command,command._width,\"%s --referer=%s -q -r -l 0 --no-cache -O \\\"%s\\\" \\\"%s\\\"\",\n                        cimg::wget_path(),referer,filename_local,url);\n        else\n          cimg_snprintf(command,command._width,\"%s -q -r -l 0 --no-cache -O \\\"%s\\\" \\\"%s\\\"\",\n                        cimg::wget_path(),filename_local,url);\n      }\n      cimg::system(command);\n\n      if (!(file = std_fopen(filename_local,\"rb\")))\n        throw CImgIOException(\"cimg::load_network(): Failed to load file '%s' with external commands \"\n                              \"'wget' or 'curl'.\",url);\n      cimg::fclose(file);\n\n      // Try gunzip it.\n      cimg_snprintf(command,command._width,\"%s.gz\",filename_local);\n      std::rename(filename_local,command);\n      cimg_snprintf(command,command._width,\"%s --quiet \\\"%s.gz\\\"\",\n                    gunzip_path(),filename_local);\n      cimg::system(command);\n      file = std_fopen(filename_local,\"rb\");\n      if (!file) {\n        cimg_snprintf(command,command._width,\"%s.gz\",filename_local);\n        std::rename(command,filename_local);\n        file = std_fopen(filename_local,\"rb\");\n      }\n    }\n    cimg::fseek(file,0,SEEK_END); // Check if file size is 0.\n    if (std::ftell(file)<=0)\n      throw CImgIOException(\"cimg::load_network(): Failed to load URL '%s' with external commands \"\n                            \"'wget' or 'curl'.\",url);\n    cimg::fclose(file);\n    return filename_local;\n  }\n\n  // Implement a tic/toc mechanism to display elapsed time of algorithms.\n  inline cimg_ulong tictoc(const bool is_tic) {\n    cimg::mutex(2);\n    static CImg<cimg_ulong> times(64);\n    static unsigned int pos = 0;\n    const cimg_ulong t1 = cimg::time();\n    if (is_tic) { // Tic.\n      times[pos++] = t1;\n      if (pos>=times._width)\n        throw CImgArgumentException(\"cimg::tic(): Too much calls to 'cimg::tic()' without calls to 'cimg::toc()'.\");\n      cimg::mutex(2,0);\n      return t1;\n    }\n    // Toc.\n    if (!pos)\n      throw CImgArgumentException(\"cimg::toc(): No previous call to 'cimg::tic()' has been made.\");\n    const cimg_ulong\n      t0 = times[--pos],\n      dt = t1>=t0?(t1 - t0):cimg::type<cimg_ulong>::max();\n    const unsigned int\n      edays = (unsigned int)(dt/86400000.0),\n      ehours = (unsigned int)((dt - edays*86400000.0)/3600000.0),\n      emin = (unsigned int)((dt - edays*86400000.0 - ehours*3600000.0)/60000.0),\n      esec = (unsigned int)((dt - edays*86400000.0 - ehours*3600000.0 - emin*60000.0)/1000.0),\n      ems = (unsigned int)(dt - edays*86400000.0 - ehours*3600000.0 - emin*60000.0 - esec*1000.0);\n    if (!edays && !ehours && !emin && !esec)\n      std::fprintf(cimg::output(),\"%s[CImg]%*sElapsed time: %u ms%s\\n\",\n                   cimg::t_red,1 + 2*pos,\"\",ems,cimg::t_normal);\n    else {\n      if (!edays && !ehours && !emin)\n        std::fprintf(cimg::output(),\"%s[CImg]%*sElapsed time: %u sec %u ms%s\\n\",\n                     cimg::t_red,1 + 2*pos,\"\",esec,ems,cimg::t_normal);\n      else {\n        if (!edays && !ehours)\n          std::fprintf(cimg::output(),\"%s[CImg]%*sElapsed time: %u min %u sec %u ms%s\\n\",\n                       cimg::t_red,1 + 2*pos,\"\",emin,esec,ems,cimg::t_normal);\n        else{\n          if (!edays)\n            std::fprintf(cimg::output(),\"%s[CImg]%*sElapsed time: %u hours %u min %u sec %u ms%s\\n\",\n                         cimg::t_red,1 + 2*pos,\"\",ehours,emin,esec,ems,cimg::t_normal);\n          else{\n            std::fprintf(cimg::output(),\"%s[CImg]%*sElapsed time: %u days %u hours %u min %u sec %u ms%s\\n\",\n                         cimg::t_red,1 + 2*pos,\"\",edays,ehours,emin,esec,ems,cimg::t_normal);\n          }\n        }\n      }\n    }\n    cimg::mutex(2,0);\n    return dt;\n  }\n\n  // Return a temporary string describing the size of a memory buffer.\n  inline const char *strbuffersize(const cimg_ulong size) {\n    static CImg<char> res(256);\n    cimg::mutex(5);\n    if (size<1024LU) cimg_snprintf(res,res._width,\"%lu byte%s\",(unsigned long)size,size>1?\"s\":\"\");\n    else if (size<1024*1024LU) { const float nsize = size/1024.0f; cimg_snprintf(res,res._width,\"%.1f Kio\",nsize); }\n    else if (size<1024*1024*1024LU) {\n      const float nsize = size/(1024*1024.0f); cimg_snprintf(res,res._width,\"%.1f Mio\",nsize);\n    } else { const float nsize = size/(1024*1024*1024.0f); cimg_snprintf(res,res._width,\"%.1f Gio\",nsize); }\n    cimg::mutex(5,0);\n    return res;\n  }\n\n  //! Display a simple dialog box, and wait for the user's response.\n  /**\n     \\param title Title of the dialog window.\n     \\param msg Main message displayed inside the dialog window.\n     \\param button1_label Label of the 1st button.\n     \\param button2_label Label of the 2nd button (\\c 0 to hide button).\n     \\param button3_label Label of the 3rd button (\\c 0 to hide button).\n     \\param button4_label Label of the 4th button (\\c 0 to hide button).\n     \\param button5_label Label of the 5th button (\\c 0 to hide button).\n     \\param button6_label Label of the 6th button (\\c 0 to hide button).\n     \\param logo Image logo displayed at the left of the main message.\n     \\param is_centered Tells if the dialog window must be centered on the screen.\n     \\return Indice of clicked button (from \\c 0 to \\c 5), or \\c -1 if the dialog window has been closed by the user.\n     \\note\n     - Up to 6 buttons can be defined in the dialog window.\n     - The function returns when a user clicked one of the button or closed the dialog window.\n     - If a button text is set to 0, the corresponding button (and the followings) will not appear in the dialog box.\n     At least one button must be specified.\n  **/\n  template<typename t>\n  inline int dialog(const char *const title, const char *const msg,\n                    const char *const button1_label, const char *const button2_label,\n                    const char *const button3_label, const char *const button4_label,\n                    const char *const button5_label, const char *const button6_label,\n                    const CImg<t>& logo, const bool is_centered=false) {\n#if cimg_display==0\n    cimg::unused(title,msg,button1_label,button2_label,button3_label,button4_label,button5_label,button6_label,\n                 logo._data,is_centered);\n    throw CImgIOException(\"cimg::dialog(): No display available.\");\n#else\n    static const unsigned char\n      black[] = { 0,0,0 }, white[] = { 255,255,255 }, gray[] = { 200,200,200 }, gray2[] = { 150,150,150 };\n\n    // Create buttons and canvas graphics\n    CImgList<unsigned char> buttons, cbuttons, sbuttons;\n    if (button1_label) { CImg<unsigned char>().draw_text(0,0,button1_label,black,gray,1,13).move_to(buttons);\n      if (button2_label) { CImg<unsigned char>().draw_text(0,0,button2_label,black,gray,1,13).move_to(buttons);\n        if (button3_label) { CImg<unsigned char>().draw_text(0,0,button3_label,black,gray,1,13).move_to(buttons);\n          if (button4_label) { CImg<unsigned char>().draw_text(0,0,button4_label,black,gray,1,13).move_to(buttons);\n            if (button5_label) { CImg<unsigned char>().draw_text(0,0,button5_label,black,gray,1,13).move_to(buttons);\n              if (button6_label) { CImg<unsigned char>().draw_text(0,0,button6_label,black,gray,1,13).move_to(buttons);\n              }}}}}}\n    if (!buttons._width)\n      throw CImgArgumentException(\"cimg::dialog(): No buttons have been defined.\");\n    cimglist_for(buttons,l) buttons[l].resize(-100,-100,1,3);\n\n    unsigned int bw = 0, bh = 0;\n    cimglist_for(buttons,l) { bw = std::max(bw,buttons[l]._width); bh = std::max(bh,buttons[l]._height); }\n    bw+=8; bh+=8;\n    if (bw<64) bw = 64;\n    if (bw>128) bw = 128;\n    if (bh<24) bh = 24;\n    if (bh>48) bh = 48;\n\n    CImg<unsigned char> button(bw,bh,1,3);\n    button.draw_rectangle(0,0,bw - 1,bh - 1,gray);\n    button.draw_line(0,0,bw - 1,0,white).draw_line(0,bh - 1,0,0,white);\n    button.draw_line(bw - 1,0,bw - 1,bh - 1,black).draw_line(bw - 1,bh - 1,0,bh - 1,black);\n    button.draw_line(1,bh - 2,bw - 2,bh - 2,gray2).draw_line(bw - 2,bh - 2,bw - 2,1,gray2);\n    CImg<unsigned char> sbutton(bw,bh,1,3);\n    sbutton.draw_rectangle(0,0,bw - 1,bh - 1,gray);\n    sbutton.draw_line(0,0,bw - 1,0,black).draw_line(bw - 1,0,bw - 1,bh - 1,black);\n    sbutton.draw_line(bw - 1,bh - 1,0,bh - 1,black).draw_line(0,bh - 1,0,0,black);\n    sbutton.draw_line(1,1,bw - 2,1,white).draw_line(1,bh - 2,1,1,white);\n    sbutton.draw_line(bw - 2,1,bw - 2,bh - 2,black).draw_line(bw - 2,bh - 2,1,bh - 2,black);\n    sbutton.draw_line(2,bh - 3,bw - 3,bh - 3,gray2).draw_line(bw - 3,bh - 3,bw - 3,2,gray2);\n    sbutton.draw_line(4,4,bw - 5,4,black,1,0xAAAAAAAA,true).draw_line(bw - 5,4,bw - 5,bh - 5,black,1,0xAAAAAAAA,false);\n    sbutton.draw_line(bw - 5,bh - 5,4,bh - 5,black,1,0xAAAAAAAA,false).draw_line(4,bh - 5,4,4,black,1,0xAAAAAAAA,false);\n    CImg<unsigned char> cbutton(bw,bh,1,3);\n    cbutton.draw_rectangle(0,0,bw - 1,bh - 1,black).draw_rectangle(1,1,bw - 2,bh - 2,gray2).\n      draw_rectangle(2,2,bw - 3,bh - 3,gray);\n    cbutton.draw_line(4,4,bw - 5,4,black,1,0xAAAAAAAA,true).draw_line(bw - 5,4,bw - 5,bh - 5,black,1,0xAAAAAAAA,false);\n    cbutton.draw_line(bw - 5,bh - 5,4,bh - 5,black,1,0xAAAAAAAA,false).draw_line(4,bh - 5,4,4,black,1,0xAAAAAAAA,false);\n\n    cimglist_for(buttons,ll) {\n      CImg<unsigned char>(cbutton).\n        draw_image(1 + (bw  -buttons[ll].width())/2,1 + (bh - buttons[ll].height())/2,buttons[ll]).\n        move_to(cbuttons);\n      CImg<unsigned char>(sbutton).\n        draw_image((bw - buttons[ll].width())/2,(bh - buttons[ll].height())/2,buttons[ll]).\n        move_to(sbuttons);\n      CImg<unsigned char>(button).\n        draw_image((bw - buttons[ll].width())/2,(bh - buttons[ll].height())/2,buttons[ll]).\n        move_to(buttons[ll]);\n    }\n\n    CImg<unsigned char> canvas;\n    if (msg)\n      ((CImg<unsigned char>().draw_text(0,0,\"%s\",gray,0,1,13,msg)*=-1)+=200).resize(-100,-100,1,3).move_to(canvas);\n\n    const unsigned int\n      bwall = (buttons._width - 1)*(12 + bw) + bw,\n      w = cimg::max(196U,36 + logo._width + canvas._width,24 + bwall),\n      h = cimg::max(96U,36 + canvas._height + bh,36 + logo._height + bh),\n      lx = 12 + (canvas._data?0:((w - 24 - logo._width)/2)),\n      ly = (h - 12 - bh - logo._height)/2,\n      tx = lx + logo._width + 12,\n      ty = (h - 12 - bh - canvas._height)/2,\n      bx = (w - bwall)/2,\n      by = h - 12 - bh;\n\n    if (canvas._data)\n      canvas = CImg<unsigned char>(w,h,1,3).\n        draw_rectangle(0,0,w - 1,h - 1,gray).\n        draw_line(0,0,w - 1,0,white).draw_line(0,h - 1,0,0,white).\n        draw_line(w - 1,0,w - 1,h - 1,black).draw_line(w - 1,h - 1,0,h - 1,black).\n        draw_image(tx,ty,canvas);\n    else\n      canvas = CImg<unsigned char>(w,h,1,3).\n        draw_rectangle(0,0,w - 1,h - 1,gray).\n        draw_line(0,0,w - 1,0,white).draw_line(0,h - 1,0,0,white).\n        draw_line(w - 1,0,w - 1,h - 1,black).draw_line(w - 1,h - 1,0,h - 1,black);\n    if (logo._data) canvas.draw_image(lx,ly,logo);\n\n    unsigned int xbuttons[6] = { 0 };\n    cimglist_for(buttons,lll) { xbuttons[lll] = bx + (bw + 12)*lll; canvas.draw_image(xbuttons[lll],by,buttons[lll]); }\n\n    // Open window and enter events loop\n    CImgDisplay disp(canvas,title?title:\" \",0,false,is_centered?true:false);\n    if (is_centered) disp.move((CImgDisplay::screen_width() - disp.width())/2,\n                               (CImgDisplay::screen_height() - disp.height())/2);\n    bool stop_flag = false, refresh = false;\n    int oselected = -1, oclicked = -1, selected = -1, clicked = -1;\n    while (!disp.is_closed() && !stop_flag) {\n      if (refresh) {\n        if (clicked>=0)\n          CImg<unsigned char>(canvas).draw_image(xbuttons[clicked],by,cbuttons[clicked]).display(disp);\n        else {\n          if (selected>=0)\n            CImg<unsigned char>(canvas).draw_image(xbuttons[selected],by,sbuttons[selected]).display(disp);\n          else canvas.display(disp);\n        }\n        refresh = false;\n      }\n      disp.wait(15);\n      if (disp.is_resized()) disp.resize(disp,false);\n\n      if (disp.button()&1)  {\n        oclicked = clicked;\n        clicked = -1;\n        cimglist_for(buttons,l)\n          if (disp.mouse_y()>=(int)by && disp.mouse_y()<(int)(by + bh) &&\n              disp.mouse_x()>=(int)xbuttons[l] && disp.mouse_x()<(int)(xbuttons[l] + bw)) {\n            clicked = selected = l;\n            refresh = true;\n          }\n        if (clicked!=oclicked) refresh = true;\n      } else if (clicked>=0) stop_flag = true;\n\n      if (disp.key()) {\n        oselected = selected;\n        switch (disp.key()) {\n        case cimg::keyESC : selected = -1; stop_flag = true; break;\n        case cimg::keyENTER : if (selected<0) selected = 0; stop_flag = true; break;\n        case cimg::keyTAB :\n        case cimg::keyARROWRIGHT :\n        case cimg::keyARROWDOWN : selected = (selected + 1)%buttons.width(); break;\n        case cimg::keyARROWLEFT :\n        case cimg::keyARROWUP : selected = (selected + buttons.width() - 1)%buttons.width(); break;\n        }\n        disp.set_key();\n        if (selected!=oselected) refresh = true;\n      }\n    }\n    if (!disp) selected = -1;\n    return selected;\n#endif\n  }\n\n  //! Display a simple dialog box, and wait for the user's response \\specialization.\n  inline int dialog(const char *const title, const char *const msg,\n                    const char *const button1_label, const char *const button2_label, const char *const button3_label,\n                    const char *const button4_label, const char *const button5_label, const char *const button6_label,\n                    const bool is_centered) {\n    return dialog(title,msg,button1_label,button2_label,button3_label,button4_label,button5_label,button6_label,\n                  CImg<unsigned char>::_logo40x38(),is_centered);\n  }\n\n  //! Evaluate math expression.\n  /**\n     \\param expression C-string describing the formula to evaluate.\n     \\param x Value of the pre-defined variable \\c x.\n     \\param y Value of the pre-defined variable \\c y.\n     \\param z Value of the pre-defined variable \\c z.\n     \\param c Value of the pre-defined variable \\c c.\n     \\return Result of the formula evaluation.\n     \\note Set \\c expression to \\c 0 to keep evaluating the last specified \\c expression.\n     \\par Example\n     \\code\n     const double\n     res1 = cimg::eval(\"cos(x)^2 + sin(y)^2\",2,2),  // will return '1'.\n     res2 = cimg::eval(0,1,1);                    // will return '1' too.\n     \\endcode\n  **/\n  inline double eval(const char *const expression, const double x, const double y, const double z, const double c) {\n    static const CImg<float> empty;\n    return empty.eval(expression,x,y,z,c);\n  }\n\n  template<typename t>\n  inline CImg<typename cimg::superset<double,t>::type> eval(const char *const expression, const CImg<t>& xyzc) {\n    static const CImg<float> empty;\n    return empty.eval(expression,xyzc);\n  }\n\n  // End of cimg:: namespace\n}\n\n  // End of cimg_library:: namespace\n}\n\n//! Short alias name.\nnamespace cil = cimg_library_suffixed;\n\n#ifdef _cimg_redefine_False\n#define False 0\n#endif\n#ifdef _cimg_redefine_True\n#define True 1\n#endif\n#ifdef _cimg_redefine_None\n#define None 0\n#endif\n#ifdef _cimg_redefine_min\n#define min(a,b) (((a)<(b))?(a):(b))\n#endif\n#ifdef _cimg_redefine_max\n#define max(a,b) (((a)>(b))?(a):(b))\n#endif\n#ifdef _cimg_redefine_PI\n#define PI 3.141592653589793238462643383\n#endif\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n#endif\n// Local Variables:\n// mode: c++\n// End:\n",
			"file": "/C/Users/Nanquitas/AppData/Local/Temp/Temp1_CImg_latest.zip/CImg-2.0.0_pre020217/CImg.h",
			"file_size": 2850482,
			"file_write_time": 131305287340000000,
			"settings":
			{
				"buffer_size": 2850481,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/Nanquitas/Desktop/libShark2NTR/GamePatcher/Sources/ntr/libntrplg/stub.s",
			"settings":
			{
				"buffer_size": 775,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Preferences.hpp",
			"settings":
			{
				"buffer_size": 433,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/pluginInit.cpp",
			"settings":
			{
				"buffer_size": 4346,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/Color.hpp",
			"settings":
			{
				"buffer_size": 2369,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/CheckedButton.hpp",
			"settings":
			{
				"buffer_size": 4953,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Vector.hpp",
			"settings":
			{
				"buffer_size": 2743,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/CTRPluginFramework/Graphics/Renderer.hpp",
			"settings":
			{
				"buffer_size": 7962,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/ctrulib/svc.h",
			"settings":
			{
				"buffer_size": 41219,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/main.cpp",
			"settings":
			{
				"buffer_size": 11278,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/MenuFolder.cpp",
			"settings":
			{
				"buffer_size": 1251,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/GuideReader.cpp",
			"settings":
			{
				"buffer_size": 4331,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/File.cpp",
			"settings":
			{
				"buffer_size": 6851,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/PluginMenu.cpp",
			"settings":
			{
				"buffer_size": 22595,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Preferences.cpp",
			"settings":
			{
				"buffer_size": 2320,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 4441,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Graphics/Renderer.cpp",
			"settings":
			{
				"buffer_size": 4948,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Includes/ctrulib/os.h",
			"settings":
			{
				"buffer_size": 5982,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Graphics/Color.cpp",
			"settings":
			{
				"buffer_size": 12885,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Menu.cpp",
			"settings":
			{
				"buffer_size": 7088,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Graphics/TextBox.cpp",
			"settings":
			{
				"buffer_size": 8852,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Sources/CTRPluginFramework/Graphics/Renderer_Sysfont.cpp",
			"settings":
			{
				"buffer_size": 11072,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 775.0,
		"last_filter": "Ins",
		"selected_items":
		[
			[
				"Ins",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			]
		],
		"width": 776.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/services",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/libntrplg",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Lib",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Icons",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/allocator",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/gpu",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/util",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/util/utf",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/NTR"
	],
	"file_history":
	[
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/BMPImage.hpp",
		"/C/Users/Nanquitas/Downloads/Compressed/ctrulib-master/ctrulib/libctru/Makefile",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/.gitignore",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Screen.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/OSD.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/System.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Directory.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/pluginInit.cpp",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/tools/locate_offsets.py",
		"/C/Users/Nanquitas/AppData/Local/Temp/Temp1_mk7.zip/mk7/Sources/notes.h",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/tools/locate_homemenu.py",
		"/C/Users/Nanquitas/AppData/Local/Temp/Temp1_bitmap.zip/bitmap/bitmap_image.hpp",
		"/C/Users/Nanquitas/AppData/Local/Temp/Temp1_mk7.zip/mk7/Sources/menu.c",
		"/C/Users/Nanquitas/Downloads/cheats.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/TextBox.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/main.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Controller.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Icons/Icon.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/PluginMenu.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Menu.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Process.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/thread.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/MenuEntry.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/TextBox.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Directory.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/OSD.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Process.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/services/fs.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/File.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/MenuEntry.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/MenuFolder.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/Icon.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Screen.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/MenuItem.hpp",
		"/C/Users/Nanquitas/AppData/Local/Temp/Temp1_menuCheat.zip/source/gameplg.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/services/hid.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/services/irrst.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Controller.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/Color.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/services/hid.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/sdmc_dev.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/bootloader.s",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/3ds.ld",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Menu.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/PluginMenu.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Events.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/arm11K.s",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/memory_functions.c",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/updater.c",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/graphics.c",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/config.h",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/Makefile",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/main.h",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/main.c",
		"/C/Users/Nanquitas/Downloads/Compressed/BootNTR-3.4preview3/source/main.c",
		"/C/Users/Nanquitas/Desktop/github/BootNTR/source/config.c",
		"/C/Users/Nanquitas/Downloads/Compressed/BootNTR-3.4preview3/source/ntr_config.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/File.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system/stack_adjust.s",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system/ctru_exit.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/arm11kCommands.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/Renderer.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system/allocateHeaps.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer_DrawForms.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Color.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer_Sysfont.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/arm11kCommands.h",
		"/C/Users/Nanquitas/Desktop/github/PokemonSM_NTR_Cheats/Sources/gateway_cheats.c",
		"/C/Users/Nanquitas/Desktop/NTR-Plugin-Manager/NTRPluginManager/bin/Debug/Tools/Gateshark2NTR/First/template/cheats.c",
		"/C/Users/Nanquitas/Desktop/github/PokemonSM_NTR_Cheats/Sources/menu.c",
		"/C/Users/Nanquitas/Desktop/github/PokemonSM_NTR_Cheats/Sources/battle_cheats.c",
		"/C/Users/Nanquitas/Desktop/github/PokemonSM_NTR_Cheats/Sources/cheats.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/MenuFolder.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/EventManager.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/ToggleButton.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/CheckedButton.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Rect.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/Button.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Graphics/Button_MenuItem.hpp",
		"/C/Users/Nanquitas/Desktop/fantasyLifeAnew/Sources/cheats.c",
		"/C/Users/Nanquitas/Desktop/fantasyLifeAnew/Sources/skills.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/cheats.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Icons/CheckedCheckbox.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer_DrawStrings.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer_DrawPixel.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Graphics/Renderer_DrawData.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/util/utf.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Sleep.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Touch.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Clock.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Touch.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Renderer.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Renderer_DrawForms.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Renderer_DrawPixel.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Renderer_DrawStrings.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Renderer_Sysfont.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Time.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Color.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Line.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Vector.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Sleep.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/System.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Time.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Clock.cpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/types.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/EventManager.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Makefile",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system/appInit.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/system/syscalls.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Vector.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Button.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Icon.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/services/gspgpu.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/gfx.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/font.h",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/ctrulib/font.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Color.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/CTRPluginFramework/Renderer.hpp",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/cheats.hpp",
		"/C/Users/Nanquitas/Desktop/NTR-Plugin-Manager/NTRPluginManager/bin/Release/Tools/Gateshark2NTR/First/template/cheats.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/Icon.cpp",
		"/C/Users/Nanquitas/Desktop/libShark2NTR/libShark2NTR/Includes/draw.h",
		"/C/Users/Nanquitas/Desktop/libShark2NTR/libShark2NTR/Sources/Graphics/Drawing/draw_img.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Sources/CTRPluginFramework/CheckedCheckbox.c",
		"/C/Users/Nanquitas/Desktop/github/CTRPluginFramework/Includes/ctrulib/srv.h",
		"/C/Users/Nanquitas/Desktop/ctrulib.h"
	],
	"find":
	{
		"height": 64.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Resize(",
			"Resize",
			"Menu::",
			"name",
			"Folder",
			"File",
			"sdmcArchive",
			"write",
			"    \n",
			"unlock",
			"p_s",
			"p_l",
			"();",
			"            \n",
			"_render3D",
			"_doubleBuffer",
			"_render3D",
			"_screenTarget",
			"    \n",
			"tls",
			"_framebufferRV",
			"_framebufferP",
			"instruction",
			"flush",
			" \n",
			"Priori",
			"svcSetPriority",
			".as",
			"getProce",
			"; ",
			"@",
			" ;",
			";",
			"Program",
			"Process",
			"heap",
			"log",
			"new",
			"g_weapon",
			"#include \"cheats.h\"\n#include \"notes.h\"\n#include \"svc.h\"\n#include \"result.h\"\n\n#define \tMOON_TID\t0x00175E00\n#define \tSUN_TID \t0x00164800\n\nchar\t*builder_name = \"Nanquitas\";\n\nvoid gfxFillColor(int screen, u32 fillcolor)\n{\n\tu32 i;\n\tu32 IoBaseLcd = plgGetIoBase(IO_BASE_LCD);\n\tfor (i = 0; i < 0x64; ++i )\n\t{\n\t\tif (screen == 3 || screen == 2)\n\t\t\t*(u32 *)(IoBaseLcd + 0x204) = fillcolor;\n\t\tif (screen == 3 || screen == 1)\n\t\t\t*(u32 *)(IoBaseLcd + 0xA04) = fillcolor;\n\t\tsvcSleepThread(5000000); // 0.005 second\n\t}\n\t*(u32*)(IoBaseLcd + 0x204) = 0;\n\t*(u32*)(IoBaseLcd + 0xA04) = 0;\n}\n\nvoid gfxFillColor2(u32 topcolor, u32 botcolor)\n{\n\tu32 i;\n\tu32 IoBaseLcd = plgGetIoBase(IO_BASE_LCD);\n\tfor (i = 0; i < 0x64; ++i )\n\t{\n\t\t\t*(u32 *)(IoBaseLcd + 0x204) = topcolor;\n\t\t\t*(u32 *)(IoBaseLcd + 0xA04) = botcolor;\n\t\tsvcSleepThread(5000000); // 0.005 second\n\t}\n\t*(u32*)(IoBaseLcd + 0x204) = 0;\n\t*(u32*)(IoBaseLcd + 0xA04) = 0;\n}\n\nResult\t\tprotect_area_rw(u32 addr, bool color)\n{\n\tHandle\t\ttarget;\n\tResult \t\tres;\n\tPageInfo\tpage_info;\n\tMemInfo\t\tmeminfo;\n\tsvcQueryMemory(&meminfo, &page_info, addr);\n\t//if (right_state(meminfo.state) && ((meminfo.perm & MEMPERM_WRITE) != MEMPERM_WRITE))\n\t\tres = svcControlProcessMemory(getCurrentProcessHandle(), meminfo.base_addr, \\\n\t\t\tmeminfo.base_addr, meminfo.size, 6, 3);\n\t\tif (color)\n\t\t{\t\t\t\n\t\tif (R_SUCCEEDED(res))\n\t\t\tgfxFillColor(3, 0x100FF00);\n\t\telse\n\t\t\tgfxFillColor(3, 0x1FF0000);\n\t\t}\n\treturn res;\n}\n\nvoid \ttest_region(void)\n{\n\tHandle\t\ttarget;\n\tResult \t\tres;\n\tPageInfo\tpage_info = {0};\n\tMemInfo\t\tmeminfo = {0};\n\tsvcQueryMemory(&meminfo, &page_info, addr);\n\t//if (right_state(meminfo.state) && ((meminfo.perm & MEMPERM_WRITE) != MEMPERM_WRITE))\n\tif (meminfo.base_addr == 0x08009000 && meminfo.base_addr + meminfo.size > 0x0803797C)\n\t{\n\t\tif (!(meminfo.per & MEMPERM_WRITE))\n\t\t{\n\t\t\tgfxFillColor(2, 0x1FF0000);\n\t\t}\n\t\telse\n\t\t\tgfxFillColor(2, 0x100FF00);\n\n\t}\n\t\n\n\t\tres = svcControlProcessMemory(getCurrentProcessHandle(), meminfo.base_addr, \\\n\t\t\tmeminfo.base_addr, meminfo.size, 6, 3);\n\t\tif (R_SUCCEEDED(res))\n\t\t\tgfxFillColor(3, 0x100FF00);\n\t\telse\n\t\t\tgfxFillColor(3, 0x1FF0000);\n}\n\nvoid \tcamera_zoom(void)\n{\n\n}\n\nvoid    mem_rwx(void)\n{\n    protect_area_rw(0x08009000);\n    //protect_region(0x08103000);\n    //protect_region(0x08133000);\n    //protect_region(0x0821D000);\n    //protect_region(0x0821E000);\n    //protect_region(0x08225000);\n}\n\nvoid\tmy_menus(void)\n{\t\n\tu32 \ttid;\n\n\ttid = get_tid_low();\n\tmem_rwx();\n\tif (tid == MOON_TID)\n\t\tnew_unselectable_entry(\"Pokemon Moon Plugin V1 Beta3\");\n\telse if (tid == SUN_TID)\n\t\tnew_unselectable_entry(\"Pokemon Sun Plugin V1 Beta3\");\n\telse\n\t{\n\t\tnew_unselectable_entry(\"!!! Unrecognized Title ID !!!\");\n\t\tnew_unselectable_entry(\"!!!  Contact the authors  !!!\");\n\t\treturn;\n\t}\n\t// Unlock stick and touch screen capabilities\n\tset_hid_address(0x10002000);\n\t\n\tnew_spoiler(\"!!!   FAQ   !!!\");\n\t\tnew_separator();\n\t\tnew_unselectable_entry(\"Press Y when the cursor is\");\n\t\tnew_unselectable_entry(\"yellow to find how to use\");\n\t\tnew_unselectable_entry(\"the selected cheat.\");\n\t\tnew_separator();\n\texit_spoiler();\n\t// Menu declaration in pokemon_spawner.c\n\tpokemon_spawner_menu();\n\tnew_spoiler(\"Battle cheats\");\n\t\tnew_spoiler(\"Speed Multiplier\");\n\t\t\tnew_radio_entry(\"Walk/Run Speed x0.5\", speed_multiplier_x05);\n\t\t\tnew_radio_entry(\"Walk/Run Speed x1.0\", speed_multiplier_x1);\n\t\t\tnew_radio_entry(\"Walk/Run Speed x1.375\", speed_multiplier_x1375);\n\t\t\tnew_radio_entry(\"Walk/Run Speed x1.5\", speed_multiplier_x15);\n\t\t\tnew_radio_entry(\"Walk/Run Speed x2.0\", speed_multiplier_x2);\n\t\t\tnew_radio_entry(\"Walk/Run Speed x2.5\", speed_multiplier_x25);\n\t\texit_spoiler();\n\t\tnew_spoiler(\"Experience Modifier\");\n\t\t\tnew_toggle_entry(\"Exp Modifier:\", exp_modifier, EXP_MODIFIER);\n\t\t\tnew_separator();\n\t\t\tnew_entry_index(\"Raise 1%\", raise_1_percent, EXP_RAISE_ONE);\n\t\t\tnew_entry_index(\"Raise 10%\", raise_10_percent, EXP_RAISE_TEN);\n\t\t\tnew_entry_index(\"Raise 100%\", raise_100_percent, EXP_RAISE_HUNDRED);\n\t\t\tnew_entry_index(\"Raise 1000%\", raise_1000_percent, EXP_RAISE_THOUSAND);\n\t\t\tnew_separator();\n\t\t\tupdate_exp_modifier();\n\t\texit_spoiler();\n\t\tnew_toggle_entry(\"Wild pokemons are shiny\", wild_pokemon_shiny, WILD_POKEMON_SHINY);\n\t\tnew_toggle_entry(\"100% Catch rate\", always_catch, ALWAYS_CATCH);\n\t\tnew_entry_note(\"Catch Trainer's Pokemon\", catch_trainers_pokemon_note, catch_trainers_pokemon);\n\t\tnew_entry_note(\"Rematch Trainers\", rematch_trainers_note, rematch_trainers);\n\texit_spoiler();\n\tnew_spoiler(\"Items cheats\");\n\t\tnew_entry(\"Max Money\", max_money);\n\t\tnew_entry_note(\"All Z Crystals\", z_crystals_note, all_z_crystals);\n\t\tnew_entry_note(\"All TM / HM\", all_tm_hm_note, get_all_tm_hm);\n\t\tnew_entry_note(\"All items x950\", all_items_note, all_items_x950);\n\t\tnew_entry_note(\"All medicines\", all_medicines_note, all_medicine);\n\t\tnew_entry_note(\"All berries\", all_berries_note, all_berries);\n\t\tnew_entry_note(\"All male's clothes\", all_clothes_note, all_clothes_male);\n\t\tnew_entry_note(\"All female's clothes\", all_clothes_note, all_clothes_female);\n\texit_spoiler();\n\tnew_spoiler(\"Egg cheats\");\n\t\tnew_toggle_entry(\"Receive egg from daycare\", receive_egg_from_daycare, RECEIVE_EGG_FROM_DAYCARE);\n\t\tnew_toggle_entry(\"Egg instant hatch\", egg_instant_hatch, EGG_INSTANT_HATCH);\n\texit_spoiler();\n\tnew_spoiler(\"Utility\");\n\t\tnew_spoiler(\"QR Codes\");\n\t\t\tnew_toggle_entry(\"Remove wait time\", remove_qr_wait_time, REMOVE_QR_WAIT_TIME);\n\t\t\tnew_toggle_entry(\"Remove QR ban list\", remove_qr_ban_list, REMOVE_QR_BAN_LIST);\n\t\t\tnew_entry(\"QR Scan points x100\", qr_scan_point_100);\n\t\texit_spoiler();\n\t\tnew_toggle_entry(\"No outlines\", no_outlines, NO_OUTLINES);\n\t\tnew_toggle_entry(\"Instant message\", instant_messages, INSTANT_MESSAGES);\n\t\tnew_entry_note(\"Walk through walls\", walk_through_walls_note, walk_through_walls);\n\t\tnew_toggle_entry(\"Rename any pokemon\", rename_any_pokemon, RENAME_ANY_POKEMON);\n\t\tnew_toggle_entry(\"Learn any TM / HM\", learn_any_tm_hm, LEARN_ANY_TM_HM);\n\t\tnew_entry_note(\"Teleporter\", teleporter_note, save_slot_teleporter);\n\t\tnew_entry_index_note(\"Access PC from Options\", access_pc_note, pc_from_option, PC_FROM_OPTION);\n\texit_spoiler();\n\tnew_spoiler(\"Stats cheats\");\n\t\tnew_entry(\"Festival coins x9999999\", festival_coin_9999999);\n\t\tnew_entry(\"Poke Festival coins x9999999\", poke_festival_coin_9999999);\n\t\tnew_entry(\"Thumbs Ups x1500000\", thumbsups_1500000);\n\t\tnew_entry(\"Max Battle Points\", max_battle_points);\n\texit_spoiler();\n\tnew_spoiler(\"Gateway only\");\n\t\tnew_entry(\"Raise all status\", raises_the_all_status_of_a_pokemon_by_6_s);\n\t\tnew_entry(\"Camera zoom\", camera_zoom_outselectlenable_select);\n\t\tnew_entry(\"View IVs\", hold_selectstart_to_view_ivsevs_on_poke);\n\t\tnew_entry(\"Can use Z move many times\", can_use_zmoves_many_times_v10);\n\t\tnew_entry(\"Enable enemy hp pokemon\", enable_view_of_enemy_pokemon_hp_v10);\n\t\tnew_entry(\"Always critical hit\", always_critical_hit_v10);\n\t\tnew_entry(\"Can throw pokeball at trial\", can_throw_pokeball_at_trial_v10);\n\t\tnew_entry(\"Can learn all moves\", can_learn_the_all_moves_in_move_reminder);\n\t\tnew_entry(\"Mega evolution don't cancel\", mega_evolution_does_not_cancel_after_batt);\n\t\tnew_entry(\"Mega evolution don't vanish\", mega_evolution_of_party_pokemon_does_not);\n\texit_spoiler();\n\tnew_unselectable_entry(\"Special thanks to ymyn and\");\n\tnew_unselectable_entry(\"DarkFlare for the cheats !!!\");\n}\n\n\n\n",
			"(u32 index)",
			"read_u32",
			"write_u32",
			"0",
			"other",
			"feet",
			"0",
			"hand",
			"0",
			"leg",
			"hand",
			"HAND",
			"hand",
			"HAND",
			"hand",
			"HAND",
			"hand",
			"FEET",
			"HAND",
			"leg",
			"LEG",
			"HEAD",
			"head",
			"HEAD",
			"head",
			"HEAD",
			"head",
			"HEAD",
			"head",
			"HEAD",
			"g_head",
			"add_",
			", 0 ",
			"AUTO_DISABLE",
			"add_skills,",
			"_arg",
			"EXECUTE_ONCE",
			"XP:00000:00000",
			"LV:00,XP",
			"[LV: 00, EXP: 00000]",
			"(00) (00000)",
			"new_entry_managed",
			"#include \"cheats.h\"\n\nextern u32 g_region;\n\n\nu32     skill_address[] = \n{\n    0x00725a74, //Accessory_Alchemy\n    0x00725a7c, //Alchemy\n    0x00725b4c, //Archery_Skill\n    0x00725ac4, //Armor_Smithing\n    0x00725a8c, //carpentry\n    0x00725a9c, //Cooking\n    0x00725b54, //Dagger_Skill\n    0x00725aa4, //Dash\n    0x00725b24, //Egg_Veggie_Cuisine\n    0x00725b5c, //Earth_Magic\n    0x00725b1c, //Fabric_Tailoring\n    0x00725b64, //Fire_Magic\n    0x00725ab4, //Fishing\n    0x00725abc, //Furniture_Carpentry\n    0x00725a94, //Garment_Tailoring\n    0x00725b8c, //Greatsword_Skill\n    0x00725b74, //Longsword_Skill\n    0x00725b84, //Magic_Skill\n    0x00725adc, //Meat_Cuisine\n    0x00725ae4, //Medicinal_Alchemy\n    0x00725acc, //Metal_Smithing\n    0x00725aec, //Mining\n    0x00725a84, //Misc_Tailoring\n    0x00725afc, //Seafood_Cuisine\n    0x00725b04, //Sewing\n    0x00725b7c, //Shield_Skill\n    0x00725b14, //Smithing\n    0x00725b0c, //Sneathing\n    0x00725b34, //Tools_Carpentry\n    0x00725b94, //Water_Magic\n    0x00725b3c, //Weapon_Carpentry\n    0x00725b2c, //Weapon_Smithing\n    0x00725b44, //Wind_Magic\n    0x00725ad4  //Woodcutting   \n};\n\n/*\n**Skills\n*/\n\nvoid    Accessory_Alchemy(u8 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a74) <= 0x14 ? READU8(0x00725a74) + 1 : 0x14;\n    WRITEU8(0x00725a74 - g_region, level);\n}\n\nvoid    Alchemy(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a7c) <= 0x14 ? READU8(0x00725a7c) + 1 : 0x14;\n    WRITEU8(0x00725a7c - g_region, level);\n}\n\nvoid    Misc_Tailoring(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a84) <= 0x14 ? READU8(0x00725a84) + 1 : 0x14;\n    WRITEU8(0x00725a84 - g_region, level);\n}\n\nvoid    Carpentry(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a8c) <= 0x14 ? READU8(0x00725a8c) + 1 : 0x14;\n    WRITEU8(0x00725a8c - g_region, level);\n}\n\nvoid    Garment_Tailoring(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a94) <= 0x14 ? READU8(0x00725a94) + 1 : 0x14;\n    WRITEU8(0x00725a94 - g_region, level);\n}\n\nvoid    Cooking(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725a9c) <= 0x14 ? READU8(0x00725a9c) + 1 : 0x14;\n    WRITEU8(0x00725a9c - g_region, level);\n}\n\nvoid    Dash(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725aa4) <= 0x14 ? READU8(0x00725aa4) + 1 : 0x14;\n    WRITEU8(0x00725aa4 - g_region, level);\n}\n\nvoid    Fishing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725ab4) <= 0x14 ? READU8(0x00725ab4) + 1 : 0x14;\n    WRITEU8(0x00725ab4 - g_region, level);\n}\n\nvoid    Furniture_Carpentry(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725abc) <= 0x14 ? READU8(0x00725abc) + 1 : 0x14;\n    WRITEU8(0x00725abc - g_region, level);\n}\n\nvoid    Armor_Smithing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725ac4) <= 0x14 ? READU8(0x00725ac4) + 1 : 0x14;\n    WRITEU8(0x00725ac4 - g_region, level);\n}\n\nvoid    Metal_Smithing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725acc) <= 0x14 ? READU8(0x00725acc) + 1 : 0x14;\n    WRITEU8(0x00725acc - g_region, level);\n}\n\nvoid    Woodcutting(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725ad4) <= 0x14 ? READU8(0x00725ad4) + 1 : 0x14;\n    WRITEU8(0x00725ad4 - g_region, level);\n}\n\nvoid    Meat_Cuisine(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725adc) <= 0x14 ? READU8(0x00725adc) + 1 : 0x14;\n    WRITEU8(0x00725adc - g_region, level);\n}\n\nvoid    Medicinal_Alchemy(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725ae4) <= 0x14 ? READU8(0x00725ae4) + 1 : 0x14;\n    WRITEU8(0x00725ae4 - g_region, level);\n}\n\nvoid    Mining(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725aec) <= 0x14 ? READU8(0x00725aec) + 1 : 0x14;\n    WRITEU8(0x00725aec - g_region, level);\n}\n\nvoid    Seafood_Cuisine(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725afc) <= 0x14 ? READU8(0x00725afc) + 1 : 0x14;\n    WRITEU8(0x00725afc - g_region, level);\n}\n\nvoid    Sewing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b04) <= 0x14 ? READU8(0x00725b04) + 1 : 0x14;\n    WRITEU8(0x00725b04 - g_region, level);\n}\n\nvoid    Sneaking(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b0c) <= 0x14 ? READU8(0x00725b0c) + 1 : 0x14;\n    WRITEU8(0x00725b0c - g_region, level);\n}\n\nvoid    Smithing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b14) <= 0x14 ? READU8(0x00725b14) + 1 : 0x14;\n    WRITEU8(0x00725b14 - g_region, level);\n}\n\nvoid    Fabric_Tailoring(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b1c) <= 0x14 ? READU8(0x00725b1c) + 1 : 0x14;\n    WRITEU8(0x00725b1c - g_region, level);\n}\n\nvoid    Egg_Veggie_Cuisine(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b24) <= 0x14 ? READU8(0x00725b24) + 1 : 0x14;\n    WRITEU8(0x00725b24 - g_region, level);\n}\n\nvoid    Weapon_Smithing(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b2c) <= 0x14 ? READU8(0x00725b2c) + 1 : 0x14;\n    WRITEU8(0x00725b2c - g_region, level);\n}\n\nvoid    Tools_Carpentry(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b34) <= 0x14 ? READU8(0x00725b34) + 1 : 0x14;\n    WRITEU8(0x00725b34 - g_region, level);\n}\n\nvoid    Weapons_Carpentry(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b3c) <= 0x14 ? READU8(0x00725b3c) + 1 : 0x14;\n    WRITEU8(0x00725b3c - g_region, level);\n}\n\nvoid    Wind_Magic(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b44) <= 0x14 ? READU8(0x00725b44) + 1 : 0x14;\n    WRITEU8(0x00725b44 - g_region, level);\n}\n\nvoid    Archery_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b4c) <= 0x14 ? READU8(0x00725b4c) + 1 : 0x14;\n    WRITEU8(0x00725b4c - g_region, level);\n}\n\nvoid    Dagger_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b54) <= 0x14 ? READU8(0x00725b54) + 1 : 0x14;\n    WRITEU8(0x00725b54 - g_region, level);\n}\n\nvoid    Earth_Magic(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b5c) <= 0x14 ? READU8(0x00725b5c) + 1 : 0x14;\n    WRITEU8(0x00725b5c - g_region, level);\n}\n\nvoid    Fire_Magic(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b64) <= 0x14 ? READU8(0x00725b64) + 1 : 0x14;\n    WRITEU8(0x00725b64 - g_region, level);\n}\n\nvoid    Longsword_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b74) <= 0x14 ? READU8(0x00725b74) + 1 : 0x14;\n    WRITEU8(0x00725b74 - g_region, level);\n}\n\nvoid    Shield_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b7c) <= 0x14 ? READU8(0x00725b7c) + 1 : 0x14;\n    WRITEU8(0x00725b7c - g_region, level);\n}\n\nvoid    Magic_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b84) <= 0x14 ? READU8(0x00725b84) + 1 : 0x14;\n    WRITEU8(0x00725b84  - g_region, level);\n}\n\nvoid    Greatsword_Skill(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b8c) <= 0x14 ? READU8(0x00725b8c) + 1 : 0x14;\n    WRITEU8(0x00725b8c - g_region, level);\n}\n\nvoid    Water_Magic(u32 level)\n{\n    if(level == 0xFF)\n        level = READU8(0x00725b94) <= 0x14 ? READU8(0x00725b94) + 1 : 0x14;\n    WRITEU8(0x00725b94 - g_region, level);\n}\n\n/*\n**End Skills\n*/\n\nvoid max_skills()\n{\n    Accessory_Alchemy(0x14);\n    Alchemy(0x14);\n    Archery_Skill(0x14);\n    Armor_Smithing(0x14);   \n    Carpentry(0x14);\n    Cooking(0x14);\n    Dagger_Skill(0x14);\n    Dash(0x14);\n    Earth_Magic(0x14);\n    Egg_Veggie_Cuisine(0x14);\n    Fabric_Tailoring(0x14);\n    Fire_Magic(0x14);\n    Fishing(0x14);\n    Furniture_Carpentry(0x14);\n    Garment_Tailoring(0x14);\n    Greatsword_Skill(0x14);\n    Longsword_Skill(0x14);\n    Magic_Skill(0x14);\n    Meat_Cuisine(0x14);\n    Medicinal_Alchemy(0x14);\n    Metal_Smithing(0x14);\n    Mining(0x14);\n    Misc_Tailoring(0x14);   \n    Seafood_Cuisine(0x14);\n    Sewing(0x14);\n    Shield_Skill(0x14);\n    Smithing(0x14);\n    Sneaking(0x14);\n    Tools_Carpentry(0x14);  \n    Water_Magic(0x14);\n    Weapons_Carpentry(0x14);\n    Weapon_Smithing(0x14);\n    Wind_Magic(0x14);\n    Woodcutting(0x14);\n    update_skills();\n}\n\nvoid update_skills()\n{\n    char    buf[5];\n    int     i;\n    int     index = get_index(ACCESSORY);\n    for (i = 0; i < 34; i++)\n    {\n        xsprintf(buf, \"(%05d)\", (int)READ( float, skill_address[i] - 4 - g_region));\n        replace_pattern(\"(*****)\", buf, ACCESSORY + i);\n        xsprintf(buf, \"(%02d)\", READU8(skill_address[i] - g_region));\n        replace_pattern(\"(**)\", buf, ACCESSORY + i);\n    }\n           \n}\n\nvoid add_skills(int skills)\n{\n    int i;\n    float   value;\n\n\n            value  = READ(float, skill_address[i - 24] - g_region - 4);\n            value += 1000;\n            \n            //WRITEU8(skill_address[i - 24] - g_region, READU8(skill_address[i - 24] - g_region) < 0x14 ? READU8(skill_address[i - 24] - g_region) + 1 : 0x14);\n            WRITE( float, skill_address[i - 24] - 4 - g_region, (u32)value);\n            break;\n\n    update_skills();    \n}",
			"#ifndef NOTES_H\n#define NOTES_H\n\n#define NOTE(x) static const char * const x\n\nNOTE(z_crystals_note)               =   \"To get all Z crystals, activate the cheat and press Start + Up in-game.\";\nNOTE(catch_trainers_pokemon_note)   =   \"Activate the cheat then press Start + Up in-game to activate the cheat.\\n\\n\" \\\n                                        \"Press Start + Down to disable it.\\n\" \\\n                                        \"If you don't disable it, you'll rebattle the trainer.\"; \nNOTE(rematch_trainers_note)         =   \"Press L and talk to the trainer to battle him.\";\nNOTE(all_tm_hm_note)                =   \"Press Start + Up in-game to get all TM and all HM.\";\nNOTE(all_items_note)                =   \"Press Start + Up in-game to get all items.\";\nNOTE(all_medicines_note)            =   \"Press Start + Up in-game to get all medicines.\";\nNOTE(all_berries_note)              =   \"Press Start + Up in-game to get all the berries.\";\nNOTE(all_clothes_note)              =   \"Press Start + Up in-game to unlock all clothes.\";\nNOTE(teleporter_note)               =   \"Press L + Up to save your current position in slot 1.\\n\" \\\n                                        \"Press L + Down to be teleported at the position saved in slot 1.\\n\\n\" \\\n                                        \"Press R + Up to save your current position in slot 2.\\n\" \\\n                                        \"Press R + Down to be teleported at the position saved in slot 2.\";\nNOTE(access_pc_note)                =   \"When the cheat is enabled, you'll be able to access the PC from anywhere.\\n\\n\" \\\n                                        \"All you need to do is to go in OPTIONS to get redirected to the PC.\";\nNOTE(walk_through_walls_note)       =   \"Enable the cheat then press R while walking to go through walls.\";\n\n\n#endif\n",
			"add_sharp_child_spoiler_menu(spoiler, ",
			"add_sharp_child_spoiler_menu(midspoil, ",
			"add_sharp_child_spoiler_menu(spoiler, ",
			"tele",
			"^(.+) = ",
			"^(.+)= ",
			"Shirt",
			"Hat",
			"Cap",
			"^(.+)= ",
			"Socks",
			"^(.+)",
			"^(.+)= ",
			"0x.+:",
			"-= 0x28380",
			"0004013000003802",
			"}",
			"{",
			" + offset",
			"index = ",
			"new_spoiler",
			"new_entry",
			"index"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"PluginMenu::",
			"Folders",
			"_sdmcArchive",
			"_s",
			"_l",
			"_useRender3D",
			"_useDoubleBuffer",
			"_useRender3D",
			"_screens",
			".As",
			"@ ",
			" @",
			"@",
			"g_object",
			"void",
			"READU32",
			"WRITEU32",
			"OTHEREDITOR",
			"object",
			"FEETEDITOR",
			"HANDEDITOR",
			"object",
			"LEGEDITOR",
			"object",
			"other",
			"OTHER",
			"feet",
			"FEET",
			"OTHER",
			"other",
			"feet",
			"FEET",
			"other",
			"feet",
			"OTHER",
			"FEET",
			"hand",
			"HAND",
			"hand",
			"HAND",
			"hand",
			"leg",
			"LEG",
			"leg",
			"LEG",
			"BODY",
			"body",
			"BODY",
			"g_body",
			"(FuncPointer)add_",
			", ",
			"",
			"AUTO_DISABLE | PASSARG",
			"add_skills, 0",
			"_managed",
			"AUTO_DISABLE",
			"XP:00000",
			"00, XP:00000",
			"LV:00,XP:00000",
			"[LV: 00, EXP: 00000]",
			"new_entry_arg",
			"new_entry(",
			"    \"",
			"    =",
			"Shirt\",",
			"Hat\",",
			"Cap\",",
			"    \"",
			"Socks\",",
			"^(.+)\"",
			"    \"",
			"",
			"+= 0x22A80",
			"},",
			"\\t{",
			"",
			"new_spoiler_with_note",
			"new_entry_with_note"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Includes/CTRPluginFramework/GuideReader.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 892,
						"regions":
						{
						},
						"selection":
						[
							[
								640,
								640
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Includes/CTRPluginFramework/PluginMenu.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2391,
						"regions":
						{
						},
						"selection":
						[
							[
								496,
								496
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Includes/CTRPluginFramework/Graphics/Button.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4990,
						"regions":
						{
						},
						"selection":
						[
							[
								1000,
								1000
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 597.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Includes/CTRPluginFramework/Graphics/ToggleButton.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3006,
						"regions":
						{
						},
						"selection":
						[
							[
								2509,
								2509
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Includes/CTRPluginFramework/Directory.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3571,
						"regions":
						{
						},
						"selection":
						[
							[
								3319,
								3319
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1333.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Includes/CTRPluginFramework/Menu.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1297,
						"regions":
						{
						},
						"selection":
						[
							[
								1242,
								1242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Includes/CTRPluginFramework/Graphics/TextBox.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1595,
						"regions":
						{
						},
						"selection":
						[
							[
								532,
								532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Sources/ctrulib/system/allocateHeaps.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1030,
						"regions":
						{
						},
						"selection":
						[
							[
								315,
								315
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Includes/CTRPluginFramework/File.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5437,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Users/Nanquitas/AppData/Local/Temp/Temp1_CImg_latest.zip/CImg-2.0.0_pre020217/CImg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850481,
						"regions":
						{
						},
						"selection":
						[
							[
								1407526,
								1407526
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 892916.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Users/Nanquitas/Desktop/libShark2NTR/GamePatcher/Sources/ntr/libntrplg/stub.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 775,
						"regions":
						{
						},
						"selection":
						[
							[
								705,
								547
							]
						],
						"settings":
						{
							"syntax": "Packages/R/R.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Includes/CTRPluginFramework/Preferences.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 433,
						"regions":
						{
						},
						"selection":
						[
							[
								371,
								371
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Sources/pluginInit.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4346,
						"regions":
						{
						},
						"selection":
						[
							[
								3843,
								3843
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2915.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "Includes/CTRPluginFramework/Graphics/Color.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2369,
						"regions":
						{
						},
						"selection":
						[
							[
								970,
								970
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 174.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "Includes/CTRPluginFramework/Graphics/CheckedButton.hpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 4953,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "Includes/CTRPluginFramework/Vector.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2743,
						"regions":
						{
						},
						"selection":
						[
							[
								2234,
								2234
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2164.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Includes/CTRPluginFramework/Graphics/Renderer.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7962,
						"regions":
						{
						},
						"selection":
						[
							[
								4418,
								4418
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2579.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "Includes/ctrulib/svc.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41219,
						"regions":
						{
						},
						"selection":
						[
							[
								19086,
								19091
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1944.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 18,
					"file": "Sources/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11278,
						"regions":
						{
						},
						"selection":
						[
							[
								3981,
								3981
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1603.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Sources/CTRPluginFramework/MenuFolder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1251,
						"regions":
						{
						},
						"selection":
						[
							[
								536,
								536
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "Sources/GuideReader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4331,
						"regions":
						{
						},
						"selection":
						[
							[
								846,
								846
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "Sources/CTRPluginFramework/File.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6851,
						"regions":
						{
						},
						"selection":
						[
							[
								4376,
								4376
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2241.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "Sources/CTRPluginFramework/PluginMenu.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22595,
						"regions":
						{
						},
						"selection":
						[
							[
								2956,
								2956
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3226.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "Sources/CTRPluginFramework/Preferences.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2320,
						"regions":
						{
						},
						"selection":
						[
							[
								396,
								396
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4441,
						"regions":
						{
						},
						"selection":
						[
							[
								3377,
								3377
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2792.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "Sources/CTRPluginFramework/Graphics/Renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4948,
						"regions":
						{
						},
						"selection":
						[
							[
								3582,
								3582
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3218.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Includes/ctrulib/os.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5982,
						"regions":
						{
						},
						"selection":
						[
							[
								4707,
								4675
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4293.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Sources/CTRPluginFramework/Graphics/Color.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12885,
						"regions":
						{
						},
						"selection":
						[
							[
								4913,
								4913
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4918.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "Sources/CTRPluginFramework/Menu.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7088,
						"regions":
						{
						},
						"selection":
						[
							[
								961,
								961
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1035.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "Sources/CTRPluginFramework/Graphics/TextBox.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8852,
						"regions":
						{
						},
						"selection":
						[
							[
								4475,
								4475
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 41.0,
						"translation.y": 3806.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "Sources/CTRPluginFramework/Graphics/Renderer_Sysfont.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11072,
						"regions":
						{
						},
						"selection":
						[
							[
								9774,
								9774
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8085.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 53.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.531565775468,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 213.0
	},
	"pinned_build_system": "",
	"project": "CTRPluginFramework.sublime-project",
	"replace":
	{
		"height": 120.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 417.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
